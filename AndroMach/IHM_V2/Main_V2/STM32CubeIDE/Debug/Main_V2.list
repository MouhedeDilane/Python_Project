
Main_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015d70  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002228  08015ef8  08015ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018120  08018120  0001a1f0  2**0
                  CONTENTS
  4 .ARM          00000008  08018120  08018120  00019120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018128  08018128  0001a1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018128  08018128  00019128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801812c  0801812c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08018130  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c758  200001f0  08018320  0001a1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c948  08018320  0001a948  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001a1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022923  00000000  00000000  0001a219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067a8  00000000  00000000  0003cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  000432e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001472  00000000  00000000  00044d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e57b  00000000  00000000  00046192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003043f  00000000  00000000  0007470d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dad5b  00000000  00000000  000a4b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f8a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077b0  00000000  00000000  0017f8ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0018709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f0 	.word	0x200001f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08015ee0 	.word	0x08015ee0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	08015ee0 	.word	0x08015ee0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_dmul>:
 80001ec:	b570      	push	{r4, r5, r6, lr}
 80001ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fa:	bf1d      	ittte	ne
 80001fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000200:	ea94 0f0c 	teqne	r4, ip
 8000204:	ea95 0f0c 	teqne	r5, ip
 8000208:	f000 f8de 	bleq	80003c8 <__aeabi_dmul+0x1dc>
 800020c:	442c      	add	r4, r5
 800020e:	ea81 0603 	eor.w	r6, r1, r3
 8000212:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000216:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021e:	bf18      	it	ne
 8000220:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800022c:	d038      	beq.n	80002a0 <__aeabi_dmul+0xb4>
 800022e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000232:	f04f 0500 	mov.w	r5, #0
 8000236:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800023e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000242:	f04f 0600 	mov.w	r6, #0
 8000246:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024a:	f09c 0f00 	teq	ip, #0
 800024e:	bf18      	it	ne
 8000250:	f04e 0e01 	orrne.w	lr, lr, #1
 8000254:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000258:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800025c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000260:	d204      	bcs.n	800026c <__aeabi_dmul+0x80>
 8000262:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000266:	416d      	adcs	r5, r5
 8000268:	eb46 0606 	adc.w	r6, r6, r6
 800026c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000270:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000274:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000278:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800027c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000280:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000284:	bf88      	it	hi
 8000286:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028a:	d81e      	bhi.n	80002ca <__aeabi_dmul+0xde>
 800028c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a4:	ea46 0101 	orr.w	r1, r6, r1
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	ea81 0103 	eor.w	r1, r1, r3
 80002b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b4:	bfc2      	ittt	gt
 80002b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002be:	bd70      	popgt	{r4, r5, r6, pc}
 80002c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c4:	f04f 0e00 	mov.w	lr, #0
 80002c8:	3c01      	subs	r4, #1
 80002ca:	f300 80ab 	bgt.w	8000424 <__aeabi_dmul+0x238>
 80002ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d2:	bfde      	ittt	le
 80002d4:	2000      	movle	r0, #0
 80002d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002da:	bd70      	pople	{r4, r5, r6, pc}
 80002dc:	f1c4 0400 	rsb	r4, r4, #0
 80002e0:	3c20      	subs	r4, #32
 80002e2:	da35      	bge.n	8000350 <__aeabi_dmul+0x164>
 80002e4:	340c      	adds	r4, #12
 80002e6:	dc1b      	bgt.n	8000320 <__aeabi_dmul+0x134>
 80002e8:	f104 0414 	add.w	r4, r4, #20
 80002ec:	f1c4 0520 	rsb	r5, r4, #32
 80002f0:	fa00 f305 	lsl.w	r3, r0, r5
 80002f4:	fa20 f004 	lsr.w	r0, r0, r4
 80002f8:	fa01 f205 	lsl.w	r2, r1, r5
 80002fc:	ea40 0002 	orr.w	r0, r0, r2
 8000300:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000304:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000308:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800030c:	fa21 f604 	lsr.w	r6, r1, r4
 8000310:	eb42 0106 	adc.w	r1, r2, r6
 8000314:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000318:	bf08      	it	eq
 800031a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f1c4 040c 	rsb	r4, r4, #12
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f304 	lsl.w	r3, r0, r4
 800032c:	fa20 f005 	lsr.w	r0, r0, r5
 8000330:	fa01 f204 	lsl.w	r2, r1, r4
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000348:	bf08      	it	eq
 800034a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034e:	bd70      	pop	{r4, r5, r6, pc}
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f205 	lsl.w	r2, r0, r5
 8000358:	ea4e 0e02 	orr.w	lr, lr, r2
 800035c:	fa20 f304 	lsr.w	r3, r0, r4
 8000360:	fa01 f205 	lsl.w	r2, r1, r5
 8000364:	ea43 0302 	orr.w	r3, r3, r2
 8000368:	fa21 f004 	lsr.w	r0, r1, r4
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	fa21 f204 	lsr.w	r2, r1, r4
 8000374:	ea20 0002 	bic.w	r0, r0, r2
 8000378:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f094 0f00 	teq	r4, #0
 800038c:	d10f      	bne.n	80003ae <__aeabi_dmul+0x1c2>
 800038e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000392:	0040      	lsls	r0, r0, #1
 8000394:	eb41 0101 	adc.w	r1, r1, r1
 8000398:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800039c:	bf08      	it	eq
 800039e:	3c01      	subeq	r4, #1
 80003a0:	d0f7      	beq.n	8000392 <__aeabi_dmul+0x1a6>
 80003a2:	ea41 0106 	orr.w	r1, r1, r6
 80003a6:	f095 0f00 	teq	r5, #0
 80003aa:	bf18      	it	ne
 80003ac:	4770      	bxne	lr
 80003ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b2:	0052      	lsls	r2, r2, #1
 80003b4:	eb43 0303 	adc.w	r3, r3, r3
 80003b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003bc:	bf08      	it	eq
 80003be:	3d01      	subeq	r5, #1
 80003c0:	d0f7      	beq.n	80003b2 <__aeabi_dmul+0x1c6>
 80003c2:	ea43 0306 	orr.w	r3, r3, r6
 80003c6:	4770      	bx	lr
 80003c8:	ea94 0f0c 	teq	r4, ip
 80003cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d0:	bf18      	it	ne
 80003d2:	ea95 0f0c 	teqne	r5, ip
 80003d6:	d00c      	beq.n	80003f2 <__aeabi_dmul+0x206>
 80003d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003dc:	bf18      	it	ne
 80003de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e2:	d1d1      	bne.n	8000388 <__aeabi_dmul+0x19c>
 80003e4:	ea81 0103 	eor.w	r1, r1, r3
 80003e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	bd70      	pop	{r4, r5, r6, pc}
 80003f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f6:	bf06      	itte	eq
 80003f8:	4610      	moveq	r0, r2
 80003fa:	4619      	moveq	r1, r3
 80003fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000400:	d019      	beq.n	8000436 <__aeabi_dmul+0x24a>
 8000402:	ea94 0f0c 	teq	r4, ip
 8000406:	d102      	bne.n	800040e <__aeabi_dmul+0x222>
 8000408:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800040c:	d113      	bne.n	8000436 <__aeabi_dmul+0x24a>
 800040e:	ea95 0f0c 	teq	r5, ip
 8000412:	d105      	bne.n	8000420 <__aeabi_dmul+0x234>
 8000414:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000418:	bf1c      	itt	ne
 800041a:	4610      	movne	r0, r2
 800041c:	4619      	movne	r1, r3
 800041e:	d10a      	bne.n	8000436 <__aeabi_dmul+0x24a>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800043e:	bd70      	pop	{r4, r5, r6, pc}

08000440 <__aeabi_drsub>:
 8000440:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	e002      	b.n	800044c <__adddf3>
 8000446:	bf00      	nop

08000448 <__aeabi_dsub>:
 8000448:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800044c <__adddf3>:
 800044c:	b530      	push	{r4, r5, lr}
 800044e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000452:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	bf1f      	itttt	ne
 8000462:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000466:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000472:	f000 80e2 	beq.w	800063a <__adddf3+0x1ee>
 8000476:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047e:	bfb8      	it	lt
 8000480:	426d      	neglt	r5, r5
 8000482:	dd0c      	ble.n	800049e <__adddf3+0x52>
 8000484:	442c      	add	r4, r5
 8000486:	ea80 0202 	eor.w	r2, r0, r2
 800048a:	ea81 0303 	eor.w	r3, r1, r3
 800048e:	ea82 0000 	eor.w	r0, r2, r0
 8000492:	ea83 0101 	eor.w	r1, r3, r1
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	2d36      	cmp	r5, #54	@ 0x36
 80004a0:	bf88      	it	hi
 80004a2:	bd30      	pophi	{r4, r5, pc}
 80004a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x70>
 80004b6:	4240      	negs	r0, r0
 80004b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x84>
 80004ca:	4252      	negs	r2, r2
 80004cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d0:	ea94 0f05 	teq	r4, r5
 80004d4:	f000 80a7 	beq.w	8000626 <__adddf3+0x1da>
 80004d8:	f1a4 0401 	sub.w	r4, r4, #1
 80004dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e0:	db0d      	blt.n	80004fe <__adddf3+0xb2>
 80004e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e6:	fa22 f205 	lsr.w	r2, r2, r5
 80004ea:	1880      	adds	r0, r0, r2
 80004ec:	f141 0100 	adc.w	r1, r1, #0
 80004f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f4:	1880      	adds	r0, r0, r2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	4159      	adcs	r1, r3
 80004fc:	e00e      	b.n	800051c <__adddf3+0xd0>
 80004fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000502:	f10e 0e20 	add.w	lr, lr, #32
 8000506:	2a01      	cmp	r2, #1
 8000508:	fa03 fc0e 	lsl.w	ip, r3, lr
 800050c:	bf28      	it	cs
 800050e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000512:	fa43 f305 	asr.w	r3, r3, r5
 8000516:	18c0      	adds	r0, r0, r3
 8000518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800051c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000520:	d507      	bpl.n	8000532 <__adddf3+0xe6>
 8000522:	f04f 0e00 	mov.w	lr, #0
 8000526:	f1dc 0c00 	rsbs	ip, ip, #0
 800052a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000532:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000536:	d31b      	bcc.n	8000570 <__adddf3+0x124>
 8000538:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800053c:	d30c      	bcc.n	8000558 <__adddf3+0x10c>
 800053e:	0849      	lsrs	r1, r1, #1
 8000540:	ea5f 0030 	movs.w	r0, r0, rrx
 8000544:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000548:	f104 0401 	add.w	r4, r4, #1
 800054c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000550:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000554:	f080 809a 	bcs.w	800068c <__adddf3+0x240>
 8000558:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800055c:	bf08      	it	eq
 800055e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000562:	f150 0000 	adcs.w	r0, r0, #0
 8000566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056a:	ea41 0105 	orr.w	r1, r1, r5
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000574:	4140      	adcs	r0, r0
 8000576:	eb41 0101 	adc.w	r1, r1, r1
 800057a:	3c01      	subs	r4, #1
 800057c:	bf28      	it	cs
 800057e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000582:	d2e9      	bcs.n	8000558 <__adddf3+0x10c>
 8000584:	f091 0f00 	teq	r1, #0
 8000588:	bf04      	itt	eq
 800058a:	4601      	moveq	r1, r0
 800058c:	2000      	moveq	r0, #0
 800058e:	fab1 f381 	clz	r3, r1
 8000592:	bf08      	it	eq
 8000594:	3320      	addeq	r3, #32
 8000596:	f1a3 030b 	sub.w	r3, r3, #11
 800059a:	f1b3 0220 	subs.w	r2, r3, #32
 800059e:	da0c      	bge.n	80005ba <__adddf3+0x16e>
 80005a0:	320c      	adds	r2, #12
 80005a2:	dd08      	ble.n	80005b6 <__adddf3+0x16a>
 80005a4:	f102 0c14 	add.w	ip, r2, #20
 80005a8:	f1c2 020c 	rsb	r2, r2, #12
 80005ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b0:	fa21 f102 	lsr.w	r1, r1, r2
 80005b4:	e00c      	b.n	80005d0 <__adddf3+0x184>
 80005b6:	f102 0214 	add.w	r2, r2, #20
 80005ba:	bfd8      	it	le
 80005bc:	f1c2 0c20 	rsble	ip, r2, #32
 80005c0:	fa01 f102 	lsl.w	r1, r1, r2
 80005c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c8:	bfdc      	itt	le
 80005ca:	ea41 010c 	orrle.w	r1, r1, ip
 80005ce:	4090      	lslle	r0, r2
 80005d0:	1ae4      	subs	r4, r4, r3
 80005d2:	bfa2      	ittt	ge
 80005d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d8:	4329      	orrge	r1, r5
 80005da:	bd30      	popge	{r4, r5, pc}
 80005dc:	ea6f 0404 	mvn.w	r4, r4
 80005e0:	3c1f      	subs	r4, #31
 80005e2:	da1c      	bge.n	800061e <__adddf3+0x1d2>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc0e      	bgt.n	8000606 <__adddf3+0x1ba>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0220 	rsb	r2, r4, #32
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f302 	lsl.w	r3, r1, r2
 80005f8:	ea40 0003 	orr.w	r0, r0, r3
 80005fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000600:	ea45 0103 	orr.w	r1, r5, r3
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	f1c4 040c 	rsb	r4, r4, #12
 800060a:	f1c4 0220 	rsb	r2, r4, #32
 800060e:	fa20 f002 	lsr.w	r0, r0, r2
 8000612:	fa01 f304 	lsl.w	r3, r1, r4
 8000616:	ea40 0003 	orr.w	r0, r0, r3
 800061a:	4629      	mov	r1, r5
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	fa21 f004 	lsr.w	r0, r1, r4
 8000622:	4629      	mov	r1, r5
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	f094 0f00 	teq	r4, #0
 800062a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800062e:	bf06      	itte	eq
 8000630:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000634:	3401      	addeq	r4, #1
 8000636:	3d01      	subne	r5, #1
 8000638:	e74e      	b.n	80004d8 <__adddf3+0x8c>
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf18      	it	ne
 8000640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000644:	d029      	beq.n	800069a <__adddf3+0x24e>
 8000646:	ea94 0f05 	teq	r4, r5
 800064a:	bf08      	it	eq
 800064c:	ea90 0f02 	teqeq	r0, r2
 8000650:	d005      	beq.n	800065e <__adddf3+0x212>
 8000652:	ea54 0c00 	orrs.w	ip, r4, r0
 8000656:	bf04      	itt	eq
 8000658:	4619      	moveq	r1, r3
 800065a:	4610      	moveq	r0, r2
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	ea91 0f03 	teq	r1, r3
 8000662:	bf1e      	ittt	ne
 8000664:	2100      	movne	r1, #0
 8000666:	2000      	movne	r0, #0
 8000668:	bd30      	popne	{r4, r5, pc}
 800066a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066e:	d105      	bne.n	800067c <__adddf3+0x230>
 8000670:	0040      	lsls	r0, r0, #1
 8000672:	4149      	adcs	r1, r1
 8000674:	bf28      	it	cs
 8000676:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000680:	bf3c      	itt	cc
 8000682:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000686:	bd30      	popcc	{r4, r5, pc}
 8000688:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800068c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000690:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000694:	f04f 0000 	mov.w	r0, #0
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069e:	bf1a      	itte	ne
 80006a0:	4619      	movne	r1, r3
 80006a2:	4610      	movne	r0, r2
 80006a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a8:	bf1c      	itt	ne
 80006aa:	460b      	movne	r3, r1
 80006ac:	4602      	movne	r2, r0
 80006ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b2:	bf06      	itte	eq
 80006b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b8:	ea91 0f03 	teqeq	r1, r3
 80006bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop

080006c4 <__aeabi_ui2d>:
 80006c4:	f090 0f00 	teq	r0, #0
 80006c8:	bf04      	itt	eq
 80006ca:	2100      	moveq	r1, #0
 80006cc:	4770      	bxeq	lr
 80006ce:	b530      	push	{r4, r5, lr}
 80006d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d8:	f04f 0500 	mov.w	r5, #0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e750      	b.n	8000584 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_i2d>:
 80006e4:	f090 0f00 	teq	r0, #0
 80006e8:	bf04      	itt	eq
 80006ea:	2100      	moveq	r1, #0
 80006ec:	4770      	bxeq	lr
 80006ee:	b530      	push	{r4, r5, lr}
 80006f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006fc:	bf48      	it	mi
 80006fe:	4240      	negmi	r0, r0
 8000700:	f04f 0100 	mov.w	r1, #0
 8000704:	e73e      	b.n	8000584 <__adddf3+0x138>
 8000706:	bf00      	nop

08000708 <__aeabi_f2d>:
 8000708:	0042      	lsls	r2, r0, #1
 800070a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000712:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000716:	bf1f      	itttt	ne
 8000718:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800071c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000720:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000724:	4770      	bxne	lr
 8000726:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072a:	bf08      	it	eq
 800072c:	4770      	bxeq	lr
 800072e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000732:	bf04      	itt	eq
 8000734:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000738:	4770      	bxeq	lr
 800073a:	b530      	push	{r4, r5, lr}
 800073c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000740:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	e71c      	b.n	8000584 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_ul2d>:
 800074c:	ea50 0201 	orrs.w	r2, r0, r1
 8000750:	bf08      	it	eq
 8000752:	4770      	bxeq	lr
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	f04f 0500 	mov.w	r5, #0
 800075a:	e00a      	b.n	8000772 <__aeabi_l2d+0x16>

0800075c <__aeabi_l2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076a:	d502      	bpl.n	8000772 <__aeabi_l2d+0x16>
 800076c:	4240      	negs	r0, r0
 800076e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000772:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000776:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077e:	f43f aed8 	beq.w	8000532 <__adddf3+0xe6>
 8000782:	f04f 0203 	mov.w	r2, #3
 8000786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078a:	bf18      	it	ne
 800078c:	3203      	addne	r2, #3
 800078e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000792:	bf18      	it	ne
 8000794:	3203      	addne	r2, #3
 8000796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a2:	fa20 f002 	lsr.w	r0, r0, r2
 80007a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007aa:	ea40 000e 	orr.w	r0, r0, lr
 80007ae:	fa21 f102 	lsr.w	r1, r1, r2
 80007b2:	4414      	add	r4, r2
 80007b4:	e6bd      	b.n	8000532 <__adddf3+0xe6>
 80007b6:	bf00      	nop

080007b8 <__aeabi_d2uiz>:
 80007b8:	004a      	lsls	r2, r1, #1
 80007ba:	d211      	bcs.n	80007e0 <__aeabi_d2uiz+0x28>
 80007bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007c0:	d211      	bcs.n	80007e6 <__aeabi_d2uiz+0x2e>
 80007c2:	d50d      	bpl.n	80007e0 <__aeabi_d2uiz+0x28>
 80007c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007cc:	d40e      	bmi.n	80007ec <__aeabi_d2uiz+0x34>
 80007ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007da:	fa23 f002 	lsr.w	r0, r3, r2
 80007de:	4770      	bx	lr
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	4770      	bx	lr
 80007e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ea:	d102      	bne.n	80007f2 <__aeabi_d2uiz+0x3a>
 80007ec:	f04f 30ff 	mov.w	r0, #4294967295
 80007f0:	4770      	bx	lr
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_frsub>:
 80007f8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007fc:	e002      	b.n	8000804 <__addsf3>
 80007fe:	bf00      	nop

08000800 <__aeabi_fsub>:
 8000800:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000804 <__addsf3>:
 8000804:	0042      	lsls	r2, r0, #1
 8000806:	bf1f      	itttt	ne
 8000808:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800080c:	ea92 0f03 	teqne	r2, r3
 8000810:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000814:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000818:	d06a      	beq.n	80008f0 <__addsf3+0xec>
 800081a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800081e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000822:	bfc1      	itttt	gt
 8000824:	18d2      	addgt	r2, r2, r3
 8000826:	4041      	eorgt	r1, r0
 8000828:	4048      	eorgt	r0, r1
 800082a:	4041      	eorgt	r1, r0
 800082c:	bfb8      	it	lt
 800082e:	425b      	neglt	r3, r3
 8000830:	2b19      	cmp	r3, #25
 8000832:	bf88      	it	hi
 8000834:	4770      	bxhi	lr
 8000836:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800083a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800083e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000842:	bf18      	it	ne
 8000844:	4240      	negne	r0, r0
 8000846:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800084a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800084e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000852:	bf18      	it	ne
 8000854:	4249      	negne	r1, r1
 8000856:	ea92 0f03 	teq	r2, r3
 800085a:	d03f      	beq.n	80008dc <__addsf3+0xd8>
 800085c:	f1a2 0201 	sub.w	r2, r2, #1
 8000860:	fa41 fc03 	asr.w	ip, r1, r3
 8000864:	eb10 000c 	adds.w	r0, r0, ip
 8000868:	f1c3 0320 	rsb	r3, r3, #32
 800086c:	fa01 f103 	lsl.w	r1, r1, r3
 8000870:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000874:	d502      	bpl.n	800087c <__addsf3+0x78>
 8000876:	4249      	negs	r1, r1
 8000878:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800087c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000880:	d313      	bcc.n	80008aa <__addsf3+0xa6>
 8000882:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000886:	d306      	bcc.n	8000896 <__addsf3+0x92>
 8000888:	0840      	lsrs	r0, r0, #1
 800088a:	ea4f 0131 	mov.w	r1, r1, rrx
 800088e:	f102 0201 	add.w	r2, r2, #1
 8000892:	2afe      	cmp	r2, #254	@ 0xfe
 8000894:	d251      	bcs.n	800093a <__addsf3+0x136>
 8000896:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800089a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800089e:	bf08      	it	eq
 80008a0:	f020 0001 	biceq.w	r0, r0, #1
 80008a4:	ea40 0003 	orr.w	r0, r0, r3
 80008a8:	4770      	bx	lr
 80008aa:	0049      	lsls	r1, r1, #1
 80008ac:	eb40 0000 	adc.w	r0, r0, r0
 80008b0:	3a01      	subs	r2, #1
 80008b2:	bf28      	it	cs
 80008b4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80008b8:	d2ed      	bcs.n	8000896 <__addsf3+0x92>
 80008ba:	fab0 fc80 	clz	ip, r0
 80008be:	f1ac 0c08 	sub.w	ip, ip, #8
 80008c2:	ebb2 020c 	subs.w	r2, r2, ip
 80008c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80008ca:	bfaa      	itet	ge
 80008cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80008d0:	4252      	neglt	r2, r2
 80008d2:	4318      	orrge	r0, r3
 80008d4:	bfbc      	itt	lt
 80008d6:	40d0      	lsrlt	r0, r2
 80008d8:	4318      	orrlt	r0, r3
 80008da:	4770      	bx	lr
 80008dc:	f092 0f00 	teq	r2, #0
 80008e0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80008e4:	bf06      	itte	eq
 80008e6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80008ea:	3201      	addeq	r2, #1
 80008ec:	3b01      	subne	r3, #1
 80008ee:	e7b5      	b.n	800085c <__addsf3+0x58>
 80008f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008f8:	bf18      	it	ne
 80008fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008fe:	d021      	beq.n	8000944 <__addsf3+0x140>
 8000900:	ea92 0f03 	teq	r2, r3
 8000904:	d004      	beq.n	8000910 <__addsf3+0x10c>
 8000906:	f092 0f00 	teq	r2, #0
 800090a:	bf08      	it	eq
 800090c:	4608      	moveq	r0, r1
 800090e:	4770      	bx	lr
 8000910:	ea90 0f01 	teq	r0, r1
 8000914:	bf1c      	itt	ne
 8000916:	2000      	movne	r0, #0
 8000918:	4770      	bxne	lr
 800091a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800091e:	d104      	bne.n	800092a <__addsf3+0x126>
 8000920:	0040      	lsls	r0, r0, #1
 8000922:	bf28      	it	cs
 8000924:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000928:	4770      	bx	lr
 800092a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800092e:	bf3c      	itt	cc
 8000930:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000934:	4770      	bxcc	lr
 8000936:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800093a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800093e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000942:	4770      	bx	lr
 8000944:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000948:	bf16      	itet	ne
 800094a:	4608      	movne	r0, r1
 800094c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000950:	4601      	movne	r1, r0
 8000952:	0242      	lsls	r2, r0, #9
 8000954:	bf06      	itte	eq
 8000956:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800095a:	ea90 0f01 	teqeq	r0, r1
 800095e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000962:	4770      	bx	lr

08000964 <__aeabi_ui2f>:
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e004      	b.n	8000974 <__aeabi_i2f+0x8>
 800096a:	bf00      	nop

0800096c <__aeabi_i2f>:
 800096c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000970:	bf48      	it	mi
 8000972:	4240      	negmi	r0, r0
 8000974:	ea5f 0c00 	movs.w	ip, r0
 8000978:	bf08      	it	eq
 800097a:	4770      	bxeq	lr
 800097c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000980:	4601      	mov	r1, r0
 8000982:	f04f 0000 	mov.w	r0, #0
 8000986:	e01c      	b.n	80009c2 <__aeabi_l2f+0x2a>

08000988 <__aeabi_ul2f>:
 8000988:	ea50 0201 	orrs.w	r2, r0, r1
 800098c:	bf08      	it	eq
 800098e:	4770      	bxeq	lr
 8000990:	f04f 0300 	mov.w	r3, #0
 8000994:	e00a      	b.n	80009ac <__aeabi_l2f+0x14>
 8000996:	bf00      	nop

08000998 <__aeabi_l2f>:
 8000998:	ea50 0201 	orrs.w	r2, r0, r1
 800099c:	bf08      	it	eq
 800099e:	4770      	bxeq	lr
 80009a0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80009a4:	d502      	bpl.n	80009ac <__aeabi_l2f+0x14>
 80009a6:	4240      	negs	r0, r0
 80009a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ac:	ea5f 0c01 	movs.w	ip, r1
 80009b0:	bf02      	ittt	eq
 80009b2:	4684      	moveq	ip, r0
 80009b4:	4601      	moveq	r1, r0
 80009b6:	2000      	moveq	r0, #0
 80009b8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80009bc:	bf08      	it	eq
 80009be:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80009c2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80009c6:	fabc f28c 	clz	r2, ip
 80009ca:	3a08      	subs	r2, #8
 80009cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80009d0:	db10      	blt.n	80009f4 <__aeabi_l2f+0x5c>
 80009d2:	fa01 fc02 	lsl.w	ip, r1, r2
 80009d6:	4463      	add	r3, ip
 80009d8:	fa00 fc02 	lsl.w	ip, r0, r2
 80009dc:	f1c2 0220 	rsb	r2, r2, #32
 80009e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80009e4:	fa20 f202 	lsr.w	r2, r0, r2
 80009e8:	eb43 0002 	adc.w	r0, r3, r2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f102 0220 	add.w	r2, r2, #32
 80009f8:	fa01 fc02 	lsl.w	ip, r1, r2
 80009fc:	f1c2 0220 	rsb	r2, r2, #32
 8000a00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a04:	fa21 f202 	lsr.w	r2, r1, r2
 8000a08:	eb43 0002 	adc.w	r0, r3, r2
 8000a0c:	bf08      	it	eq
 8000a0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a12:	4770      	bx	lr

08000a14 <__aeabi_fmul>:
 8000a14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a22:	ea92 0f0c 	teqne	r2, ip
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d06f      	beq.n	8000b0c <__aeabi_fmul+0xf8>
 8000a2c:	441a      	add	r2, r3
 8000a2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000a32:	0240      	lsls	r0, r0, #9
 8000a34:	bf18      	it	ne
 8000a36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a3a:	d01e      	beq.n	8000a7a <__aeabi_fmul+0x66>
 8000a3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a48:	fba0 3101 	umull	r3, r1, r0, r1
 8000a4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a54:	bf3e      	ittt	cc
 8000a56:	0049      	lslcc	r1, r1, #1
 8000a58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a5c:	005b      	lslcc	r3, r3, #1
 8000a5e:	ea40 0001 	orr.w	r0, r0, r1
 8000a62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a66:	2afd      	cmp	r2, #253	@ 0xfd
 8000a68:	d81d      	bhi.n	8000aa6 <__aeabi_fmul+0x92>
 8000a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	4770      	bx	lr
 8000a7a:	f090 0f00 	teq	r0, #0
 8000a7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a82:	bf08      	it	eq
 8000a84:	0249      	lsleq	r1, r1, #9
 8000a86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000a90:	bfc2      	ittt	gt
 8000a92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a9a:	4770      	bxgt	lr
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	dc5d      	bgt.n	8000b64 <__aeabi_fmul+0x150>
 8000aa8:	f112 0f19 	cmn.w	r2, #25
 8000aac:	bfdc      	itt	le
 8000aae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000ab2:	4770      	bxle	lr
 8000ab4:	f1c2 0200 	rsb	r2, r2, #0
 8000ab8:	0041      	lsls	r1, r0, #1
 8000aba:	fa21 f102 	lsr.w	r1, r1, r2
 8000abe:	f1c2 0220 	rsb	r2, r2, #32
 8000ac2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ac6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000aca:	f140 0000 	adc.w	r0, r0, #0
 8000ace:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ad2:	bf08      	it	eq
 8000ad4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ad8:	4770      	bx	lr
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ae2:	bf02      	ittt	eq
 8000ae4:	0040      	lsleq	r0, r0, #1
 8000ae6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aea:	3a01      	subeq	r2, #1
 8000aec:	d0f9      	beq.n	8000ae2 <__aeabi_fmul+0xce>
 8000aee:	ea40 000c 	orr.w	r0, r0, ip
 8000af2:	f093 0f00 	teq	r3, #0
 8000af6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000afa:	bf02      	ittt	eq
 8000afc:	0049      	lsleq	r1, r1, #1
 8000afe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b02:	3b01      	subeq	r3, #1
 8000b04:	d0f9      	beq.n	8000afa <__aeabi_fmul+0xe6>
 8000b06:	ea41 010c 	orr.w	r1, r1, ip
 8000b0a:	e78f      	b.n	8000a2c <__aeabi_fmul+0x18>
 8000b0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b10:	ea92 0f0c 	teq	r2, ip
 8000b14:	bf18      	it	ne
 8000b16:	ea93 0f0c 	teqne	r3, ip
 8000b1a:	d00a      	beq.n	8000b32 <__aeabi_fmul+0x11e>
 8000b1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b20:	bf18      	it	ne
 8000b22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b26:	d1d8      	bne.n	8000ada <__aeabi_fmul+0xc6>
 8000b28:	ea80 0001 	eor.w	r0, r0, r1
 8000b2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b30:	4770      	bx	lr
 8000b32:	f090 0f00 	teq	r0, #0
 8000b36:	bf17      	itett	ne
 8000b38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000b3c:	4608      	moveq	r0, r1
 8000b3e:	f091 0f00 	teqne	r1, #0
 8000b42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b46:	d014      	beq.n	8000b72 <__aeabi_fmul+0x15e>
 8000b48:	ea92 0f0c 	teq	r2, ip
 8000b4c:	d101      	bne.n	8000b52 <__aeabi_fmul+0x13e>
 8000b4e:	0242      	lsls	r2, r0, #9
 8000b50:	d10f      	bne.n	8000b72 <__aeabi_fmul+0x15e>
 8000b52:	ea93 0f0c 	teq	r3, ip
 8000b56:	d103      	bne.n	8000b60 <__aeabi_fmul+0x14c>
 8000b58:	024b      	lsls	r3, r1, #9
 8000b5a:	bf18      	it	ne
 8000b5c:	4608      	movne	r0, r1
 8000b5e:	d108      	bne.n	8000b72 <__aeabi_fmul+0x15e>
 8000b60:	ea80 0001 	eor.w	r0, r0, r1
 8000b64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_fdiv>:
 8000b7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b84:	bf1e      	ittt	ne
 8000b86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b8a:	ea92 0f0c 	teqne	r2, ip
 8000b8e:	ea93 0f0c 	teqne	r3, ip
 8000b92:	d069      	beq.n	8000c68 <__aeabi_fdiv+0xec>
 8000b94:	eba2 0203 	sub.w	r2, r2, r3
 8000b98:	ea80 0c01 	eor.w	ip, r0, r1
 8000b9c:	0249      	lsls	r1, r1, #9
 8000b9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ba2:	d037      	beq.n	8000c14 <__aeabi_fdiv+0x98>
 8000ba4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ba8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000bac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000bb4:	428b      	cmp	r3, r1
 8000bb6:	bf38      	it	cc
 8000bb8:	005b      	lslcc	r3, r3, #1
 8000bba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000bbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	bf24      	itt	cs
 8000bc6:	1a5b      	subcs	r3, r3, r1
 8000bc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000bd0:	bf24      	itt	cs
 8000bd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000bd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000bde:	bf24      	itt	cs
 8000be0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000be4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000be8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bec:	bf24      	itt	cs
 8000bee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bf2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bf6:	011b      	lsls	r3, r3, #4
 8000bf8:	bf18      	it	ne
 8000bfa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bfe:	d1e0      	bne.n	8000bc2 <__aeabi_fdiv+0x46>
 8000c00:	2afd      	cmp	r2, #253	@ 0xfd
 8000c02:	f63f af50 	bhi.w	8000aa6 <__aeabi_fmul+0x92>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0c:	bf08      	it	eq
 8000c0e:	f020 0001 	biceq.w	r0, r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1c:	327f      	adds	r2, #127	@ 0x7f
 8000c1e:	bfc2      	ittt	gt
 8000c20:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c28:	4770      	bxgt	lr
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	f04f 0300 	mov.w	r3, #0
 8000c32:	3a01      	subs	r2, #1
 8000c34:	e737      	b.n	8000aa6 <__aeabi_fmul+0x92>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c3e:	bf02      	ittt	eq
 8000c40:	0040      	lsleq	r0, r0, #1
 8000c42:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c46:	3a01      	subeq	r2, #1
 8000c48:	d0f9      	beq.n	8000c3e <__aeabi_fdiv+0xc2>
 8000c4a:	ea40 000c 	orr.w	r0, r0, ip
 8000c4e:	f093 0f00 	teq	r3, #0
 8000c52:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c56:	bf02      	ittt	eq
 8000c58:	0049      	lsleq	r1, r1, #1
 8000c5a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c5e:	3b01      	subeq	r3, #1
 8000c60:	d0f9      	beq.n	8000c56 <__aeabi_fdiv+0xda>
 8000c62:	ea41 010c 	orr.w	r1, r1, ip
 8000c66:	e795      	b.n	8000b94 <__aeabi_fdiv+0x18>
 8000c68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c6c:	ea92 0f0c 	teq	r2, ip
 8000c70:	d108      	bne.n	8000c84 <__aeabi_fdiv+0x108>
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	f47f af7d 	bne.w	8000b72 <__aeabi_fmul+0x15e>
 8000c78:	ea93 0f0c 	teq	r3, ip
 8000c7c:	f47f af70 	bne.w	8000b60 <__aeabi_fmul+0x14c>
 8000c80:	4608      	mov	r0, r1
 8000c82:	e776      	b.n	8000b72 <__aeabi_fmul+0x15e>
 8000c84:	ea93 0f0c 	teq	r3, ip
 8000c88:	d104      	bne.n	8000c94 <__aeabi_fdiv+0x118>
 8000c8a:	024b      	lsls	r3, r1, #9
 8000c8c:	f43f af4c 	beq.w	8000b28 <__aeabi_fmul+0x114>
 8000c90:	4608      	mov	r0, r1
 8000c92:	e76e      	b.n	8000b72 <__aeabi_fmul+0x15e>
 8000c94:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c98:	bf18      	it	ne
 8000c9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c9e:	d1ca      	bne.n	8000c36 <__aeabi_fdiv+0xba>
 8000ca0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000ca4:	f47f af5c 	bne.w	8000b60 <__aeabi_fmul+0x14c>
 8000ca8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000cac:	f47f af3c 	bne.w	8000b28 <__aeabi_fmul+0x114>
 8000cb0:	e75f      	b.n	8000b72 <__aeabi_fmul+0x15e>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_f2uiz>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	d20e      	bcs.n	8000cd6 <__aeabi_f2uiz+0x22>
 8000cb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cbc:	d30b      	bcc.n	8000cd6 <__aeabi_f2uiz+0x22>
 8000cbe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cc6:	d409      	bmi.n	8000cdc <__aeabi_f2uiz+0x28>
 8000cc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ccc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd4:	4770      	bx	lr
 8000cd6:	f04f 0000 	mov.w	r0, #0
 8000cda:	4770      	bx	lr
 8000cdc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_f2uiz+0x32>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d102      	bne.n	8000cec <__aeabi_f2uiz+0x38>
 8000ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cea:	4770      	bx	lr
 8000cec:	f04f 0000 	mov.w	r0, #0
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_uldivmod>:
 8000cf4:	b953      	cbnz	r3, 8000d0c <__aeabi_uldivmod+0x18>
 8000cf6:	b94a      	cbnz	r2, 8000d0c <__aeabi_uldivmod+0x18>
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	2800      	cmpeq	r0, #0
 8000cfe:	bf1c      	itt	ne
 8000d00:	f04f 31ff 	movne.w	r1, #4294967295
 8000d04:	f04f 30ff 	movne.w	r0, #4294967295
 8000d08:	f000 b968 	b.w	8000fdc <__aeabi_idiv0>
 8000d0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d14:	f000 f806 	bl	8000d24 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4770      	bx	lr

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5e:	fa1f f68c 	uxth.w	r6, ip
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8110 	bcs.w	8000f9e <__udivmoddi4+0x27a>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810d 	bls.w	8000f9e <__udivmoddi4+0x27a>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000d92:	fb00 f606 	mul.w	r6, r0, r6
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fa 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f7 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	2100      	movs	r1, #0
 8000dba:	1b9b      	subs	r3, r3, r6
 8000dbc:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80ee 	bcc.w	8000fcc <__udivmoddi4+0x2a8>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 808f 	bne.w	8000f26 <__udivmoddi4+0x202>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e12:	fa1f f78c 	uxth.w	r7, ip
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000e1e:	fb07 f006 	mul.w	r0, r7, r6
 8000e22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cb 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e46:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4a:	fb00 f707 	mul.w	r7, r0, r7
 8000e4e:	fa1f f38e 	uxth.w	r3, lr
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80ae 	bhi.w	8000fc6 <__udivmoddi4+0x2a2>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0720 	rsb	r7, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e82:	fa24 f607 	lsr.w	r6, r4, r7
 8000e86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e8a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000e8e:	fa1f fe8c 	uxth.w	lr, ip
 8000e92:	fb09 6618 	mls	r6, r9, r8, r6
 8000e96:	fa20 f307 	lsr.w	r3, r0, r7
 8000e9a:	408c      	lsls	r4, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea4:	431c      	orrs	r4, r3
 8000ea6:	0c23      	lsrs	r3, r4, #16
 8000ea8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eac:	4298      	cmp	r0, r3
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb8:	f108 36ff 	add.w	r6, r8, #4294967295
 8000ebc:	f080 8081 	bcs.w	8000fc2 <__udivmoddi4+0x29e>
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	d97e      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000ec4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ec8:	4463      	add	r3, ip
 8000eca:	1a1e      	subs	r6, r3, r0
 8000ecc:	fbb6 f3f9 	udiv	r3, r6, r9
 8000ed0:	fb09 6613 	mls	r6, r9, r3, r6
 8000ed4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ed8:	b2a4      	uxth	r4, r4
 8000eda:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000ede:	45a6      	cmp	lr, r4
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x1d0>
 8000ee2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee6:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eea:	d266      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000eec:	45a6      	cmp	lr, r4
 8000eee:	d964      	bls.n	8000fba <__udivmoddi4+0x296>
 8000ef0:	3b02      	subs	r3, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000ef8:	fba0 8302 	umull	r8, r3, r0, r2
 8000efc:	eba4 040e 	sub.w	r4, r4, lr
 8000f00:	429c      	cmp	r4, r3
 8000f02:	46c6      	mov	lr, r8
 8000f04:	461e      	mov	r6, r3
 8000f06:	d350      	bcc.n	8000faa <__udivmoddi4+0x286>
 8000f08:	d04d      	beq.n	8000fa6 <__udivmoddi4+0x282>
 8000f0a:	b155      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0c:	ebba 030e 	subs.w	r3, sl, lr
 8000f10:	eb64 0406 	sbc.w	r4, r4, r6
 8000f14:	fa04 f707 	lsl.w	r7, r4, r7
 8000f18:	40cb      	lsrs	r3, r1
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 7400 	strd	r7, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e751      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f26:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2a:	f1c2 0320 	rsb	r3, r2, #32
 8000f2e:	40d9      	lsrs	r1, r3
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa20 f303 	lsr.w	r3, r0, r3
 8000f38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f3c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000f40:	fb08 1110 	mls	r1, r8, r0, r1
 8000f44:	4094      	lsls	r4, r2
 8000f46:	431c      	orrs	r4, r3
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	0c23      	lsrs	r3, r4, #16
 8000f4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f52:	fb00 f107 	mul.w	r1, r0, r7
 8000f56:	4299      	cmp	r1, r3
 8000f58:	d908      	bls.n	8000f6c <__udivmoddi4+0x248>
 8000f5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f62:	d22c      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000f64:	4299      	cmp	r1, r3
 8000f66:	d92a      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000f68:	3802      	subs	r0, #2
 8000f6a:	4463      	add	r3, ip
 8000f6c:	1a5b      	subs	r3, r3, r1
 8000f6e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f72:	fb08 3311 	mls	r3, r8, r1, r3
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f7c:	fb01 f307 	mul.w	r3, r1, r7
 8000f80:	42a3      	cmp	r3, r4
 8000f82:	d908      	bls.n	8000f96 <__udivmoddi4+0x272>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f8c:	d213      	bcs.n	8000fb6 <__udivmoddi4+0x292>
 8000f8e:	42a3      	cmp	r3, r4
 8000f90:	d911      	bls.n	8000fb6 <__udivmoddi4+0x292>
 8000f92:	3902      	subs	r1, #2
 8000f94:	4464      	add	r4, ip
 8000f96:	1ae4      	subs	r4, r4, r3
 8000f98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f9c:	e73b      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	e6f2      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	e708      	b.n	8000db8 <__udivmoddi4+0x94>
 8000fa6:	45c2      	cmp	sl, r8
 8000fa8:	d2af      	bcs.n	8000f0a <__udivmoddi4+0x1e6>
 8000faa:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fae:	eb63 060c 	sbc.w	r6, r3, ip
 8000fb2:	3801      	subs	r0, #1
 8000fb4:	e7a9      	b.n	8000f0a <__udivmoddi4+0x1e6>
 8000fb6:	4631      	mov	r1, r6
 8000fb8:	e7ed      	b.n	8000f96 <__udivmoddi4+0x272>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	e79a      	b.n	8000ef4 <__udivmoddi4+0x1d0>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e7d4      	b.n	8000f6c <__udivmoddi4+0x248>
 8000fc2:	46b0      	mov	r8, r6
 8000fc4:	e781      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fc6:	4463      	add	r3, ip
 8000fc8:	3802      	subs	r0, #2
 8000fca:	e74f      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	4623      	mov	r3, r4
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	e711      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd4:	3e02      	subs	r6, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	e732      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fda:	bf00      	nop

08000fdc <__aeabi_idiv0>:
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <main>:
void parseAndStore(char *message);
void removeProcessedValue(uint16_t *list);

// Main
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	// Initialisation of the multiple libraries used
	HAL_Init();
 8000fe4:	f002 fe6a 	bl	8003cbc <HAL_Init>
	SystemClock_Config();
 8000fe8:	f000 ffe0 	bl	8001fac <SystemClock_Config>
	MX_GPIO_Init();
 8000fec:	f001 f90e 	bl	800220c <MX_GPIO_Init>
	MX_DMA_Init();
 8000ff0:	f001 f8ec 	bl	80021cc <MX_DMA_Init>
	MX_ADC1_Init();
 8000ff4:	f001 f820 	bl	8002038 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000ff8:	f001 f88c 	bl	8002114 <MX_I2C1_Init>
	MX_I2C2_Init();
 8000ffc:	f001 f8b8 	bl	8002170 <MX_I2C2_Init>
	MX_LWIP_Init();
 8001000:	f001 fc76 	bl	80028f0 <MX_LWIP_Init>
	MX_USB_DEVICE_Init();
 8001004:	f002 f964 	bl	80032d0 <MX_USB_DEVICE_Init>

	// Ping STM variable
	extern struct netif gnetif;

	// Convert address string to IP address
	ipaddr_aton(address, &dest_ip);
 8001008:	4921      	ldr	r1, [pc, #132]	@ (8001090 <main+0xb0>)
 800100a:	4822      	ldr	r0, [pc, #136]	@ (8001094 <main+0xb4>)
 800100c:	f00a fe70 	bl	800bcf0 <ip4addr_aton>

	// Create a new UDP control block
	udp_pcb = udp_new();
 8001010:	f012 f8dd 	bl	80131ce <udp_new>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <main+0xb8>)
 800101a:	601a      	str	r2, [r3, #0]
	if (udp_pcb != NULL)
 800101c:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <main+0xb8>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <main+0x54>
	{
		// Bind UDP to any IP address and specified port
		udp_bind(udp_pcb, IP_ADDR_ANY, udp_port);
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <main+0xb8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <main+0xbc>)
 800102a:	8812      	ldrh	r2, [r2, #0]
 800102c:	491c      	ldr	r1, [pc, #112]	@ (80010a0 <main+0xc0>)
 800102e:	4618      	mov	r0, r3
 8001030:	f012 f84c 	bl	80130cc <udp_bind>
	}

	// Set STM32 IP address
	IP4_ADDR(&my_ip, 192, 168, 1, 100);
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <main+0xc4>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <main+0xc8>)
 8001038:	601a      	str	r2, [r3, #0]

	// Register callback for incoming UDP packets
	udp_recv(udp_pcb, udp_receive_callback, NULL);
 800103a:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <main+0xb8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	491a      	ldr	r1, [pc, #104]	@ (80010ac <main+0xcc>)
 8001042:	4618      	mov	r0, r3
 8001044:	f012 f8b2 	bl	80131ac <udp_recv>

	// Set the reference time for flowrate measurements
	flowrateTime = HAL_GetTick();
 8001048:	f002 fe9c 	bl	8003d84 <HAL_GetTick>
 800104c:	4603      	mov	r3, r0
 800104e:	4a18      	ldr	r2, [pc, #96]	@ (80010b0 <main+0xd0>)
 8001050:	6013      	str	r3, [r2, #0]

	while (1)
	{
		// Used to ping the STM
		ethernetif_input(&gnetif);
 8001052:	4818      	ldr	r0, [pc, #96]	@ (80010b4 <main+0xd4>)
 8001054:	f002 f836 	bl	80030c4 <ethernetif_input>
		sys_check_timeouts();
 8001058:	f011 fd86 	bl	8012b68 <sys_check_timeouts>

		// Flag --> sequence launched
		if (sequenceFlag)
 800105c:	4b16      	ldr	r3, [pc, #88]	@ (80010b8 <main+0xd8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <main+0x8a>
		{
			sequence();
 8001066:	f000 fd23 	bl	8001ab0 <sequence>
		  }

		// Flag --> emergency launched
		if (emergencyFlag)
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <main+0xdc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d004      	beq.n	800107c <main+0x9c>
		{
			emergencyFlag=0;
 8001072:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <main+0xdc>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
			emergency();
 8001078:	f000 ff2e 	bl	8001ed8 <emergency>
		}

		get_values();
 800107c:	f000 f968 	bl	8001350 <get_values>

		if (sparkFlag)
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <main+0xe0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0e3      	beq.n	8001052 <main+0x72>
		{
		spark();
 800108a:	f000 ff17 	bl	8001ebc <spark>
		ethernetif_input(&gnetif);
 800108e:	e7e0      	b.n	8001052 <main+0x72>
 8001090:	20000364 	.word	0x20000364
 8001094:	20000000 	.word	0x20000000
 8001098:	2000035c 	.word	0x2000035c
 800109c:	2000000e 	.word	0x2000000e
 80010a0:	08017e68 	.word	0x08017e68
 80010a4:	20000368 	.word	0x20000368
 80010a8:	6401a8c0 	.word	0x6401a8c0
 80010ac:	08001555 	.word	0x08001555
 80010b0:	20000388 	.word	0x20000388
 80010b4:	2000247c 	.word	0x2000247c
 80010b8:	20000395 	.word	0x20000395
 80010bc:	20000398 	.word	0x20000398
 80010c0:	20000394 	.word	0x20000394
 80010c4:	00000000 	.word	0x00000000

080010c8 <transmit_sensor_values>:

//--------------------------------------------------------------------
//                Sensor related functions
//--------------------------------------------------------------------
// Send all the sensor data to the computer
void transmit_sensor_values() {
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	b0d9      	sub	sp, #356	@ 0x164
 80010cc:	af0e      	add	r7, sp, #56	@ 0x38
    uint32_t PS1 = (uint32_t)(1000*(0.0069412*Pressure_Sensor[0]-3.173216));  // C3H8 pressure
 80010ce:	4b8e      	ldr	r3, [pc, #568]	@ (8001308 <transmit_sensor_values+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff faf6 	bl	80006c4 <__aeabi_ui2d>
 80010d8:	a37f      	add	r3, pc, #508	@ (adr r3, 80012d8 <transmit_sensor_values+0x210>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff f885 	bl	80001ec <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	a37d      	add	r3, pc, #500	@ (adr r3, 80012e0 <transmit_sensor_values+0x218>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	f7ff f9aa 	bl	8000448 <__aeabi_dsub>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4610      	mov	r0, r2
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b82      	ldr	r3, [pc, #520]	@ (800130c <transmit_sensor_values+0x244>)
 8001102:	f7ff f873 	bl	80001ec <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fb53 	bl	80007b8 <__aeabi_d2uiz>
 8001112:	4603      	mov	r3, r0
 8001114:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    uint32_t PS2 = (uint32_t)(1000*(0.0070216*Pressure_Sensor[1]-3.284300));  // GOX pressure
 8001118:	4b7b      	ldr	r3, [pc, #492]	@ (8001308 <transmit_sensor_values+0x240>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fad1 	bl	80006c4 <__aeabi_ui2d>
 8001122:	a371      	add	r3, pc, #452	@ (adr r3, 80012e8 <transmit_sensor_values+0x220>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff f860 	bl	80001ec <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	a36e      	add	r3, pc, #440	@ (adr r3, 80012f0 <transmit_sensor_values+0x228>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff f985 	bl	8000448 <__aeabi_dsub>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	4b70      	ldr	r3, [pc, #448]	@ (800130c <transmit_sensor_values+0x244>)
 800114c:	f7ff f84e 	bl	80001ec <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fb2e 	bl	80007b8 <__aeabi_d2uiz>
 800115c:	4603      	mov	r3, r0
 800115e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    uint32_t PS3 = (uint32_t)(1000*(0.0070256*Pressure_Sensor[2]-3.393938));  // N2 pressure
 8001162:	4b69      	ldr	r3, [pc, #420]	@ (8001308 <transmit_sensor_values+0x240>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff faac 	bl	80006c4 <__aeabi_ui2d>
 800116c:	a362      	add	r3, pc, #392	@ (adr r3, 80012f8 <transmit_sensor_values+0x230>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff f83b 	bl	80001ec <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a360      	add	r3, pc, #384	@ (adr r3, 8001300 <transmit_sensor_values+0x238>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff f960 	bl	8000448 <__aeabi_dsub>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b5d      	ldr	r3, [pc, #372]	@ (800130c <transmit_sensor_values+0x244>)
 8001196:	f7ff f829 	bl	80001ec <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fb09 	bl	80007b8 <__aeabi_d2uiz>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    uint32_t time = HAL_GetTick();  // Sending time
 80011ac:	f002 fdea 	bl	8003d84 <HAL_GetTick>
 80011b0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
    // Buffer that contains the data that will be sent (pressure, temperature, flowrate, valve status)
    char sensor_buffer[256];
    sprintf(sensor_buffer, "%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu,%lu"
 80011b4:	4b56      	ldr	r3, [pc, #344]	@ (8001310 <transmit_sensor_values+0x248>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a56      	ldr	r2, [pc, #344]	@ (8001314 <transmit_sensor_values+0x24c>)
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	4956      	ldr	r1, [pc, #344]	@ (8001318 <transmit_sensor_values+0x250>)
 80011be:	6809      	ldr	r1, [r1, #0]
 80011c0:	4856      	ldr	r0, [pc, #344]	@ (800131c <transmit_sensor_values+0x254>)
 80011c2:	6800      	ldr	r0, [r0, #0]
 80011c4:	4c56      	ldr	r4, [pc, #344]	@ (8001320 <transmit_sensor_values+0x258>)
 80011c6:	7824      	ldrb	r4, [r4, #0]
 80011c8:	b2e4      	uxtb	r4, r4
 80011ca:	4625      	mov	r5, r4
 80011cc:	4c55      	ldr	r4, [pc, #340]	@ (8001324 <transmit_sensor_values+0x25c>)
 80011ce:	7824      	ldrb	r4, [r4, #0]
 80011d0:	b2e4      	uxtb	r4, r4
 80011d2:	4626      	mov	r6, r4
 80011d4:	4c54      	ldr	r4, [pc, #336]	@ (8001328 <transmit_sensor_values+0x260>)
 80011d6:	7824      	ldrb	r4, [r4, #0]
 80011d8:	b2e4      	uxtb	r4, r4
 80011da:	617c      	str	r4, [r7, #20]
 80011dc:	4c53      	ldr	r4, [pc, #332]	@ (800132c <transmit_sensor_values+0x264>)
 80011de:	7824      	ldrb	r4, [r4, #0]
 80011e0:	b2e4      	uxtb	r4, r4
 80011e2:	613c      	str	r4, [r7, #16]
 80011e4:	4c52      	ldr	r4, [pc, #328]	@ (8001330 <transmit_sensor_values+0x268>)
 80011e6:	7824      	ldrb	r4, [r4, #0]
 80011e8:	b2e4      	uxtb	r4, r4
 80011ea:	60fc      	str	r4, [r7, #12]
 80011ec:	4c51      	ldr	r4, [pc, #324]	@ (8001334 <transmit_sensor_values+0x26c>)
 80011ee:	7824      	ldrb	r4, [r4, #0]
 80011f0:	b2e4      	uxtb	r4, r4
 80011f2:	60bc      	str	r4, [r7, #8]
 80011f4:	4c50      	ldr	r4, [pc, #320]	@ (8001338 <transmit_sensor_values+0x270>)
 80011f6:	7824      	ldrb	r4, [r4, #0]
 80011f8:	b2e4      	uxtb	r4, r4
 80011fa:	607c      	str	r4, [r7, #4]
 80011fc:	f107 0418 	add.w	r4, r7, #24
 8001200:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8001204:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
 8001208:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800120c:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8001210:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8001214:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 8001218:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800121c:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8001220:	f8d7 c014 	ldr.w	ip, [r7, #20]
 8001224:	f8cd c020 	str.w	ip, [sp, #32]
 8001228:	9607      	str	r6, [sp, #28]
 800122a:	9506      	str	r5, [sp, #24]
 800122c:	9005      	str	r0, [sp, #20]
 800122e:	9104      	str	r1, [sp, #16]
 8001230:	9203      	str	r2, [sp, #12]
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001244:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001248:	493c      	ldr	r1, [pc, #240]	@ (800133c <transmit_sensor_values+0x274>)
 800124a:	4620      	mov	r0, r4
 800124c:	f013 fdc2 	bl	8014dd4 <siprintf>
    		",%lu,%lu,%lu,%lu,%lu,%lu\n\r",
    		time,PS1,PS2,PS3,TS1,TS2,FS1,FS2, bit6, bit5, bit4, bit3, bit2, bit1,bit0);
    CDC_Transmit_FS((uint32_t*)sensor_buffer, strlen(sensor_buffer));
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f7fe ffc1 	bl	80001dc <strlen>
 800125a:	4602      	mov	r2, r0
 800125c:	f107 0318 	add.w	r3, r7, #24
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f002 f8f2 	bl	800344c <CDC_Transmit_FS>
    // Allocate pbuf
    p = pbuf_alloc(PBUF_TRANSPORT, strlen(sensor_buffer), PBUF_RAM);
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	4618      	mov	r0, r3
 800126e:	f7fe ffb5 	bl	80001dc <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29b      	uxth	r3, r3
 8001276:	2200      	movs	r2, #0
 8001278:	4619      	mov	r1, r3
 800127a:	2000      	movs	r0, #0
 800127c:	f00c f9a2 	bl	800d5c4 <pbuf_alloc>
 8001280:	4603      	mov	r3, r0
 8001282:	4a2f      	ldr	r2, [pc, #188]	@ (8001340 <transmit_sensor_values+0x278>)
 8001284:	6013      	str	r3, [r2, #0]
    if (p != NULL) {
 8001286:	4b2e      	ldr	r3, [pc, #184]	@ (8001340 <transmit_sensor_values+0x278>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d01c      	beq.n	80012c8 <transmit_sensor_values+0x200>
        // Copy data to pbuf
        pbuf_take(p, sensor_buffer, strlen(sensor_buffer));
 800128e:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <transmit_sensor_values+0x278>)
 8001290:	681c      	ldr	r4, [r3, #0]
 8001292:	f107 0318 	add.w	r3, r7, #24
 8001296:	4618      	mov	r0, r3
 8001298:	f7fe ffa0 	bl	80001dc <strlen>
 800129c:	4603      	mov	r3, r0
 800129e:	b29a      	uxth	r2, r3
 80012a0:	f107 0318 	add.w	r3, r7, #24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4620      	mov	r0, r4
 80012a8:	f00c ff7c 	bl	800e1a4 <pbuf_take>
        // Send the buffer over UDP
        udp_sendto(udp_pcb, p, &dest_ip, udp_port);
 80012ac:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <transmit_sensor_values+0x27c>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	4b23      	ldr	r3, [pc, #140]	@ (8001340 <transmit_sensor_values+0x278>)
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <transmit_sensor_values+0x280>)
 80012b6:	881b      	ldrh	r3, [r3, #0]
 80012b8:	4a24      	ldr	r2, [pc, #144]	@ (800134c <transmit_sensor_values+0x284>)
 80012ba:	f011 fe05 	bl	8012ec8 <udp_sendto>
        // Free the pbuf
        pbuf_free(p);
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <transmit_sensor_values+0x278>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00c fcf6 	bl	800dcb4 <pbuf_free>
    }
}
 80012c8:	bf00      	nop
 80012ca:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d2:	bf00      	nop
 80012d4:	f3af 8000 	nop.w
 80012d8:	2feb8016 	.word	0x2feb8016
 80012dc:	3f7c6e60 	.word	0x3f7c6e60
 80012e0:	11f926c8 	.word	0x11f926c8
 80012e4:	400962bf 	.word	0x400962bf
 80012e8:	65d978ad 	.word	0x65d978ad
 80012ec:	3f7cc2ae 	.word	0x3f7cc2ae
 80012f0:	141205bc 	.word	0x141205bc
 80012f4:	400a463f 	.word	0x400a463f
 80012f8:	23c1a628 	.word	0x23c1a628
 80012fc:	3f7cc6e0 	.word	0x3f7cc6e0
 8001300:	f7553693 	.word	0xf7553693
 8001304:	400b26c8 	.word	0x400b26c8
 8001308:	2000036c 	.word	0x2000036c
 800130c:	408f4000 	.word	0x408f4000
 8001310:	20000378 	.word	0x20000378
 8001314:	2000037c 	.word	0x2000037c
 8001318:	2000038c 	.word	0x2000038c
 800131c:	20000390 	.word	0x20000390
 8001320:	200003a7 	.word	0x200003a7
 8001324:	200003a6 	.word	0x200003a6
 8001328:	200003a5 	.word	0x200003a5
 800132c:	200003a4 	.word	0x200003a4
 8001330:	200003a3 	.word	0x200003a3
 8001334:	200003a2 	.word	0x200003a2
 8001338:	200003a1 	.word	0x200003a1
 800133c:	08015ef8 	.word	0x08015ef8
 8001340:	20000360 	.word	0x20000360
 8001344:	2000035c 	.word	0x2000035c
 8001348:	2000000e 	.word	0x2000000e
 800134c:	20000364 	.word	0x20000364

08001350 <get_values>:

// Read the sensor values
void get_values()
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b08b      	sub	sp, #44	@ 0x2c
 8001354:	af04      	add	r7, sp, #16
	unsigned long currentTime = HAL_GetTick();  // Reference time
 8001356:	f002 fd15 	bl	8003d84 <HAL_GetTick>
 800135a:	6178      	str	r0, [r7, #20]
	unsigned long elapsedTime = currentTime - flowrateTime; // Elapsed time since last sending of values
 800135c:	4b6e      	ldr	r3, [pc, #440]	@ (8001518 <get_values+0x1c8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	613b      	str	r3, [r7, #16]
	int t = 1000/frequency; // Delay (in ms) between each sending
 8001366:	2364      	movs	r3, #100	@ 0x64
 8001368:	60fb      	str	r3, [r7, #12]
	- The flowrate sensor sends a pulse
	- This pulse is detected by the GPIO port which increases a counter
	- When the "elapsedTime" is greater than the threshold time, the flowrate is computed based on the counter
	If the frequency is too high, the accuracy of the sensor might be affected so considered
	*/
	if (elapsedTime > t)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	429a      	cmp	r2, r3
 8001370:	f240 80c6 	bls.w	8001500 <get_values+0x1b0>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
	{
		__disable_irq(); // Disable interrupts during critical section
	    // Calculate flowrates
	    FS1 = 1000.0f *(((1000.0f / elapsedTime) * pulseCountFS1) / calibrationFactorFS1);
 8001378:	6938      	ldr	r0, [r7, #16]
 800137a:	f7ff faf3 	bl	8000964 <__aeabi_ui2f>
 800137e:	4603      	mov	r3, r0
 8001380:	4619      	mov	r1, r3
 8001382:	4866      	ldr	r0, [pc, #408]	@ (800151c <get_values+0x1cc>)
 8001384:	f7ff fbfa 	bl	8000b7c <__aeabi_fdiv>
 8001388:	4603      	mov	r3, r0
 800138a:	461c      	mov	r4, r3
 800138c:	4b64      	ldr	r3, [pc, #400]	@ (8001520 <get_values+0x1d0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff faeb 	bl	800096c <__aeabi_i2f>
 8001396:	4603      	mov	r3, r0
 8001398:	4619      	mov	r1, r3
 800139a:	4620      	mov	r0, r4
 800139c:	f7ff fb3a 	bl	8000a14 <__aeabi_fmul>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001524 <get_values+0x1d4>)
 80013a6:	4619      	mov	r1, r3
 80013a8:	4610      	mov	r0, r2
 80013aa:	f7ff fbe7 	bl	8000b7c <__aeabi_fdiv>
 80013ae:	4603      	mov	r3, r0
 80013b0:	495a      	ldr	r1, [pc, #360]	@ (800151c <get_values+0x1cc>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fb2e 	bl	8000a14 <__aeabi_fmul>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fc7a 	bl	8000cb4 <__aeabi_f2uiz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4a59      	ldr	r2, [pc, #356]	@ (8001528 <get_values+0x1d8>)
 80013c4:	6013      	str	r3, [r2, #0]
	    FS2 = 1000.0f *(((1000.0f / elapsedTime) * pulseCountFS2) / calibrationFactorFS2);
 80013c6:	6938      	ldr	r0, [r7, #16]
 80013c8:	f7ff facc 	bl	8000964 <__aeabi_ui2f>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4852      	ldr	r0, [pc, #328]	@ (800151c <get_values+0x1cc>)
 80013d2:	f7ff fbd3 	bl	8000b7c <__aeabi_fdiv>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461c      	mov	r4, r3
 80013da:	4b54      	ldr	r3, [pc, #336]	@ (800152c <get_values+0x1dc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fac4 	bl	800096c <__aeabi_i2f>
 80013e4:	4603      	mov	r3, r0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff fb13 	bl	8000a14 <__aeabi_fmul>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001530 <get_values+0x1e0>)
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f7ff fbc0 	bl	8000b7c <__aeabi_fdiv>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4947      	ldr	r1, [pc, #284]	@ (800151c <get_values+0x1cc>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fb07 	bl	8000a14 <__aeabi_fmul>
 8001406:	4603      	mov	r3, r0
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fc53 	bl	8000cb4 <__aeabi_f2uiz>
 800140e:	4603      	mov	r3, r0
 8001410:	4a48      	ldr	r2, [pc, #288]	@ (8001534 <get_values+0x1e4>)
 8001412:	6013      	str	r3, [r2, #0]

	    pulseCountFS1 = 0;  // Reset counter
 8001414:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <get_values+0x1d0>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
	    pulseCountFS2 = 0;  // Reset counter
 800141a:	4b44      	ldr	r3, [pc, #272]	@ (800152c <get_values+0x1dc>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
	    flowrateTime = currentTime;
 8001420:	4a3d      	ldr	r2, [pc, #244]	@ (8001518 <get_values+0x1c8>)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001426:	b662      	cpsie	i
}
 8001428:	bf00      	nop
	    __enable_irq(); // Enable interrupts
		HAL_ADC_Start_DMA(&hadc1, Pressure_Sensor, 3);	// Read ADC for pressure values
 800142a:	2203      	movs	r2, #3
 800142c:	4942      	ldr	r1, [pc, #264]	@ (8001538 <get_values+0x1e8>)
 800142e:	4843      	ldr	r0, [pc, #268]	@ (800153c <get_values+0x1ec>)
 8001430:	f002 fd1a 	bl	8003e68 <HAL_ADC_Start_DMA>

		// Read I2Cs port to get the temperature
		uint8_t tempData[2];
	    int32_t tempRaw;
		if (HAL_I2C_Mem_Read(&hi2c1, MCP9600_ADDR, TEMP_MSB_REG, I2C_MEMADD_SIZE_8BIT, tempData, 2, 100) == HAL_OK)
 8001434:	2364      	movs	r3, #100	@ 0x64
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	2302      	movs	r3, #2
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	2200      	movs	r2, #0
 8001444:	21c0      	movs	r1, #192	@ 0xc0
 8001446:	483e      	ldr	r0, [pc, #248]	@ (8001540 <get_values+0x1f0>)
 8001448:	f005 f94e 	bl	80066e8 <HAL_I2C_Mem_Read>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d122      	bne.n	8001498 <get_values+0x148>
		{
			tempRaw = (tempData[0] << 8) | tempData[1];
 8001452:	793b      	ldrb	r3, [r7, #4]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	797a      	ldrb	r2, [r7, #5]
 8001458:	4313      	orrs	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
			TS1 = 100 * tempRaw * 0.0625 + 273156;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2264      	movs	r2, #100	@ 0x64
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f93d 	bl	80006e4 <__aeabi_i2d>
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b35      	ldr	r3, [pc, #212]	@ (8001544 <get_values+0x1f4>)
 8001470:	f7fe febc 	bl	80001ec <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	a322      	add	r3, pc, #136	@ (adr r3, 8001508 <get_values+0x1b8>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7fe ffe3 	bl	800044c <__adddf3>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	f7ff f993 	bl	80007b8 <__aeabi_d2uiz>
 8001492:	4603      	mov	r3, r0
 8001494:	4a2c      	ldr	r2, [pc, #176]	@ (8001548 <get_values+0x1f8>)
 8001496:	6013      	str	r3, [r2, #0]
		}
		if (HAL_I2C_Mem_Read(&hi2c2, MCP9600_ADDR, TEMP_MSB_REG, I2C_MEMADD_SIZE_8BIT, tempData, 2, 100) == HAL_OK)
 8001498:	2364      	movs	r3, #100	@ 0x64
 800149a:	9302      	str	r3, [sp, #8]
 800149c:	2302      	movs	r3, #2
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	2200      	movs	r2, #0
 80014a8:	21c0      	movs	r1, #192	@ 0xc0
 80014aa:	4828      	ldr	r0, [pc, #160]	@ (800154c <get_values+0x1fc>)
 80014ac:	f005 f91c 	bl	80066e8 <HAL_I2C_Mem_Read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d122      	bne.n	80014fc <get_values+0x1ac>
		{
			tempRaw = (tempData[0] << 8) | tempData[1];
 80014b6:	793b      	ldrb	r3, [r7, #4]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	797a      	ldrb	r2, [r7, #5]
 80014bc:	4313      	orrs	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
			TS2 = 100 * tempRaw * 0.0625 + 27315;
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2264      	movs	r2, #100	@ 0x64
 80014c4:	fb02 f303 	mul.w	r3, r2, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f90b 	bl	80006e4 <__aeabi_i2d>
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <get_values+0x1f4>)
 80014d4:	f7fe fe8a 	bl	80001ec <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	a30b      	add	r3, pc, #44	@ (adr r3, 8001510 <get_values+0x1c0>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7fe ffb1 	bl	800044c <__adddf3>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff f961 	bl	80007b8 <__aeabi_d2uiz>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a15      	ldr	r2, [pc, #84]	@ (8001550 <get_values+0x200>)
 80014fa:	6013      	str	r3, [r2, #0]
		}
		transmit_sensor_values();
 80014fc:	f7ff fde4 	bl	80010c8 <transmit_sensor_values>

	 }
}
 8001500:	bf00      	nop
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	00000000 	.word	0x00000000
 800150c:	4110ac10 	.word	0x4110ac10
 8001510:	00000000 	.word	0x00000000
 8001514:	40daacc0 	.word	0x40daacc0
 8001518:	20000388 	.word	0x20000388
 800151c:	447a0000 	.word	0x447a0000
 8001520:	20000380 	.word	0x20000380
 8001524:	439f632a 	.word	0x439f632a
 8001528:	2000038c 	.word	0x2000038c
 800152c:	20000384 	.word	0x20000384
 8001530:	3f814755 	.word	0x3f814755
 8001534:	20000390 	.word	0x20000390
 8001538:	2000036c 	.word	0x2000036c
 800153c:	2000020c 	.word	0x2000020c
 8001540:	200002b4 	.word	0x200002b4
 8001544:	3fb00000 	.word	0x3fb00000
 8001548:	20000378 	.word	0x20000378
 800154c:	20000308 	.word	0x20000308
 8001550:	2000037c 	.word	0x2000037c

08001554 <udp_receive_callback>:
//--------------------------------------------------------------------
//                Listening related function
//--------------------------------------------------------------------
// Listen to any message sent by the computer -- This function has the highest priority meaning that any ongoing action will be interrupt if a message is received
void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	f2ad 4d74 	subw	sp, sp, #1140	@ 0x474
 800155a:	af00      	add	r7, sp, #0
 800155c:	f507 648e 	add.w	r4, r7, #1136	@ 0x470
 8001560:	f2a4 4464 	subw	r4, r4, #1124	@ 0x464
 8001564:	6020      	str	r0, [r4, #0]
 8001566:	f507 608e 	add.w	r0, r7, #1136	@ 0x470
 800156a:	f5a0 608d 	sub.w	r0, r0, #1128	@ 0x468
 800156e:	6001      	str	r1, [r0, #0]
 8001570:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8001574:	f2a1 416c 	subw	r1, r1, #1132	@ 0x46c
 8001578:	600a      	str	r2, [r1, #0]
 800157a:	f507 628e 	add.w	r2, r7, #1136	@ 0x470
 800157e:	f5a2 628e 	sub.w	r2, r2, #1136	@ 0x470
 8001582:	6013      	str	r3, [r2, #0]
	struct pbuf *response_pbuf; // Acknowledgement buffer
	const char *response_msg = "OK";  // Acknowledgement message
 8001584:	4b6b      	ldr	r3, [pc, #428]	@ (8001734 <udp_receive_callback+0x1e0>)
 8001586:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c

  // Detect if a message has been received
	if (p != NULL)
 800158a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800158e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	f000 8263 	beq.w	8001a60 <udp_receive_callback+0x50c>
	{
    // Command buffer (for spark and emergency)
    char msg[100];
    strncpy(msg, (char*)p->payload, p->len);
 800159a:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800159e:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6859      	ldr	r1, [r3, #4]
 80015a6:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80015aa:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	895b      	ldrh	r3, [r3, #10]
 80015b2:	461a      	mov	r2, r3
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4618      	mov	r0, r3
 80015ba:	f013 fc86 	bl	8014eca <strncpy>
    msg[p->len] = '\0';
 80015be:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80015c2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	895b      	ldrh	r3, [r3, #10]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80015d0:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80015d4:	2100      	movs	r1, #0
 80015d6:	5499      	strb	r1, [r3, r2]

    // Emergency condition / Triggers the emergency flag and send back a response for acknowledgement
    if (strcmp(msg, "STOP") == 0)
 80015d8:	f107 0310 	add.w	r3, r7, #16
 80015dc:	4956      	ldr	r1, [pc, #344]	@ (8001738 <udp_receive_callback+0x1e4>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe fdf2 	bl	80001c8 <strcmp>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d130      	bne.n	800164c <udp_receive_callback+0xf8>
    {
    	emergencyFlag = 1;
 80015ea:	4b54      	ldr	r3, [pc, #336]	@ (800173c <udp_receive_callback+0x1e8>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

    	response_pbuf = pbuf_alloc(PBUF_TRANSPORT, strlen(response_msg), PBUF_RAM);
 80015f0:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 80015f4:	f7fe fdf2 	bl	80001dc <strlen>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	2200      	movs	r2, #0
 80015fe:	4619      	mov	r1, r3
 8001600:	2000      	movs	r0, #0
 8001602:	f00b ffdf 	bl	800d5c4 <pbuf_alloc>
 8001606:	f8c7 0468 	str.w	r0, [r7, #1128]	@ 0x468
    	if (response_pbuf != NULL)
 800160a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8226 	beq.w	8001a60 <udp_receive_callback+0x50c>
    	{
    		memcpy(response_pbuf->payload, response_msg, strlen(response_msg));
 8001614:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8001618:	685c      	ldr	r4, [r3, #4]
 800161a:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 800161e:	f7fe fddd 	bl	80001dc <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	f8d7 146c 	ldr.w	r1, [r7, #1132]	@ 0x46c
 800162a:	4620      	mov	r0, r4
 800162c:	f013 fd3f 	bl	80150ae <memcpy>
    		// Send the response back to the sender
    		udp_sendto(udp_pcb, response_pbuf,&dest_ip, udp_port);
 8001630:	4b43      	ldr	r3, [pc, #268]	@ (8001740 <udp_receive_callback+0x1ec>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <udp_receive_callback+0x1f0>)
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	4a43      	ldr	r2, [pc, #268]	@ (8001748 <udp_receive_callback+0x1f4>)
 800163a:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 800163e:	f011 fc43 	bl	8012ec8 <udp_sendto>
    		// Free the response pbuf
    		pbuf_free(response_pbuf);
 8001642:	f8d7 0468 	ldr.w	r0, [r7, #1128]	@ 0x468
 8001646:	f00c fb35 	bl	800dcb4 <pbuf_free>
    		// Free the response pbuf
    		pbuf_free(response_pbuf);
    	}
    }
	}
}
 800164a:	e209      	b.n	8001a60 <udp_receive_callback+0x50c>
    else if (strcmp(msg, "SP") == 0)
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	493e      	ldr	r1, [pc, #248]	@ (800174c <udp_receive_callback+0x1f8>)
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fdb8 	bl	80001c8 <strcmp>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d130      	bne.n	80016c0 <udp_receive_callback+0x16c>
      sparkFlag = 1;
 800165e:	4b3c      	ldr	r3, [pc, #240]	@ (8001750 <udp_receive_callback+0x1fc>)
 8001660:	2201      	movs	r2, #1
 8001662:	701a      	strb	r2, [r3, #0]
      response_pbuf = pbuf_alloc(PBUF_TRANSPORT, strlen(response_msg), PBUF_RAM);
 8001664:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 8001668:	f7fe fdb8 	bl	80001dc <strlen>
 800166c:	4603      	mov	r3, r0
 800166e:	b29b      	uxth	r3, r3
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	2000      	movs	r0, #0
 8001676:	f00b ffa5 	bl	800d5c4 <pbuf_alloc>
 800167a:	f8c7 0468 	str.w	r0, [r7, #1128]	@ 0x468
      if (response_pbuf != NULL)
 800167e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 81ec 	beq.w	8001a60 <udp_receive_callback+0x50c>
        memcpy(response_pbuf->payload, response_msg, strlen(response_msg));
 8001688:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800168c:	685c      	ldr	r4, [r3, #4]
 800168e:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 8001692:	f7fe fda3 	bl	80001dc <strlen>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	f8d7 146c 	ldr.w	r1, [r7, #1132]	@ 0x46c
 800169e:	4620      	mov	r0, r4
 80016a0:	f013 fd05 	bl	80150ae <memcpy>
        udp_sendto(udp_pcb, response_pbuf, &dest_ip, udp_port);
 80016a4:	4b26      	ldr	r3, [pc, #152]	@ (8001740 <udp_receive_callback+0x1ec>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <udp_receive_callback+0x1f0>)
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	4a26      	ldr	r2, [pc, #152]	@ (8001748 <udp_receive_callback+0x1f4>)
 80016ae:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 80016b2:	f011 fc09 	bl	8012ec8 <udp_sendto>
        pbuf_free(response_pbuf);
 80016b6:	f8d7 0468 	ldr.w	r0, [r7, #1128]	@ 0x468
 80016ba:	f00c fafb 	bl	800dcb4 <pbuf_free>
}
 80016be:	e1cf      	b.n	8001a60 <udp_receive_callback+0x50c>
    else if (strcmp(msg, "UNSP") == 0)
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4923      	ldr	r1, [pc, #140]	@ (8001754 <udp_receive_callback+0x200>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fd7e 	bl	80001c8 <strcmp>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d142      	bne.n	8001758 <udp_receive_callback+0x204>
      sparkFlag = 0; // Set flag to stop sparking
 80016d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <udp_receive_callback+0x1fc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
      response_pbuf = pbuf_alloc(PBUF_TRANSPORT, strlen(response_msg), PBUF_RAM);
 80016d8:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 80016dc:	f7fe fd7e 	bl	80001dc <strlen>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	2200      	movs	r2, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	2000      	movs	r0, #0
 80016ea:	f00b ff6b 	bl	800d5c4 <pbuf_alloc>
 80016ee:	f8c7 0468 	str.w	r0, [r7, #1128]	@ 0x468
      if (response_pbuf != NULL)
 80016f2:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 81b2 	beq.w	8001a60 <udp_receive_callback+0x50c>
        memcpy(response_pbuf->payload, response_msg, strlen(response_msg));
 80016fc:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8001700:	685c      	ldr	r4, [r3, #4]
 8001702:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 8001706:	f7fe fd69 	bl	80001dc <strlen>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	f8d7 146c 	ldr.w	r1, [r7, #1132]	@ 0x46c
 8001712:	4620      	mov	r0, r4
 8001714:	f013 fccb 	bl	80150ae <memcpy>
        udp_sendto(udp_pcb, response_pbuf, &dest_ip, udp_port);
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <udp_receive_callback+0x1ec>)
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <udp_receive_callback+0x1f0>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	4a09      	ldr	r2, [pc, #36]	@ (8001748 <udp_receive_callback+0x1f4>)
 8001722:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8001726:	f011 fbcf 	bl	8012ec8 <udp_sendto>
        pbuf_free(response_pbuf);
 800172a:	f8d7 0468 	ldr.w	r0, [r7, #1128]	@ 0x468
 800172e:	f00c fac1 	bl	800dcb4 <pbuf_free>
}
 8001732:	e195      	b.n	8001a60 <udp_receive_callback+0x50c>
 8001734:	08015f38 	.word	0x08015f38
 8001738:	08015f3c 	.word	0x08015f3c
 800173c:	20000398 	.word	0x20000398
 8001740:	2000035c 	.word	0x2000035c
 8001744:	2000000e 	.word	0x2000000e
 8001748:	20000364 	.word	0x20000364
 800174c:	08015f44 	.word	0x08015f44
 8001750:	20000394 	.word	0x20000394
 8001754:	08015f48 	.word	0x08015f48
    else if (p->len == 7)
 8001758:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800175c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	895b      	ldrh	r3, [r3, #10]
 8001764:	2b07      	cmp	r3, #7
 8001766:	f040 8111 	bne.w	800198c <udp_receive_callback+0x438>
      memset(binary_string, 0, sizeof(binary_string));
 800176a:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 800176e:	2209      	movs	r2, #9
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f013 fba1 	bl	8014eba <memset>
      memcpy(binary_string, p->payload, p->len < 8 ? p->len : 8); // Copy the payload to the buffer
 8001778:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800177c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001788:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	895b      	ldrh	r3, [r3, #10]
 8001790:	2b08      	cmp	r3, #8
 8001792:	bf28      	it	cs
 8001794:	2308      	movcs	r3, #8
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 800179e:	4618      	mov	r0, r3
 80017a0:	f013 fc85 	bl	80150ae <memcpy>
      valveStatus = (uint8_t)strtol(binary_string, NULL, 2);
 80017a4:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 80017a8:	2202      	movs	r2, #2
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f013 fa33 	bl	8014c18 <strtol>
 80017b2:	4603      	mov	r3, r0
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4bad      	ldr	r3, [pc, #692]	@ (8001a6c <udp_receive_callback+0x518>)
 80017b8:	701a      	strb	r2, [r3, #0]
      bit0 = (valveStatus >> 0) & 0x01;
 80017ba:	4bac      	ldr	r3, [pc, #688]	@ (8001a6c <udp_receive_callback+0x518>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4baa      	ldr	r3, [pc, #680]	@ (8001a70 <udp_receive_callback+0x51c>)
 80017c8:	701a      	strb	r2, [r3, #0]
      bit1 = (valveStatus >> 1) & 0x01;
 80017ca:	4ba8      	ldr	r3, [pc, #672]	@ (8001a6c <udp_receive_callback+0x518>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4ba6      	ldr	r3, [pc, #664]	@ (8001a74 <udp_receive_callback+0x520>)
 80017dc:	701a      	strb	r2, [r3, #0]
      bit2 = (valveStatus >> 2) & 0x01;
 80017de:	4ba3      	ldr	r3, [pc, #652]	@ (8001a6c <udp_receive_callback+0x518>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001a78 <udp_receive_callback+0x524>)
 80017f0:	701a      	strb	r2, [r3, #0]
      bit3 = (valveStatus >> 3) & 0x01;
 80017f2:	4b9e      	ldr	r3, [pc, #632]	@ (8001a6c <udp_receive_callback+0x518>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	08db      	lsrs	r3, r3, #3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b9e      	ldr	r3, [pc, #632]	@ (8001a7c <udp_receive_callback+0x528>)
 8001804:	701a      	strb	r2, [r3, #0]
      bit4 = (valveStatus >> 4) & 0x01;
 8001806:	4b99      	ldr	r3, [pc, #612]	@ (8001a6c <udp_receive_callback+0x518>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4b9a      	ldr	r3, [pc, #616]	@ (8001a80 <udp_receive_callback+0x52c>)
 8001818:	701a      	strb	r2, [r3, #0]
      bit5 = (valveStatus >> 5) & 0x01;
 800181a:	4b94      	ldr	r3, [pc, #592]	@ (8001a6c <udp_receive_callback+0x518>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b96      	ldr	r3, [pc, #600]	@ (8001a84 <udp_receive_callback+0x530>)
 800182c:	701a      	strb	r2, [r3, #0]
      bit6 = (valveStatus >> 6) & 0x01;
 800182e:	4b8f      	ldr	r3, [pc, #572]	@ (8001a6c <udp_receive_callback+0x518>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b92      	ldr	r3, [pc, #584]	@ (8001a88 <udp_receive_callback+0x534>)
 8001840:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOF, SV1_Pin, (valveStatus & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);	//NC
 8001842:	4b8a      	ldr	r3, [pc, #552]	@ (8001a6c <udp_receive_callback+0x518>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf14      	ite	ne
 8001850:	2301      	movne	r3, #1
 8001852:	2300      	moveq	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800185c:	488b      	ldr	r0, [pc, #556]	@ (8001a8c <udp_receive_callback+0x538>)
 800185e:	f004 fdb5 	bl	80063cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOE, SV2_Pin, (valveStatus & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);	//NC
 8001862:	4b82      	ldr	r3, [pc, #520]	@ (8001a6c <udp_receive_callback+0x518>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf14      	ite	ne
 8001870:	2301      	movne	r3, #1
 8001872:	2300      	moveq	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	461a      	mov	r2, r3
 8001878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800187c:	4884      	ldr	r0, [pc, #528]	@ (8001a90 <udp_receive_callback+0x53c>)
 800187e:	f004 fda5 	bl	80063cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOE, SV3_Pin, (valveStatus & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);	//NC
 8001882:	4b7a      	ldr	r3, [pc, #488]	@ (8001a6c <udp_receive_callback+0x518>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800189c:	487c      	ldr	r0, [pc, #496]	@ (8001a90 <udp_receive_callback+0x53c>)
 800189e:	f004 fd95 	bl	80063cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOF, SV4_Pin, (valveStatus & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);	//NC
 80018a2:	4b72      	ldr	r3, [pc, #456]	@ (8001a6c <udp_receive_callback+0x518>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018bc:	4873      	ldr	r0, [pc, #460]	@ (8001a8c <udp_receive_callback+0x538>)
 80018be:	f004 fd85 	bl	80063cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOE, SV5_Pin, (valveStatus & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);	//NC
 80018c2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a6c <udp_receive_callback+0x518>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf14      	ite	ne
 80018d0:	2301      	movne	r3, #1
 80018d2:	2300      	moveq	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018dc:	486c      	ldr	r0, [pc, #432]	@ (8001a90 <udp_receive_callback+0x53c>)
 80018de:	f004 fd75 	bl	80063cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOF, SV6_Pin, (valveStatus & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);	//NC
 80018e2:	4b62      	ldr	r3, [pc, #392]	@ (8001a6c <udp_receive_callback+0x518>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf14      	ite	ne
 80018f0:	2301      	movne	r3, #1
 80018f2:	2300      	moveq	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018fc:	4863      	ldr	r0, [pc, #396]	@ (8001a8c <udp_receive_callback+0x538>)
 80018fe:	f004 fd65 	bl	80063cc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOG, SV7_Pin, (valveStatus & 0x40) ? GPIO_PIN_RESET : GPIO_PIN_SET);	//NO
 8001902:	4b5a      	ldr	r3, [pc, #360]	@ (8001a6c <udp_receive_callback+0x518>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800191c:	485d      	ldr	r0, [pc, #372]	@ (8001a94 <udp_receive_callback+0x540>)
 800191e:	f004 fd55 	bl	80063cc <HAL_GPIO_WritePin>
      pbuf_free(p);
 8001922:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001926:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f00c f9c2 	bl	800dcb4 <pbuf_free>
      response_pbuf = pbuf_alloc(PBUF_TRANSPORT, strlen(response_msg), PBUF_RAM);
 8001930:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 8001934:	f7fe fc52 	bl	80001dc <strlen>
 8001938:	4603      	mov	r3, r0
 800193a:	b29b      	uxth	r3, r3
 800193c:	2200      	movs	r2, #0
 800193e:	4619      	mov	r1, r3
 8001940:	2000      	movs	r0, #0
 8001942:	f00b fe3f 	bl	800d5c4 <pbuf_alloc>
 8001946:	f8c7 0468 	str.w	r0, [r7, #1128]	@ 0x468
      if (response_pbuf != NULL)
 800194a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8086 	beq.w	8001a60 <udp_receive_callback+0x50c>
        memcpy(response_pbuf->payload, response_msg, strlen(response_msg));
 8001954:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8001958:	685c      	ldr	r4, [r3, #4]
 800195a:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 800195e:	f7fe fc3d 	bl	80001dc <strlen>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	f8d7 146c 	ldr.w	r1, [r7, #1132]	@ 0x46c
 800196a:	4620      	mov	r0, r4
 800196c:	f013 fb9f 	bl	80150ae <memcpy>
        udp_sendto(udp_pcb, response_pbuf, &dest_ip, udp_port);
 8001970:	4b49      	ldr	r3, [pc, #292]	@ (8001a98 <udp_receive_callback+0x544>)
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <udp_receive_callback+0x548>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	4a49      	ldr	r2, [pc, #292]	@ (8001aa0 <udp_receive_callback+0x54c>)
 800197a:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 800197e:	f011 faa3 	bl	8012ec8 <udp_sendto>
        pbuf_free(response_pbuf);
 8001982:	f8d7 0468 	ldr.w	r0, [r7, #1128]	@ 0x468
 8001986:	f00c f995 	bl	800dcb4 <pbuf_free>
}
 800198a:	e069      	b.n	8001a60 <udp_receive_callback+0x50c>
    else if(p->len > 7)
 800198c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001990:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	895b      	ldrh	r3, [r3, #10]
 8001998:	2b07      	cmp	r3, #7
 800199a:	d961      	bls.n	8001a60 <udp_receive_callback+0x50c>
      char message[1000] = {0};
 800199c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80019a0:	f5a3 737f 	sub.w	r3, r3, #1020	@ 0x3fc
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	3304      	adds	r3, #4
 80019aa:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f013 fa82 	bl	8014eba <memset>
      strncpy(message, (char*)p->payload, p->len);
 80019b6:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80019ba:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80019c6:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	895b      	ldrh	r3, [r3, #10]
 80019ce:	461a      	mov	r2, r3
 80019d0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80019d4:	4618      	mov	r0, r3
 80019d6:	f013 fa78 	bl	8014eca <strncpy>
      pbuf_free(p);
 80019da:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80019de:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	f00c f966 	bl	800dcb4 <pbuf_free>
      sparkFlag=1;
 80019e8:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa4 <udp_receive_callback+0x550>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	701a      	strb	r2, [r3, #0]
      sequenceFlag=1;
 80019ee:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <udp_receive_callback+0x554>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
      parseAndStore(message);
 80019f4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f9ad 	bl	8001d58 <parseAndStore>
      sequenceTime = HAL_GetTick(); // Reference time of the test
 80019fe:	f002 f9c1 	bl	8003d84 <HAL_GetTick>
 8001a02:	4603      	mov	r3, r0
 8001a04:	4a29      	ldr	r2, [pc, #164]	@ (8001aac <udp_receive_callback+0x558>)
 8001a06:	6013      	str	r3, [r2, #0]
      response_pbuf = pbuf_alloc(PBUF_TRANSPORT, strlen(response_msg), PBUF_RAM);
 8001a08:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 8001a0c:	f7fe fbe6 	bl	80001dc <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	4619      	mov	r1, r3
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f00b fdd3 	bl	800d5c4 <pbuf_alloc>
 8001a1e:	f8c7 0468 	str.w	r0, [r7, #1128]	@ 0x468
    	if (response_pbuf != NULL)
 8001a22:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d01a      	beq.n	8001a60 <udp_receive_callback+0x50c>
    		memcpy(response_pbuf->payload, response_msg, strlen(response_msg));
 8001a2a:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8001a2e:	685c      	ldr	r4, [r3, #4]
 8001a30:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 8001a34:	f7fe fbd2 	bl	80001dc <strlen>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f8d7 146c 	ldr.w	r1, [r7, #1132]	@ 0x46c
 8001a40:	4620      	mov	r0, r4
 8001a42:	f013 fb34 	bl	80150ae <memcpy>
    		udp_sendto(udp_pcb, response_pbuf, &dest_ip, udp_port);
 8001a46:	4b14      	ldr	r3, [pc, #80]	@ (8001a98 <udp_receive_callback+0x544>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <udp_receive_callback+0x548>)
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	4a14      	ldr	r2, [pc, #80]	@ (8001aa0 <udp_receive_callback+0x54c>)
 8001a50:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8001a54:	f011 fa38 	bl	8012ec8 <udp_sendto>
    		pbuf_free(response_pbuf);
 8001a58:	f8d7 0468 	ldr.w	r0, [r7, #1128]	@ 0x468
 8001a5c:	f00c f92a 	bl	800dcb4 <pbuf_free>
}
 8001a60:	bf00      	nop
 8001a62:	f207 4774 	addw	r7, r7, #1140	@ 0x474
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd90      	pop	{r4, r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200003a0 	.word	0x200003a0
 8001a70:	200003a1 	.word	0x200003a1
 8001a74:	200003a2 	.word	0x200003a2
 8001a78:	200003a3 	.word	0x200003a3
 8001a7c:	200003a4 	.word	0x200003a4
 8001a80:	200003a5 	.word	0x200003a5
 8001a84:	200003a6 	.word	0x200003a6
 8001a88:	200003a7 	.word	0x200003a7
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40021800 	.word	0x40021800
 8001a98:	2000035c 	.word	0x2000035c
 8001a9c:	2000000e 	.word	0x2000000e
 8001aa0:	20000364 	.word	0x20000364
 8001aa4:	20000394 	.word	0x20000394
 8001aa8:	20000395 	.word	0x20000395
 8001aac:	2000039c 	.word	0x2000039c

08001ab0 <sequence>:
//--------------------------------------------------------------------
//                Sequence related functions
//--------------------------------------------------------------------
// Sequence control
void sequence()
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
	uint32_t previousTick = HAL_GetTick();
 8001ab6:	f002 f965 	bl	8003d84 <HAL_GetTick>
 8001aba:	60f8      	str	r0, [r7, #12]
  // Check for emergency
	if (emergencyFlag)
 8001abc:	4b8d      	ldr	r3, [pc, #564]	@ (8001cf4 <sequence+0x244>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <sequence+0x22>
	{
		sequenceFlag=0;
 8001ac4:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf8 <sequence+0x248>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
		sparkFlag=0;
 8001aca:	4b8c      	ldr	r3, [pc, #560]	@ (8001cfc <sequence+0x24c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
    		// Free the response pbuf
    		pbuf_free(sequence_pbuf);
    	}
    }
  }
}
 8001ad0:	e10b      	b.n	8001cea <sequence+0x23a>
    if (previousTick-sequenceTime>list0[0] && list0[0]!=0)
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	@ (8001d00 <sequence+0x250>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	4a8a      	ldr	r2, [pc, #552]	@ (8001d04 <sequence+0x254>)
 8001adc:	8812      	ldrh	r2, [r2, #0]
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d913      	bls.n	8001b0a <sequence+0x5a>
 8001ae2:	4b88      	ldr	r3, [pc, #544]	@ (8001d04 <sequence+0x254>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00f      	beq.n	8001b0a <sequence+0x5a>
      HAL_GPIO_TogglePin(GPIOF, SV1_Pin);
 8001aea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aee:	4886      	ldr	r0, [pc, #536]	@ (8001d08 <sequence+0x258>)
 8001af0:	f004 fc84 	bl	80063fc <HAL_GPIO_TogglePin>
      bit0 ^= 1;
 8001af4:	4b85      	ldr	r3, [pc, #532]	@ (8001d0c <sequence+0x25c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f083 0301 	eor.w	r3, r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b82      	ldr	r3, [pc, #520]	@ (8001d0c <sequence+0x25c>)
 8001b02:	701a      	strb	r2, [r3, #0]
      removeProcessedValue(list0);
 8001b04:	487f      	ldr	r0, [pc, #508]	@ (8001d04 <sequence+0x254>)
 8001b06:	f000 f9b5 	bl	8001e74 <removeProcessedValue>
    if (previousTick-sequenceTime>list1[0] && list1[0]!=0)
 8001b0a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d00 <sequence+0x250>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	4a7f      	ldr	r2, [pc, #508]	@ (8001d10 <sequence+0x260>)
 8001b14:	8812      	ldrh	r2, [r2, #0]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d913      	bls.n	8001b42 <sequence+0x92>
 8001b1a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d10 <sequence+0x260>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00f      	beq.n	8001b42 <sequence+0x92>
      HAL_GPIO_TogglePin(GPIOE, SV2_Pin);
 8001b22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b26:	487b      	ldr	r0, [pc, #492]	@ (8001d14 <sequence+0x264>)
 8001b28:	f004 fc68 	bl	80063fc <HAL_GPIO_TogglePin>
      bit1 ^= 1;
 8001b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8001d18 <sequence+0x268>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	f083 0301 	eor.w	r3, r3, #1
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	4b77      	ldr	r3, [pc, #476]	@ (8001d18 <sequence+0x268>)
 8001b3a:	701a      	strb	r2, [r3, #0]
      removeProcessedValue(list1);
 8001b3c:	4874      	ldr	r0, [pc, #464]	@ (8001d10 <sequence+0x260>)
 8001b3e:	f000 f999 	bl	8001e74 <removeProcessedValue>
    if (previousTick-sequenceTime>list2[0] && list2[0]!=0)
 8001b42:	4b6f      	ldr	r3, [pc, #444]	@ (8001d00 <sequence+0x250>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	4a74      	ldr	r2, [pc, #464]	@ (8001d1c <sequence+0x26c>)
 8001b4c:	8812      	ldrh	r2, [r2, #0]
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d913      	bls.n	8001b7a <sequence+0xca>
 8001b52:	4b72      	ldr	r3, [pc, #456]	@ (8001d1c <sequence+0x26c>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00f      	beq.n	8001b7a <sequence+0xca>
      HAL_GPIO_TogglePin(GPIOE, SV3_Pin);
 8001b5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b5e:	486d      	ldr	r0, [pc, #436]	@ (8001d14 <sequence+0x264>)
 8001b60:	f004 fc4c 	bl	80063fc <HAL_GPIO_TogglePin>
      bit2 ^= 1;
 8001b64:	4b6e      	ldr	r3, [pc, #440]	@ (8001d20 <sequence+0x270>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f083 0301 	eor.w	r3, r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b6b      	ldr	r3, [pc, #428]	@ (8001d20 <sequence+0x270>)
 8001b72:	701a      	strb	r2, [r3, #0]
      removeProcessedValue(list2);
 8001b74:	4869      	ldr	r0, [pc, #420]	@ (8001d1c <sequence+0x26c>)
 8001b76:	f000 f97d 	bl	8001e74 <removeProcessedValue>
    if (previousTick-sequenceTime>list3[0] && list3[0]!=0)
 8001b7a:	4b61      	ldr	r3, [pc, #388]	@ (8001d00 <sequence+0x250>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	4a68      	ldr	r2, [pc, #416]	@ (8001d24 <sequence+0x274>)
 8001b84:	8812      	ldrh	r2, [r2, #0]
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d913      	bls.n	8001bb2 <sequence+0x102>
 8001b8a:	4b66      	ldr	r3, [pc, #408]	@ (8001d24 <sequence+0x274>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00f      	beq.n	8001bb2 <sequence+0x102>
      HAL_GPIO_TogglePin(GPIOF, SV3_Pin);
 8001b92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b96:	485c      	ldr	r0, [pc, #368]	@ (8001d08 <sequence+0x258>)
 8001b98:	f004 fc30 	bl	80063fc <HAL_GPIO_TogglePin>
      bit3 ^= 1;
 8001b9c:	4b62      	ldr	r3, [pc, #392]	@ (8001d28 <sequence+0x278>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f083 0301 	eor.w	r3, r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8001d28 <sequence+0x278>)
 8001baa:	701a      	strb	r2, [r3, #0]
      removeProcessedValue(list3);
 8001bac:	485d      	ldr	r0, [pc, #372]	@ (8001d24 <sequence+0x274>)
 8001bae:	f000 f961 	bl	8001e74 <removeProcessedValue>
    if (previousTick-sequenceTime>list4[0] && list4[0]!=0)
 8001bb2:	4b53      	ldr	r3, [pc, #332]	@ (8001d00 <sequence+0x250>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	4a5c      	ldr	r2, [pc, #368]	@ (8001d2c <sequence+0x27c>)
 8001bbc:	8812      	ldrh	r2, [r2, #0]
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d913      	bls.n	8001bea <sequence+0x13a>
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d2c <sequence+0x27c>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00f      	beq.n	8001bea <sequence+0x13a>
      HAL_GPIO_TogglePin(GPIOE, SV4_Pin);
 8001bca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bce:	4851      	ldr	r0, [pc, #324]	@ (8001d14 <sequence+0x264>)
 8001bd0:	f004 fc14 	bl	80063fc <HAL_GPIO_TogglePin>
      bit4 ^= 1;
 8001bd4:	4b56      	ldr	r3, [pc, #344]	@ (8001d30 <sequence+0x280>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	f083 0301 	eor.w	r3, r3, #1
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b53      	ldr	r3, [pc, #332]	@ (8001d30 <sequence+0x280>)
 8001be2:	701a      	strb	r2, [r3, #0]
      removeProcessedValue(list4);
 8001be4:	4851      	ldr	r0, [pc, #324]	@ (8001d2c <sequence+0x27c>)
 8001be6:	f000 f945 	bl	8001e74 <removeProcessedValue>
    if (previousTick-sequenceTime>list5[0] && list5[0]!=0)
 8001bea:	4b45      	ldr	r3, [pc, #276]	@ (8001d00 <sequence+0x250>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	4a50      	ldr	r2, [pc, #320]	@ (8001d34 <sequence+0x284>)
 8001bf4:	8812      	ldrh	r2, [r2, #0]
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d913      	bls.n	8001c22 <sequence+0x172>
 8001bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <sequence+0x284>)
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00f      	beq.n	8001c22 <sequence+0x172>
      HAL_GPIO_TogglePin(GPIOF, SV5_Pin);
 8001c02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c06:	4840      	ldr	r0, [pc, #256]	@ (8001d08 <sequence+0x258>)
 8001c08:	f004 fbf8 	bl	80063fc <HAL_GPIO_TogglePin>
      bit5 ^= 1;
 8001c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <sequence+0x288>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	f083 0301 	eor.w	r3, r3, #1
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b47      	ldr	r3, [pc, #284]	@ (8001d38 <sequence+0x288>)
 8001c1a:	701a      	strb	r2, [r3, #0]
      removeProcessedValue(list5);
 8001c1c:	4845      	ldr	r0, [pc, #276]	@ (8001d34 <sequence+0x284>)
 8001c1e:	f000 f929 	bl	8001e74 <removeProcessedValue>
    if (previousTick-sequenceTime>list6[0] && list6[0]!=0)
 8001c22:	4b37      	ldr	r3, [pc, #220]	@ (8001d00 <sequence+0x250>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	4a44      	ldr	r2, [pc, #272]	@ (8001d3c <sequence+0x28c>)
 8001c2c:	8812      	ldrh	r2, [r2, #0]
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d913      	bls.n	8001c5a <sequence+0x1aa>
 8001c32:	4b42      	ldr	r3, [pc, #264]	@ (8001d3c <sequence+0x28c>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00f      	beq.n	8001c5a <sequence+0x1aa>
      HAL_GPIO_TogglePin(GPIOG, SV6_Pin);
 8001c3a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c3e:	4840      	ldr	r0, [pc, #256]	@ (8001d40 <sequence+0x290>)
 8001c40:	f004 fbdc 	bl	80063fc <HAL_GPIO_TogglePin>
      bit6 ^= 1;
 8001c44:	4b3f      	ldr	r3, [pc, #252]	@ (8001d44 <sequence+0x294>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f083 0301 	eor.w	r3, r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b3c      	ldr	r3, [pc, #240]	@ (8001d44 <sequence+0x294>)
 8001c52:	701a      	strb	r2, [r3, #0]
      removeProcessedValue(list6);
 8001c54:	4839      	ldr	r0, [pc, #228]	@ (8001d3c <sequence+0x28c>)
 8001c56:	f000 f90d 	bl	8001e74 <removeProcessedValue>
    if (list0[0]==0 && list1[0]==0 && list2[0]==0 && list3[0]==0 && list4[0]==0 && list5[0]==0 && list6[0]==0)
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <sequence+0x254>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d143      	bne.n	8001cea <sequence+0x23a>
 8001c62:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <sequence+0x260>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d13f      	bne.n	8001cea <sequence+0x23a>
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d1c <sequence+0x26c>)
 8001c6c:	881b      	ldrh	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d13b      	bne.n	8001cea <sequence+0x23a>
 8001c72:	4b2c      	ldr	r3, [pc, #176]	@ (8001d24 <sequence+0x274>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d137      	bne.n	8001cea <sequence+0x23a>
 8001c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <sequence+0x27c>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d133      	bne.n	8001cea <sequence+0x23a>
 8001c82:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <sequence+0x284>)
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d12f      	bne.n	8001cea <sequence+0x23a>
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <sequence+0x28c>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12b      	bne.n	8001cea <sequence+0x23a>
      sparkFlag=0;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <sequence+0x24c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
      sequenceFlag=0;
 8001c98:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <sequence+0x248>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
	    const char *sequence_msg = "DONE";
 8001c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <sequence+0x298>)
 8001ca0:	60bb      	str	r3, [r7, #8]
      sequence_pbuf = pbuf_alloc(PBUF_TRANSPORT, strlen(sequence_msg), PBUF_RAM);
 8001ca2:	68b8      	ldr	r0, [r7, #8]
 8001ca4:	f7fe fa9a 	bl	80001dc <strlen>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2200      	movs	r2, #0
 8001cae:	4619      	mov	r1, r3
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f00b fc87 	bl	800d5c4 <pbuf_alloc>
 8001cb6:	6078      	str	r0, [r7, #4]
    	if (sequence_pbuf != NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d015      	beq.n	8001cea <sequence+0x23a>
    		memcpy(sequence_pbuf->payload, sequence_msg, strlen(sequence_msg));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685c      	ldr	r4, [r3, #4]
 8001cc2:	68b8      	ldr	r0, [r7, #8]
 8001cc4:	f7fe fa8a 	bl	80001dc <strlen>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f013 f9ed 	bl	80150ae <memcpy>
    		udp_sendto(udp_pcb, sequence_pbuf, &dest_ip, udp_port);
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <sequence+0x29c>)
 8001cd6:	6818      	ldr	r0, [r3, #0]
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <sequence+0x2a0>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d54 <sequence+0x2a4>)
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	f011 f8f2 	bl	8012ec8 <udp_sendto>
    		pbuf_free(sequence_pbuf);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f00b ffe5 	bl	800dcb4 <pbuf_free>
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000398 	.word	0x20000398
 8001cf8:	20000395 	.word	0x20000395
 8001cfc:	20000394 	.word	0x20000394
 8001d00:	2000039c 	.word	0x2000039c
 8001d04:	200003a8 	.word	0x200003a8
 8001d08:	40021400 	.word	0x40021400
 8001d0c:	200003a1 	.word	0x200003a1
 8001d10:	20000858 	.word	0x20000858
 8001d14:	40021000 	.word	0x40021000
 8001d18:	200003a2 	.word	0x200003a2
 8001d1c:	20000d08 	.word	0x20000d08
 8001d20:	200003a3 	.word	0x200003a3
 8001d24:	200011b8 	.word	0x200011b8
 8001d28:	200003a4 	.word	0x200003a4
 8001d2c:	20001668 	.word	0x20001668
 8001d30:	200003a5 	.word	0x200003a5
 8001d34:	20001b18 	.word	0x20001b18
 8001d38:	200003a6 	.word	0x200003a6
 8001d3c:	20001fc8 	.word	0x20001fc8
 8001d40:	40021800 	.word	0x40021800
 8001d44:	200003a7 	.word	0x200003a7
 8001d48:	08015f50 	.word	0x08015f50
 8001d4c:	2000035c 	.word	0x2000035c
 8001d50:	2000000e 	.word	0x2000000e
 8001d54:	20000364 	.word	0x20000364

08001d58 <parseAndStore>:

// Parse the message into multiple arrays
void parseAndStore(char *message)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    char *token;
    int listIndex = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
    int currentList = 0; // Start storing in list1
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]

    // Parse the message using strtok
    token = strtok(message, ",");
 8001d68:	4939      	ldr	r1, [pc, #228]	@ (8001e50 <parseAndStore+0xf8>)
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f013 f8c0 	bl	8014ef0 <strtok>
 8001d70:	6178      	str	r0, [r7, #20]
    while (token != NULL)
 8001d72:	e065      	b.n	8001e40 <parseAndStore+0xe8>
    {
        if (strcmp(token, "E") == 0)
 8001d74:	4937      	ldr	r1, [pc, #220]	@ (8001e54 <parseAndStore+0xfc>)
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7fe fa26 	bl	80001c8 <strcmp>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d105      	bne.n	8001d8e <parseAndStore+0x36>
        {
            currentList++; // Switch to the next list
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
            listIndex = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	e053      	b.n	8001e36 <parseAndStore+0xde>
        }
        else
        {
            // Convert token to integer and store in current list
            uint16_t number = atoi(token);
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f012 fe06 	bl	80149a0 <atoi>
 8001d94:	4603      	mov	r3, r0
 8001d96:	817b      	strh	r3, [r7, #10]
            switch (currentList)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	2b06      	cmp	r3, #6
 8001d9e:	d849      	bhi.n	8001e34 <parseAndStore+0xdc>
 8001da0:	a201      	add	r2, pc, #4	@ (adr r2, 8001da8 <parseAndStore+0x50>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001dc5 	.word	0x08001dc5
 8001dac:	08001dd5 	.word	0x08001dd5
 8001db0:	08001de5 	.word	0x08001de5
 8001db4:	08001df5 	.word	0x08001df5
 8001db8:	08001e05 	.word	0x08001e05
 8001dbc:	08001e15 	.word	0x08001e15
 8001dc0:	08001e25 	.word	0x08001e25
            {
                case 1:
                    list0[listIndex++] = number;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	613a      	str	r2, [r7, #16]
 8001dca:	4923      	ldr	r1, [pc, #140]	@ (8001e58 <parseAndStore+0x100>)
 8001dcc:	897a      	ldrh	r2, [r7, #10]
 8001dce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    break;
 8001dd2:	e030      	b.n	8001e36 <parseAndStore+0xde>
                case 2:
                    list1[listIndex++] = number;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	613a      	str	r2, [r7, #16]
 8001dda:	4920      	ldr	r1, [pc, #128]	@ (8001e5c <parseAndStore+0x104>)
 8001ddc:	897a      	ldrh	r2, [r7, #10]
 8001dde:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    break;
 8001de2:	e028      	b.n	8001e36 <parseAndStore+0xde>
                case 3:
                    list2[listIndex++] = number;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1c5a      	adds	r2, r3, #1
 8001de8:	613a      	str	r2, [r7, #16]
 8001dea:	491d      	ldr	r1, [pc, #116]	@ (8001e60 <parseAndStore+0x108>)
 8001dec:	897a      	ldrh	r2, [r7, #10]
 8001dee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    break;
 8001df2:	e020      	b.n	8001e36 <parseAndStore+0xde>
                case 4:
                    list3[listIndex++] = number;
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	613a      	str	r2, [r7, #16]
 8001dfa:	491a      	ldr	r1, [pc, #104]	@ (8001e64 <parseAndStore+0x10c>)
 8001dfc:	897a      	ldrh	r2, [r7, #10]
 8001dfe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    break;
 8001e02:	e018      	b.n	8001e36 <parseAndStore+0xde>
                case 5:
                    list4[listIndex++] = number;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	613a      	str	r2, [r7, #16]
 8001e0a:	4917      	ldr	r1, [pc, #92]	@ (8001e68 <parseAndStore+0x110>)
 8001e0c:	897a      	ldrh	r2, [r7, #10]
 8001e0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    break;
 8001e12:	e010      	b.n	8001e36 <parseAndStore+0xde>
                case 6:
                    list5[listIndex++] = number;
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	613a      	str	r2, [r7, #16]
 8001e1a:	4914      	ldr	r1, [pc, #80]	@ (8001e6c <parseAndStore+0x114>)
 8001e1c:	897a      	ldrh	r2, [r7, #10]
 8001e1e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    break;
 8001e22:	e008      	b.n	8001e36 <parseAndStore+0xde>
                case 7:
                    list6[listIndex++] = number;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	613a      	str	r2, [r7, #16]
 8001e2a:	4911      	ldr	r1, [pc, #68]	@ (8001e70 <parseAndStore+0x118>)
 8001e2c:	897a      	ldrh	r2, [r7, #10]
 8001e2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                    break;
 8001e32:	e000      	b.n	8001e36 <parseAndStore+0xde>
                default:
                    break;
 8001e34:	bf00      	nop
            }
        }
        token = strtok(NULL, ",");
 8001e36:	4906      	ldr	r1, [pc, #24]	@ (8001e50 <parseAndStore+0xf8>)
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f013 f859 	bl	8014ef0 <strtok>
 8001e3e:	6178      	str	r0, [r7, #20]
    while (token != NULL)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d196      	bne.n	8001d74 <parseAndStore+0x1c>
    }
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	08015f58 	.word	0x08015f58
 8001e54:	08015f5c 	.word	0x08015f5c
 8001e58:	200003a8 	.word	0x200003a8
 8001e5c:	20000858 	.word	0x20000858
 8001e60:	20000d08 	.word	0x20000d08
 8001e64:	200011b8 	.word	0x200011b8
 8001e68:	20001668 	.word	0x20001668
 8001e6c:	20001b18 	.word	0x20001b18
 8001e70:	20001fc8 	.word	0x20001fc8

08001e74 <removeProcessedValue>:

// Remove time value once used for sequence
void removeProcessedValue(uint16_t *list)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < MAX_MESSAGE_LENGTH - 1; i++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	e00d      	b.n	8001e9e <removeProcessedValue+0x2a>
  {
    list[i] = list[i + 1];
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	441a      	add	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	440b      	add	r3, r1
 8001e94:	8812      	ldrh	r2, [r2, #0]
 8001e96:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < MAX_MESSAGE_LENGTH - 1; i++)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f240 2256 	movw	r2, #598	@ 0x256
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	ddec      	ble.n	8001e82 <removeProcessedValue+0xe>
  }
  list[MAX_MESSAGE_LENGTH - 1] = 0;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f203 43ae 	addw	r3, r3, #1198	@ 0x4ae
 8001eae:	2200      	movs	r2, #0
 8001eb0:	801a      	strh	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <spark>:
//--------------------------------------------------------------------
//                Other command related functions
//--------------------------------------------------------------------
// Spark control
void spark()
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(GPIOG, SV8_Pin);
 8001ec0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ec4:	4803      	ldr	r0, [pc, #12]	@ (8001ed4 <spark+0x18>)
 8001ec6:	f004 fa99 	bl	80063fc <HAL_GPIO_TogglePin>
    HAL_Delay(1000 / frequency);
 8001eca:	2064      	movs	r0, #100	@ 0x64
 8001ecc:	f001 ff64 	bl	8003d98 <HAL_Delay>
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021800 	.word	0x40021800

08001ed8 <emergency>:

// Emergency function (Stop all ongoing actions and perform emergency procedure)
void emergency()
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	// Close all the valves
	HAL_GPIO_WritePin(GPIOF, SV1_Pin,GPIO_PIN_RESET);	//NC
 8001edc:	2200      	movs	r2, #0
 8001ede:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ee2:	4828      	ldr	r0, [pc, #160]	@ (8001f84 <emergency+0xac>)
 8001ee4:	f004 fa72 	bl	80063cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SV2_Pin,GPIO_PIN_RESET);	//NC
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001eee:	4826      	ldr	r0, [pc, #152]	@ (8001f88 <emergency+0xb0>)
 8001ef0:	f004 fa6c 	bl	80063cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SV3_Pin,GPIO_PIN_RESET);	//NC
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001efa:	4823      	ldr	r0, [pc, #140]	@ (8001f88 <emergency+0xb0>)
 8001efc:	f004 fa66 	bl	80063cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, SV4_Pin,GPIO_PIN_RESET);	//NC
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f06:	481f      	ldr	r0, [pc, #124]	@ (8001f84 <emergency+0xac>)
 8001f08:	f004 fa60 	bl	80063cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, SV5_Pin,GPIO_PIN_RESET);	//NC
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f12:	481d      	ldr	r0, [pc, #116]	@ (8001f88 <emergency+0xb0>)
 8001f14:	f004 fa5a 	bl	80063cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, SV6_Pin,GPIO_PIN_RESET);	//NC
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f1e:	4819      	ldr	r0, [pc, #100]	@ (8001f84 <emergency+0xac>)
 8001f20:	f004 fa54 	bl	80063cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, SV7_Pin,GPIO_PIN_SET);		//NO
 8001f24:	2201      	movs	r2, #1
 8001f26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f2a:	4818      	ldr	r0, [pc, #96]	@ (8001f8c <emergency+0xb4>)
 8001f2c:	f004 fa4e 	bl	80063cc <HAL_GPIO_WritePin>

	// Set the bits of the valves (sent to computer)
	bit0=0;
 8001f30:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <emergency+0xb8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
	bit1=0;
 8001f36:	4b17      	ldr	r3, [pc, #92]	@ (8001f94 <emergency+0xbc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	701a      	strb	r2, [r3, #0]
	bit2=0;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	@ (8001f98 <emergency+0xc0>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
	bit3=0;
 8001f42:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <emergency+0xc4>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
	bit4=1;
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <emergency+0xc8>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]
	bit5=0;
 8001f4e:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <emergency+0xcc>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]
	bit6=0;
 8001f54:	4b14      	ldr	r3, [pc, #80]	@ (8001fa8 <emergency+0xd0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	f001 ff1c 	bl	8003d98 <HAL_Delay>

	// Open purge valve for a certain time
	HAL_GPIO_WritePin(GPIOF, SV4_Pin,GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f66:	4807      	ldr	r0, [pc, #28]	@ (8001f84 <emergency+0xac>)
 8001f68:	f004 fa30 	bl	80063cc <HAL_GPIO_WritePin>
	HAL_Delay(purge_time);
 8001f6c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001f70:	f001 ff12 	bl	8003d98 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, SV4_Pin,GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f7a:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <emergency+0xac>)
 8001f7c:	f004 fa26 	bl	80063cc <HAL_GPIO_WritePin>
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021400 	.word	0x40021400
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	40021800 	.word	0x40021800
 8001f90:	200003a1 	.word	0x200003a1
 8001f94:	200003a2 	.word	0x200003a2
 8001f98:	200003a3 	.word	0x200003a3
 8001f9c:	200003a4 	.word	0x200003a4
 8001fa0:	200003a5 	.word	0x200003a5
 8001fa4:	200003a6 	.word	0x200003a6
 8001fa8:	200003a7 	.word	0x200003a7

08001fac <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b092      	sub	sp, #72	@ 0x48
 8001fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb2:	f107 0318 	add.w	r3, r7, #24
 8001fb6:	2230      	movs	r2, #48	@ 0x30
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f012 ff7d 	bl	8014eba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fda:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001fe4:	23f0      	movs	r3, #240	@ 0xf0
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001fec:	2305      	movs	r3, #5
 8001fee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ff0:	f107 0318 	add.w	r3, r7, #24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f006 faa3 	bl	8008540 <HAL_RCC_OscConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002000:	f000 fa32 	bl	8002468 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002004:	230f      	movs	r3, #15
 8002006:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002008:	2302      	movs	r3, #2
 800200a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002010:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002014:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002016:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800201a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800201c:	1d3b      	adds	r3, r7, #4
 800201e:	2103      	movs	r1, #3
 8002020:	4618      	mov	r0, r3
 8002022:	f006 fce1 	bl	80089e8 <HAL_RCC_ClockConfig>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800202c:	f000 fa1c 	bl	8002468 <Error_Handler>
  }
}
 8002030:	bf00      	nop
 8002032:	3748      	adds	r7, #72	@ 0x48
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <MX_ADC1_Init>:

static void MX_ADC1_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800203e:	463b      	mov	r3, r7
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]

  hadc1.Instance = ADC1;
 800204a:	4b2f      	ldr	r3, [pc, #188]	@ (8002108 <MX_ADC1_Init+0xd0>)
 800204c:	4a2f      	ldr	r2, [pc, #188]	@ (800210c <MX_ADC1_Init+0xd4>)
 800204e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002050:	4b2d      	ldr	r3, [pc, #180]	@ (8002108 <MX_ADC1_Init+0xd0>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002056:	4b2c      	ldr	r3, [pc, #176]	@ (8002108 <MX_ADC1_Init+0xd0>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800205c:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <MX_ADC1_Init+0xd0>)
 800205e:	2201      	movs	r2, #1
 8002060:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002062:	4b29      	ldr	r3, [pc, #164]	@ (8002108 <MX_ADC1_Init+0xd0>)
 8002064:	2200      	movs	r2, #0
 8002066:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002068:	4b27      	ldr	r3, [pc, #156]	@ (8002108 <MX_ADC1_Init+0xd0>)
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002070:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <MX_ADC1_Init+0xd0>)
 8002072:	2200      	movs	r2, #0
 8002074:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002076:	4b24      	ldr	r3, [pc, #144]	@ (8002108 <MX_ADC1_Init+0xd0>)
 8002078:	4a25      	ldr	r2, [pc, #148]	@ (8002110 <MX_ADC1_Init+0xd8>)
 800207a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800207c:	4b22      	ldr	r3, [pc, #136]	@ (8002108 <MX_ADC1_Init+0xd0>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002082:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <MX_ADC1_Init+0xd0>)
 8002084:	2203      	movs	r2, #3
 8002086:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002088:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <MX_ADC1_Init+0xd0>)
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002090:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <MX_ADC1_Init+0xd0>)
 8002092:	2201      	movs	r2, #1
 8002094:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002096:	481c      	ldr	r0, [pc, #112]	@ (8002108 <MX_ADC1_Init+0xd0>)
 8002098:	f001 fea2 	bl	8003de0 <HAL_ADC_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80020a2:	f000 f9e1 	bl	8002468 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_3;
 80020a6:	2303      	movs	r3, #3
 80020a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020aa:	2301      	movs	r3, #1
 80020ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b2:	463b      	mov	r3, r7
 80020b4:	4619      	mov	r1, r3
 80020b6:	4814      	ldr	r0, [pc, #80]	@ (8002108 <MX_ADC1_Init+0xd0>)
 80020b8:	f001 ffd0 	bl	800405c <HAL_ADC_ConfigChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80020c2:	f000 f9d1 	bl	8002468 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_10;
 80020c6:	230a      	movs	r3, #10
 80020c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80020ca:	2302      	movs	r3, #2
 80020cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ce:	463b      	mov	r3, r7
 80020d0:	4619      	mov	r1, r3
 80020d2:	480d      	ldr	r0, [pc, #52]	@ (8002108 <MX_ADC1_Init+0xd0>)
 80020d4:	f001 ffc2 	bl	800405c <HAL_ADC_ConfigChannel>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80020de:	f000 f9c3 	bl	8002468 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_13;
 80020e2:	230d      	movs	r3, #13
 80020e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80020e6:	2303      	movs	r3, #3
 80020e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ea:	463b      	mov	r3, r7
 80020ec:	4619      	mov	r1, r3
 80020ee:	4806      	ldr	r0, [pc, #24]	@ (8002108 <MX_ADC1_Init+0xd0>)
 80020f0:	f001 ffb4 	bl	800405c <HAL_ADC_ConfigChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80020fa:	f000 f9b5 	bl	8002468 <Error_Handler>
  }
}
 80020fe:	bf00      	nop
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000020c 	.word	0x2000020c
 800210c:	40012000 	.word	0x40012000
 8002110:	0f000001 	.word	0x0f000001

08002114 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8002118:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <MX_I2C1_Init+0x50>)
 800211a:	4a13      	ldr	r2, [pc, #76]	@ (8002168 <MX_I2C1_Init+0x54>)
 800211c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800211e:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <MX_I2C1_Init+0x50>)
 8002120:	4a12      	ldr	r2, [pc, #72]	@ (800216c <MX_I2C1_Init+0x58>)
 8002122:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002124:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <MX_I2C1_Init+0x50>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MX_I2C1_Init+0x50>)
 800212c:	2200      	movs	r2, #0
 800212e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <MX_I2C1_Init+0x50>)
 8002132:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002136:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002138:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <MX_I2C1_Init+0x50>)
 800213a:	2200      	movs	r2, #0
 800213c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <MX_I2C1_Init+0x50>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002144:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <MX_I2C1_Init+0x50>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <MX_I2C1_Init+0x50>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002150:	4804      	ldr	r0, [pc, #16]	@ (8002164 <MX_I2C1_Init+0x50>)
 8002152:	f004 f985 	bl	8006460 <HAL_I2C_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800215c:	f000 f984 	bl	8002468 <Error_Handler>
  }
}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200002b4 	.word	0x200002b4
 8002168:	40005400 	.word	0x40005400
 800216c:	000186a0 	.word	0x000186a0

08002170 <MX_I2C2_Init>:

static void MX_I2C2_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  hi2c2.Instance = I2C2;
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <MX_I2C2_Init+0x50>)
 8002176:	4a13      	ldr	r2, [pc, #76]	@ (80021c4 <MX_I2C2_Init+0x54>)
 8002178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800217a:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <MX_I2C2_Init+0x50>)
 800217c:	4a12      	ldr	r2, [pc, #72]	@ (80021c8 <MX_I2C2_Init+0x58>)
 800217e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002180:	4b0f      	ldr	r3, [pc, #60]	@ (80021c0 <MX_I2C2_Init+0x50>)
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <MX_I2C2_Init+0x50>)
 8002188:	2200      	movs	r2, #0
 800218a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800218c:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <MX_I2C2_Init+0x50>)
 800218e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002192:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002194:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <MX_I2C2_Init+0x50>)
 8002196:	2200      	movs	r2, #0
 8002198:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800219a:	4b09      	ldr	r3, [pc, #36]	@ (80021c0 <MX_I2C2_Init+0x50>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a0:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <MX_I2C2_Init+0x50>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <MX_I2C2_Init+0x50>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021ac:	4804      	ldr	r0, [pc, #16]	@ (80021c0 <MX_I2C2_Init+0x50>)
 80021ae:	f004 f957 	bl	8006460 <HAL_I2C_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021b8:	f000 f956 	bl	8002468 <Error_Handler>
  }
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000308 	.word	0x20000308
 80021c4:	40005800 	.word	0x40005800
 80021c8:	000186a0 	.word	0x000186a0

080021cc <MX_DMA_Init>:

static void MX_DMA_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <MX_DMA_Init+0x3c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	4a0b      	ldr	r2, [pc, #44]	@ (8002208 <MX_DMA_Init+0x3c>)
 80021dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <MX_DMA_Init+0x3c>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021ee:	2200      	movs	r2, #0
 80021f0:	2100      	movs	r1, #0
 80021f2:	2038      	movs	r0, #56	@ 0x38
 80021f4:	f002 fab1 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021f8:	2038      	movs	r0, #56	@ 0x38
 80021fa:	f002 faca 	bl	8004792 <HAL_NVIC_EnableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800

0800220c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08c      	sub	sp, #48	@ 0x30
 8002210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002212:	f107 031c 	add.w	r3, r7, #28
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]
 800221e:	60da      	str	r2, [r3, #12]
 8002220:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4b74      	ldr	r3, [pc, #464]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	4a73      	ldr	r2, [pc, #460]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 800222c:	f043 0304 	orr.w	r3, r3, #4
 8002230:	6313      	str	r3, [r2, #48]	@ 0x30
 8002232:	4b71      	ldr	r3, [pc, #452]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	4b6d      	ldr	r3, [pc, #436]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	4a6c      	ldr	r2, [pc, #432]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002248:	f043 0320 	orr.w	r3, r3, #32
 800224c:	6313      	str	r3, [r2, #48]	@ 0x30
 800224e:	4b6a      	ldr	r3, [pc, #424]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	4b66      	ldr	r3, [pc, #408]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a65      	ldr	r2, [pc, #404]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b63      	ldr	r3, [pc, #396]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b5f      	ldr	r3, [pc, #380]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a5e      	ldr	r2, [pc, #376]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b5c      	ldr	r3, [pc, #368]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b58      	ldr	r3, [pc, #352]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a57      	ldr	r2, [pc, #348]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b55      	ldr	r3, [pc, #340]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
 80022b2:	4b51      	ldr	r3, [pc, #324]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a50      	ldr	r2, [pc, #320]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 80022b8:	f043 0310 	orr.w	r3, r3, #16
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b4e      	ldr	r3, [pc, #312]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4b4a      	ldr	r3, [pc, #296]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	4a49      	ldr	r2, [pc, #292]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 80022d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022da:	4b47      	ldr	r3, [pc, #284]	@ (80023f8 <MX_GPIO_Init+0x1ec>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80022ec:	4843      	ldr	r0, [pc, #268]	@ (80023fc <MX_GPIO_Init+0x1f0>)
 80022ee:	f004 f86d 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SV1_Pin|SV4_Pin|SV6_Pin, GPIO_PIN_RESET);
 80022f2:	2200      	movs	r2, #0
 80022f4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80022f8:	4841      	ldr	r0, [pc, #260]	@ (8002400 <MX_GPIO_Init+0x1f4>)
 80022fa:	f004 f867 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SV2_Pin|SV3_Pin|SV5_Pin, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	f44f 5128 	mov.w	r1, #10752	@ 0x2a00
 8002304:	483f      	ldr	r0, [pc, #252]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002306:	f004 f861 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SV8_Pin|SV7_Pin, GPIO_PIN_RESET);
 800230a:	2200      	movs	r2, #0
 800230c:	f244 2140 	movw	r1, #16960	@ 0x4240
 8002310:	483d      	ldr	r0, [pc, #244]	@ (8002408 <MX_GPIO_Init+0x1fc>)
 8002312:	f004 f85b 	bl	80063cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002316:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800231a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800231c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	4837      	ldr	r0, [pc, #220]	@ (800240c <MX_GPIO_Init+0x200>)
 800232e:	f003 feaf 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002332:	f244 0381 	movw	r3, #16513	@ 0x4081
 8002336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	2301      	movs	r3, #1
 800233a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	482c      	ldr	r0, [pc, #176]	@ (80023fc <MX_GPIO_Init+0x1f0>)
 800234c:	f003 fea0 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : SV1_Pin SV4_Pin SV6_Pin */
  GPIO_InitStruct.Pin = SV1_Pin|SV4_Pin|SV6_Pin;
 8002350:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	2301      	movs	r3, #1
 8002358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	4825      	ldr	r0, [pc, #148]	@ (8002400 <MX_GPIO_Init+0x1f4>)
 800236a:	f003 fe91 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : SV2_Pin SV3_Pin SV5_Pin */
  GPIO_InitStruct.Pin = SV2_Pin|SV3_Pin|SV5_Pin;
 800236e:	f44f 5328 	mov.w	r3, #10752	@ 0x2a00
 8002372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	4619      	mov	r1, r3
 8002386:	481f      	ldr	r0, [pc, #124]	@ (8002404 <MX_GPIO_Init+0x1f8>)
 8002388:	f003 fe82 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pins : Debit1_Pin Debit2_Pin */
  GPIO_InitStruct.Pin = Debit1_Pin|Debit2_Pin;
 800238c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002392:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002398:	2301      	movs	r3, #1
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 031c 	add.w	r3, r7, #28
 80023a0:	4619      	mov	r1, r3
 80023a2:	4816      	ldr	r0, [pc, #88]	@ (80023fc <MX_GPIO_Init+0x1f0>)
 80023a4:	f003 fe74 	bl	8006090 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2017      	movs	r0, #23
 80023ae:	f002 f9d4 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023b2:	2017      	movs	r0, #23
 80023b4:	f002 f9ed 	bl	8004792 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SV8_Pin SV7_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SV8_Pin|SV7_Pin;
 80023b8:	f244 2340 	movw	r3, #16960	@ 0x4240
 80023bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023be:	2301      	movs	r3, #1
 80023c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c6:	2300      	movs	r3, #0
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	480d      	ldr	r0, [pc, #52]	@ (8002408 <MX_GPIO_Init+0x1fc>)
 80023d2:	f003 fe5d 	bl	8006090 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80023d6:	2380      	movs	r3, #128	@ 0x80
 80023d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80023e2:	f107 031c 	add.w	r3, r7, #28
 80023e6:	4619      	mov	r1, r3
 80023e8:	4807      	ldr	r0, [pc, #28]	@ (8002408 <MX_GPIO_Init+0x1fc>)
 80023ea:	f003 fe51 	bl	8006090 <HAL_GPIO_Init>

}
 80023ee:	bf00      	nop
 80023f0:	3730      	adds	r7, #48	@ 0x30
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020400 	.word	0x40020400
 8002400:	40021400 	.word	0x40021400
 8002404:	40021000 	.word	0x40021000
 8002408:	40021800 	.word	0x40021800
 800240c:	40020800 	.word	0x40020800

08002410 <HAL_GPIO_EXTI_Callback>:

// Define an interrupt when a pulse is detected on a GPIO port (function with the second highest priority)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == Debit1_Pin) {
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002420:	d104      	bne.n	800242c <HAL_GPIO_EXTI_Callback+0x1c>
	  pulseCountFS1++;
 8002422:	4b09      	ldr	r3, [pc, #36]	@ (8002448 <HAL_GPIO_EXTI_Callback+0x38>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	4a07      	ldr	r2, [pc, #28]	@ (8002448 <HAL_GPIO_EXTI_Callback+0x38>)
 800242a:	6013      	str	r3, [r2, #0]
  }
  if (GPIO_Pin == Debit2_Pin) {
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002432:	d104      	bne.n	800243e <HAL_GPIO_EXTI_Callback+0x2e>
	  pulseCountFS2++;
 8002434:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <HAL_GPIO_EXTI_Callback+0x3c>)
 800243c:	6013      	str	r3, [r2, #0]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	20000380 	.word	0x20000380
 800244c:	20000384 	.word	0x20000384

08002450 <EXTI9_5_IRQHandler>:

// Connect the interruption handler with the GPIO port
void EXTI9_5_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(Debit1_Pin);
 8002454:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002458:	f003 ffea 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Debit2_Pin);
 800245c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002460:	f003 ffe6 	bl	8006430 <HAL_GPIO_EXTI_IRQHandler>
}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}

08002468 <Error_Handler>:

void Error_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
}
 800246e:	bf00      	nop
	__disable_irq();
	while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <Error_Handler+0x8>

08002474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
 800247e:	4b0f      	ldr	r3, [pc, #60]	@ (80024bc <HAL_MspInit+0x48>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002482:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <HAL_MspInit+0x48>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002488:	6453      	str	r3, [r2, #68]	@ 0x44
 800248a:	4b0c      	ldr	r3, [pc, #48]	@ (80024bc <HAL_MspInit+0x48>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	603b      	str	r3, [r7, #0]
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_MspInit+0x48>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	4a07      	ldr	r2, [pc, #28]	@ (80024bc <HAL_MspInit+0x48>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a6:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <HAL_MspInit+0x48>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	40023800 	.word	0x40023800

080024c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3c      	ldr	r2, [pc, #240]	@ (80025d0 <HAL_ADC_MspInit+0x110>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d171      	bne.n	80025c6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	4b3b      	ldr	r3, [pc, #236]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	4a3a      	ldr	r2, [pc, #232]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 80024ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80024f2:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 80024f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b34      	ldr	r3, [pc, #208]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	4a33      	ldr	r2, [pc, #204]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002508:	f043 0304 	orr.w	r3, r3, #4
 800250c:	6313      	str	r3, [r2, #48]	@ 0x30
 800250e:	4b31      	ldr	r3, [pc, #196]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b2d      	ldr	r3, [pc, #180]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a2c      	ldr	r2, [pc, #176]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b2a      	ldr	r3, [pc, #168]	@ (80025d4 <HAL_ADC_MspInit+0x114>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002536:	2309      	movs	r3, #9
 8002538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800253a:	2303      	movs	r3, #3
 800253c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4823      	ldr	r0, [pc, #140]	@ (80025d8 <HAL_ADC_MspInit+0x118>)
 800254a:	f003 fda1 	bl	8006090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800254e:	2308      	movs	r3, #8
 8002550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002552:	2303      	movs	r3, #3
 8002554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	4619      	mov	r1, r3
 8002560:	481e      	ldr	r0, [pc, #120]	@ (80025dc <HAL_ADC_MspInit+0x11c>)
 8002562:	f003 fd95 	bl	8006090 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002566:	4b1e      	ldr	r3, [pc, #120]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002568:	4a1e      	ldr	r2, [pc, #120]	@ (80025e4 <HAL_ADC_MspInit+0x124>)
 800256a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 800256e:	2200      	movs	r2, #0
 8002570:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002572:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800257e:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002580:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002584:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002586:	4b16      	ldr	r3, [pc, #88]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002588:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800258c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800258e:	4b14      	ldr	r3, [pc, #80]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002590:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002594:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 8002598:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800259c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a4:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025aa:	480d      	ldr	r0, [pc, #52]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025ac:	f002 f90c 	bl	80047c8 <HAL_DMA_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80025b6:	f7ff ff57 	bl	8002468 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a08      	ldr	r2, [pc, #32]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025be:	639a      	str	r2, [r3, #56]	@ 0x38
 80025c0:	4a07      	ldr	r2, [pc, #28]	@ (80025e0 <HAL_ADC_MspInit+0x120>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	@ 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40012000 	.word	0x40012000
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	20000254 	.word	0x20000254
 80025e4:	40026410 	.word	0x40026410

080025e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	@ 0x30
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	605a      	str	r2, [r3, #4]
 80025fa:	609a      	str	r2, [r3, #8]
 80025fc:	60da      	str	r2, [r3, #12]
 80025fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a32      	ldr	r2, [pc, #200]	@ (80026d0 <HAL_I2C_MspInit+0xe8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d12d      	bne.n	8002666 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	4b31      	ldr	r3, [pc, #196]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a30      	ldr	r2, [pc, #192]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	4b2e      	ldr	r3, [pc, #184]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002626:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800262c:	2312      	movs	r3, #18
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002630:	2300      	movs	r3, #0
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002634:	2303      	movs	r3, #3
 8002636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002638:	2304      	movs	r3, #4
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263c:	f107 031c 	add.w	r3, r7, #28
 8002640:	4619      	mov	r1, r3
 8002642:	4825      	ldr	r0, [pc, #148]	@ (80026d8 <HAL_I2C_MspInit+0xf0>)
 8002644:	f003 fd24 	bl	8006090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 800264e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002650:	4a20      	ldr	r2, [pc, #128]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 8002652:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002656:	6413      	str	r3, [r2, #64]	@ 0x40
 8002658:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002664:	e030      	b.n	80026c8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1c      	ldr	r2, [pc, #112]	@ (80026dc <HAL_I2C_MspInit+0xf4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d12b      	bne.n	80026c8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	4b17      	ldr	r3, [pc, #92]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002678:	4a16      	ldr	r2, [pc, #88]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 800267a:	f043 0320 	orr.w	r3, r3, #32
 800267e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800268c:	2303      	movs	r3, #3
 800268e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002690:	2312      	movs	r3, #18
 8002692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800269c:	2304      	movs	r3, #4
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	480e      	ldr	r0, [pc, #56]	@ (80026e0 <HAL_I2C_MspInit+0xf8>)
 80026a8:	f003 fcf2 	bl	8006090 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	4a07      	ldr	r2, [pc, #28]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 80026b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_I2C_MspInit+0xec>)
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	bf00      	nop
 80026ca:	3730      	adds	r7, #48	@ 0x30
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40005400 	.word	0x40005400
 80026d4:	40023800 	.word	0x40023800
 80026d8:	40020400 	.word	0x40020400
 80026dc:	40005800 	.word	0x40005800
 80026e0:	40021400 	.word	0x40021400

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <NMI_Handler+0x4>

080026ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <HardFault_Handler+0x4>

080026f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <MemManage_Handler+0x4>

080026fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <BusFault_Handler+0x4>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <UsageFault_Handler+0x4>

0800270c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002734:	f001 fb14 	bl	8003d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}

0800273c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002740:	4802      	ldr	r0, [pc, #8]	@ (800274c <DMA2_Stream0_IRQHandler+0x10>)
 8002742:	f002 f947 	bl	80049d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000254 	.word	0x20000254

08002750 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002754:	4802      	ldr	r0, [pc, #8]	@ (8002760 <OTG_FS_IRQHandler+0x10>)
 8002756:	f004 fe01 	bl	800735c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20006a74 	.word	0x20006a74

08002764 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return 1;
 8002768:	2301      	movs	r3, #1
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
	...

08002774 <_kill>:

int _kill(int pid, int sig)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800277e:	4b05      	ldr	r3, [pc, #20]	@ (8002794 <_kill+0x20>)
 8002780:	2216      	movs	r2, #22
 8002782:	601a      	str	r2, [r3, #0]
  return -1;
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	2000c940 	.word	0x2000c940

08002798 <_exit>:

void _exit (int status)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027a0:	f04f 31ff 	mov.w	r1, #4294967295
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ffe5 	bl	8002774 <_kill>
  while (1) {}    /* Make sure we hang here */
 80027aa:	bf00      	nop
 80027ac:	e7fd      	b.n	80027aa <_exit+0x12>

080027ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
 80027be:	e00a      	b.n	80027d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027c0:	f3af 8000 	nop.w
 80027c4:	4601      	mov	r1, r0
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	60ba      	str	r2, [r7, #8]
 80027cc:	b2ca      	uxtb	r2, r1
 80027ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3301      	adds	r3, #1
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	dbf0      	blt.n	80027c0 <_read+0x12>
  }

  return len;
 80027de:	687b      	ldr	r3, [r7, #4]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	e009      	b.n	800280e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	60ba      	str	r2, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3301      	adds	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	dbf1      	blt.n	80027fa <_write+0x12>
  }
  return len;
 8002816:	687b      	ldr	r3, [r7, #4]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <_close>:

int _close(int file)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002846:	605a      	str	r2, [r3, #4]
  return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <_isatty>:

int _isatty(int file)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002888:	4a14      	ldr	r2, [pc, #80]	@ (80028dc <_sbrk+0x5c>)
 800288a:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <_sbrk+0x60>)
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002894:	4b13      	ldr	r3, [pc, #76]	@ (80028e4 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800289c:	4b11      	ldr	r3, [pc, #68]	@ (80028e4 <_sbrk+0x64>)
 800289e:	4a12      	ldr	r2, [pc, #72]	@ (80028e8 <_sbrk+0x68>)
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a2:	4b10      	ldr	r3, [pc, #64]	@ (80028e4 <_sbrk+0x64>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4413      	add	r3, r2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d205      	bcs.n	80028bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80028b0:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <_sbrk+0x6c>)
 80028b2:	220c      	movs	r2, #12
 80028b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	e009      	b.n	80028d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c2:	4b08      	ldr	r3, [pc, #32]	@ (80028e4 <_sbrk+0x64>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	4a06      	ldr	r2, [pc, #24]	@ (80028e4 <_sbrk+0x64>)
 80028cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20020000 	.word	0x20020000
 80028e0:	00000400 	.word	0x00000400
 80028e4:	20002478 	.word	0x20002478
 80028e8:	2000c948 	.word	0x2000c948
 80028ec:	2000c940 	.word	0x2000c940

080028f0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80028f6:	4b87      	ldr	r3, [pc, #540]	@ (8002b14 <MX_LWIP_Init+0x224>)
 80028f8:	22c0      	movs	r2, #192	@ 0xc0
 80028fa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80028fc:	4b85      	ldr	r3, [pc, #532]	@ (8002b14 <MX_LWIP_Init+0x224>)
 80028fe:	22a8      	movs	r2, #168	@ 0xa8
 8002900:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002902:	4b84      	ldr	r3, [pc, #528]	@ (8002b14 <MX_LWIP_Init+0x224>)
 8002904:	2201      	movs	r2, #1
 8002906:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8002908:	4b82      	ldr	r3, [pc, #520]	@ (8002b14 <MX_LWIP_Init+0x224>)
 800290a:	2264      	movs	r2, #100	@ 0x64
 800290c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800290e:	4b82      	ldr	r3, [pc, #520]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002910:	22ff      	movs	r2, #255	@ 0xff
 8002912:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002914:	4b80      	ldr	r3, [pc, #512]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002916:	22ff      	movs	r2, #255	@ 0xff
 8002918:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800291a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b18 <MX_LWIP_Init+0x228>)
 800291c:	22ff      	movs	r2, #255	@ 0xff
 800291e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002920:	4b7d      	ldr	r3, [pc, #500]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002922:	2200      	movs	r2, #0
 8002924:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169;
 8002926:	4b7d      	ldr	r3, [pc, #500]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002928:	22a9      	movs	r2, #169	@ 0xa9
 800292a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 800292c:	4b7b      	ldr	r3, [pc, #492]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 800292e:	22fe      	movs	r2, #254	@ 0xfe
 8002930:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8002932:	4b7a      	ldr	r3, [pc, #488]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002934:	2201      	movs	r2, #1
 8002936:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002938:	4b78      	ldr	r3, [pc, #480]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 800293a:	2201      	movs	r2, #1
 800293c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800293e:	f008 ff07 	bl	800b750 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002942:	4b74      	ldr	r3, [pc, #464]	@ (8002b14 <MX_LWIP_Init+0x224>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	061a      	lsls	r2, r3, #24
 8002948:	4b72      	ldr	r3, [pc, #456]	@ (8002b14 <MX_LWIP_Init+0x224>)
 800294a:	785b      	ldrb	r3, [r3, #1]
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	4b70      	ldr	r3, [pc, #448]	@ (8002b14 <MX_LWIP_Init+0x224>)
 8002952:	789b      	ldrb	r3, [r3, #2]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	4313      	orrs	r3, r2
 8002958:	4a6e      	ldr	r2, [pc, #440]	@ (8002b14 <MX_LWIP_Init+0x224>)
 800295a:	78d2      	ldrb	r2, [r2, #3]
 800295c:	4313      	orrs	r3, r2
 800295e:	061a      	lsls	r2, r3, #24
 8002960:	4b6c      	ldr	r3, [pc, #432]	@ (8002b14 <MX_LWIP_Init+0x224>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	0619      	lsls	r1, r3, #24
 8002966:	4b6b      	ldr	r3, [pc, #428]	@ (8002b14 <MX_LWIP_Init+0x224>)
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	041b      	lsls	r3, r3, #16
 800296c:	4319      	orrs	r1, r3
 800296e:	4b69      	ldr	r3, [pc, #420]	@ (8002b14 <MX_LWIP_Init+0x224>)
 8002970:	789b      	ldrb	r3, [r3, #2]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	430b      	orrs	r3, r1
 8002976:	4967      	ldr	r1, [pc, #412]	@ (8002b14 <MX_LWIP_Init+0x224>)
 8002978:	78c9      	ldrb	r1, [r1, #3]
 800297a:	430b      	orrs	r3, r1
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002982:	431a      	orrs	r2, r3
 8002984:	4b63      	ldr	r3, [pc, #396]	@ (8002b14 <MX_LWIP_Init+0x224>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	0619      	lsls	r1, r3, #24
 800298a:	4b62      	ldr	r3, [pc, #392]	@ (8002b14 <MX_LWIP_Init+0x224>)
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	4319      	orrs	r1, r3
 8002992:	4b60      	ldr	r3, [pc, #384]	@ (8002b14 <MX_LWIP_Init+0x224>)
 8002994:	789b      	ldrb	r3, [r3, #2]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	430b      	orrs	r3, r1
 800299a:	495e      	ldr	r1, [pc, #376]	@ (8002b14 <MX_LWIP_Init+0x224>)
 800299c:	78c9      	ldrb	r1, [r1, #3]
 800299e:	430b      	orrs	r3, r1
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80029a6:	431a      	orrs	r2, r3
 80029a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b14 <MX_LWIP_Init+0x224>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	0619      	lsls	r1, r3, #24
 80029ae:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <MX_LWIP_Init+0x224>)
 80029b0:	785b      	ldrb	r3, [r3, #1]
 80029b2:	041b      	lsls	r3, r3, #16
 80029b4:	4319      	orrs	r1, r3
 80029b6:	4b57      	ldr	r3, [pc, #348]	@ (8002b14 <MX_LWIP_Init+0x224>)
 80029b8:	789b      	ldrb	r3, [r3, #2]
 80029ba:	021b      	lsls	r3, r3, #8
 80029bc:	430b      	orrs	r3, r1
 80029be:	4955      	ldr	r1, [pc, #340]	@ (8002b14 <MX_LWIP_Init+0x224>)
 80029c0:	78c9      	ldrb	r1, [r1, #3]
 80029c2:	430b      	orrs	r3, r1
 80029c4:	0e1b      	lsrs	r3, r3, #24
 80029c6:	4313      	orrs	r3, r2
 80029c8:	4a55      	ldr	r2, [pc, #340]	@ (8002b20 <MX_LWIP_Init+0x230>)
 80029ca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80029cc:	4b52      	ldr	r3, [pc, #328]	@ (8002b18 <MX_LWIP_Init+0x228>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	061a      	lsls	r2, r3, #24
 80029d2:	4b51      	ldr	r3, [pc, #324]	@ (8002b18 <MX_LWIP_Init+0x228>)
 80029d4:	785b      	ldrb	r3, [r3, #1]
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
 80029da:	4b4f      	ldr	r3, [pc, #316]	@ (8002b18 <MX_LWIP_Init+0x228>)
 80029dc:	789b      	ldrb	r3, [r3, #2]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	4313      	orrs	r3, r2
 80029e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002b18 <MX_LWIP_Init+0x228>)
 80029e4:	78d2      	ldrb	r2, [r2, #3]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	061a      	lsls	r2, r3, #24
 80029ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <MX_LWIP_Init+0x228>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	0619      	lsls	r1, r3, #24
 80029f0:	4b49      	ldr	r3, [pc, #292]	@ (8002b18 <MX_LWIP_Init+0x228>)
 80029f2:	785b      	ldrb	r3, [r3, #1]
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	4319      	orrs	r1, r3
 80029f8:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <MX_LWIP_Init+0x228>)
 80029fa:	789b      	ldrb	r3, [r3, #2]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	430b      	orrs	r3, r1
 8002a00:	4945      	ldr	r1, [pc, #276]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002a02:	78c9      	ldrb	r1, [r1, #3]
 8002a04:	430b      	orrs	r3, r1
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	4b42      	ldr	r3, [pc, #264]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	0619      	lsls	r1, r3, #24
 8002a14:	4b40      	ldr	r3, [pc, #256]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002a16:	785b      	ldrb	r3, [r3, #1]
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	4319      	orrs	r1, r3
 8002a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002a1e:	789b      	ldrb	r3, [r3, #2]
 8002a20:	021b      	lsls	r3, r3, #8
 8002a22:	430b      	orrs	r3, r1
 8002a24:	493c      	ldr	r1, [pc, #240]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002a26:	78c9      	ldrb	r1, [r1, #3]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	0a1b      	lsrs	r3, r3, #8
 8002a2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002a30:	431a      	orrs	r2, r3
 8002a32:	4b39      	ldr	r3, [pc, #228]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	0619      	lsls	r1, r3, #24
 8002a38:	4b37      	ldr	r3, [pc, #220]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002a3a:	785b      	ldrb	r3, [r3, #1]
 8002a3c:	041b      	lsls	r3, r3, #16
 8002a3e:	4319      	orrs	r1, r3
 8002a40:	4b35      	ldr	r3, [pc, #212]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002a42:	789b      	ldrb	r3, [r3, #2]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	430b      	orrs	r3, r1
 8002a48:	4933      	ldr	r1, [pc, #204]	@ (8002b18 <MX_LWIP_Init+0x228>)
 8002a4a:	78c9      	ldrb	r1, [r1, #3]
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	0e1b      	lsrs	r3, r3, #24
 8002a50:	4313      	orrs	r3, r2
 8002a52:	4a34      	ldr	r2, [pc, #208]	@ (8002b24 <MX_LWIP_Init+0x234>)
 8002a54:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002a56:	4b31      	ldr	r3, [pc, #196]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	061a      	lsls	r2, r3, #24
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002a5e:	785b      	ldrb	r3, [r3, #1]
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	431a      	orrs	r2, r3
 8002a64:	4b2d      	ldr	r3, [pc, #180]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002a66:	789b      	ldrb	r3, [r3, #2]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002a6e:	78d2      	ldrb	r2, [r2, #3]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	061a      	lsls	r2, r3, #24
 8002a74:	4b29      	ldr	r3, [pc, #164]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	0619      	lsls	r1, r3, #24
 8002a7a:	4b28      	ldr	r3, [pc, #160]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002a7c:	785b      	ldrb	r3, [r3, #1]
 8002a7e:	041b      	lsls	r3, r3, #16
 8002a80:	4319      	orrs	r1, r3
 8002a82:	4b26      	ldr	r3, [pc, #152]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002a84:	789b      	ldrb	r3, [r3, #2]
 8002a86:	021b      	lsls	r3, r3, #8
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	4924      	ldr	r1, [pc, #144]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002a8c:	78c9      	ldrb	r1, [r1, #3]
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002a96:	431a      	orrs	r2, r3
 8002a98:	4b20      	ldr	r3, [pc, #128]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	0619      	lsls	r1, r3, #24
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	4319      	orrs	r1, r3
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002aa8:	789b      	ldrb	r3, [r3, #2]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	430b      	orrs	r3, r1
 8002aae:	491b      	ldr	r1, [pc, #108]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002ab0:	78c9      	ldrb	r1, [r1, #3]
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002aba:	431a      	orrs	r2, r3
 8002abc:	4b17      	ldr	r3, [pc, #92]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	0619      	lsls	r1, r3, #24
 8002ac2:	4b16      	ldr	r3, [pc, #88]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	4319      	orrs	r1, r3
 8002aca:	4b14      	ldr	r3, [pc, #80]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002acc:	789b      	ldrb	r3, [r3, #2]
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	4912      	ldr	r1, [pc, #72]	@ (8002b1c <MX_LWIP_Init+0x22c>)
 8002ad4:	78c9      	ldrb	r1, [r1, #3]
 8002ad6:	430b      	orrs	r3, r1
 8002ad8:	0e1b      	lsrs	r3, r3, #24
 8002ada:	4313      	orrs	r3, r2
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <MX_LWIP_Init+0x238>)
 8002ade:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002ae0:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <MX_LWIP_Init+0x23c>)
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <MX_LWIP_Init+0x240>)
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <MX_LWIP_Init+0x238>)
 8002aee:	4a0d      	ldr	r2, [pc, #52]	@ (8002b24 <MX_LWIP_Init+0x234>)
 8002af0:	490b      	ldr	r1, [pc, #44]	@ (8002b20 <MX_LWIP_Init+0x230>)
 8002af2:	4810      	ldr	r0, [pc, #64]	@ (8002b34 <MX_LWIP_Init+0x244>)
 8002af4:	f00a fbf2 	bl	800d2dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002af8:	480e      	ldr	r0, [pc, #56]	@ (8002b34 <MX_LWIP_Init+0x244>)
 8002afa:	f00a fcd1 	bl	800d4a0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8002afe:	480d      	ldr	r0, [pc, #52]	@ (8002b34 <MX_LWIP_Init+0x244>)
 8002b00:	f00a fcdc 	bl	800d4bc <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002b04:	490c      	ldr	r1, [pc, #48]	@ (8002b38 <MX_LWIP_Init+0x248>)
 8002b06:	480b      	ldr	r0, [pc, #44]	@ (8002b34 <MX_LWIP_Init+0x244>)
 8002b08:	f00a fd1c 	bl	800d544 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200024bc 	.word	0x200024bc
 8002b18:	200024c0 	.word	0x200024c0
 8002b1c:	200024c4 	.word	0x200024c4
 8002b20:	200024b0 	.word	0x200024b0
 8002b24:	200024b4 	.word	0x200024b4
 8002b28:	200024b8 	.word	0x200024b8
 8002b2c:	0800b279 	.word	0x0800b279
 8002b30:	08003105 	.word	0x08003105
 8002b34:	2000247c 	.word	0x2000247c
 8002b38:	08003171 	.word	0x08003171

08002b3c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08e      	sub	sp, #56	@ 0x38
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a55      	ldr	r2, [pc, #340]	@ (8002cb0 <HAL_ETH_MspInit+0x174>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	f040 80a4 	bne.w	8002ca8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002b60:	2300      	movs	r3, #0
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	4b53      	ldr	r3, [pc, #332]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b68:	4a52      	ldr	r2, [pc, #328]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002b6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b70:	4b50      	ldr	r3, [pc, #320]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002b86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8c:	4b49      	ldr	r3, [pc, #292]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
 8002b9c:	4b45      	ldr	r3, [pc, #276]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	4a44      	ldr	r2, [pc, #272]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002ba2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002ba6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba8:	4b42      	ldr	r3, [pc, #264]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
 8002bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	4b37      	ldr	r3, [pc, #220]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	4a36      	ldr	r2, [pc, #216]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be0:	4b34      	ldr	r3, [pc, #208]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	4b29      	ldr	r3, [pc, #164]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	4a28      	ldr	r2, [pc, #160]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c18:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <HAL_ETH_MspInit+0x178>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002c24:	2332      	movs	r3, #50	@ 0x32
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c34:	230b      	movs	r3, #11
 8002c36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	481e      	ldr	r0, [pc, #120]	@ (8002cb8 <HAL_ETH_MspInit+0x17c>)
 8002c40:	f003 fa26 	bl	8006090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002c44:	2386      	movs	r3, #134	@ 0x86
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c50:	2303      	movs	r3, #3
 8002c52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c54:	230b      	movs	r3, #11
 8002c56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4817      	ldr	r0, [pc, #92]	@ (8002cbc <HAL_ETH_MspInit+0x180>)
 8002c60:	f003 fa16 	bl	8006090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c76:	230b      	movs	r3, #11
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c7e:	4619      	mov	r1, r3
 8002c80:	480f      	ldr	r0, [pc, #60]	@ (8002cc0 <HAL_ETH_MspInit+0x184>)
 8002c82:	f003 fa05 	bl	8006090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002c86:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c94:	2303      	movs	r3, #3
 8002c96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c98:	230b      	movs	r3, #11
 8002c9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4808      	ldr	r0, [pc, #32]	@ (8002cc4 <HAL_ETH_MspInit+0x188>)
 8002ca4:	f003 f9f4 	bl	8006090 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3738      	adds	r7, #56	@ 0x38
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40028000 	.word	0x40028000
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020800 	.word	0x40020800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40020400 	.word	0x40020400
 8002cc4:	40021800 	.word	0x40021800

08002cc8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	@ (8002e0c <low_level_init+0x144>)
 8002cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8002e10 <low_level_init+0x148>)
 8002cd8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002cda:	4b4c      	ldr	r3, [pc, #304]	@ (8002e0c <low_level_init+0x144>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	@ (8002e0c <low_level_init+0x144>)
 8002ce2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ce6:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8002ce8:	4b48      	ldr	r3, [pc, #288]	@ (8002e0c <low_level_init+0x144>)
 8002cea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cee:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002cf0:	4b46      	ldr	r3, [pc, #280]	@ (8002e0c <low_level_init+0x144>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002cfe:	23e1      	movs	r3, #225	@ 0xe1
 8002d00:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002d02:	2300      	movs	r3, #0
 8002d04:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002d06:	2300      	movs	r3, #0
 8002d08:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e0c <low_level_init+0x144>)
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002d16:	4b3d      	ldr	r3, [pc, #244]	@ (8002e0c <low_level_init+0x144>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e0c <low_level_init+0x144>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002d22:	4b3a      	ldr	r3, [pc, #232]	@ (8002e0c <low_level_init+0x144>)
 8002d24:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002d28:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002d2a:	4838      	ldr	r0, [pc, #224]	@ (8002e0c <low_level_init+0x144>)
 8002d2c:	f002 f8b8 	bl	8004ea0 <HAL_ETH_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d108      	bne.n	8002d4c <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002d40:	f043 0304 	orr.w	r3, r3, #4
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	4a31      	ldr	r2, [pc, #196]	@ (8002e14 <low_level_init+0x14c>)
 8002d50:	4931      	ldr	r1, [pc, #196]	@ (8002e18 <low_level_init+0x150>)
 8002d52:	482e      	ldr	r0, [pc, #184]	@ (8002e0c <low_level_init+0x144>)
 8002d54:	f002 fa30 	bl	80051b8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002d58:	2304      	movs	r3, #4
 8002d5a:	4a30      	ldr	r2, [pc, #192]	@ (8002e1c <low_level_init+0x154>)
 8002d5c:	4930      	ldr	r1, [pc, #192]	@ (8002e20 <low_level_init+0x158>)
 8002d5e:	482b      	ldr	r0, [pc, #172]	@ (8002e0c <low_level_init+0x144>)
 8002d60:	f002 fa91 	bl	8005286 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2206      	movs	r2, #6
 8002d68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002d6c:	4b27      	ldr	r3, [pc, #156]	@ (8002e0c <low_level_init+0x144>)
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002d78:	4b24      	ldr	r3, [pc, #144]	@ (8002e0c <low_level_init+0x144>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	785a      	ldrb	r2, [r3, #1]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002d84:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <low_level_init+0x144>)
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	789a      	ldrb	r2, [r3, #2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002d90:	4b1e      	ldr	r3, [pc, #120]	@ (8002e0c <low_level_init+0x144>)
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	78da      	ldrb	r2, [r3, #3]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e0c <low_level_init+0x144>)
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	791a      	ldrb	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002da8:	4b18      	ldr	r3, [pc, #96]	@ (8002e0c <low_level_init+0x144>)
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	795a      	ldrb	r2, [r3, #5]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002dba:	84da      	strh	r2, [r3, #38]	@ 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002dc2:	f043 030a 	orr.w	r3, r3, #10
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8002dce:	480f      	ldr	r0, [pc, #60]	@ (8002e0c <low_level_init+0x144>)
 8002dd0:	f002 fcfd 	bl	80057ce <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	461a      	mov	r2, r3
 8002dda:	211d      	movs	r1, #29
 8002ddc:	480b      	ldr	r0, [pc, #44]	@ (8002e0c <low_level_init+0x144>)
 8002dde:	f002 fc28 	bl	8005632 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f043 030b 	orr.w	r3, r3, #11
 8002de8:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	461a      	mov	r2, r3
 8002dee:	211d      	movs	r1, #29
 8002df0:	4806      	ldr	r0, [pc, #24]	@ (8002e0c <low_level_init+0x144>)
 8002df2:	f002 fc86 	bl	8005702 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002df6:	f107 0310 	add.w	r3, r7, #16
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	211d      	movs	r1, #29
 8002dfe:	4803      	ldr	r0, [pc, #12]	@ (8002e0c <low_level_init+0x144>)
 8002e00:	f002 fc17 	bl	8005632 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20005568 	.word	0x20005568
 8002e10:	40028000 	.word	0x40028000
 8002e14:	20003d98 	.word	0x20003d98
 8002e18:	20002548 	.word	0x20002548
 8002e1c:	200025c8 	.word	0x200025c8
 8002e20:	200024c8 	.word	0x200024c8

08002e24 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	@ 0x28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8002e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f5c <low_level_output+0x138>)
 8002e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8002e46:	4b45      	ldr	r3, [pc, #276]	@ (8002f5c <low_level_output+0x138>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	623b      	str	r3, [r7, #32]
 8002e54:	e05a      	b.n	8002f0c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	da03      	bge.n	8002e66 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8002e5e:	23f8      	movs	r3, #248	@ 0xf8
 8002e60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        goto error;
 8002e64:	e05c      	b.n	8002f20 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	895b      	ldrh	r3, [r3, #10]
 8002e6a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002e70:	e02f      	b.n	8002ed2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	18d0      	adds	r0, r2, r3
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	18d1      	adds	r1, r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8002e86:	3304      	adds	r3, #4
 8002e88:	461a      	mov	r2, r3
 8002e8a:	f012 f910 	bl	80150ae <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	da03      	bge.n	8002ea4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8002e9c:	23f8      	movs	r3, #248	@ 0xf8
 8002e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          goto error;
 8002ea2:	e03d      	b.n	8002f20 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8002eb4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8002ec0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8002ecc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d8c8      	bhi.n	8002e72 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	18d0      	adds	r0, r2, r3
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4413      	add	r3, r2
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f012 f8dc 	bl	80150ae <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	623b      	str	r3, [r7, #32]
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1a1      	bne.n	8002e56 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8002f12:	6979      	ldr	r1, [r7, #20]
 8002f14:	4811      	ldr	r0, [pc, #68]	@ (8002f5c <low_level_output+0x138>)
 8002f16:	f002 fa21 	bl	800535c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8002f20:	4b0e      	ldr	r3, [pc, #56]	@ (8002f5c <low_level_output+0x138>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00d      	beq.n	8002f4e <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <low_level_output+0x138>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2320      	movs	r3, #32
 8002f3e:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8002f40:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <low_level_output+0x138>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	6053      	str	r3, [r2, #4]
  }
  return errval;
 8002f4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3728      	adds	r7, #40	@ 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20005568 	.word	0x20005568

08002f60 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08c      	sub	sp, #48	@ 0x30
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct pbuf *q = NULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint16_t len = 0;
 8002f70:	2300      	movs	r3, #0
 8002f72:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8002f84:	484e      	ldr	r0, [pc, #312]	@ (80030c0 <low_level_input+0x160>)
 8002f86:	f002 fad1 	bl	800552c <HAL_ETH_GetReceivedFrame>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <low_level_input+0x34>

    return NULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	e090      	b.n	80030b6 <low_level_input+0x156>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8002f94:	4b4a      	ldr	r3, [pc, #296]	@ (80030c0 <low_level_input+0x160>)
 8002f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f98:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8002f9a:	4b49      	ldr	r3, [pc, #292]	@ (80030c0 <low_level_input+0x160>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (len > 0)
 8002fa0:	89fb      	ldrh	r3, [r7, #14]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d006      	beq.n	8002fb4 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4619      	mov	r1, r3
 8002fac:	2004      	movs	r0, #4
 8002fae:	f00a fb09 	bl	800d5c4 <pbuf_alloc>
 8002fb2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  if (p != NULL)
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d04b      	beq.n	8003052 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8002fba:	4b41      	ldr	r3, [pc, #260]	@ (80030c0 <low_level_input+0x160>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8002fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fc8:	e040      	b.n	800304c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8002fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fcc:	895b      	ldrh	r3, [r3, #10]
 8002fce:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8002fd4:	e021      	b.n	800301a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	18d0      	adds	r0, r2, r3
 8002fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	18d1      	adds	r1, r2, r3
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 8002fea:	3304      	adds	r3, #4
 8002fec:	461a      	mov	r2, r3
 8002fee:	f012 f85e 	bl	80150ae <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	4413      	add	r3, r2
 8003004:	f2a3 53f4 	subw	r3, r3, #1524	@ 0x5f4
 8003008:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 8003014:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003024:	4293      	cmp	r3, r2
 8003026:	d8d6      	bhi.n	8002fd6 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	18d0      	adds	r0, r2, r3
 8003030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	4413      	add	r3, r2
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4619      	mov	r1, r3
 800303a:	f012 f838 	bl	80150ae <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800303e:	69fa      	ldr	r2, [r7, #28]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	4413      	add	r3, r2
 8003044:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800304c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1bb      	bne.n	8002fca <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003052:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <low_level_input+0x160>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	e00b      	b.n	8003076 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3301      	adds	r3, #1
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <low_level_input+0x160>)
 8003078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	429a      	cmp	r2, r3
 800307e:	d3ee      	bcc.n	800305e <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8003080:	4b0f      	ldr	r3, [pc, #60]	@ (80030c0 <low_level_input+0x160>)
 8003082:	2200      	movs	r2, #0
 8003084:	639a      	str	r2, [r3, #56]	@ 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8003086:	4b0e      	ldr	r3, [pc, #56]	@ (80030c0 <low_level_input+0x160>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00d      	beq.n	80030b4 <low_level_input+0x154>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <low_level_input+0x160>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030a0:	461a      	mov	r2, r3
 80030a2:	2380      	movs	r3, #128	@ 0x80
 80030a4:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80030a6:	4b06      	ldr	r3, [pc, #24]	@ (80030c0 <low_level_input+0x160>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030ae:	461a      	mov	r2, r3
 80030b0:	2300      	movs	r3, #0
 80030b2:	6093      	str	r3, [r2, #8]
  }
  return p;
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3730      	adds	r7, #48	@ 0x30
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	20005568 	.word	0x20005568

080030c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff47 	bl	8002f60 <low_level_input>
 80030d2:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d010      	beq.n	80030fc <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	4798      	blx	r3
 80030e4:	4603      	mov	r3, r0
 80030e6:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80030e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d006      	beq.n	80030fe <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f00a fddf 	bl	800dcb4 <pbuf_free>
    p = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	e000      	b.n	80030fe <ethernetif_input+0x3a>
  if (p == NULL) return;
 80030fc:	bf00      	nop
  }
}
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <ethernetif_init+0x1c>
 8003112:	4b0e      	ldr	r3, [pc, #56]	@ (800314c <ethernetif_init+0x48>)
 8003114:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8003118:	490d      	ldr	r1, [pc, #52]	@ (8003150 <ethernetif_init+0x4c>)
 800311a:	480e      	ldr	r0, [pc, #56]	@ (8003154 <ethernetif_init+0x50>)
 800311c:	f011 fe48 	bl	8014db0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2273      	movs	r2, #115	@ 0x73
 8003124:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->name[1] = IFNAME1;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2274      	movs	r2, #116	@ 0x74
 800312c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a09      	ldr	r2, [pc, #36]	@ (8003158 <ethernetif_init+0x54>)
 8003134:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a08      	ldr	r2, [pc, #32]	@ (800315c <ethernetif_init+0x58>)
 800313a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff fdc3 	bl	8002cc8 <low_level_init>

  return ERR_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	08015f60 	.word	0x08015f60
 8003150:	08015f94 	.word	0x08015f94
 8003154:	08015fa4 	.word	0x08015fa4
 8003158:	0800ac8d 	.word	0x0800ac8d
 800315c:	08002e25 	.word	0x08002e25

08003160 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003164:	f000 fe0e 	bl	8003d84 <HAL_GetTick>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d05d      	beq.n	800324e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003192:	4b34      	ldr	r3, [pc, #208]	@ (8003264 <ethernetif_update_config+0xf4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d03f      	beq.n	800321a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800319a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800319e:	2100      	movs	r1, #0
 80031a0:	4830      	ldr	r0, [pc, #192]	@ (8003264 <ethernetif_update_config+0xf4>)
 80031a2:	f002 faae 	bl	8005702 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80031a6:	f000 fded 	bl	8003d84 <HAL_GetTick>
 80031aa:	4603      	mov	r3, r0
 80031ac:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80031ae:	f107 0308 	add.w	r3, r7, #8
 80031b2:	461a      	mov	r2, r3
 80031b4:	2101      	movs	r1, #1
 80031b6:	482b      	ldr	r0, [pc, #172]	@ (8003264 <ethernetif_update_config+0xf4>)
 80031b8:	f002 fa3b 	bl	8005632 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80031bc:	f000 fde2 	bl	8003d84 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80031ca:	d828      	bhi.n	800321e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0eb      	beq.n	80031ae <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80031d6:	f107 0308 	add.w	r3, r7, #8
 80031da:	461a      	mov	r2, r3
 80031dc:	2110      	movs	r1, #16
 80031de:	4821      	ldr	r0, [pc, #132]	@ (8003264 <ethernetif_update_config+0xf4>)
 80031e0:	f002 fa27 	bl	8005632 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80031ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <ethernetif_update_config+0xf4>)
 80031f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	e002      	b.n	80031fe <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <ethernetif_update_config+0xf4>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8003208:	4b16      	ldr	r3, [pc, #88]	@ (8003264 <ethernetif_update_config+0xf4>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	e016      	b.n	800323e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8003210:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <ethernetif_update_config+0xf4>)
 8003212:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e011      	b.n	800323e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800321a:	bf00      	nop
 800321c:	e000      	b.n	8003220 <ethernetif_update_config+0xb0>
          goto error;
 800321e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003220:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <ethernetif_update_config+0xf4>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	08db      	lsrs	r3, r3, #3
 8003226:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8003228:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <ethernetif_update_config+0xf4>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003230:	4313      	orrs	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	2100      	movs	r1, #0
 8003238:	480a      	ldr	r0, [pc, #40]	@ (8003264 <ethernetif_update_config+0xf4>)
 800323a:	f002 fa62 	bl	8005702 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800323e:	2100      	movs	r1, #0
 8003240:	4808      	ldr	r0, [pc, #32]	@ (8003264 <ethernetif_update_config+0xf4>)
 8003242:	f002 fb23 	bl	800588c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8003246:	4807      	ldr	r0, [pc, #28]	@ (8003264 <ethernetif_update_config+0xf4>)
 8003248:	f002 fac1 	bl	80057ce <HAL_ETH_Start>
 800324c:	e002      	b.n	8003254 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800324e:	4805      	ldr	r0, [pc, #20]	@ (8003264 <ethernetif_update_config+0xf4>)
 8003250:	f002 faec 	bl	800582c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f807 	bl	8003268 <ethernetif_notify_conn_changed>
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20005568 	.word	0x20005568

08003268 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
	...

0800327c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800327c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003280:	f000 fd16 	bl	8003cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003284:	480c      	ldr	r0, [pc, #48]	@ (80032b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003286:	490d      	ldr	r1, [pc, #52]	@ (80032bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003288:	4a0d      	ldr	r2, [pc, #52]	@ (80032c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800328a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800328c:	e002      	b.n	8003294 <LoopCopyDataInit>

0800328e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800328e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003292:	3304      	adds	r3, #4

08003294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003298:	d3f9      	bcc.n	800328e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800329a:	4a0a      	ldr	r2, [pc, #40]	@ (80032c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800329c:	4c0a      	ldr	r4, [pc, #40]	@ (80032c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800329e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032a0:	e001      	b.n	80032a6 <LoopFillZerobss>

080032a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032a4:	3204      	adds	r2, #4

080032a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a8:	d3fb      	bcc.n	80032a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032aa:	f011 fed9 	bl	8015060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ae:	f7fd fe97 	bl	8000fe0 <main>
  bx  lr
 80032b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032bc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80032c0:	08018130 	.word	0x08018130
  ldr r2, =_sbss
 80032c4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80032c8:	2000c948 	.word	0x2000c948

080032cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032cc:	e7fe      	b.n	80032cc <ADC_IRQHandler>
	...

080032d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80032d4:	2200      	movs	r2, #0
 80032d6:	4912      	ldr	r1, [pc, #72]	@ (8003320 <MX_USB_DEVICE_Init+0x50>)
 80032d8:	4812      	ldr	r0, [pc, #72]	@ (8003324 <MX_USB_DEVICE_Init+0x54>)
 80032da:	f010 fa92 	bl	8013802 <USBD_Init>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80032e4:	f7ff f8c0 	bl	8002468 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80032e8:	490f      	ldr	r1, [pc, #60]	@ (8003328 <MX_USB_DEVICE_Init+0x58>)
 80032ea:	480e      	ldr	r0, [pc, #56]	@ (8003324 <MX_USB_DEVICE_Init+0x54>)
 80032ec:	f010 fab4 	bl	8013858 <USBD_RegisterClass>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80032f6:	f7ff f8b7 	bl	8002468 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80032fa:	490c      	ldr	r1, [pc, #48]	@ (800332c <MX_USB_DEVICE_Init+0x5c>)
 80032fc:	4809      	ldr	r0, [pc, #36]	@ (8003324 <MX_USB_DEVICE_Init+0x54>)
 80032fe:	f010 f9e5 	bl	80136cc <USBD_CDC_RegisterInterface>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8003308:	f7ff f8ae 	bl	8002468 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800330c:	4805      	ldr	r0, [pc, #20]	@ (8003324 <MX_USB_DEVICE_Init+0x54>)
 800330e:	f010 fabc 	bl	801388a <USBD_Start>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8003318:	f7ff f8a6 	bl	8002468 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800331c:	bf00      	nop
 800331e:	bd80      	pop	{r7, pc}
 8003320:	20000020 	.word	0x20000020
 8003324:	200055b0 	.word	0x200055b0
 8003328:	20000090 	.word	0x20000090
 800332c:	20000010 	.word	0x20000010

08003330 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003334:	2200      	movs	r2, #0
 8003336:	4905      	ldr	r1, [pc, #20]	@ (800334c <CDC_Init_FS+0x1c>)
 8003338:	4805      	ldr	r0, [pc, #20]	@ (8003350 <CDC_Init_FS+0x20>)
 800333a:	f010 f9dd 	bl	80136f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800333e:	4905      	ldr	r1, [pc, #20]	@ (8003354 <CDC_Init_FS+0x24>)
 8003340:	4803      	ldr	r0, [pc, #12]	@ (8003350 <CDC_Init_FS+0x20>)
 8003342:	f010 f9f2 	bl	801372a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8003346:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8003348:	4618      	mov	r0, r3
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20006074 	.word	0x20006074
 8003350:	200055b0 	.word	0x200055b0
 8003354:	20005874 	.word	0x20005874

08003358 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800335c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
	...

08003368 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	6039      	str	r1, [r7, #0]
 8003372:	71fb      	strb	r3, [r7, #7]
 8003374:	4613      	mov	r3, r2
 8003376:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	2b23      	cmp	r3, #35	@ 0x23
 800337c:	d84a      	bhi.n	8003414 <CDC_Control_FS+0xac>
 800337e:	a201      	add	r2, pc, #4	@ (adr r2, 8003384 <CDC_Control_FS+0x1c>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	08003415 	.word	0x08003415
 8003388:	08003415 	.word	0x08003415
 800338c:	08003415 	.word	0x08003415
 8003390:	08003415 	.word	0x08003415
 8003394:	08003415 	.word	0x08003415
 8003398:	08003415 	.word	0x08003415
 800339c:	08003415 	.word	0x08003415
 80033a0:	08003415 	.word	0x08003415
 80033a4:	08003415 	.word	0x08003415
 80033a8:	08003415 	.word	0x08003415
 80033ac:	08003415 	.word	0x08003415
 80033b0:	08003415 	.word	0x08003415
 80033b4:	08003415 	.word	0x08003415
 80033b8:	08003415 	.word	0x08003415
 80033bc:	08003415 	.word	0x08003415
 80033c0:	08003415 	.word	0x08003415
 80033c4:	08003415 	.word	0x08003415
 80033c8:	08003415 	.word	0x08003415
 80033cc:	08003415 	.word	0x08003415
 80033d0:	08003415 	.word	0x08003415
 80033d4:	08003415 	.word	0x08003415
 80033d8:	08003415 	.word	0x08003415
 80033dc:	08003415 	.word	0x08003415
 80033e0:	08003415 	.word	0x08003415
 80033e4:	08003415 	.word	0x08003415
 80033e8:	08003415 	.word	0x08003415
 80033ec:	08003415 	.word	0x08003415
 80033f0:	08003415 	.word	0x08003415
 80033f4:	08003415 	.word	0x08003415
 80033f8:	08003415 	.word	0x08003415
 80033fc:	08003415 	.word	0x08003415
 8003400:	08003415 	.word	0x08003415
 8003404:	08003415 	.word	0x08003415
 8003408:	08003415 	.word	0x08003415
 800340c:	08003415 	.word	0x08003415
 8003410:	08003415 	.word	0x08003415
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8003414:	bf00      	nop
  }

  return (USBD_OK);
 8003416:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop

08003424 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4805      	ldr	r0, [pc, #20]	@ (8003448 <CDC_Receive_FS+0x24>)
 8003432:	f010 f97a 	bl	801372a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8003436:	4804      	ldr	r0, [pc, #16]	@ (8003448 <CDC_Receive_FS+0x24>)
 8003438:	f010 f9b9 	bl	80137ae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800343c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200055b0 	.word	0x200055b0

0800344c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800345c:	4b0d      	ldr	r3, [pc, #52]	@ (8003494 <CDC_Transmit_FS+0x48>)
 800345e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8003462:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800346e:	2301      	movs	r3, #1
 8003470:	e00b      	b.n	800348a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003472:	887b      	ldrh	r3, [r7, #2]
 8003474:	461a      	mov	r2, r3
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4806      	ldr	r0, [pc, #24]	@ (8003494 <CDC_Transmit_FS+0x48>)
 800347a:	f010 f93d 	bl	80136f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800347e:	4805      	ldr	r0, [pc, #20]	@ (8003494 <CDC_Transmit_FS+0x48>)
 8003480:	f010 f966 	bl	8013750 <USBD_CDC_TransmitPacket>
 8003484:	4603      	mov	r3, r0
 8003486:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200055b0 	.word	0x200055b0

08003498 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2212      	movs	r2, #18
 80034a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80034aa:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	2000003c 	.word	0x2000003c

080034bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	6039      	str	r1, [r7, #0]
 80034c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2204      	movs	r2, #4
 80034cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80034ce:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000050 	.word	0x20000050

080034e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	4907      	ldr	r1, [pc, #28]	@ (8003514 <USBD_FS_ProductStrDescriptor+0x34>)
 80034f6:	4808      	ldr	r0, [pc, #32]	@ (8003518 <USBD_FS_ProductStrDescriptor+0x38>)
 80034f8:	f011 f975 	bl	80147e6 <USBD_GetString>
 80034fc:	e004      	b.n	8003508 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	4904      	ldr	r1, [pc, #16]	@ (8003514 <USBD_FS_ProductStrDescriptor+0x34>)
 8003502:	4805      	ldr	r0, [pc, #20]	@ (8003518 <USBD_FS_ProductStrDescriptor+0x38>)
 8003504:	f011 f96f 	bl	80147e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003508:	4b02      	ldr	r3, [pc, #8]	@ (8003514 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20006874 	.word	0x20006874
 8003518:	08015fcc 	.word	0x08015fcc

0800351c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	4904      	ldr	r1, [pc, #16]	@ (800353c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800352c:	4804      	ldr	r0, [pc, #16]	@ (8003540 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800352e:	f011 f95a 	bl	80147e6 <USBD_GetString>
  return USBD_StrDesc;
 8003532:	4b02      	ldr	r3, [pc, #8]	@ (800353c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8003534:	4618      	mov	r0, r3
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20006874 	.word	0x20006874
 8003540:	08015fe4 	.word	0x08015fe4

08003544 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	6039      	str	r1, [r7, #0]
 800354e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	221a      	movs	r2, #26
 8003554:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8003556:	f000 f843 	bl	80035e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800355a:	4b02      	ldr	r3, [pc, #8]	@ (8003564 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20000054 	.word	0x20000054

08003568 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	4907      	ldr	r1, [pc, #28]	@ (800359c <USBD_FS_ConfigStrDescriptor+0x34>)
 800357e:	4808      	ldr	r0, [pc, #32]	@ (80035a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8003580:	f011 f931 	bl	80147e6 <USBD_GetString>
 8003584:	e004      	b.n	8003590 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	4904      	ldr	r1, [pc, #16]	@ (800359c <USBD_FS_ConfigStrDescriptor+0x34>)
 800358a:	4805      	ldr	r0, [pc, #20]	@ (80035a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800358c:	f011 f92b 	bl	80147e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8003590:	4b02      	ldr	r3, [pc, #8]	@ (800359c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20006874 	.word	0x20006874
 80035a0:	08015ff8 	.word	0x08015ff8

080035a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d105      	bne.n	80035c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	4907      	ldr	r1, [pc, #28]	@ (80035d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80035ba:	4808      	ldr	r0, [pc, #32]	@ (80035dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80035bc:	f011 f913 	bl	80147e6 <USBD_GetString>
 80035c0:	e004      	b.n	80035cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80035c6:	4805      	ldr	r0, [pc, #20]	@ (80035dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80035c8:	f011 f90d 	bl	80147e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80035cc:	4b02      	ldr	r3, [pc, #8]	@ (80035d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20006874 	.word	0x20006874
 80035dc:	08016004 	.word	0x08016004

080035e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80035e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003624 <Get_SerialNum+0x44>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80035ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003628 <Get_SerialNum+0x48>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80035f2:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <Get_SerialNum+0x4c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8003606:	2208      	movs	r2, #8
 8003608:	4909      	ldr	r1, [pc, #36]	@ (8003630 <Get_SerialNum+0x50>)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f814 	bl	8003638 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8003610:	2204      	movs	r2, #4
 8003612:	4908      	ldr	r1, [pc, #32]	@ (8003634 <Get_SerialNum+0x54>)
 8003614:	68b8      	ldr	r0, [r7, #8]
 8003616:	f000 f80f 	bl	8003638 <IntToUnicode>
  }
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	1fff7a10 	.word	0x1fff7a10
 8003628:	1fff7a14 	.word	0x1fff7a14
 800362c:	1fff7a18 	.word	0x1fff7a18
 8003630:	20000056 	.word	0x20000056
 8003634:	20000066 	.word	0x20000066

08003638 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
 800364e:	e027      	b.n	80036a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	0f1b      	lsrs	r3, r3, #28
 8003654:	2b09      	cmp	r3, #9
 8003656:	d80b      	bhi.n	8003670 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	0f1b      	lsrs	r3, r3, #28
 800365c:	b2da      	uxtb	r2, r3
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4619      	mov	r1, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	440b      	add	r3, r1
 8003668:	3230      	adds	r2, #48	@ 0x30
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e00a      	b.n	8003686 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	0f1b      	lsrs	r3, r3, #28
 8003674:	b2da      	uxtb	r2, r3
 8003676:	7dfb      	ldrb	r3, [r7, #23]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4619      	mov	r1, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	440b      	add	r3, r1
 8003680:	3237      	adds	r2, #55	@ 0x37
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800368c:	7dfb      	ldrb	r3, [r7, #23]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	3301      	adds	r3, #1
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	4413      	add	r3, r2
 8003696:	2200      	movs	r2, #0
 8003698:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	3301      	adds	r3, #1
 800369e:	75fb      	strb	r3, [r7, #23]
 80036a0:	7dfa      	ldrb	r2, [r7, #23]
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3d3      	bcc.n	8003650 <IntToUnicode+0x18>
  }
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	371c      	adds	r7, #28
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08a      	sub	sp, #40	@ 0x28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036d4:	d13a      	bne.n	800374c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d6:	2300      	movs	r3, #0
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	4b1e      	ldr	r3, [pc, #120]	@ (8003754 <HAL_PCD_MspInit+0xa0>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036de:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <HAL_PCD_MspInit+0xa0>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <HAL_PCD_MspInit+0xa0>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 80036f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80036f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f8:	2302      	movs	r3, #2
 80036fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	2303      	movs	r3, #3
 8003702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003704:	230a      	movs	r3, #10
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4619      	mov	r1, r3
 800370e:	4812      	ldr	r0, [pc, #72]	@ (8003758 <HAL_PCD_MspInit+0xa4>)
 8003710:	f002 fcbe 	bl	8006090 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003714:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <HAL_PCD_MspInit+0xa0>)
 8003716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003718:	4a0e      	ldr	r2, [pc, #56]	@ (8003754 <HAL_PCD_MspInit+0xa0>)
 800371a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800371e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <HAL_PCD_MspInit+0xa0>)
 8003726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003728:	4a0a      	ldr	r2, [pc, #40]	@ (8003754 <HAL_PCD_MspInit+0xa0>)
 800372a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800372e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003730:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <HAL_PCD_MspInit+0xa0>)
 8003732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003734:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800373c:	2200      	movs	r2, #0
 800373e:	2100      	movs	r1, #0
 8003740:	2043      	movs	r0, #67	@ 0x43
 8003742:	f001 f80a 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003746:	2043      	movs	r0, #67	@ 0x43
 8003748:	f001 f823 	bl	8004792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800374c:	bf00      	nop
 800374e:	3728      	adds	r7, #40	@ 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	40020000 	.word	0x40020000

0800375c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003770:	4619      	mov	r1, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f010 f8d1 	bl	801391a <USBD_LL_SetupStage>
}
 8003778:	bf00      	nop
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	78fb      	ldrb	r3, [r7, #3]
 80037a8:	4619      	mov	r1, r3
 80037aa:	f010 f903 	bl	80139b4 <USBD_LL_DataOutStage>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3348      	adds	r3, #72	@ 0x48
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	4619      	mov	r1, r3
 80037de:	f010 f95a 	bl	8013a96 <USBD_LL_DataInStage>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80037f8:	4618      	mov	r0, r3
 80037fa:	f010 fa6a 	bl	8013cd2 <USBD_LL_SOF>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b084      	sub	sp, #16
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d102      	bne.n	8003820 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800381a:	2300      	movs	r3, #0
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e008      	b.n	8003832 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b02      	cmp	r3, #2
 8003826:	d102      	bne.n	800382e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8003828:	2301      	movs	r3, #1
 800382a:	73fb      	strb	r3, [r7, #15]
 800382c:	e001      	b.n	8003832 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800382e:	f7fe fe1b 	bl	8002468 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8003838:	7bfa      	ldrb	r2, [r7, #15]
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f010 fa10 	bl	8013c62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8003848:	4618      	mov	r0, r3
 800384a:	f010 f9c9 	bl	8013be0 <USBD_LL_Reset>
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8003866:	4618      	mov	r0, r3
 8003868:	f010 fa0a 	bl	8013c80 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <HAL_PCD_SuspendCallback+0x48>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	4a03      	ldr	r2, [pc, #12]	@ (80038a0 <HAL_PCD_SuspendCallback+0x48>)
 8003892:	f043 0306 	orr.w	r3, r3, #6
 8003896:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80038b2:	4618      	mov	r0, r3
 80038b4:	f010 f9f8 	bl	8013ca8 <USBD_LL_Resume>
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f010 fa21 	bl	8013d1e <USBD_LL_IsoOUTIncomplete>
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f010 fa03 	bl	8013d06 <USBD_LL_IsoINIncomplete>
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8003916:	4618      	mov	r0, r3
 8003918:	f010 fa0d 	bl	8013d36 <USBD_LL_DevConnected>
}
 800391c:	bf00      	nop
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 8003932:	4618      	mov	r0, r3
 8003934:	f010 fa09 	bl	8013d4a <USBD_LL_DevDisconnected>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d139      	bne.n	80039c4 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8003950:	4a1f      	ldr	r2, [pc, #124]	@ (80039d0 <USBD_LL_Init+0x90>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a1d      	ldr	r2, [pc, #116]	@ (80039d0 <USBD_LL_Init+0x90>)
 800395c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003960:	4b1b      	ldr	r3, [pc, #108]	@ (80039d0 <USBD_LL_Init+0x90>)
 8003962:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003966:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003968:	4b19      	ldr	r3, [pc, #100]	@ (80039d0 <USBD_LL_Init+0x90>)
 800396a:	2204      	movs	r2, #4
 800396c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800396e:	4b18      	ldr	r3, [pc, #96]	@ (80039d0 <USBD_LL_Init+0x90>)
 8003970:	2202      	movs	r2, #2
 8003972:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003974:	4b16      	ldr	r3, [pc, #88]	@ (80039d0 <USBD_LL_Init+0x90>)
 8003976:	2200      	movs	r2, #0
 8003978:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800397a:	4b15      	ldr	r3, [pc, #84]	@ (80039d0 <USBD_LL_Init+0x90>)
 800397c:	2202      	movs	r2, #2
 800397e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003980:	4b13      	ldr	r3, [pc, #76]	@ (80039d0 <USBD_LL_Init+0x90>)
 8003982:	2200      	movs	r2, #0
 8003984:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003986:	4b12      	ldr	r3, [pc, #72]	@ (80039d0 <USBD_LL_Init+0x90>)
 8003988:	2200      	movs	r2, #0
 800398a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800398c:	4b10      	ldr	r3, [pc, #64]	@ (80039d0 <USBD_LL_Init+0x90>)
 800398e:	2200      	movs	r2, #0
 8003990:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003992:	4b0f      	ldr	r3, [pc, #60]	@ (80039d0 <USBD_LL_Init+0x90>)
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003998:	480d      	ldr	r0, [pc, #52]	@ (80039d0 <USBD_LL_Init+0x90>)
 800399a:	f003 fba0 	bl	80070de <HAL_PCD_Init>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80039a4:	f7fe fd60 	bl	8002468 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80039a8:	2180      	movs	r1, #128	@ 0x80
 80039aa:	4809      	ldr	r0, [pc, #36]	@ (80039d0 <USBD_LL_Init+0x90>)
 80039ac:	f004 fdb8 	bl	8008520 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80039b0:	2240      	movs	r2, #64	@ 0x40
 80039b2:	2100      	movs	r1, #0
 80039b4:	4806      	ldr	r0, [pc, #24]	@ (80039d0 <USBD_LL_Init+0x90>)
 80039b6:	f004 fd6d 	bl	8008494 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80039ba:	2280      	movs	r2, #128	@ 0x80
 80039bc:	2101      	movs	r1, #1
 80039be:	4804      	ldr	r0, [pc, #16]	@ (80039d0 <USBD_LL_Init+0x90>)
 80039c0:	f004 fd68 	bl	8008494 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20006a74 	.word	0x20006a74

080039d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 fc94 	bl	8007318 <HAL_PCD_Start>
 80039f0:	4603      	mov	r3, r0
 80039f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f92e 	bl	8003c58 <USBD_Get_USB_Status>
 80039fc:	4603      	mov	r3, r0
 80039fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	4608      	mov	r0, r1
 8003a14:	4611      	mov	r1, r2
 8003a16:	461a      	mov	r2, r3
 8003a18:	4603      	mov	r3, r0
 8003a1a:	70fb      	strb	r3, [r7, #3]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	70bb      	strb	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8003a32:	78bb      	ldrb	r3, [r7, #2]
 8003a34:	883a      	ldrh	r2, [r7, #0]
 8003a36:	78f9      	ldrb	r1, [r7, #3]
 8003a38:	f004 f946 	bl	8007cc8 <HAL_PCD_EP_Open>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 f908 	bl	8003c58 <USBD_Get_USB_Status>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	4611      	mov	r1, r2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f004 f98f 	bl	8007d98 <HAL_PCD_EP_Close>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f8e9 	bl	8003c58 <USBD_Get_USB_Status>
 8003a86:	4603      	mov	r3, r0
 8003a88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003a8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f004 fa48 	bl	8007f48 <HAL_PCD_EP_SetStall>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 f8ca 	bl	8003c58 <USBD_Get_USB_Status>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f004 fa8d 	bl	8008010 <HAL_PCD_EP_ClrStall>
 8003af6:	4603      	mov	r3, r0
 8003af8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 f8ab 	bl	8003c58 <USBD_Get_USB_Status>
 8003b02:	4603      	mov	r3, r0
 8003b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8003b22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8003b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da0b      	bge.n	8003b44 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b32:	68f9      	ldr	r1, [r7, #12]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	333e      	adds	r3, #62	@ 0x3e
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	e00b      	b.n	8003b5c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8003b5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr

08003b66 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 f87a 	bl	8007c7e <HAL_PCD_SetAddress>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 f861 	bl	8003c58 <USBD_Get_USB_Status>
 8003b96:	4603      	mov	r3, r0
 8003b98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	607a      	str	r2, [r7, #4]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	72fb      	strb	r3, [r7, #11]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8003bc6:	893b      	ldrh	r3, [r7, #8]
 8003bc8:	7af9      	ldrb	r1, [r7, #11]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	f004 f981 	bl	8007ed2 <HAL_PCD_EP_Transmit>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 f83e 	bl	8003c58 <USBD_Get_USB_Status>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8003be0:	7dbb      	ldrb	r3, [r7, #22]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b086      	sub	sp, #24
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	72fb      	strb	r3, [r7, #11]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8003c0c:	893b      	ldrh	r3, [r7, #8]
 8003c0e:	7af9      	ldrb	r1, [r7, #11]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	f004 f90b 	bl	8007e2c <HAL_PCD_EP_Receive>
 8003c16:	4603      	mov	r3, r0
 8003c18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 f81b 	bl	8003c58 <USBD_Get_USB_Status>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8003c26:	7dbb      	ldrb	r3, [r7, #22]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 f92c 	bl	8007ea4 <HAL_PCD_EP_GetRxCount>
 8003c4c:	4603      	mov	r3, r0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d817      	bhi.n	8003c9c <USBD_Get_USB_Status+0x44>
 8003c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <USBD_Get_USB_Status+0x1c>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c85 	.word	0x08003c85
 8003c78:	08003c8b 	.word	0x08003c8b
 8003c7c:	08003c91 	.word	0x08003c91
 8003c80:	08003c97 	.word	0x08003c97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
    break;
 8003c88:	e00b      	b.n	8003ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	73fb      	strb	r3, [r7, #15]
    break;
 8003c8e:	e008      	b.n	8003ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
    break;
 8003c94:	e005      	b.n	8003ca2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8003c96:	2302      	movs	r3, #2
 8003c98:	73fb      	strb	r3, [r7, #15]
    break;
 8003c9a:	e002      	b.n	8003ca2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	73fb      	strb	r3, [r7, #15]
    break;
 8003ca0:	bf00      	nop
  }
  return usb_status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop

08003cb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <HAL_Init+0x40>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cfc <HAL_Init+0x40>)
 8003cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <HAL_Init+0x40>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8003cfc <HAL_Init+0x40>)
 8003cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cd8:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <HAL_Init+0x40>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	@ (8003cfc <HAL_Init+0x40>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce4:	2003      	movs	r0, #3
 8003ce6:	f000 fd2d 	bl	8004744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cea:	2000      	movs	r0, #0
 8003cec:	f000 f808 	bl	8003d00 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003cf0:	f7fe fbc0 	bl	8002474 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023c00 	.word	0x40023c00

08003d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d08:	4b12      	ldr	r3, [pc, #72]	@ (8003d54 <HAL_InitTick+0x54>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <HAL_InitTick+0x58>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	4619      	mov	r1, r3
 8003d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 fd45 	bl	80047ae <HAL_SYSTICK_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e00e      	b.n	8003d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b0f      	cmp	r3, #15
 8003d32:	d80a      	bhi.n	8003d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d34:	2200      	movs	r2, #0
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	f000 fd0d 	bl	800475a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d40:	4a06      	ldr	r2, [pc, #24]	@ (8003d5c <HAL_InitTick+0x5c>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20000070 	.word	0x20000070
 8003d58:	20000078 	.word	0x20000078
 8003d5c:	20000074 	.word	0x20000074

08003d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <HAL_IncTick+0x1c>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <HAL_IncTick+0x20>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4413      	add	r3, r2
 8003d70:	4a03      	ldr	r2, [pc, #12]	@ (8003d80 <HAL_IncTick+0x20>)
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	20000078 	.word	0x20000078
 8003d80:	20006f78 	.word	0x20006f78

08003d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return uwTick;
 8003d88:	4b02      	ldr	r3, [pc, #8]	@ (8003d94 <HAL_GetTick+0x10>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	20006f78 	.word	0x20006f78

08003d98 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003da0:	f7ff fff0 	bl	8003d84 <HAL_GetTick>
 8003da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d005      	beq.n	8003dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003db2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <HAL_Delay+0x44>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4413      	add	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003dbe:	bf00      	nop
 8003dc0:	f7ff ffe0 	bl	8003d84 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d8f7      	bhi.n	8003dc0 <HAL_Delay+0x28>
  {
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000078 	.word	0x20000078

08003de0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e033      	b.n	8003e5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d109      	bne.n	8003e12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7fe fb5e 	bl	80024c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d118      	bne.n	8003e50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e26:	f023 0302 	bic.w	r3, r3, #2
 8003e2a:	f043 0202 	orr.w	r2, r3, #2
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa32 	bl	800429c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	f023 0303 	bic.w	r3, r3, #3
 8003e46:	f043 0201 	orr.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e4e:	e001      	b.n	8003e54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_ADC_Start_DMA+0x1e>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e0bc      	b.n	8004000 <HAL_ADC_Start_DMA+0x198>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d018      	beq.n	8003ece <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003eac:	4b56      	ldr	r3, [pc, #344]	@ (8004008 <HAL_ADC_Start_DMA+0x1a0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a56      	ldr	r2, [pc, #344]	@ (800400c <HAL_ADC_Start_DMA+0x1a4>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	0c9a      	lsrs	r2, r3, #18
 8003eb8:	4613      	mov	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003ec0:	e002      	b.n	8003ec8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f9      	bne.n	8003ec2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	f040 8084 	bne.w	8003fe6 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f08:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f1c:	d106      	bne.n	8003f2c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f023 0206 	bic.w	r2, r3, #6
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f2a:	e002      	b.n	8003f32 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3e:	4a34      	ldr	r2, [pc, #208]	@ (8004010 <HAL_ADC_Start_DMA+0x1a8>)
 8003f40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f46:	4a33      	ldr	r2, [pc, #204]	@ (8004014 <HAL_ADC_Start_DMA+0x1ac>)
 8003f48:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f4e:	4a32      	ldr	r2, [pc, #200]	@ (8004018 <HAL_ADC_Start_DMA+0x1b0>)
 8003f50:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003f6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	334c      	adds	r3, #76	@ 0x4c
 8003f86:	4619      	mov	r1, r3
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f000 fcca 	bl	8004924 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003f90:	4b22      	ldr	r3, [pc, #136]	@ (800401c <HAL_ADC_Start_DMA+0x1b4>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10f      	bne.n	8003fbc <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d129      	bne.n	8003ffe <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003fb8:	609a      	str	r2, [r3, #8]
 8003fba:	e020      	b.n	8003ffe <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a17      	ldr	r2, [pc, #92]	@ (8004020 <HAL_ADC_Start_DMA+0x1b8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d11b      	bne.n	8003ffe <HAL_ADC_Start_DMA+0x196>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d114      	bne.n	8003ffe <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	e00b      	b.n	8003ffe <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	f043 0210 	orr.w	r2, r3, #16
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000070 	.word	0x20000070
 800400c:	431bde83 	.word	0x431bde83
 8004010:	080044a9 	.word	0x080044a9
 8004014:	08004563 	.word	0x08004563
 8004018:	0800457f 	.word	0x0800457f
 800401c:	40012300 	.word	0x40012300
 8004020:	40012000 	.word	0x40012000

08004024 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
	...

0800405c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x1c>
 8004074:	2302      	movs	r3, #2
 8004076:	e103      	b.n	8004280 <HAL_ADC_ConfigChannel+0x224>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b09      	cmp	r3, #9
 8004086:	d925      	bls.n	80040d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68d9      	ldr	r1, [r3, #12]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	3b1e      	subs	r3, #30
 800409e:	2207      	movs	r2, #7
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43da      	mvns	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	400a      	ands	r2, r1
 80040ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68d9      	ldr	r1, [r3, #12]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	4618      	mov	r0, r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	4403      	add	r3, r0
 80040c6:	3b1e      	subs	r3, #30
 80040c8:	409a      	lsls	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	60da      	str	r2, [r3, #12]
 80040d2:	e022      	b.n	800411a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6919      	ldr	r1, [r3, #16]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	2207      	movs	r2, #7
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	400a      	ands	r2, r1
 80040f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6919      	ldr	r1, [r3, #16]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	689a      	ldr	r2, [r3, #8]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	b29b      	uxth	r3, r3
 8004108:	4618      	mov	r0, r3
 800410a:	4603      	mov	r3, r0
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4403      	add	r3, r0
 8004110:	409a      	lsls	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b06      	cmp	r3, #6
 8004120:	d824      	bhi.n	800416c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	3b05      	subs	r3, #5
 8004134:	221f      	movs	r2, #31
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	400a      	ands	r2, r1
 8004142:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b29b      	uxth	r3, r3
 8004150:	4618      	mov	r0, r3
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	3b05      	subs	r3, #5
 800415e:	fa00 f203 	lsl.w	r2, r0, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	635a      	str	r2, [r3, #52]	@ 0x34
 800416a:	e04c      	b.n	8004206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d824      	bhi.n	80041be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	3b23      	subs	r3, #35	@ 0x23
 8004186:	221f      	movs	r2, #31
 8004188:	fa02 f303 	lsl.w	r3, r2, r3
 800418c:	43da      	mvns	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	400a      	ands	r2, r1
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	4618      	mov	r0, r3
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	3b23      	subs	r3, #35	@ 0x23
 80041b0:	fa00 f203 	lsl.w	r2, r0, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80041bc:	e023      	b.n	8004206 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	3b41      	subs	r3, #65	@ 0x41
 80041d0:	221f      	movs	r2, #31
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43da      	mvns	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	400a      	ands	r2, r1
 80041de:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	4618      	mov	r0, r3
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	3b41      	subs	r3, #65	@ 0x41
 80041fa:	fa00 f203 	lsl.w	r2, r0, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a20      	ldr	r2, [pc, #128]	@ (800428c <HAL_ADC_ConfigChannel+0x230>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d109      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x1c8>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b12      	cmp	r3, #18
 8004216:	d105      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004218:	4b1d      	ldr	r3, [pc, #116]	@ (8004290 <HAL_ADC_ConfigChannel+0x234>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <HAL_ADC_ConfigChannel+0x234>)
 800421e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004222:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a18      	ldr	r2, [pc, #96]	@ (800428c <HAL_ADC_ConfigChannel+0x230>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d123      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x21a>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b10      	cmp	r3, #16
 8004234:	d003      	beq.n	800423e <HAL_ADC_ConfigChannel+0x1e2>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b11      	cmp	r3, #17
 800423c:	d11b      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800423e:	4b14      	ldr	r3, [pc, #80]	@ (8004290 <HAL_ADC_ConfigChannel+0x234>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4a13      	ldr	r2, [pc, #76]	@ (8004290 <HAL_ADC_ConfigChannel+0x234>)
 8004244:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004248:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b10      	cmp	r3, #16
 8004250:	d111      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004252:	4b10      	ldr	r3, [pc, #64]	@ (8004294 <HAL_ADC_ConfigChannel+0x238>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a10      	ldr	r2, [pc, #64]	@ (8004298 <HAL_ADC_ConfigChannel+0x23c>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	0c9a      	lsrs	r2, r3, #18
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004268:	e002      	b.n	8004270 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3b01      	subs	r3, #1
 800426e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f9      	bne.n	800426a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40012000 	.word	0x40012000
 8004290:	40012300 	.word	0x40012300
 8004294:	20000070 	.word	0x20000070
 8004298:	431bde83 	.word	0x431bde83

0800429c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80042a4:	4b7e      	ldr	r3, [pc, #504]	@ (80044a0 <ADC_Init+0x204>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4a7d      	ldr	r2, [pc, #500]	@ (80044a0 <ADC_Init+0x204>)
 80042aa:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80042ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80042b0:	4b7b      	ldr	r3, [pc, #492]	@ (80044a0 <ADC_Init+0x204>)
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4979      	ldr	r1, [pc, #484]	@ (80044a0 <ADC_Init+0x204>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	021a      	lsls	r2, r3, #8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80042f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6859      	ldr	r1, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6899      	ldr	r1, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432a:	4a5e      	ldr	r2, [pc, #376]	@ (80044a4 <ADC_Init+0x208>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d022      	beq.n	8004376 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800433e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6899      	ldr	r1, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	e00f      	b.n	8004396 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004384:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004394:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0202 	bic.w	r2, r2, #2
 80043a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6899      	ldr	r1, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7e1b      	ldrb	r3, [r3, #24]
 80043b0:	005a      	lsls	r2, r3, #1
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d027      	beq.n	8004414 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685a      	ldr	r2, [r3, #4]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80043e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	3b01      	subs	r3, #1
 80043ea:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80043ee:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	fa92 f2a2 	rbit	r2, r2
 80043f6:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	fab2 f282 	clz	r2, r2
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	fa03 f102 	lsl.w	r1, r3, r2
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e007      	b.n	8004424 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004422:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004432:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	3b01      	subs	r3, #1
 8004440:	051a      	lsls	r2, r3, #20
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004466:	025a      	lsls	r2, r3, #9
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6899      	ldr	r1, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	029a      	lsls	r2, r3, #10
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40012300 	.word	0x40012300
 80044a4:	0f000001 	.word	0x0f000001

080044a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d13c      	bne.n	800453c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d12b      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d127      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d006      	beq.n	8004500 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d119      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0220 	bic.w	r2, r2, #32
 800450e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff fd75 	bl	8004024 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800453a:	e00e      	b.n	800455a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f7ff fd7d 	bl	8004048 <HAL_ADC_ErrorCallback>
}
 800454e:	e004      	b.n	800455a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	4798      	blx	r3
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b084      	sub	sp, #16
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff fd60 	bl	8004036 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2240      	movs	r2, #64	@ 0x40
 8004590:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004596:	f043 0204 	orr.w	r2, r3, #4
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff fd52 	bl	8004048 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045bc:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <__NVIC_SetPriorityGrouping+0x44>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045c8:	4013      	ands	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045de:	4a04      	ldr	r2, [pc, #16]	@ (80045f0 <__NVIC_SetPriorityGrouping+0x44>)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	60d3      	str	r3, [r2, #12]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	e000ed00 	.word	0xe000ed00

080045f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f8:	4b04      	ldr	r3, [pc, #16]	@ (800460c <__NVIC_GetPriorityGrouping+0x18>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	0a1b      	lsrs	r3, r3, #8
 80045fe:	f003 0307 	and.w	r3, r3, #7
}
 8004602:	4618      	mov	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	2b00      	cmp	r3, #0
 8004620:	db0b      	blt.n	800463a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	f003 021f 	and.w	r2, r3, #31
 8004628:	4906      	ldr	r1, [pc, #24]	@ (8004644 <__NVIC_EnableIRQ+0x34>)
 800462a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	2001      	movs	r0, #1
 8004632:	fa00 f202 	lsl.w	r2, r0, r2
 8004636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr
 8004644:	e000e100 	.word	0xe000e100

08004648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	2b00      	cmp	r3, #0
 800465a:	db0a      	blt.n	8004672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	490c      	ldr	r1, [pc, #48]	@ (8004694 <__NVIC_SetPriority+0x4c>)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	440b      	add	r3, r1
 800466c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004670:	e00a      	b.n	8004688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	4908      	ldr	r1, [pc, #32]	@ (8004698 <__NVIC_SetPriority+0x50>)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	3b04      	subs	r3, #4
 8004680:	0112      	lsls	r2, r2, #4
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	440b      	add	r3, r1
 8004686:	761a      	strb	r2, [r3, #24]
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	e000e100 	.word	0xe000e100
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	@ 0x24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f1c3 0307 	rsb	r3, r3, #7
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	bf28      	it	cs
 80046ba:	2304      	movcs	r3, #4
 80046bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2b06      	cmp	r3, #6
 80046c4:	d902      	bls.n	80046cc <NVIC_EncodePriority+0x30>
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3b03      	subs	r3, #3
 80046ca:	e000      	b.n	80046ce <NVIC_EncodePriority+0x32>
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43da      	mvns	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	401a      	ands	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e4:	f04f 31ff 	mov.w	r1, #4294967295
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fa01 f303 	lsl.w	r3, r1, r3
 80046ee:	43d9      	mvns	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f4:	4313      	orrs	r3, r2
         );
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3724      	adds	r7, #36	@ 0x24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004710:	d301      	bcc.n	8004716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004712:	2301      	movs	r3, #1
 8004714:	e00f      	b.n	8004736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004716:	4a0a      	ldr	r2, [pc, #40]	@ (8004740 <SysTick_Config+0x40>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3b01      	subs	r3, #1
 800471c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800471e:	210f      	movs	r1, #15
 8004720:	f04f 30ff 	mov.w	r0, #4294967295
 8004724:	f7ff ff90 	bl	8004648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <SysTick_Config+0x40>)
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800472e:	4b04      	ldr	r3, [pc, #16]	@ (8004740 <SysTick_Config+0x40>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	e000e010 	.word	0xe000e010

08004744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ff2d 	bl	80045ac <__NVIC_SetPriorityGrouping>
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800475a:	b580      	push	{r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800476c:	f7ff ff42 	bl	80045f4 <__NVIC_GetPriorityGrouping>
 8004770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	6978      	ldr	r0, [r7, #20]
 8004778:	f7ff ff90 	bl	800469c <NVIC_EncodePriority>
 800477c:	4602      	mov	r2, r0
 800477e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff ff5f 	bl	8004648 <__NVIC_SetPriority>
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	4603      	mov	r3, r0
 800479a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800479c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff35 	bl	8004610 <__NVIC_EnableIRQ>
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff ffa2 	bl	8004700 <SysTick_Config>
 80047bc:	4603      	mov	r3, r0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047d4:	f7ff fad6 	bl	8003d84 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e099      	b.n	8004918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004804:	e00f      	b.n	8004826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004806:	f7ff fabd 	bl	8003d84 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b05      	cmp	r3, #5
 8004812:	d908      	bls.n	8004826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2203      	movs	r2, #3
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e078      	b.n	8004918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e8      	bne.n	8004806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4b38      	ldr	r3, [pc, #224]	@ (8004920 <HAL_DMA_Init+0x158>)
 8004840:	4013      	ands	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	2b04      	cmp	r3, #4
 800487e:	d107      	bne.n	8004890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004888:	4313      	orrs	r3, r2
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	4313      	orrs	r3, r2
 800488e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f023 0307 	bic.w	r3, r3, #7
 80048a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d117      	bne.n	80048ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00e      	beq.n	80048ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa6d 	bl	8004dac <DMA_CheckFifoParam>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2240      	movs	r2, #64	@ 0x40
 80048dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80048e6:	2301      	movs	r3, #1
 80048e8:	e016      	b.n	8004918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa26 	bl	8004d44 <DMA_CalcBaseAndBitshift>
 80048f8:	4603      	mov	r3, r0
 80048fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004900:	223f      	movs	r2, #63	@ 0x3f
 8004902:	409a      	lsls	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	f010803f 	.word	0xf010803f

08004924 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_DMA_Start_IT+0x26>
 8004946:	2302      	movs	r3, #2
 8004948:	e040      	b.n	80049cc <HAL_DMA_Start_IT+0xa8>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d12f      	bne.n	80049be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	68b9      	ldr	r1, [r7, #8]
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f9b8 	bl	8004ce8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	223f      	movs	r2, #63	@ 0x3f
 800497e:	409a      	lsls	r2, r3
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f042 0216 	orr.w	r2, r2, #22
 8004992:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0208 	orr.w	r2, r2, #8
 80049aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e005      	b.n	80049ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
 80049c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049e0:	4b8e      	ldr	r3, [pc, #568]	@ (8004c1c <HAL_DMA_IRQHandler+0x248>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a8e      	ldr	r2, [pc, #568]	@ (8004c20 <HAL_DMA_IRQHandler+0x24c>)
 80049e6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ea:	0a9b      	lsrs	r3, r3, #10
 80049ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fe:	2208      	movs	r2, #8
 8004a00:	409a      	lsls	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01a      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d013      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0204 	bic.w	r2, r2, #4
 8004a26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a38:	f043 0201 	orr.w	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a44:	2201      	movs	r2, #1
 8004a46:	409a      	lsls	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d012      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a62:	2201      	movs	r2, #1
 8004a64:	409a      	lsls	r2, r3
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a6e:	f043 0202 	orr.w	r2, r3, #2
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	409a      	lsls	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4013      	ands	r3, r2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d012      	beq.n	8004aac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00b      	beq.n	8004aac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a98:	2204      	movs	r2, #4
 8004a9a:	409a      	lsls	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa4:	f043 0204 	orr.w	r2, r3, #4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d043      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03c      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ace:	2210      	movs	r2, #16
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d018      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d024      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
 8004b02:	e01f      	b.n	8004b44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
 8004b14:	e016      	b.n	8004b44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0208 	bic.w	r2, r2, #8
 8004b32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b48:	2220      	movs	r2, #32
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 808f 	beq.w	8004c74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8087 	beq.w	8004c74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	409a      	lsls	r2, r3
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d136      	bne.n	8004bec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0216 	bic.w	r2, r2, #22
 8004b8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d103      	bne.n	8004bae <HAL_DMA_IRQHandler+0x1da>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0208 	bic.w	r2, r2, #8
 8004bbc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc2:	223f      	movs	r2, #63	@ 0x3f
 8004bc4:	409a      	lsls	r2, r3
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d07e      	beq.n	8004ce0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
        }
        return;
 8004bea:	e079      	b.n	8004ce0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d01d      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d031      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	4798      	blx	r3
 8004c18:	e02c      	b.n	8004c74 <HAL_DMA_IRQHandler+0x2a0>
 8004c1a:	bf00      	nop
 8004c1c:	20000070 	.word	0x20000070
 8004c20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d023      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4798      	blx	r3
 8004c34:	e01e      	b.n	8004c74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10f      	bne.n	8004c64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0210 	bic.w	r2, r2, #16
 8004c52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d032      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d022      	beq.n	8004cce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2205      	movs	r2, #5
 8004c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d307      	bcc.n	8004cbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f2      	bne.n	8004ca0 <HAL_DMA_IRQHandler+0x2cc>
 8004cba:	e000      	b.n	8004cbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004cbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	4798      	blx	r3
 8004cde:	e000      	b.n	8004ce2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ce0:	bf00      	nop
    }
  }
}
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d04:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b40      	cmp	r3, #64	@ 0x40
 8004d14:	d108      	bne.n	8004d28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004d26:	e007      	b.n	8004d38 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	60da      	str	r2, [r3, #12]
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr
	...

08004d44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	3b10      	subs	r3, #16
 8004d54:	4a13      	ldr	r2, [pc, #76]	@ (8004da4 <DMA_CalcBaseAndBitshift+0x60>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d5e:	4a12      	ldr	r2, [pc, #72]	@ (8004da8 <DMA_CalcBaseAndBitshift+0x64>)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	461a      	mov	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d909      	bls.n	8004d86 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	1d1a      	adds	r2, r3, #4
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d84:	e007      	b.n	8004d96 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d8e:	f023 0303 	bic.w	r3, r3, #3
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	aaaaaaab 	.word	0xaaaaaaab
 8004da8:	08017e50 	.word	0x08017e50

08004dac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d11f      	bne.n	8004e06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d856      	bhi.n	8004e7a <DMA_CheckFifoParam+0xce>
 8004dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <DMA_CheckFifoParam+0x28>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004df7 	.word	0x08004df7
 8004ddc:	08004de5 	.word	0x08004de5
 8004de0:	08004e7b 	.word	0x08004e7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d046      	beq.n	8004e7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df4:	e043      	b.n	8004e7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dfe:	d140      	bne.n	8004e82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e04:	e03d      	b.n	8004e82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e0e:	d121      	bne.n	8004e54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d837      	bhi.n	8004e86 <DMA_CheckFifoParam+0xda>
 8004e16:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <DMA_CheckFifoParam+0x70>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e33 	.word	0x08004e33
 8004e24:	08004e2d 	.word	0x08004e2d
 8004e28:	08004e45 	.word	0x08004e45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e30:	e030      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d025      	beq.n	8004e8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e42:	e022      	b.n	8004e8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e4c:	d11f      	bne.n	8004e8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e52:	e01c      	b.n	8004e8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d903      	bls.n	8004e62 <DMA_CheckFifoParam+0xb6>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d003      	beq.n	8004e68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e60:	e018      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
      break;
 8004e66:	e015      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
      break;
 8004e78:	e00b      	b.n	8004e92 <DMA_CheckFifoParam+0xe6>
      break;
 8004e7a:	bf00      	nop
 8004e7c:	e00a      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
      break;
 8004e7e:	bf00      	nop
 8004e80:	e008      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
      break;
 8004e82:	bf00      	nop
 8004e84:	e006      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
      break;
 8004e86:	bf00      	nop
 8004e88:	e004      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e002      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e8e:	bf00      	nop
 8004e90:	e000      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
      break;
 8004e92:	bf00      	nop
    }
  } 
  
  return status; 
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004eb0:	4ba3      	ldr	r3, [pc, #652]	@ (8005140 <HAL_ETH_Init+0x2a0>)
 8004eb2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e173      	b.n	80051ae <HAL_ETH_Init+0x30e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fd fe2e 	bl	8002b3c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	60bb      	str	r3, [r7, #8]
 8004ee4:	4b97      	ldr	r3, [pc, #604]	@ (8005144 <HAL_ETH_Init+0x2a4>)
 8004ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee8:	4a96      	ldr	r2, [pc, #600]	@ (8005144 <HAL_ETH_Init+0x2a4>)
 8004eea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eee:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ef0:	4b94      	ldr	r3, [pc, #592]	@ (8005144 <HAL_ETH_Init+0x2a4>)
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004efc:	4b92      	ldr	r3, [pc, #584]	@ (8005148 <HAL_ETH_Init+0x2a8>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4a91      	ldr	r2, [pc, #580]	@ (8005148 <HAL_ETH_Init+0x2a8>)
 8004f02:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004f06:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004f08:	4b8f      	ldr	r3, [pc, #572]	@ (8005148 <HAL_ETH_Init+0x2a8>)
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	498d      	ldr	r1, [pc, #564]	@ (8005148 <HAL_ETH_Init+0x2a8>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	f043 0301 	orr.w	r3, r3, #1
 8004f28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f2e:	f7fe ff29 	bl	8003d84 <HAL_GetTick>
 8004f32:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004f34:	e011      	b.n	8004f5a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8004f36:	f7fe ff25 	bl	8003d84 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004f44:	d909      	bls.n	8004f5a <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2203      	movs	r2, #3
 8004f4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e129      	b.n	80051ae <HAL_ETH_Init+0x30e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e4      	bne.n	8004f36 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f023 031c 	bic.w	r3, r3, #28
 8004f7a:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004f7c:	f003 ff2c 	bl	8008dd8 <HAL_RCC_GetHCLKFreq>
 8004f80:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	4a71      	ldr	r2, [pc, #452]	@ (800514c <HAL_ETH_Init+0x2ac>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d908      	bls.n	8004f9c <HAL_ETH_Init+0xfc>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	4a70      	ldr	r2, [pc, #448]	@ (8005150 <HAL_ETH_Init+0x2b0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d804      	bhi.n	8004f9c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f043 0308 	orr.w	r3, r3, #8
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e01a      	b.n	8004fd2 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	4a6c      	ldr	r2, [pc, #432]	@ (8005150 <HAL_ETH_Init+0x2b0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d908      	bls.n	8004fb6 <HAL_ETH_Init+0x116>
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	4a66      	ldr	r2, [pc, #408]	@ (8005140 <HAL_ETH_Init+0x2a0>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d204      	bcs.n	8004fb6 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f043 030c 	orr.w	r3, r3, #12
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e00d      	b.n	8004fd2 <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	4a61      	ldr	r2, [pc, #388]	@ (8005140 <HAL_ETH_Init+0x2a0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d303      	bcc.n	8004fc6 <HAL_ETH_Init+0x126>
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	4a64      	ldr	r2, [pc, #400]	@ (8005154 <HAL_ETH_Init+0x2b4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d904      	bls.n	8004fd0 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	f043 0304 	orr.w	r3, r3, #4
 8004fcc:	61fb      	str	r3, [r7, #28]
 8004fce:	e000      	b.n	8004fd2 <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004fd0:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004fda:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004fde:	2100      	movs	r1, #0
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fb8e 	bl	8005702 <HAL_ETH_WritePHYRegister>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004ff0:	6939      	ldr	r1, [r7, #16]
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fd44 	bl	8005a80 <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0d4      	b.n	80051ae <HAL_ETH_Init+0x30e>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8005004:	20ff      	movs	r0, #255	@ 0xff
 8005006:	f7fe fec7 	bl	8003d98 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80a2 	beq.w	8005158 <HAL_ETH_Init+0x2b8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005014:	f7fe feb6 	bl	8003d84 <HAL_GetTick>
 8005018:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	461a      	mov	r2, r3
 8005020:	2101      	movs	r1, #1
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fb05 	bl	8005632 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8005028:	f7fe feac 	bl	8003d84 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d90f      	bls.n	800505a <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800503e:	6939      	ldr	r1, [r7, #16]
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fd1d 	bl	8005a80 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0a9      	b.n	80051ae <HAL_ETH_Init+0x30e>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0da      	beq.n	800501a <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8005064:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005068:	2100      	movs	r1, #0
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fb49 	bl	8005702 <HAL_ETH_WritePHYRegister>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800507a:	6939      	ldr	r1, [r7, #16]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fcff 	bl	8005a80 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e08f      	b.n	80051ae <HAL_ETH_Init+0x30e>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800508e:	f7fe fe79 	bl	8003d84 <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005094:	f107 030c 	add.w	r3, r7, #12
 8005098:	461a      	mov	r2, r3
 800509a:	2101      	movs	r1, #1
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fac8 	bl	8005632 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80050a2:	f7fe fe6f 	bl	8003d84 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d90f      	bls.n	80050d4 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80050b8:	6939      	ldr	r1, [r7, #16]
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fce0 	bl	8005a80 <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e06c      	b.n	80051ae <HAL_ETH_Init+0x30e>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0da      	beq.n	8005094 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80050de:	f107 030c 	add.w	r3, r7, #12
 80050e2:	461a      	mov	r2, r3
 80050e4:	2110      	movs	r1, #16
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 faa3 	bl	8005632 <HAL_ETH_ReadPHYRegister>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80050f6:	6939      	ldr	r1, [r7, #16]
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fcc1 	bl	8005a80 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e051      	b.n	80051ae <HAL_ETH_Init+0x30e>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0304 	and.w	r3, r3, #4
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800511a:	60da      	str	r2, [r3, #12]
 800511c:	e002      	b.n	8005124 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	e032      	b.n	800519c <HAL_ETH_Init+0x2fc>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800513c:	609a      	str	r2, [r3, #8]
 800513e:	e02d      	b.n	800519c <HAL_ETH_Init+0x2fc>
 8005140:	03938700 	.word	0x03938700
 8005144:	40023800 	.word	0x40023800
 8005148:	40013800 	.word	0x40013800
 800514c:	01312cff 	.word	0x01312cff
 8005150:	02160ebf 	.word	0x02160ebf
 8005154:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	08db      	lsrs	r3, r3, #3
 800515e:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	085b      	lsrs	r3, r3, #1
 8005166:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8005168:	4313      	orrs	r3, r2
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	2100      	movs	r1, #0
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fac6 	bl	8005702 <HAL_ETH_WritePHYRegister>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00b      	beq.n	8005194 <HAL_ETH_Init+0x2f4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8005180:	6939      	ldr	r1, [r7, #16]
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fc7c 	bl	8005a80 <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e00c      	b.n	80051ae <HAL_ETH_Init+0x30e>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8005194:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8005198:	f7fe fdfe 	bl	8003d98 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800519c:	6939      	ldr	r1, [r7, #16]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fc6e 	bl	8005a80 <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop

080051b8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_ETH_DMATxDescListInit+0x20>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e051      	b.n	800527c <HAL_ETH_DMATxDescListInit+0xc4>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	e030      	b.n	8005256 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	015b      	lsls	r3, r3, #5
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	4413      	add	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005204:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	461a      	mov	r2, r3
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	3b01      	subs	r3, #1
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	d208      	bcs.n	800524a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3301      	adds	r3, #1
 800523c:	015b      	lsls	r3, r3, #5
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	4413      	add	r3, r2
 8005242:	461a      	mov	r2, r3
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	60da      	str	r2, [r3, #12]
 8005248:	e002      	b.n	8005250 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3301      	adds	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d3ca      	bcc.n	80051f4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005268:	6113      	str	r3, [r2, #16]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	371c      	adds	r7, #28
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr

08005286 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8005286:	b480      	push	{r7}
 8005288:	b087      	sub	sp, #28
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d101      	bne.n	80052a6 <HAL_ETH_DMARxDescListInit+0x20>
 80052a2:	2302      	movs	r3, #2
 80052a4:	e055      	b.n	8005352 <HAL_ETH_DMARxDescListInit+0xcc>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	e034      	b.n	800532c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	015b      	lsls	r3, r3, #5
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4413      	add	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052d2:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80052da:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	461a      	mov	r2, r3
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d105      	bne.n	8005304 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	3b01      	subs	r3, #1
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	429a      	cmp	r2, r3
 800530c:	d208      	bcs.n	8005320 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	3301      	adds	r3, #1
 8005312:	015b      	lsls	r3, r3, #5
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	4413      	add	r3, r2
 8005318:	461a      	mov	r2, r3
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	60da      	str	r2, [r3, #12]
 800531e:	e002      	b.n	8005326 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	3301      	adds	r3, #1
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	429a      	cmp	r2, r3
 8005332:	d3c6      	bcc.n	80052c2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800533e:	60d3      	str	r3, [r2, #12]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	2300      	movs	r3, #0
 8005370:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_ETH_TransmitFrame+0x24>
 800537c:	2302      	movs	r3, #2
 800537e:	e0cc      	b.n	800551a <HAL_ETH_TransmitFrame+0x1be>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (FrameLength == 0U)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return  HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0b7      	b.n	800551a <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	da09      	bge.n	80053c8 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2212      	movs	r2, #18
 80053b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0a8      	b.n	800551a <HAL_ETH_TransmitFrame+0x1be>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d915      	bls.n	80053fe <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	4a53      	ldr	r2, [pc, #332]	@ (8005524 <HAL_ETH_TransmitFrame+0x1c8>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	0a9b      	lsrs	r3, r3, #10
 80053dc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	4b50      	ldr	r3, [pc, #320]	@ (8005524 <HAL_ETH_TransmitFrame+0x1c8>)
 80053e2:	fba3 1302 	umull	r1, r3, r3, r2
 80053e6:	0a9b      	lsrs	r3, r3, #10
 80053e8:	f240 51f4 	movw	r1, #1524	@ 0x5f4
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	3301      	adds	r3, #1
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e001      	b.n	8005402 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80053fe:	2301      	movs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d11c      	bne.n	8005442 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	f042 5240 	orr.w	r2, r2, #805306368	@ 0x30000000
 8005416:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005422:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005432:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005440:	e04b      	b.n	80054da <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8005442:	2300      	movs	r3, #0
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	e044      	b.n	80054d2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005452:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005456:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d107      	bne.n	800546e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005468:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800546c:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8005476:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	3b01      	subs	r3, #1
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	429a      	cmp	r2, r3
 8005480:	d116      	bne.n	80054b0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800548c:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8005490:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4a24      	ldr	r2, [pc, #144]	@ (8005528 <HAL_ETH_TransmitFrame+0x1cc>)
 8005496:	fb03 f202 	mul.w	r2, r3, r2
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	4413      	add	r3, r2
 800549e:	f203 53f4 	addw	r3, r3, #1524	@ 0x5f4
 80054a2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80054ae:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80054be:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	461a      	mov	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    for (i = 0U; i < bufcount; i++)
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	3301      	adds	r3, #1
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d3b6      	bcc.n	8005448 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00d      	beq.n	8005508 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054f4:	461a      	mov	r2, r3
 80054f6:	2304      	movs	r3, #4
 80054f8:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005502:	461a      	mov	r2, r3
 8005504:	2300      	movs	r3, #0
 8005506:	6053      	str	r3, [r2, #4]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	371c      	adds	r7, #28
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	ac02b00b 	.word	0xac02b00b
 8005528:	fffffa0c 	.word	0xfffffa0c

0800552c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_ETH_GetReceivedFrame+0x1a>
 8005542:	2302      	movs	r3, #2
 8005544:	e070      	b.n	8005628 <HAL_ETH_GetReceivedFrame+0xfc>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	db5a      	blt.n	8005616 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d030      	beq.n	80055d0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557c:	2b01      	cmp	r3, #1
 800557e:	d103      	bne.n	8005588 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	0c1b      	lsrs	r3, r3, #16
 8005598:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800559c:	3b04      	subs	r3, #4
 800559e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	641a      	str	r2, [r3, #64]	@ 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	461a      	mov	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      /* Return function status */
      return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e02b      	b.n	8005628 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d010      	beq.n	8005600 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	631a      	str	r2, [r3, #48]	@ 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	635a      	str	r2, [r3, #52]	@ 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	461a      	mov	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80055fe:	e00a      	b.n	8005616 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005604:	1c5a      	adds	r2, r3, #1
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	639a      	str	r2, [r3, #56]	@ 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	461a      	mov	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	460b      	mov	r3, r1
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b82      	cmp	r3, #130	@ 0x82
 8005652:	d101      	bne.n	8005658 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
 8005656:	e050      	b.n	80056fa <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2282      	movs	r2, #130	@ 0x82
 800565c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 031c 	and.w	r3, r3, #28
 800566e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8a1b      	ldrh	r3, [r3, #16]
 8005674:	02db      	lsls	r3, r3, #11
 8005676:	b29b      	uxth	r3, r3
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800567e:	897b      	ldrh	r3, [r7, #10]
 8005680:	019b      	lsls	r3, r3, #6
 8005682:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 0302 	bic.w	r3, r3, #2
 8005692:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056a4:	f7fe fb6e 	bl	8003d84 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80056aa:	e015      	b.n	80056d8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80056ac:	f7fe fb6a 	bl	8003d84 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ba:	d309      	bcc.n	80056d0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e014      	b.n	80056fa <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e4      	bne.n	80056ac <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b086      	sub	sp, #24
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	460b      	mov	r3, r1
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b42      	cmp	r3, #66	@ 0x42
 8005722:	d101      	bne.n	8005728 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
 8005726:	e04e      	b.n	80057c6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2242      	movs	r2, #66	@ 0x42
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f003 031c 	and.w	r3, r3, #28
 800573e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8a1b      	ldrh	r3, [r3, #16]
 8005744:	02db      	lsls	r3, r3, #11
 8005746:	b29b      	uxth	r3, r3
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800574e:	897b      	ldrh	r3, [r7, #10]
 8005750:	019b      	lsls	r3, r3, #6
 8005752:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f043 0302 	orr.w	r3, r3, #2
 8005762:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800577e:	f7fe fb01 	bl	8003d84 <HAL_GetTick>
 8005782:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005784:	e015      	b.n	80057b2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005786:	f7fe fafd 	bl	8003d84 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005794:	d309      	bcc.n	80057aa <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

      return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e00d      	b.n	80057c6 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e4      	bne.n	8005786 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Return function status */
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_ETH_Start+0x16>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e01f      	b.n	8005824 <HAL_ETH_Start+0x56>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fb3f 	bl	8005e78 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fb76 	bl	8005eec <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fc01 	bl	8006008 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fbaa 	bl	8005f60 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fbd1 	bl	8005fb4 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_ETH_Stop+0x16>
 800583e:	2302      	movs	r3, #2
 8005840:	e01f      	b.n	8005882 <HAL_ETH_Stop+0x56>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fb99 	bl	8005f8a <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fbc0 	bl	8005fde <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fb61 	bl	8005f26 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fbcf 	bl	8006008 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fb21 	bl	8005eb2 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_ETH_ConfigMAC+0x1c>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e0e4      	b.n	8005a72 <HAL_ETH_ConfigMAC+0x1e6>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 80b1 	beq.w	8005a22 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4b6c      	ldr	r3, [pc, #432]	@ (8005a7c <HAL_ETH_ConfigMAC+0x1f0>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80058d8:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 80058de:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 80058e4:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 80058ea:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 80058f0:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 80058f6:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 80058fc:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8005902:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8005908:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 800590e:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          macconf->AutomaticPadCRCStrip |
 8005914:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          macconf->BackOffLimit |
 800591a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005932:	2001      	movs	r0, #1
 8005934:	f7fe fa30 	bl	8003d98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
                                          macconf->SourceAddrFilter |
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8005948:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
                                          macconf->SourceAddrFilter |
 800594e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                          macconf->PassControlFrames |
 8005954:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                                          macconf->BroadcastFramesReception |
 800595a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                                          macconf->DestinationAddrFilter |
 8005960:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                                          macconf->PromiscuousMode |
 8005966:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005972:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8005974:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800597e:	2001      	movs	r0, #1
 8005980:	f7fe fa0a 	bl	8003d98 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005994:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800599e:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80059ae:	4013      	ands	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80059bc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          macconf->ZeroQuantaPause |
 80059c2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                          macconf->PauseLowThreshold |
 80059c8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
                          macconf->UnicastPauseFrameDetect |
 80059ce:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                          macconf->ReceiveFlowControl |
 80059d4:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80059ec:	2001      	movs	r0, #1
 80059ee:	f7fe f9d3 	bl	8003d98 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
                                             macconf->VLANTagIdentifier);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a12:	2001      	movs	r0, #1
 8005a14:	f7fe f9c0 	bl	8003d98 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	61da      	str	r2, [r3, #28]
 8005a20:	e01e      	b.n	8005a60 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8005a30:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a52:	2001      	movs	r0, #1
 8005a54:	f7fe f9a0 	bl	8003d98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	ff20810f 	.word	0xff20810f

08005a80 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b0b0      	sub	sp, #192	@ 0xc0
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d007      	beq.n	8005aa6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a9c:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005aa4:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	653b      	str	r3, [r7, #80]	@ 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	657b      	str	r3, [r7, #84]	@ 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d103      	bne.n	8005ace <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8005ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005aca:	663b      	str	r3, [r7, #96]	@ 0x60
 8005acc:	e001      	b.n	8005ad2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ad6:	667b      	str	r3, [r7, #100]	@ 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	66bb      	str	r3, [r7, #104]	@ 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005adc:	2300      	movs	r3, #0
 8005ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	673b      	str	r3, [r7, #112]	@ 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	677b      	str	r3, [r7, #116]	@ 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	67bb      	str	r3, [r7, #120]	@ 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005aec:	2340      	movs	r3, #64	@ 0x40
 8005aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  macinit.HashTableHigh = 0x0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  macinit.HashTableLow = 0x0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  macinit.PauseTime = 0x0U;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005b26:	2300      	movs	r3, #0
 8005b28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8005b32:	2300      	movs	r3, #0
 8005b34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005b54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005b58:	4baa      	ldr	r3, [pc, #680]	@ (8005e04 <ETH_MACDMAConfig+0x384>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8005b60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
                        macinit.Jabber |
 8005b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8005b64:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8005b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
                        macinit.Jabber |
 8005b68:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8005b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
                        macinit.InterFrameGap |
 8005b6c:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8005b72:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8005b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
                        (heth->Init).Speed |
 8005b76:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8005b78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                        macinit.ReceiveOwn |
 8005b7a:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8005b80:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8005b82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
                        (heth->Init).DuplexMode |
 8005b84:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8005b86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
                        macinit.ChecksumOffload |
 8005b88:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8005b8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
                        macinit.RetryTransmission |
 8005b8c:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8005b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
                        macinit.AutomaticPadCRCStrip |
 8005b90:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8005b92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
                        macinit.BackOffLimit |
 8005b94:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8005b96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bb4:	2001      	movs	r0, #1
 8005bb6:	f7fe f8ef 	bl	8003d98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005bc2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8005bc4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
                                        macinit.SourceAddrFilter |
 8005bc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8005bc8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005bca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
                                        macinit.SourceAddrFilter |
 8005bcc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8005bce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
                                        macinit.PassControlFrames |
 8005bd2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
                                        macinit.BroadcastFramesReception |
 8005bd8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005bda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
                                        macinit.DestinationAddrFilter |
 8005bde:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005be0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
                                        macinit.PromiscuousMode |
 8005be4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005be8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005bf0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8005bf2:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bfe:	2001      	movs	r0, #1
 8005c00:	f7fe f8ca 	bl	8003d98 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005c0c:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c16:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005c20:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005c2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005c30:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005c34:	4013      	ands	r3, r2
 8005c36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8005c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c3e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8005c44:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005c46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
                        macinit.ZeroQuantaPause |
 8005c4a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8005c4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
                        macinit.PauseLowThreshold |
 8005c50:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
                        macinit.UnicastPauseFrameDetect |
 8005c56:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8005c58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
                        macinit.ReceiveFlowControl |
 8005c5c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8005c5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005c70:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7fe f88b 	bl	8003d98 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005c8a:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8005c8c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
                                           macinit.VLANTagIdentifier);
 8005c90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	f7fe f876 	bl	8003d98 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005cb4:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005cba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cbe:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8005cc4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005cc8:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005cda:	2304      	movs	r3, #4
 8005cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005cde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005ce4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005cea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005cee:	637b      	str	r3, [r7, #52]	@ 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005cf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005cf6:	2380      	movs	r3, #128	@ 0x80
 8005cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	643b      	str	r3, [r7, #64]	@ 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005d10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005d14:	4b3c      	ldr	r3, [pc, #240]	@ (8005e08 <ETH_MACDMAConfig+0x388>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8005d1c:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8005d1e:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8005d20:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8005d22:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8005d24:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8005d26:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8005d28:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8005d2a:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8005d2c:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8005d2e:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8005d30:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8005d32:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8005d34:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8005d38:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                        dmainit.ReceiveThresholdControl |
 8005d3c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8005d3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d50:	461a      	mov	r2, r3
 8005d52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d56:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d66:	2001      	movs	r0, #1
 8005d68:	f7fe f816 	bl	8003d98 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d74:	461a      	mov	r2, r3
 8005d76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d7a:	6193      	str	r3, [r2, #24]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8005d7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
                                        dmainit.FixedBurst |
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8005d80:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
                                        dmainit.FixedBurst |
 8005d84:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005d88:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8005d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                        dmainit.TxDMABurstLength |
 8005d8c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d90:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8005d92:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8005d94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8005d96:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005da0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005da4:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005db4:	2001      	movs	r0, #1
 8005db6:	f7fd ffef 	bl	8003d98 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005dc8:	6013      	str	r3, [r2, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d10d      	bne.n	8005dee <ETH_MACDMAConfig+0x36e>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005de8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005dec:	61d3      	str	r3, [r2, #28]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	461a      	mov	r2, r3
 8005df4:	2100      	movs	r1, #0
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f808 	bl	8005e0c <ETH_MACAddressConfig>
}
 8005dfc:	bf00      	nop
 8005dfe:	37c0      	adds	r7, #192	@ 0xc0
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	ff20810f 	.word	0xff20810f
 8005e08:	f8de3f23 	.word	0xf8de3f23

08005e0c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3305      	adds	r3, #5
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	3204      	adds	r2, #4
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4b10      	ldr	r3, [pc, #64]	@ (8005e70 <ETH_MACAddressConfig+0x64>)
 8005e2e:	4413      	add	r3, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3303      	adds	r3, #3
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	061a      	lsls	r2, r3, #24
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3302      	adds	r3, #2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	041b      	lsls	r3, r3, #16
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	4313      	orrs	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	7812      	ldrb	r2, [r2, #0]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <ETH_MACAddressConfig+0x68>)
 8005e5e:	4413      	add	r3, r2
 8005e60:	461a      	mov	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	6013      	str	r3, [r2, #0]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr
 8005e70:	40028040 	.word	0x40028040
 8005e74:	40028044 	.word	0x40028044

08005e78 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0208 	orr.w	r2, r2, #8
 8005e92:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	f000 f8d9 	bl	8006054 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0208 	bic.w	r2, r2, #8
 8005ecc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005ed6:	2001      	movs	r0, #1
 8005ed8:	f000 f8bc 	bl	8006054 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0204 	orr.w	r2, r2, #4
 8005f06:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005f10:	2001      	movs	r0, #1
 8005f12:	f000 f89f 	bl	8006054 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0204 	bic.w	r2, r2, #4
 8005f40:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	f000 f882 	bl	8006054 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]
}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005f7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005f7e:	6193      	str	r3, [r2, #24]
}
 8005f80:	bf00      	nop
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bc80      	pop	{r7}
 8005f88:	4770      	bx	lr

08005f8a <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fa4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005fa8:	6193      	str	r3, [r2, #24]
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	f043 0302 	orr.w	r3, r3, #2
 8005fce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005fd2:	6193      	str	r3, [r2, #24]
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr

08005fde <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	f023 0302 	bic.w	r3, r3, #2
 8005ff8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005ffc:	6193      	str	r3, [r2, #24]
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006026:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800602a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8006038:	2001      	movs	r0, #1
 800603a:	f000 f80b 	bl	8006054 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006048:	6193      	str	r3, [r2, #24]
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800605c:	4b0a      	ldr	r3, [pc, #40]	@ (8006088 <ETH_Delay+0x34>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0a      	ldr	r2, [pc, #40]	@ (800608c <ETH_Delay+0x38>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	0a5b      	lsrs	r3, r3, #9
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006070:	bf00      	nop
  }
  while (Delay --);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	1e5a      	subs	r2, r3, #1
 8006076:	60fa      	str	r2, [r7, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f9      	bne.n	8006070 <ETH_Delay+0x1c>
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr
 8006088:	20000070 	.word	0x20000070
 800608c:	10624dd3 	.word	0x10624dd3

08006090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800609e:	e16f      	b.n	8006380 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	2101      	movs	r1, #1
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ac:	4013      	ands	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8161 	beq.w	800637a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f003 0303 	and.w	r3, r3, #3
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d005      	beq.n	80060d0 <HAL_GPIO_Init+0x40>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f003 0303 	and.w	r3, r3, #3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d130      	bne.n	8006132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	2203      	movs	r2, #3
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	43db      	mvns	r3, r3
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	4013      	ands	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	fa02 f303 	lsl.w	r3, r2, r3
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006106:	2201      	movs	r2, #1
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4013      	ands	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	091b      	lsrs	r3, r3, #4
 800611c:	f003 0201 	and.w	r2, r3, #1
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	4313      	orrs	r3, r2
 800612a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b03      	cmp	r3, #3
 800613c:	d017      	beq.n	800616e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	2203      	movs	r2, #3
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	43db      	mvns	r3, r3
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	4013      	ands	r3, r2
 8006154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d123      	bne.n	80061c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	08da      	lsrs	r2, r3, #3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3208      	adds	r2, #8
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	220f      	movs	r2, #15
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43db      	mvns	r3, r3
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4013      	ands	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	691a      	ldr	r2, [r3, #16]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	08da      	lsrs	r2, r3, #3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3208      	adds	r2, #8
 80061bc:	6939      	ldr	r1, [r7, #16]
 80061be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	2203      	movs	r2, #3
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	43db      	mvns	r3, r3
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4013      	ands	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f003 0203 	and.w	r2, r3, #3
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 80bb 	beq.w	800637a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006204:	2300      	movs	r3, #0
 8006206:	60bb      	str	r3, [r7, #8]
 8006208:	4b64      	ldr	r3, [pc, #400]	@ (800639c <HAL_GPIO_Init+0x30c>)
 800620a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620c:	4a63      	ldr	r2, [pc, #396]	@ (800639c <HAL_GPIO_Init+0x30c>)
 800620e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006212:	6453      	str	r3, [r2, #68]	@ 0x44
 8006214:	4b61      	ldr	r3, [pc, #388]	@ (800639c <HAL_GPIO_Init+0x30c>)
 8006216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006220:	4a5f      	ldr	r2, [pc, #380]	@ (80063a0 <HAL_GPIO_Init+0x310>)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	089b      	lsrs	r3, r3, #2
 8006226:	3302      	adds	r3, #2
 8006228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800622c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	220f      	movs	r2, #15
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	43db      	mvns	r3, r3
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4013      	ands	r3, r2
 8006242:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a57      	ldr	r2, [pc, #348]	@ (80063a4 <HAL_GPIO_Init+0x314>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d031      	beq.n	80062b0 <HAL_GPIO_Init+0x220>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a56      	ldr	r2, [pc, #344]	@ (80063a8 <HAL_GPIO_Init+0x318>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d02b      	beq.n	80062ac <HAL_GPIO_Init+0x21c>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a55      	ldr	r2, [pc, #340]	@ (80063ac <HAL_GPIO_Init+0x31c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d025      	beq.n	80062a8 <HAL_GPIO_Init+0x218>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a54      	ldr	r2, [pc, #336]	@ (80063b0 <HAL_GPIO_Init+0x320>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d01f      	beq.n	80062a4 <HAL_GPIO_Init+0x214>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a53      	ldr	r2, [pc, #332]	@ (80063b4 <HAL_GPIO_Init+0x324>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d019      	beq.n	80062a0 <HAL_GPIO_Init+0x210>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a52      	ldr	r2, [pc, #328]	@ (80063b8 <HAL_GPIO_Init+0x328>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <HAL_GPIO_Init+0x20c>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a51      	ldr	r2, [pc, #324]	@ (80063bc <HAL_GPIO_Init+0x32c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d00d      	beq.n	8006298 <HAL_GPIO_Init+0x208>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a50      	ldr	r2, [pc, #320]	@ (80063c0 <HAL_GPIO_Init+0x330>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d007      	beq.n	8006294 <HAL_GPIO_Init+0x204>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a4f      	ldr	r2, [pc, #316]	@ (80063c4 <HAL_GPIO_Init+0x334>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d101      	bne.n	8006290 <HAL_GPIO_Init+0x200>
 800628c:	2308      	movs	r3, #8
 800628e:	e010      	b.n	80062b2 <HAL_GPIO_Init+0x222>
 8006290:	2309      	movs	r3, #9
 8006292:	e00e      	b.n	80062b2 <HAL_GPIO_Init+0x222>
 8006294:	2307      	movs	r3, #7
 8006296:	e00c      	b.n	80062b2 <HAL_GPIO_Init+0x222>
 8006298:	2306      	movs	r3, #6
 800629a:	e00a      	b.n	80062b2 <HAL_GPIO_Init+0x222>
 800629c:	2305      	movs	r3, #5
 800629e:	e008      	b.n	80062b2 <HAL_GPIO_Init+0x222>
 80062a0:	2304      	movs	r3, #4
 80062a2:	e006      	b.n	80062b2 <HAL_GPIO_Init+0x222>
 80062a4:	2303      	movs	r3, #3
 80062a6:	e004      	b.n	80062b2 <HAL_GPIO_Init+0x222>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e002      	b.n	80062b2 <HAL_GPIO_Init+0x222>
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_GPIO_Init+0x222>
 80062b0:	2300      	movs	r3, #0
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	f002 0203 	and.w	r2, r2, #3
 80062b8:	0092      	lsls	r2, r2, #2
 80062ba:	4093      	lsls	r3, r2
 80062bc:	461a      	mov	r2, r3
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80062c4:	4936      	ldr	r1, [pc, #216]	@ (80063a0 <HAL_GPIO_Init+0x310>)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	089b      	lsrs	r3, r3, #2
 80062ca:	3302      	adds	r3, #2
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062d2:	4b3d      	ldr	r3, [pc, #244]	@ (80063c8 <HAL_GPIO_Init+0x338>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	43db      	mvns	r3, r3
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4013      	ands	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80062f6:	4a34      	ldr	r2, [pc, #208]	@ (80063c8 <HAL_GPIO_Init+0x338>)
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062fc:	4b32      	ldr	r3, [pc, #200]	@ (80063c8 <HAL_GPIO_Init+0x338>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	43db      	mvns	r3, r3
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4013      	ands	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006320:	4a29      	ldr	r2, [pc, #164]	@ (80063c8 <HAL_GPIO_Init+0x338>)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006326:	4b28      	ldr	r3, [pc, #160]	@ (80063c8 <HAL_GPIO_Init+0x338>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	43db      	mvns	r3, r3
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4013      	ands	r3, r2
 8006334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800634a:	4a1f      	ldr	r2, [pc, #124]	@ (80063c8 <HAL_GPIO_Init+0x338>)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006350:	4b1d      	ldr	r3, [pc, #116]	@ (80063c8 <HAL_GPIO_Init+0x338>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	43db      	mvns	r3, r3
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4013      	ands	r3, r2
 800635e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006374:	4a14      	ldr	r2, [pc, #80]	@ (80063c8 <HAL_GPIO_Init+0x338>)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	3301      	adds	r3, #1
 800637e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	fa22 f303 	lsr.w	r3, r2, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	f47f ae88 	bne.w	80060a0 <HAL_GPIO_Init+0x10>
  }
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr
 800639c:	40023800 	.word	0x40023800
 80063a0:	40013800 	.word	0x40013800
 80063a4:	40020000 	.word	0x40020000
 80063a8:	40020400 	.word	0x40020400
 80063ac:	40020800 	.word	0x40020800
 80063b0:	40020c00 	.word	0x40020c00
 80063b4:	40021000 	.word	0x40021000
 80063b8:	40021400 	.word	0x40021400
 80063bc:	40021800 	.word	0x40021800
 80063c0:	40021c00 	.word	0x40021c00
 80063c4:	40022000 	.word	0x40022000
 80063c8:	40013c00 	.word	0x40013c00

080063cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	807b      	strh	r3, [r7, #2]
 80063d8:	4613      	mov	r3, r2
 80063da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063dc:	787b      	ldrb	r3, [r7, #1]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063e2:	887a      	ldrh	r2, [r7, #2]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80063e8:	e003      	b.n	80063f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80063ea:	887b      	ldrh	r3, [r7, #2]
 80063ec:	041a      	lsls	r2, r3, #16
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	619a      	str	r2, [r3, #24]
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr

080063fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800640e:	887a      	ldrh	r2, [r7, #2]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4013      	ands	r3, r2
 8006414:	041a      	lsls	r2, r3, #16
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	43d9      	mvns	r1, r3
 800641a:	887b      	ldrh	r3, [r7, #2]
 800641c:	400b      	ands	r3, r1
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	619a      	str	r2, [r3, #24]
}
 8006424:	bf00      	nop
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr
	...

08006430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800643a:	4b08      	ldr	r3, [pc, #32]	@ (800645c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	4013      	ands	r3, r2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d006      	beq.n	8006454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006446:	4a05      	ldr	r2, [pc, #20]	@ (800645c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006448:	88fb      	ldrh	r3, [r7, #6]
 800644a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fb ffde 	bl	8002410 <HAL_GPIO_EXTI_Callback>
  }
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	40013c00 	.word	0x40013c00

08006460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e12b      	b.n	80066ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fc f8ae 	bl	80025e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2224      	movs	r2, #36	@ 0x24
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064c4:	f002 fc92 	bl	8008dec <HAL_RCC_GetPCLK1Freq>
 80064c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4a81      	ldr	r2, [pc, #516]	@ (80066d4 <HAL_I2C_Init+0x274>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d807      	bhi.n	80064e4 <HAL_I2C_Init+0x84>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a80      	ldr	r2, [pc, #512]	@ (80066d8 <HAL_I2C_Init+0x278>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	bf94      	ite	ls
 80064dc:	2301      	movls	r3, #1
 80064de:	2300      	movhi	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	e006      	b.n	80064f2 <HAL_I2C_Init+0x92>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	4a7d      	ldr	r2, [pc, #500]	@ (80066dc <HAL_I2C_Init+0x27c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	bf94      	ite	ls
 80064ec:	2301      	movls	r3, #1
 80064ee:	2300      	movhi	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e0e7      	b.n	80066ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a78      	ldr	r2, [pc, #480]	@ (80066e0 <HAL_I2C_Init+0x280>)
 80064fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006502:	0c9b      	lsrs	r3, r3, #18
 8006504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6a1b      	ldr	r3, [r3, #32]
 8006520:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	4a6a      	ldr	r2, [pc, #424]	@ (80066d4 <HAL_I2C_Init+0x274>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d802      	bhi.n	8006534 <HAL_I2C_Init+0xd4>
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	3301      	adds	r3, #1
 8006532:	e009      	b.n	8006548 <HAL_I2C_Init+0xe8>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800653a:	fb02 f303 	mul.w	r3, r2, r3
 800653e:	4a69      	ldr	r2, [pc, #420]	@ (80066e4 <HAL_I2C_Init+0x284>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	099b      	lsrs	r3, r3, #6
 8006546:	3301      	adds	r3, #1
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	430b      	orrs	r3, r1
 800654e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800655a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	495c      	ldr	r1, [pc, #368]	@ (80066d4 <HAL_I2C_Init+0x274>)
 8006564:	428b      	cmp	r3, r1
 8006566:	d819      	bhi.n	800659c <HAL_I2C_Init+0x13c>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	1e59      	subs	r1, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	fbb1 f3f3 	udiv	r3, r1, r3
 8006576:	1c59      	adds	r1, r3, #1
 8006578:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800657c:	400b      	ands	r3, r1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00a      	beq.n	8006598 <HAL_I2C_Init+0x138>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1e59      	subs	r1, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006590:	3301      	adds	r3, #1
 8006592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006596:	e051      	b.n	800663c <HAL_I2C_Init+0x1dc>
 8006598:	2304      	movs	r3, #4
 800659a:	e04f      	b.n	800663c <HAL_I2C_Init+0x1dc>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d111      	bne.n	80065c8 <HAL_I2C_Init+0x168>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	1e58      	subs	r0, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6859      	ldr	r1, [r3, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	440b      	add	r3, r1
 80065b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80065b6:	3301      	adds	r3, #1
 80065b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bf0c      	ite	eq
 80065c0:	2301      	moveq	r3, #1
 80065c2:	2300      	movne	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	e012      	b.n	80065ee <HAL_I2C_Init+0x18e>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	1e58      	subs	r0, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6859      	ldr	r1, [r3, #4]
 80065d0:	460b      	mov	r3, r1
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	0099      	lsls	r1, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	fbb0 f3f3 	udiv	r3, r0, r3
 80065de:	3301      	adds	r3, #1
 80065e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_I2C_Init+0x196>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e022      	b.n	800663c <HAL_I2C_Init+0x1dc>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10e      	bne.n	800661c <HAL_I2C_Init+0x1bc>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1e58      	subs	r0, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6859      	ldr	r1, [r3, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	440b      	add	r3, r1
 800660c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006610:	3301      	adds	r3, #1
 8006612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800661a:	e00f      	b.n	800663c <HAL_I2C_Init+0x1dc>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1e58      	subs	r0, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6859      	ldr	r1, [r3, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	0099      	lsls	r1, r3, #2
 800662c:	440b      	add	r3, r1
 800662e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006632:	3301      	adds	r3, #1
 8006634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006638:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800663c:	6879      	ldr	r1, [r7, #4]
 800663e:	6809      	ldr	r1, [r1, #0]
 8006640:	4313      	orrs	r3, r2
 8006642:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69da      	ldr	r2, [r3, #28]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800666a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6911      	ldr	r1, [r2, #16]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68d2      	ldr	r2, [r2, #12]
 8006676:	4311      	orrs	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	430b      	orrs	r3, r1
 800667e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 0201 	orr.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	000186a0 	.word	0x000186a0
 80066d8:	001e847f 	.word	0x001e847f
 80066dc:	003d08ff 	.word	0x003d08ff
 80066e0:	431bde83 	.word	0x431bde83
 80066e4:	10624dd3 	.word	0x10624dd3

080066e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08c      	sub	sp, #48	@ 0x30
 80066ec:	af02      	add	r7, sp, #8
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	817b      	strh	r3, [r7, #10]
 80066fa:	460b      	mov	r3, r1
 80066fc:	813b      	strh	r3, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006702:	f7fd fb3f 	bl	8003d84 <HAL_GetTick>
 8006706:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b20      	cmp	r3, #32
 8006712:	f040 8208 	bne.w	8006b26 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	2319      	movs	r3, #25
 800671c:	2201      	movs	r2, #1
 800671e:	497b      	ldr	r1, [pc, #492]	@ (800690c <HAL_I2C_Mem_Read+0x224>)
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f000 faef 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800672c:	2302      	movs	r3, #2
 800672e:	e1fb      	b.n	8006b28 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_I2C_Mem_Read+0x56>
 800673a:	2302      	movs	r3, #2
 800673c:	e1f4      	b.n	8006b28 <HAL_I2C_Mem_Read+0x440>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d007      	beq.n	8006764 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0201 	orr.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006772:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2222      	movs	r2, #34	@ 0x22
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2240      	movs	r2, #64	@ 0x40
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800678e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006794:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a5b      	ldr	r2, [pc, #364]	@ (8006910 <HAL_I2C_Mem_Read+0x228>)
 80067a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067a6:	88f8      	ldrh	r0, [r7, #6]
 80067a8:	893a      	ldrh	r2, [r7, #8]
 80067aa:	8979      	ldrh	r1, [r7, #10]
 80067ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	4603      	mov	r3, r0
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f9bc 	bl	8006b34 <I2C_RequestMemoryRead>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e1b0      	b.n	8006b28 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d113      	bne.n	80067f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ce:	2300      	movs	r3, #0
 80067d0:	623b      	str	r3, [r7, #32]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	623b      	str	r3, [r7, #32]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	623b      	str	r3, [r7, #32]
 80067e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e184      	b.n	8006b00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d11b      	bne.n	8006836 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800680c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800680e:	2300      	movs	r3, #0
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	61fb      	str	r3, [r7, #28]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e164      	b.n	8006b00 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800683a:	2b02      	cmp	r3, #2
 800683c:	d11b      	bne.n	8006876 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800684c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800685c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800685e:	2300      	movs	r3, #0
 8006860:	61bb      	str	r3, [r7, #24]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	e144      	b.n	8006b00 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800688c:	e138      	b.n	8006b00 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006892:	2b03      	cmp	r3, #3
 8006894:	f200 80f1 	bhi.w	8006a7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800689c:	2b01      	cmp	r3, #1
 800689e:	d123      	bne.n	80068e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fb8f 	bl	8006fc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e139      	b.n	8006b28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691a      	ldr	r2, [r3, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068e6:	e10b      	b.n	8006b00 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d14e      	bne.n	800698e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f6:	2200      	movs	r2, #0
 80068f8:	4906      	ldr	r1, [pc, #24]	@ (8006914 <HAL_I2C_Mem_Read+0x22c>)
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fa02 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e10e      	b.n	8006b28 <HAL_I2C_Mem_Read+0x440>
 800690a:	bf00      	nop
 800690c:	00100002 	.word	0x00100002
 8006910:	ffff0000 	.word	0xffff0000
 8006914:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	3b01      	subs	r3, #1
 8006954:	b29a      	uxth	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800698c:	e0b8      	b.n	8006b00 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006994:	2200      	movs	r2, #0
 8006996:	4966      	ldr	r1, [pc, #408]	@ (8006b30 <HAL_I2C_Mem_Read+0x448>)
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 f9b3 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d001      	beq.n	80069a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e0bf      	b.n	8006b28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069d4:	3b01      	subs	r3, #1
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80069ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f0:	2200      	movs	r2, #0
 80069f2:	494f      	ldr	r1, [pc, #316]	@ (8006b30 <HAL_I2C_Mem_Read+0x448>)
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f985 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e091      	b.n	8006b28 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006a78:	e042      	b.n	8006b00 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 faa2 	bl	8006fc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e04c      	b.n	8006b28 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	f003 0304 	and.w	r3, r3, #4
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d118      	bne.n	8006b00 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	691a      	ldr	r2, [r3, #16]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad8:	b2d2      	uxtb	r2, r2
 8006ada:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aea:	3b01      	subs	r3, #1
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	3b01      	subs	r3, #1
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f47f aec2 	bne.w	800688e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006b26:	2302      	movs	r3, #2
  }
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3728      	adds	r7, #40	@ 0x28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	00010004 	.word	0x00010004

08006b34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	4611      	mov	r1, r2
 8006b40:	461a      	mov	r2, r3
 8006b42:	4603      	mov	r3, r0
 8006b44:	817b      	strh	r3, [r7, #10]
 8006b46:	460b      	mov	r3, r1
 8006b48:	813b      	strh	r3, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	6a3b      	ldr	r3, [r7, #32]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 f8c2 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00d      	beq.n	8006ba2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b94:	d103      	bne.n	8006b9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e0aa      	b.n	8006cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ba2:	897b      	ldrh	r3, [r7, #10]
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006bb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb4:	6a3a      	ldr	r2, [r7, #32]
 8006bb6:	4952      	ldr	r1, [pc, #328]	@ (8006d00 <I2C_RequestMemoryRead+0x1cc>)
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f91d 	bl	8006df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e097      	b.n	8006cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bc8:	2300      	movs	r3, #0
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	617b      	str	r3, [r7, #20]
 8006bdc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be0:	6a39      	ldr	r1, [r7, #32]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f9a8 	bl	8006f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00d      	beq.n	8006c0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d107      	bne.n	8006c06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e076      	b.n	8006cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d105      	bne.n	8006c1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c10:	893b      	ldrh	r3, [r7, #8]
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	611a      	str	r2, [r3, #16]
 8006c1a:	e021      	b.n	8006c60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c1c:	893b      	ldrh	r3, [r7, #8]
 8006c1e:	0a1b      	lsrs	r3, r3, #8
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c2c:	6a39      	ldr	r1, [r7, #32]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f982 	bl	8006f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00d      	beq.n	8006c56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d107      	bne.n	8006c52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e050      	b.n	8006cf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c56:	893b      	ldrh	r3, [r7, #8]
 8006c58:	b2da      	uxtb	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c62:	6a39      	ldr	r1, [r7, #32]
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f000 f967 	bl	8006f38 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00d      	beq.n	8006c8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c74:	2b04      	cmp	r3, #4
 8006c76:	d107      	bne.n	8006c88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e035      	b.n	8006cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f82b 	bl	8006d04 <I2C_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00d      	beq.n	8006cd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc2:	d103      	bne.n	8006ccc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e013      	b.n	8006cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006cd0:	897b      	ldrh	r3, [r7, #10]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	6a3a      	ldr	r2, [r7, #32]
 8006ce4:	4906      	ldr	r1, [pc, #24]	@ (8006d00 <I2C_RequestMemoryRead+0x1cc>)
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f886 	bl	8006df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e000      	b.n	8006cf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	00010002 	.word	0x00010002

08006d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	603b      	str	r3, [r7, #0]
 8006d10:	4613      	mov	r3, r2
 8006d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d14:	e048      	b.n	8006da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1c:	d044      	beq.n	8006da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d1e:	f7fd f831 	bl	8003d84 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d302      	bcc.n	8006d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d139      	bne.n	8006da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	0c1b      	lsrs	r3, r3, #16
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d10d      	bne.n	8006d5a <I2C_WaitOnFlagUntilTimeout+0x56>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	695b      	ldr	r3, [r3, #20]
 8006d44:	43da      	mvns	r2, r3
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4013      	ands	r3, r2
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	bf0c      	ite	eq
 8006d50:	2301      	moveq	r3, #1
 8006d52:	2300      	movne	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	461a      	mov	r2, r3
 8006d58:	e00c      	b.n	8006d74 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	43da      	mvns	r2, r3
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4013      	ands	r3, r2
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bf0c      	ite	eq
 8006d6c:	2301      	moveq	r3, #1
 8006d6e:	2300      	movne	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d116      	bne.n	8006da8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d94:	f043 0220 	orr.w	r2, r3, #32
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e023      	b.n	8006df0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	0c1b      	lsrs	r3, r3, #16
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d10d      	bne.n	8006dce <I2C_WaitOnFlagUntilTimeout+0xca>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	43da      	mvns	r2, r3
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bf0c      	ite	eq
 8006dc4:	2301      	moveq	r3, #1
 8006dc6:	2300      	movne	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	461a      	mov	r2, r3
 8006dcc:	e00c      	b.n	8006de8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	43da      	mvns	r2, r3
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bf0c      	ite	eq
 8006de0:	2301      	moveq	r3, #1
 8006de2:	2300      	movne	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d093      	beq.n	8006d16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e06:	e071      	b.n	8006eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e16:	d123      	bne.n	8006e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4c:	f043 0204 	orr.w	r2, r3, #4
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e067      	b.n	8006f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d041      	beq.n	8006eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e68:	f7fc ff8c 	bl	8003d84 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d302      	bcc.n	8006e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d136      	bne.n	8006eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	0c1b      	lsrs	r3, r3, #16
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d10c      	bne.n	8006ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	43da      	mvns	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4013      	ands	r3, r2
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf14      	ite	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	2300      	moveq	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	e00b      	b.n	8006eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	43da      	mvns	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4013      	ands	r3, r2
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d016      	beq.n	8006eec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed8:	f043 0220 	orr.w	r2, r3, #32
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e021      	b.n	8006f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	0c1b      	lsrs	r3, r3, #16
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d10c      	bne.n	8006f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	43da      	mvns	r2, r3
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	4013      	ands	r3, r2
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	bf14      	ite	ne
 8006f08:	2301      	movne	r3, #1
 8006f0a:	2300      	moveq	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	e00b      	b.n	8006f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	43da      	mvns	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bf14      	ite	ne
 8006f22:	2301      	movne	r3, #1
 8006f24:	2300      	moveq	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f47f af6d 	bne.w	8006e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f44:	e034      	b.n	8006fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 f89b 	bl	8007082 <I2C_IsAcknowledgeFailed>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e034      	b.n	8006fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d028      	beq.n	8006fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5e:	f7fc ff11 	bl	8003d84 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d302      	bcc.n	8006f74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d11d      	bne.n	8006fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f7e:	2b80      	cmp	r3, #128	@ 0x80
 8006f80:	d016      	beq.n	8006fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9c:	f043 0220 	orr.w	r2, r3, #32
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e007      	b.n	8006fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fba:	2b80      	cmp	r3, #128	@ 0x80
 8006fbc:	d1c3      	bne.n	8006f46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fd4:	e049      	b.n	800706a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d119      	bne.n	8007018 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0210 	mvn.w	r2, #16
 8006fec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e030      	b.n	800707a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007018:	f7fc feb4 	bl	8003d84 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	429a      	cmp	r2, r3
 8007026:	d302      	bcc.n	800702e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d11d      	bne.n	800706a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007038:	2b40      	cmp	r3, #64	@ 0x40
 800703a:	d016      	beq.n	800706a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	f043 0220 	orr.w	r2, r3, #32
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e007      	b.n	800707a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007074:	2b40      	cmp	r3, #64	@ 0x40
 8007076:	d1ae      	bne.n	8006fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007082:	b480      	push	{r7}
 8007084:	b083      	sub	sp, #12
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007098:	d11b      	bne.n	80070d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80070a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070be:	f043 0204 	orr.w	r2, r3, #4
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	bc80      	pop	{r7}
 80070dc:	4770      	bx	lr

080070de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80070de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e0:	b08f      	sub	sp, #60	@ 0x3c
 80070e2:	af0a      	add	r7, sp, #40	@ 0x28
 80070e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e10f      	b.n	8007310 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d106      	bne.n	8007110 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fc fad2 	bl	80036b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2203      	movs	r2, #3
 8007114:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800711c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007120:	2b00      	cmp	r3, #0
 8007122:	d102      	bne.n	800712a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f001 ff88 	bl	8009044 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	603b      	str	r3, [r7, #0]
 800713a:	687e      	ldr	r6, [r7, #4]
 800713c:	466d      	mov	r5, sp
 800713e:	f106 0410 	add.w	r4, r6, #16
 8007142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800714a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800714e:	e885 0003 	stmia.w	r5, {r0, r1}
 8007152:	1d33      	adds	r3, r6, #4
 8007154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007156:	6838      	ldr	r0, [r7, #0]
 8007158:	f001 fe6a 	bl	8008e30 <USB_CoreInit>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2202      	movs	r2, #2
 8007166:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e0d0      	b.n	8007310 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2100      	movs	r1, #0
 8007174:	4618      	mov	r0, r3
 8007176:	f001 ff75 	bl	8009064 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
 800717e:	e04a      	b.n	8007216 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007180:	7bfa      	ldrb	r2, [r7, #15]
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	4613      	mov	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	333d      	adds	r3, #61	@ 0x3d
 8007190:	2201      	movs	r2, #1
 8007192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007194:	7bfa      	ldrb	r2, [r7, #15]
 8007196:	6879      	ldr	r1, [r7, #4]
 8007198:	4613      	mov	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	4413      	add	r3, r2
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	440b      	add	r3, r1
 80071a2:	333c      	adds	r3, #60	@ 0x3c
 80071a4:	7bfa      	ldrb	r2, [r7, #15]
 80071a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80071a8:	7bfa      	ldrb	r2, [r7, #15]
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	b298      	uxth	r0, r3
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	440b      	add	r3, r1
 80071ba:	3356      	adds	r3, #86	@ 0x56
 80071bc:	4602      	mov	r2, r0
 80071be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80071c0:	7bfa      	ldrb	r2, [r7, #15]
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	4613      	mov	r3, r2
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	3340      	adds	r3, #64	@ 0x40
 80071d0:	2200      	movs	r2, #0
 80071d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80071d4:	7bfa      	ldrb	r2, [r7, #15]
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	3344      	adds	r3, #68	@ 0x44
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071e8:	7bfa      	ldrb	r2, [r7, #15]
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	4613      	mov	r3, r2
 80071ee:	00db      	lsls	r3, r3, #3
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	3348      	adds	r3, #72	@ 0x48
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071fc:	7bfa      	ldrb	r2, [r7, #15]
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	334c      	adds	r3, #76	@ 0x4c
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007210:	7bfb      	ldrb	r3, [r7, #15]
 8007212:	3301      	adds	r3, #1
 8007214:	73fb      	strb	r3, [r7, #15]
 8007216:	7bfa      	ldrb	r2, [r7, #15]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d3af      	bcc.n	8007180 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007220:	2300      	movs	r3, #0
 8007222:	73fb      	strb	r3, [r7, #15]
 8007224:	e044      	b.n	80072b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007226:	7bfa      	ldrb	r2, [r7, #15]
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800723c:	7bfa      	ldrb	r2, [r7, #15]
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	4613      	mov	r3, r2
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	440b      	add	r3, r1
 800724a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800724e:	7bfa      	ldrb	r2, [r7, #15]
 8007250:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007252:	7bfa      	ldrb	r2, [r7, #15]
 8007254:	6879      	ldr	r1, [r7, #4]
 8007256:	4613      	mov	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	4413      	add	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	440b      	add	r3, r1
 8007260:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007264:	2200      	movs	r2, #0
 8007266:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007268:	7bfa      	ldrb	r2, [r7, #15]
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4613      	mov	r3, r2
 800726e:	00db      	lsls	r3, r3, #3
 8007270:	4413      	add	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	440b      	add	r3, r1
 8007276:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800727a:	2200      	movs	r2, #0
 800727c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800727e:	7bfa      	ldrb	r2, [r7, #15]
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007294:	7bfa      	ldrb	r2, [r7, #15]
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4613      	mov	r3, r2
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	3301      	adds	r3, #1
 80072ae:	73fb      	strb	r3, [r7, #15]
 80072b0:	7bfa      	ldrb	r2, [r7, #15]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d3b5      	bcc.n	8007226 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	687e      	ldr	r6, [r7, #4]
 80072c2:	466d      	mov	r5, sp
 80072c4:	f106 0410 	add.w	r4, r6, #16
 80072c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80072d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80072d8:	1d33      	adds	r3, r6, #4
 80072da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80072dc:	6838      	ldr	r0, [r7, #0]
 80072de:	f001 ff0d 	bl	80090fc <USB_DevInit>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e00d      	b.n	8007310 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4618      	mov	r0, r3
 800730a:	f002 ff3f 	bl	800a18c <USB_DevDisconnect>

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007318 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_PCD_Start+0x16>
 800732a:	2302      	movs	r3, #2
 800732c:	e012      	b.n	8007354 <HAL_PCD_Start+0x3c>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4618      	mov	r0, r3
 800733c:	f001 fe72 	bl	8009024 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4618      	mov	r0, r3
 8007346:	f002 ff01 	bl	800a14c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800735c:	b590      	push	{r4, r7, lr}
 800735e:	b08d      	sub	sp, #52	@ 0x34
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4618      	mov	r0, r3
 8007374:	f002 ffb8 	bl	800a2e8 <USB_GetMode>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	f040 847c 	bne.w	8007c78 <HAL_PCD_IRQHandler+0x91c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f002 ff21 	bl	800a1cc <USB_ReadInterrupts>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 8472 	beq.w	8007c76 <HAL_PCD_IRQHandler+0x91a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	0a1b      	lsrs	r3, r3, #8
 800739c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f002 ff0e 	bl	800a1cc <USB_ReadInterrupts>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d107      	bne.n	80073ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	695a      	ldr	r2, [r3, #20]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f002 0202 	and.w	r2, r2, #2
 80073c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f002 fefc 	bl	800a1cc <USB_ReadInterrupts>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d161      	bne.n	80074a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0210 	bic.w	r2, r2, #16
 80073ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	f003 020f 	and.w	r2, r3, #15
 80073fa:	4613      	mov	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	4413      	add	r3, r2
 800740a:	3304      	adds	r3, #4
 800740c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	0c5b      	lsrs	r3, r3, #17
 8007412:	f003 030f 	and.w	r3, r3, #15
 8007416:	2b02      	cmp	r3, #2
 8007418:	d124      	bne.n	8007464 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007420:	4013      	ands	r3, r2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d035      	beq.n	8007492 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	091b      	lsrs	r3, r3, #4
 800742e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007430:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007434:	b29b      	uxth	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	6a38      	ldr	r0, [r7, #32]
 800743a:	f002 fd39 	bl	8009eb0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	68da      	ldr	r2, [r3, #12]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	091b      	lsrs	r3, r3, #4
 8007446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800744a:	441a      	add	r2, r3
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	695a      	ldr	r2, [r3, #20]
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	091b      	lsrs	r3, r3, #4
 8007458:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800745c:	441a      	add	r2, r3
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	615a      	str	r2, [r3, #20]
 8007462:	e016      	b.n	8007492 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	0c5b      	lsrs	r3, r3, #17
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	2b06      	cmp	r3, #6
 800746e:	d110      	bne.n	8007492 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007476:	2208      	movs	r2, #8
 8007478:	4619      	mov	r1, r3
 800747a:	6a38      	ldr	r0, [r7, #32]
 800747c:	f002 fd18 	bl	8009eb0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	695a      	ldr	r2, [r3, #20]
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	091b      	lsrs	r3, r3, #4
 8007488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800748c:	441a      	add	r2, r3
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	699a      	ldr	r2, [r3, #24]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0210 	orr.w	r2, r2, #16
 80074a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f002 fe90 	bl	800a1cc <USB_ReadInterrupts>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80074b6:	f040 80a7 	bne.w	8007608 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f002 fe94 	bl	800a1f0 <USB_ReadDevAllOutEpInterrupt>
 80074c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80074ca:	e099      	b.n	8007600 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80074cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f000 808e 	beq.w	80075f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	4611      	mov	r1, r2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f002 feb6 	bl	800a254 <USB_ReadDevOutEPInterrupt>
 80074e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00c      	beq.n	800750e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80074f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007500:	461a      	mov	r2, r3
 8007502:	2301      	movs	r3, #1
 8007504:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007506:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fe95 	bl	8008238 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00c      	beq.n	8007532 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	4413      	add	r3, r2
 8007520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007524:	461a      	mov	r2, r3
 8007526:	2308      	movs	r3, #8
 8007528:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800752a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 ff6b 	bl	8008408 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f003 0310 	and.w	r3, r3, #16
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007548:	461a      	mov	r2, r3
 800754a:	2310      	movs	r3, #16
 800754c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d030      	beq.n	80075ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007560:	2b80      	cmp	r3, #128	@ 0x80
 8007562:	d109      	bne.n	8007578 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	69fa      	ldr	r2, [r7, #28]
 800756e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007576:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800757a:	4613      	mov	r3, r2
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	3304      	adds	r3, #4
 800758c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	78db      	ldrb	r3, [r3, #3]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d108      	bne.n	80075a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2200      	movs	r2, #0
 800759a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fc f98c 	bl	80038c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80075a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b4:	461a      	mov	r2, r3
 80075b6:	2302      	movs	r3, #2
 80075b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d0:	461a      	mov	r2, r3
 80075d2:	2320      	movs	r3, #32
 80075d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d009      	beq.n	80075f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ec:	461a      	mov	r2, r3
 80075ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80075f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f6:	3301      	adds	r3, #1
 80075f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80075fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fc:	085b      	lsrs	r3, r3, #1
 80075fe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	f47f af62 	bne.w	80074cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4618      	mov	r0, r3
 800760e:	f002 fddd 	bl	800a1cc <USB_ReadInterrupts>
 8007612:	4603      	mov	r3, r0
 8007614:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007618:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800761c:	f040 80db 	bne.w	80077d6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4618      	mov	r0, r3
 8007626:	f002 fdfc 	bl	800a222 <USB_ReadDevAllInEpInterrupt>
 800762a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007630:	e0cd      	b.n	80077ce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 80c2 	beq.w	80077c2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f002 fe20 	bl	800a28e <USB_ReadDevInEPInterrupt>
 800764e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b00      	cmp	r3, #0
 8007658:	d057      	beq.n	800770a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	f003 030f 	and.w	r3, r3, #15
 8007660:	2201      	movs	r2, #1
 8007662:	fa02 f303 	lsl.w	r3, r2, r3
 8007666:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800766e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	43db      	mvns	r3, r3
 8007674:	69f9      	ldr	r1, [r7, #28]
 8007676:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800767a:	4013      	ands	r3, r2
 800767c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768a:	461a      	mov	r2, r3
 800768c:	2301      	movs	r3, #1
 800768e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d132      	bne.n	80076fe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800769c:	4613      	mov	r3, r2
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	3348      	adds	r3, #72	@ 0x48
 80076a8:	6819      	ldr	r1, [r3, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ae:	4613      	mov	r3, r2
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4403      	add	r3, r0
 80076b8:	3344      	adds	r3, #68	@ 0x44
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4419      	add	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c2:	4613      	mov	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4403      	add	r3, r0
 80076cc:	3348      	adds	r3, #72	@ 0x48
 80076ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d113      	bne.n	80076fe <HAL_PCD_IRQHandler+0x3a2>
 80076d6:	6879      	ldr	r1, [r7, #4]
 80076d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076da:	4613      	mov	r3, r2
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	440b      	add	r3, r1
 80076e4:	334c      	adds	r3, #76	@ 0x4c
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d108      	bne.n	80076fe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6818      	ldr	r0, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80076f6:	461a      	mov	r2, r3
 80076f8:	2101      	movs	r1, #1
 80076fa:	f002 fe25 	bl	800a348 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	b2db      	uxtb	r3, r3
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7fc f856 	bl	80037b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007720:	461a      	mov	r2, r3
 8007722:	2308      	movs	r3, #8
 8007724:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b00      	cmp	r3, #0
 800772e:	d008      	beq.n	8007742 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800773c:	461a      	mov	r2, r3
 800773e:	2310      	movs	r3, #16
 8007740:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d008      	beq.n	800775e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007758:	461a      	mov	r2, r3
 800775a:	2340      	movs	r3, #64	@ 0x40
 800775c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d023      	beq.n	80077b0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800776a:	6a38      	ldr	r0, [r7, #32]
 800776c:	f001 fe20 	bl	80093b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007772:	4613      	mov	r3, r2
 8007774:	00db      	lsls	r3, r3, #3
 8007776:	4413      	add	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	3338      	adds	r3, #56	@ 0x38
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	4413      	add	r3, r2
 8007780:	3304      	adds	r3, #4
 8007782:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	78db      	ldrb	r3, [r3, #3]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d108      	bne.n	800779e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2200      	movs	r2, #0
 8007790:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007794:	b2db      	uxtb	r3, r3
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fc f8a3 	bl	80038e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077aa:	461a      	mov	r2, r3
 80077ac:	2302      	movs	r3, #2
 80077ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80077ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fcae 	bl	800811e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	3301      	adds	r3, #1
 80077c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80077c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ca:	085b      	lsrs	r3, r3, #1
 80077cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80077ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f47f af2e 	bne.w	8007632 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4618      	mov	r0, r3
 80077dc:	f002 fcf6 	bl	800a1cc <USB_ReadInterrupts>
 80077e0:	4603      	mov	r3, r0
 80077e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80077e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077ea:	d114      	bne.n	8007816 <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	69fa      	ldr	r2, [r7, #28]
 80077f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077fa:	f023 0301 	bic.w	r3, r3, #1
 80077fe:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7fc f84f 	bl	80038a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	695a      	ldr	r2, [r3, #20]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4618      	mov	r0, r3
 800781c:	f002 fcd6 	bl	800a1cc <USB_ReadInterrupts>
 8007820:	4603      	mov	r3, r0
 8007822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800782a:	d112      	bne.n	8007852 <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b01      	cmp	r3, #1
 800783a:	d102      	bne.n	8007842 <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f7fc f80b 	bl	8003858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	695a      	ldr	r2, [r3, #20]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007850:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4618      	mov	r0, r3
 8007858:	f002 fcb8 	bl	800a1cc <USB_ReadInterrupts>
 800785c:	4603      	mov	r3, r0
 800785e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007866:	f040 80b7 	bne.w	80079d8 <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007878:	f023 0301 	bic.w	r3, r3, #1
 800787c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2110      	movs	r1, #16
 8007884:	4618      	mov	r0, r3
 8007886:	f001 fd93 	bl	80093b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800788a:	2300      	movs	r3, #0
 800788c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800788e:	e046      	b.n	800791e <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800789c:	461a      	mov	r2, r3
 800789e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078a2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80078a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a6:	015a      	lsls	r2, r3, #5
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	4413      	add	r3, r2
 80078ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078b4:	0151      	lsls	r1, r2, #5
 80078b6:	69fa      	ldr	r2, [r7, #28]
 80078b8:	440a      	add	r2, r1
 80078ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80078c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d0:	461a      	mov	r2, r3
 80078d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078d6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	440a      	add	r2, r1
 800790e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007912:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007916:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791a:	3301      	adds	r3, #1
 800791c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007924:	429a      	cmp	r2, r3
 8007926:	d3b3      	bcc.n	8007890 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007936:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800793a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007940:	2b00      	cmp	r3, #0
 8007942:	d016      	beq.n	8007972 <HAL_PCD_IRQHandler+0x616>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800794a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800794e:	69fa      	ldr	r2, [r7, #28]
 8007950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007954:	f043 030b 	orr.w	r3, r3, #11
 8007958:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800796a:	f043 030b 	orr.w	r3, r3, #11
 800796e:	6453      	str	r3, [r2, #68]	@ 0x44
 8007970:	e015      	b.n	800799e <HAL_PCD_IRQHandler+0x642>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007980:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007984:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007988:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007998:	f043 030b 	orr.w	r3, r3, #11
 800799c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079ac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80079b0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80079c2:	461a      	mov	r2, r3
 80079c4:	f002 fcc0 	bl	800a348 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695a      	ldr	r2, [r3, #20]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80079d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f002 fbf5 	bl	800a1cc <USB_ReadInterrupts>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ec:	d124      	bne.n	8007a38 <HAL_PCD_IRQHandler+0x6dc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f002 fc85 	bl	800a302 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fd53 	bl	80094a8 <USB_GetDevSpeed>
 8007a02:	4603      	mov	r3, r0
 8007a04:	461a      	mov	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681c      	ldr	r4, [r3, #0]
 8007a0e:	f001 f9e3 	bl	8008dd8 <HAL_RCC_GetHCLKFreq>
 8007a12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f001 fa5f 	bl	8008ee0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f7fb feef 	bl	8003806 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695a      	ldr	r2, [r3, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f002 fbc5 	bl	800a1cc <USB_ReadInterrupts>
 8007a42:	4603      	mov	r3, r0
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b08      	cmp	r3, #8
 8007a4a:	d10a      	bne.n	8007a62 <HAL_PCD_IRQHandler+0x706>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7fb fecc 	bl	80037ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	695a      	ldr	r2, [r3, #20]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f002 0208 	and.w	r2, r2, #8
 8007a60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f002 fbb0 	bl	800a1cc <USB_ReadInterrupts>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a72:	2b80      	cmp	r3, #128	@ 0x80
 8007a74:	d122      	bne.n	8007abc <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a82:	2301      	movs	r3, #1
 8007a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a86:	e014      	b.n	8007ab2 <HAL_PCD_IRQHandler+0x756>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d105      	bne.n	8007aac <HAL_PCD_IRQHandler+0x750>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fb08 	bl	80080bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aae:	3301      	adds	r3, #1
 8007ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d3e5      	bcc.n	8007a88 <HAL_PCD_IRQHandler+0x72c>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f002 fb83 	bl	800a1cc <USB_ReadInterrupts>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007acc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ad0:	d13b      	bne.n	8007b4a <HAL_PCD_IRQHandler+0x7ee>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad6:	e02b      	b.n	8007b30 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ada:	015a      	lsls	r2, r3, #5
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ae8:	6879      	ldr	r1, [r7, #4]
 8007aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aec:	4613      	mov	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4413      	add	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	440b      	add	r3, r1
 8007af6:	3340      	adds	r3, #64	@ 0x40
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d115      	bne.n	8007b2a <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007afe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	da12      	bge.n	8007b2a <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b08:	4613      	mov	r3, r2
 8007b0a:	00db      	lsls	r3, r3, #3
 8007b0c:	4413      	add	r3, r2
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	440b      	add	r3, r1
 8007b12:	333f      	adds	r3, #63	@ 0x3f
 8007b14:	2201      	movs	r2, #1
 8007b16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fac9 	bl	80080bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d3ce      	bcc.n	8007ad8 <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	695a      	ldr	r2, [r3, #20]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f002 fb3c 	bl	800a1cc <USB_ReadInterrupts>
 8007b54:	4603      	mov	r3, r0
 8007b56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b5e:	d155      	bne.n	8007c0c <HAL_PCD_IRQHandler+0x8b0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007b60:	2301      	movs	r3, #1
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b64:	e045      	b.n	8007bf2 <HAL_PCD_IRQHandler+0x896>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	440b      	add	r3, r1
 8007b84:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d12e      	bne.n	8007bec <HAL_PCD_IRQHandler+0x890>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007b8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da2b      	bge.n	8007bec <HAL_PCD_IRQHandler+0x890>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8007ba0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d121      	bne.n	8007bec <HAL_PCD_IRQHandler+0x890>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bac:	4613      	mov	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8007bba:	2201      	movs	r2, #1
 8007bbc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10a      	bne.n	8007bec <HAL_PCD_IRQHandler+0x890>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007be4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007be8:	6053      	str	r3, [r2, #4]
            break;
 8007bea:	e007      	b.n	8007bfc <HAL_PCD_IRQHandler+0x8a0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bee:	3301      	adds	r3, #1
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d3b4      	bcc.n	8007b66 <HAL_PCD_IRQHandler+0x80a>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	695a      	ldr	r2, [r3, #20]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f002 fadb 	bl	800a1cc <USB_ReadInterrupts>
 8007c16:	4603      	mov	r3, r0
 8007c18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c20:	d10a      	bne.n	8007c38 <HAL_PCD_IRQHandler+0x8dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fb fe70 	bl	8003908 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695a      	ldr	r2, [r3, #20]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f002 fac5 	bl	800a1cc <USB_ReadInterrupts>
 8007c42:	4603      	mov	r3, r0
 8007c44:	f003 0304 	and.w	r3, r3, #4
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	d115      	bne.n	8007c78 <HAL_PCD_IRQHandler+0x91c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_PCD_IRQHandler+0x908>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7fb fe60 	bl	8003924 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6859      	ldr	r1, [r3, #4]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	605a      	str	r2, [r3, #4]
 8007c74:	e000      	b.n	8007c78 <HAL_PCD_IRQHandler+0x91c>
      return;
 8007c76:	bf00      	nop
    }
  }
}
 8007c78:	3734      	adds	r7, #52	@ 0x34
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd90      	pop	{r4, r7, pc}

08007c7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	460b      	mov	r3, r1
 8007c88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d101      	bne.n	8007c98 <HAL_PCD_SetAddress+0x1a>
 8007c94:	2302      	movs	r3, #2
 8007c96:	e013      	b.n	8007cc0 <HAL_PCD_SetAddress+0x42>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	78fa      	ldrb	r2, [r7, #3]
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f002 fa26 	bl	800a102 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	4608      	mov	r0, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	70fb      	strb	r3, [r7, #3]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	803b      	strh	r3, [r7, #0]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	da0f      	bge.n	8007d0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	f003 020f 	and.w	r2, r3, #15
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	4413      	add	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	3338      	adds	r3, #56	@ 0x38
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	4413      	add	r3, r2
 8007d02:	3304      	adds	r3, #4
 8007d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	705a      	strb	r2, [r3, #1]
 8007d0c:	e00f      	b.n	8007d2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	f003 020f 	and.w	r2, r3, #15
 8007d14:	4613      	mov	r3, r2
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4413      	add	r3, r2
 8007d24:	3304      	adds	r3, #4
 8007d26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	f003 030f 	and.w	r3, r3, #15
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007d3a:	883a      	ldrh	r2, [r7, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	78ba      	ldrb	r2, [r7, #2]
 8007d44:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d004      	beq.n	8007d58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007d58:	78bb      	ldrb	r3, [r7, #2]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d102      	bne.n	8007d64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d101      	bne.n	8007d72 <HAL_PCD_EP_Open+0xaa>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e00e      	b.n	8007d90 <HAL_PCD_EP_Open+0xc8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68f9      	ldr	r1, [r7, #12]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 fbb5 	bl	80094f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8007d8e:	7afb      	ldrb	r3, [r7, #11]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	da0f      	bge.n	8007dcc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007dac:	78fb      	ldrb	r3, [r7, #3]
 8007dae:	f003 020f 	and.w	r2, r3, #15
 8007db2:	4613      	mov	r3, r2
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	4413      	add	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	3338      	adds	r3, #56	@ 0x38
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	705a      	strb	r2, [r3, #1]
 8007dca:	e00f      	b.n	8007dec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007dcc:	78fb      	ldrb	r3, [r7, #3]
 8007dce:	f003 020f 	and.w	r2, r3, #15
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	4413      	add	r3, r2
 8007de2:	3304      	adds	r3, #4
 8007de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dec:	78fb      	ldrb	r3, [r7, #3]
 8007dee:	f003 030f 	and.w	r3, r3, #15
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_PCD_EP_Close+0x6e>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e00e      	b.n	8007e24 <HAL_PCD_EP_Close+0x8c>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68f9      	ldr	r1, [r7, #12]
 8007e14:	4618      	mov	r0, r3
 8007e16:	f001 fbf1 	bl	80095fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	460b      	mov	r3, r1
 8007e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	f003 020f 	and.w	r2, r3, #15
 8007e42:	4613      	mov	r3, r2
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	3304      	adds	r3, #4
 8007e54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2200      	movs	r2, #0
 8007e66:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d102      	bne.n	8007e88 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6818      	ldr	r0, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	461a      	mov	r2, r3
 8007e94:	6979      	ldr	r1, [r7, #20]
 8007e96:	f001 fc8d 	bl	80097b4 <USB_EPStartXfer>

  return HAL_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007eb0:	78fb      	ldrb	r3, [r7, #3]
 8007eb2:	f003 020f 	and.w	r2, r3, #15
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	440b      	add	r3, r1
 8007ec2:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 8007ec6:	681b      	ldr	r3, [r3, #0]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bc80      	pop	{r7}
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b086      	sub	sp, #24
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	603b      	str	r3, [r7, #0]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	f003 020f 	and.w	r2, r3, #15
 8007ee8:	4613      	mov	r3, r2
 8007eea:	00db      	lsls	r3, r3, #3
 8007eec:	4413      	add	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	3338      	adds	r3, #56	@ 0x38
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d102      	bne.n	8007f2c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	461a      	mov	r2, r3
 8007f38:	6979      	ldr	r1, [r7, #20]
 8007f3a:	f001 fc3b 	bl	80097b4 <USB_EPStartXfer>

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	f003 020f 	and.w	r2, r3, #15
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d901      	bls.n	8007f66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e050      	b.n	8008008 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da0f      	bge.n	8007f8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	f003 020f 	and.w	r2, r3, #15
 8007f74:	4613      	mov	r3, r2
 8007f76:	00db      	lsls	r3, r3, #3
 8007f78:	4413      	add	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	3338      	adds	r3, #56	@ 0x38
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	4413      	add	r3, r2
 8007f82:	3304      	adds	r3, #4
 8007f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	705a      	strb	r2, [r3, #1]
 8007f8c:	e00d      	b.n	8007faa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007f8e:	78fa      	ldrb	r2, [r7, #3]
 8007f90:	4613      	mov	r3, r2
 8007f92:	00db      	lsls	r3, r3, #3
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	3304      	adds	r3, #4
 8007fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_PCD_EP_SetStall+0x82>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e01e      	b.n	8008008 <HAL_PCD_EP_SetStall+0xc0>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68f9      	ldr	r1, [r7, #12]
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f001 ffc0 	bl	8009f5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d10a      	bne.n	8007ffe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6818      	ldr	r0, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	b2d9      	uxtb	r1, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f002 f9a5 	bl	800a348 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800801c:	78fb      	ldrb	r3, [r7, #3]
 800801e:	f003 020f 	and.w	r2, r3, #15
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	429a      	cmp	r2, r3
 8008028:	d901      	bls.n	800802e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e042      	b.n	80080b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800802e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008032:	2b00      	cmp	r3, #0
 8008034:	da0f      	bge.n	8008056 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	f003 020f 	and.w	r2, r3, #15
 800803c:	4613      	mov	r3, r2
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	3338      	adds	r3, #56	@ 0x38
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	4413      	add	r3, r2
 800804a:	3304      	adds	r3, #4
 800804c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	705a      	strb	r2, [r3, #1]
 8008054:	e00f      	b.n	8008076 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	f003 020f 	and.w	r2, r3, #15
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	4413      	add	r3, r2
 800806c:	3304      	adds	r3, #4
 800806e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800807c:	78fb      	ldrb	r3, [r7, #3]
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	b2da      	uxtb	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800808e:	2b01      	cmp	r3, #1
 8008090:	d101      	bne.n	8008096 <HAL_PCD_EP_ClrStall+0x86>
 8008092:	2302      	movs	r3, #2
 8008094:	e00e      	b.n	80080b4 <HAL_PCD_EP_ClrStall+0xa4>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68f9      	ldr	r1, [r7, #12]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f001 ffc7 	bl	800a038 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80080c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	da0c      	bge.n	80080ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	f003 020f 	and.w	r2, r3, #15
 80080d6:	4613      	mov	r3, r2
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	3338      	adds	r3, #56	@ 0x38
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	4413      	add	r3, r2
 80080e4:	3304      	adds	r3, #4
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e00c      	b.n	8008104 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	f003 020f 	and.w	r2, r3, #15
 80080f0:	4613      	mov	r3, r2
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	4413      	add	r3, r2
 8008100:	3304      	adds	r3, #4
 8008102:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68f9      	ldr	r1, [r7, #12]
 800810a:	4618      	mov	r0, r3
 800810c:	f001 fdea 	bl	8009ce4 <USB_EPStopXfer>
 8008110:	4603      	mov	r3, r0
 8008112:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008114:	7afb      	ldrb	r3, [r7, #11]
}
 8008116:	4618      	mov	r0, r3
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}

0800811e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b08a      	sub	sp, #40	@ 0x28
 8008122:	af02      	add	r7, sp, #8
 8008124:	6078      	str	r0, [r7, #4]
 8008126:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	4613      	mov	r3, r2
 8008136:	00db      	lsls	r3, r3, #3
 8008138:	4413      	add	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	3338      	adds	r3, #56	@ 0x38
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	3304      	adds	r3, #4
 8008144:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	695a      	ldr	r2, [r3, #20]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	429a      	cmp	r2, r3
 8008150:	d901      	bls.n	8008156 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e06c      	b.n	8008230 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	691a      	ldr	r2, [r3, #16]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	429a      	cmp	r2, r3
 800816a:	d902      	bls.n	8008172 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	3303      	adds	r3, #3
 8008176:	089b      	lsrs	r3, r3, #2
 8008178:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800817a:	e02b      	b.n	80081d4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	691a      	ldr	r2, [r3, #16]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	429a      	cmp	r2, r3
 8008190:	d902      	bls.n	8008198 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	3303      	adds	r3, #3
 800819c:	089b      	lsrs	r3, r3, #2
 800819e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	68d9      	ldr	r1, [r3, #12]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	4603      	mov	r3, r0
 80081b6:	6978      	ldr	r0, [r7, #20]
 80081b8:	f001 fe3d 	bl	8009e36 <USB_WritePacket>

    ep->xfer_buff  += len;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	68da      	ldr	r2, [r3, #12]
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	441a      	add	r2, r3
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	441a      	add	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	015a      	lsls	r2, r3, #5
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	4413      	add	r3, r2
 80081dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d809      	bhi.n	80081fe <PCD_WriteEmptyTxFifo+0xe0>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	695a      	ldr	r2, [r3, #20]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d203      	bcs.n	80081fe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1be      	bne.n	800817c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	429a      	cmp	r2, r3
 8008208:	d811      	bhi.n	800822e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	f003 030f 	and.w	r3, r3, #15
 8008210:	2201      	movs	r2, #1
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800821e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	43db      	mvns	r3, r3
 8008224:	6939      	ldr	r1, [r7, #16]
 8008226:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800822a:	4013      	ands	r3, r2
 800822c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3720      	adds	r7, #32
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b088      	sub	sp, #32
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	333c      	adds	r3, #60	@ 0x3c
 8008250:	3304      	adds	r3, #4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d17b      	bne.n	8008366 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	f003 0308 	and.w	r3, r3, #8
 8008274:	2b00      	cmp	r3, #0
 8008276:	d015      	beq.n	80082a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	4a61      	ldr	r2, [pc, #388]	@ (8008400 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	f240 80b9 	bls.w	80083f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 80b3 	beq.w	80083f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800829a:	461a      	mov	r2, r3
 800829c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082a0:	6093      	str	r3, [r2, #8]
 80082a2:	e0a7      	b.n	80083f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f003 0320 	and.w	r3, r3, #32
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ba:	461a      	mov	r2, r3
 80082bc:	2320      	movs	r3, #32
 80082be:	6093      	str	r3, [r2, #8]
 80082c0:	e098      	b.n	80083f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f040 8093 	bne.w	80083f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	4a4b      	ldr	r2, [pc, #300]	@ (8008400 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d90f      	bls.n	80082f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00a      	beq.n	80082f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ec:	461a      	mov	r2, r3
 80082ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082f2:	6093      	str	r3, [r2, #8]
 80082f4:	e07e      	b.n	80083f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	4413      	add	r3, r2
 8008308:	3304      	adds	r3, #4
 800830a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6a1a      	ldr	r2, [r3, #32]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	0159      	lsls	r1, r3, #5
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	440b      	add	r3, r1
 8008318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008322:	1ad2      	subs	r2, r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d114      	bne.n	8008358 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8008340:	461a      	mov	r2, r3
 8008342:	2101      	movs	r1, #1
 8008344:	f002 f800 	bl	800a348 <USB_EP0_OutStart>
 8008348:	e006      	b.n	8008358 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	441a      	add	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	b2db      	uxtb	r3, r3
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7fb fa0e 	bl	8003780 <HAL_PCD_DataOutStageCallback>
 8008364:	e046      	b.n	80083f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	4a26      	ldr	r2, [pc, #152]	@ (8008404 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d124      	bne.n	80083b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	4413      	add	r3, r2
 8008380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008384:	461a      	mov	r2, r3
 8008386:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800838a:	6093      	str	r3, [r2, #8]
 800838c:	e032      	b.n	80083f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b00      	cmp	r3, #0
 8008396:	d008      	beq.n	80083aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083a4:	461a      	mov	r2, r3
 80083a6:	2320      	movs	r3, #32
 80083a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f7fb f9e5 	bl	8003780 <HAL_PCD_DataOutStageCallback>
 80083b6:	e01d      	b.n	80083f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d114      	bne.n	80083e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	4613      	mov	r3, r2
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	4413      	add	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	440b      	add	r3, r1
 80083cc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d108      	bne.n	80083e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80083e0:	461a      	mov	r2, r3
 80083e2:	2100      	movs	r1, #0
 80083e4:	f001 ffb0 	bl	800a348 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fb f9c6 	bl	8003780 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3720      	adds	r7, #32
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	4f54300a 	.word	0x4f54300a
 8008404:	4f54310a 	.word	0x4f54310a

08008408 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	333c      	adds	r3, #60	@ 0x3c
 8008420:	3304      	adds	r3, #4
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	015a      	lsls	r2, r3, #5
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4413      	add	r3, r2
 800842e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4a15      	ldr	r2, [pc, #84]	@ (8008490 <PCD_EP_OutSetupPacket_int+0x88>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d90e      	bls.n	800845c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008444:	2b00      	cmp	r3, #0
 8008446:	d009      	beq.n	800845c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008454:	461a      	mov	r2, r3
 8008456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800845a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7fb f97d 	bl	800375c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	4a0a      	ldr	r2, [pc, #40]	@ (8008490 <PCD_EP_OutSetupPacket_int+0x88>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d90c      	bls.n	8008484 <PCD_EP_OutSetupPacket_int+0x7c>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d108      	bne.n	8008484 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800847c:	461a      	mov	r2, r3
 800847e:	2101      	movs	r1, #1
 8008480:	f001 ff62 	bl	800a348 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	4f54300a 	.word	0x4f54300a

08008494 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	460b      	mov	r3, r1
 800849e:	70fb      	strb	r3, [r7, #3]
 80084a0:	4613      	mov	r3, r2
 80084a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d107      	bne.n	80084c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80084b2:	883b      	ldrh	r3, [r7, #0]
 80084b4:	0419      	lsls	r1, r3, #16
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	430a      	orrs	r2, r1
 80084be:	629a      	str	r2, [r3, #40]	@ 0x28
 80084c0:	e028      	b.n	8008514 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	4413      	add	r3, r2
 80084ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80084d0:	2300      	movs	r3, #0
 80084d2:	73fb      	strb	r3, [r7, #15]
 80084d4:	e00d      	b.n	80084f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	3340      	adds	r3, #64	@ 0x40
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	0c1b      	lsrs	r3, r3, #16
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	4413      	add	r3, r2
 80084ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
 80084ee:	3301      	adds	r3, #1
 80084f0:	73fb      	strb	r3, [r7, #15]
 80084f2:	7bfa      	ldrb	r2, [r7, #15]
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d3ec      	bcc.n	80084d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80084fc:	883b      	ldrh	r3, [r7, #0]
 80084fe:	0418      	lsls	r0, r3, #16
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6819      	ldr	r1, [r3, #0]
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	3b01      	subs	r3, #1
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	4302      	orrs	r2, r0
 800850c:	3340      	adds	r3, #64	@ 0x40
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr

08008520 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	887a      	ldrh	r2, [r7, #2]
 8008532:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	bc80      	pop	{r7}
 800853e:	4770      	bx	lr

08008540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08a      	sub	sp, #40	@ 0x28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e23b      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d050      	beq.n	8008600 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800855e:	4b9e      	ldr	r3, [pc, #632]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f003 030c 	and.w	r3, r3, #12
 8008566:	2b04      	cmp	r3, #4
 8008568:	d00c      	beq.n	8008584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800856a:	4b9b      	ldr	r3, [pc, #620]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008572:	2b08      	cmp	r3, #8
 8008574:	d112      	bne.n	800859c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008576:	4b98      	ldr	r3, [pc, #608]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800857e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008582:	d10b      	bne.n	800859c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008584:	4b94      	ldr	r3, [pc, #592]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d036      	beq.n	80085fe <HAL_RCC_OscConfig+0xbe>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d132      	bne.n	80085fe <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e216      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	4b8e      	ldr	r3, [pc, #568]	@ (80087dc <HAL_RCC_OscConfig+0x29c>)
 80085a2:	b2d2      	uxtb	r2, r2
 80085a4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d013      	beq.n	80085d6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085ae:	f7fb fbe9 	bl	8003d84 <HAL_GetTick>
 80085b2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085b4:	e008      	b.n	80085c8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085b6:	f7fb fbe5 	bl	8003d84 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	2b64      	cmp	r3, #100	@ 0x64
 80085c2:	d901      	bls.n	80085c8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80085c4:	2303      	movs	r3, #3
 80085c6:	e200      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085c8:	4b83      	ldr	r3, [pc, #524]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0f0      	beq.n	80085b6 <HAL_RCC_OscConfig+0x76>
 80085d4:	e014      	b.n	8008600 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d6:	f7fb fbd5 	bl	8003d84 <HAL_GetTick>
 80085da:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085dc:	e008      	b.n	80085f0 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085de:	f7fb fbd1 	bl	8003d84 <HAL_GetTick>
 80085e2:	4602      	mov	r2, r0
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	2b64      	cmp	r3, #100	@ 0x64
 80085ea:	d901      	bls.n	80085f0 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e1ec      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085f0:	4b79      	ldr	r3, [pc, #484]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1f0      	bne.n	80085de <HAL_RCC_OscConfig+0x9e>
 80085fc:	e000      	b.n	8008600 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b00      	cmp	r3, #0
 800860a:	d077      	beq.n	80086fc <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800860c:	4b72      	ldr	r3, [pc, #456]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 030c 	and.w	r3, r3, #12
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008618:	4b6f      	ldr	r3, [pc, #444]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008620:	2b08      	cmp	r3, #8
 8008622:	d126      	bne.n	8008672 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008624:	4b6c      	ldr	r3, [pc, #432]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d120      	bne.n	8008672 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008630:	4b69      	ldr	r3, [pc, #420]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <HAL_RCC_OscConfig+0x108>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d001      	beq.n	8008648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e1c0      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008648:	4b63      	ldr	r3, [pc, #396]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	21f8      	movs	r1, #248	@ 0xf8
 8008656:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008658:	69b9      	ldr	r1, [r7, #24]
 800865a:	fa91 f1a1 	rbit	r1, r1
 800865e:	6179      	str	r1, [r7, #20]
  return result;
 8008660:	6979      	ldr	r1, [r7, #20]
 8008662:	fab1 f181 	clz	r1, r1
 8008666:	b2c9      	uxtb	r1, r1
 8008668:	408b      	lsls	r3, r1
 800866a:	495b      	ldr	r1, [pc, #364]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 800866c:	4313      	orrs	r3, r2
 800866e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008670:	e044      	b.n	80086fc <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d02a      	beq.n	80086d0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800867a:	4b59      	ldr	r3, [pc, #356]	@ (80087e0 <HAL_RCC_OscConfig+0x2a0>)
 800867c:	2201      	movs	r2, #1
 800867e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008680:	f7fb fb80 	bl	8003d84 <HAL_GetTick>
 8008684:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008686:	e008      	b.n	800869a <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008688:	f7fb fb7c 	bl	8003d84 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d901      	bls.n	800869a <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e197      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800869a:	4b4f      	ldr	r3, [pc, #316]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0f0      	beq.n	8008688 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086a6:	4b4c      	ldr	r3, [pc, #304]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	21f8      	movs	r1, #248	@ 0xf8
 80086b4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b6:	6939      	ldr	r1, [r7, #16]
 80086b8:	fa91 f1a1 	rbit	r1, r1
 80086bc:	60f9      	str	r1, [r7, #12]
  return result;
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	fab1 f181 	clz	r1, r1
 80086c4:	b2c9      	uxtb	r1, r1
 80086c6:	408b      	lsls	r3, r1
 80086c8:	4943      	ldr	r1, [pc, #268]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	600b      	str	r3, [r1, #0]
 80086ce:	e015      	b.n	80086fc <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086d0:	4b43      	ldr	r3, [pc, #268]	@ (80087e0 <HAL_RCC_OscConfig+0x2a0>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086d6:	f7fb fb55 	bl	8003d84 <HAL_GetTick>
 80086da:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086dc:	e008      	b.n	80086f0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086de:	f7fb fb51 	bl	8003d84 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e16c      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086f0:	4b39      	ldr	r3, [pc, #228]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1f0      	bne.n	80086de <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	2b00      	cmp	r3, #0
 8008706:	d030      	beq.n	800876a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d016      	beq.n	800873e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008710:	4b34      	ldr	r3, [pc, #208]	@ (80087e4 <HAL_RCC_OscConfig+0x2a4>)
 8008712:	2201      	movs	r2, #1
 8008714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008716:	f7fb fb35 	bl	8003d84 <HAL_GetTick>
 800871a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800871c:	e008      	b.n	8008730 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800871e:	f7fb fb31 	bl	8003d84 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	6a3b      	ldr	r3, [r7, #32]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b02      	cmp	r3, #2
 800872a:	d901      	bls.n	8008730 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e14c      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008730:	4b29      	ldr	r3, [pc, #164]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d0f0      	beq.n	800871e <HAL_RCC_OscConfig+0x1de>
 800873c:	e015      	b.n	800876a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800873e:	4b29      	ldr	r3, [pc, #164]	@ (80087e4 <HAL_RCC_OscConfig+0x2a4>)
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008744:	f7fb fb1e 	bl	8003d84 <HAL_GetTick>
 8008748:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800874c:	f7fb fb1a 	bl	8003d84 <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e135      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800875e:	4b1e      	ldr	r3, [pc, #120]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0304 	and.w	r3, r3, #4
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 8087 	beq.w	8008886 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008778:	2300      	movs	r3, #0
 800877a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800877e:	4b16      	ldr	r3, [pc, #88]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d110      	bne.n	80087ac <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800878a:	2300      	movs	r3, #0
 800878c:	60bb      	str	r3, [r7, #8]
 800878e:	4b12      	ldr	r3, [pc, #72]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008792:	4a11      	ldr	r2, [pc, #68]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 8008794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008798:	6413      	str	r3, [r2, #64]	@ 0x40
 800879a:	4b0f      	ldr	r3, [pc, #60]	@ (80087d8 <HAL_RCC_OscConfig+0x298>)
 800879c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800879e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80087a2:	60bb      	str	r3, [r7, #8]
 80087a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087a6:	2301      	movs	r3, #1
 80087a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80087ac:	4b0e      	ldr	r3, [pc, #56]	@ (80087e8 <HAL_RCC_OscConfig+0x2a8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a0d      	ldr	r2, [pc, #52]	@ (80087e8 <HAL_RCC_OscConfig+0x2a8>)
 80087b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087b6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087b8:	4b0b      	ldr	r3, [pc, #44]	@ (80087e8 <HAL_RCC_OscConfig+0x2a8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d122      	bne.n	800880a <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087c4:	4b08      	ldr	r3, [pc, #32]	@ (80087e8 <HAL_RCC_OscConfig+0x2a8>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a07      	ldr	r2, [pc, #28]	@ (80087e8 <HAL_RCC_OscConfig+0x2a8>)
 80087ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087d0:	f7fb fad8 	bl	8003d84 <HAL_GetTick>
 80087d4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087d6:	e012      	b.n	80087fe <HAL_RCC_OscConfig+0x2be>
 80087d8:	40023800 	.word	0x40023800
 80087dc:	40023802 	.word	0x40023802
 80087e0:	42470000 	.word	0x42470000
 80087e4:	42470e80 	.word	0x42470e80
 80087e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087ec:	f7fb faca 	bl	8003d84 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d901      	bls.n	80087fe <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e0e5      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087fe:	4b75      	ldr	r3, [pc, #468]	@ (80089d4 <HAL_RCC_OscConfig+0x494>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0f0      	beq.n	80087ec <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	4b72      	ldr	r3, [pc, #456]	@ (80089d8 <HAL_RCC_OscConfig+0x498>)
 8008810:	b2d2      	uxtb	r2, r2
 8008812:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d015      	beq.n	8008848 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800881c:	f7fb fab2 	bl	8003d84 <HAL_GetTick>
 8008820:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008822:	e00a      	b.n	800883a <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008824:	f7fb faae 	bl	8003d84 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008832:	4293      	cmp	r3, r2
 8008834:	d901      	bls.n	800883a <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e0c7      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800883a:	4b68      	ldr	r3, [pc, #416]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 800883c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d0ee      	beq.n	8008824 <HAL_RCC_OscConfig+0x2e4>
 8008846:	e014      	b.n	8008872 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008848:	f7fb fa9c 	bl	8003d84 <HAL_GetTick>
 800884c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800884e:	e00a      	b.n	8008866 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008850:	f7fb fa98 	bl	8003d84 <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800885e:	4293      	cmp	r3, r2
 8008860:	d901      	bls.n	8008866 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e0b1      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008866:	4b5d      	ldr	r3, [pc, #372]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 8008868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800886a:	f003 0302 	and.w	r3, r3, #2
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1ee      	bne.n	8008850 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008876:	2b01      	cmp	r3, #1
 8008878:	d105      	bne.n	8008886 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800887a:	4b58      	ldr	r3, [pc, #352]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 800887c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887e:	4a57      	ldr	r2, [pc, #348]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 8008880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008884:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 809c 	beq.w	80089c8 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008890:	4b52      	ldr	r3, [pc, #328]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f003 030c 	and.w	r3, r3, #12
 8008898:	2b08      	cmp	r3, #8
 800889a:	d061      	beq.n	8008960 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d146      	bne.n	8008932 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088a4:	4b4e      	ldr	r3, [pc, #312]	@ (80089e0 <HAL_RCC_OscConfig+0x4a0>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088aa:	f7fb fa6b 	bl	8003d84 <HAL_GetTick>
 80088ae:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088b2:	f7fb fa67 	bl	8003d84 <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	6a3b      	ldr	r3, [r7, #32]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b64      	cmp	r3, #100	@ 0x64
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e082      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088c4:	4b45      	ldr	r3, [pc, #276]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1f0      	bne.n	80088b2 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088d0:	4b42      	ldr	r3, [pc, #264]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	4b43      	ldr	r3, [pc, #268]	@ (80089e4 <HAL_RCC_OscConfig+0x4a4>)
 80088d6:	4013      	ands	r3, r2
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	69d1      	ldr	r1, [r2, #28]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6a12      	ldr	r2, [r2, #32]
 80088e0:	4311      	orrs	r1, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80088e6:	0192      	lsls	r2, r2, #6
 80088e8:	4311      	orrs	r1, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80088ee:	0612      	lsls	r2, r2, #24
 80088f0:	4311      	orrs	r1, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80088f6:	0852      	lsrs	r2, r2, #1
 80088f8:	3a01      	subs	r2, #1
 80088fa:	0412      	lsls	r2, r2, #16
 80088fc:	430a      	orrs	r2, r1
 80088fe:	4937      	ldr	r1, [pc, #220]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 8008900:	4313      	orrs	r3, r2
 8008902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008904:	4b36      	ldr	r3, [pc, #216]	@ (80089e0 <HAL_RCC_OscConfig+0x4a0>)
 8008906:	2201      	movs	r2, #1
 8008908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800890a:	f7fb fa3b 	bl	8003d84 <HAL_GetTick>
 800890e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008910:	e008      	b.n	8008924 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008912:	f7fb fa37 	bl	8003d84 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	6a3b      	ldr	r3, [r7, #32]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b64      	cmp	r3, #100	@ 0x64
 800891e:	d901      	bls.n	8008924 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e052      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008924:	4b2d      	ldr	r3, [pc, #180]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d0f0      	beq.n	8008912 <HAL_RCC_OscConfig+0x3d2>
 8008930:	e04a      	b.n	80089c8 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008932:	4b2b      	ldr	r3, [pc, #172]	@ (80089e0 <HAL_RCC_OscConfig+0x4a0>)
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008938:	f7fb fa24 	bl	8003d84 <HAL_GetTick>
 800893c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800893e:	e008      	b.n	8008952 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008940:	f7fb fa20 	bl	8003d84 <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	2b64      	cmp	r3, #100	@ 0x64
 800894c:	d901      	bls.n	8008952 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e03b      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008952:	4b22      	ldr	r3, [pc, #136]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1f0      	bne.n	8008940 <HAL_RCC_OscConfig+0x400>
 800895e:	e033      	b.n	80089c8 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e02e      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800896c:	4b1b      	ldr	r3, [pc, #108]	@ (80089dc <HAL_RCC_OscConfig+0x49c>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	429a      	cmp	r2, r3
 800897e:	d121      	bne.n	80089c4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800898a:	429a      	cmp	r2, r3
 800898c:	d11a      	bne.n	80089c4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008994:	4013      	ands	r3, r2
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800899a:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800899c:	4293      	cmp	r3, r2
 800899e:	d111      	bne.n	80089c4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	3b01      	subs	r3, #1
 80089ae:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d107      	bne.n	80089c4 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089be:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d001      	beq.n	80089c8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e000      	b.n	80089ca <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3728      	adds	r7, #40	@ 0x28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40007000 	.word	0x40007000
 80089d8:	40023870 	.word	0x40023870
 80089dc:	40023800 	.word	0x40023800
 80089e0:	42470060 	.word	0x42470060
 80089e4:	f0bc8000 	.word	0xf0bc8000

080089e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e0d2      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089fc:	4b6b      	ldr	r3, [pc, #428]	@ (8008bac <HAL_RCC_ClockConfig+0x1c4>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d90c      	bls.n	8008a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0a:	4b68      	ldr	r3, [pc, #416]	@ (8008bac <HAL_RCC_ClockConfig+0x1c4>)
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a12:	4b66      	ldr	r3, [pc, #408]	@ (8008bac <HAL_RCC_ClockConfig+0x1c4>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f003 030f 	and.w	r3, r3, #15
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d001      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0be      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d020      	beq.n	8008a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0304 	and.w	r3, r3, #4
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	4a5b      	ldr	r2, [pc, #364]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 0308 	and.w	r3, r3, #8
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d005      	beq.n	8008a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8008a54:	4b56      	ldr	r3, [pc, #344]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	4a55      	ldr	r2, [pc, #340]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008a5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a60:	4b53      	ldr	r3, [pc, #332]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	4950      	ldr	r1, [pc, #320]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d040      	beq.n	8008b00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d107      	bne.n	8008a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a86:	4b4a      	ldr	r3, [pc, #296]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d115      	bne.n	8008abe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	e085      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d107      	bne.n	8008aae <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a9e:	4b44      	ldr	r3, [pc, #272]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e079      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008aae:	4b40      	ldr	r3, [pc, #256]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e071      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008abe:	4b3c      	ldr	r3, [pc, #240]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f023 0203 	bic.w	r2, r3, #3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	4939      	ldr	r1, [pc, #228]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ad0:	f7fb f958 	bl	8003d84 <HAL_GetTick>
 8008ad4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad6:	e00a      	b.n	8008aee <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ad8:	f7fb f954 	bl	8003d84 <HAL_GetTick>
 8008adc:	4602      	mov	r2, r0
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	1ad3      	subs	r3, r2, r3
 8008ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e059      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aee:	4b30      	ldr	r3, [pc, #192]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f003 020c 	and.w	r2, r3, #12
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d1eb      	bne.n	8008ad8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b00:	4b2a      	ldr	r3, [pc, #168]	@ (8008bac <HAL_RCC_ClockConfig+0x1c4>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d20c      	bcs.n	8008b28 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0e:	4b27      	ldr	r3, [pc, #156]	@ (8008bac <HAL_RCC_ClockConfig+0x1c4>)
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b16:	4b25      	ldr	r3, [pc, #148]	@ (8008bac <HAL_RCC_ClockConfig+0x1c4>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 030f 	and.w	r3, r3, #15
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d001      	beq.n	8008b28 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e03c      	b.n	8008ba2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d008      	beq.n	8008b46 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b34:	4b1e      	ldr	r3, [pc, #120]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	491b      	ldr	r1, [pc, #108]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0308 	and.w	r3, r3, #8
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d009      	beq.n	8008b66 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b52:	4b17      	ldr	r3, [pc, #92]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	00db      	lsls	r3, r3, #3
 8008b60:	4913      	ldr	r1, [pc, #76]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8008b66:	f000 f82b 	bl	8008bc0 <HAL_RCC_GetSysClockFreq>
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	4b10      	ldr	r3, [pc, #64]	@ (8008bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008b74:	22f0      	movs	r2, #240	@ 0xf0
 8008b76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	fa92 f2a2 	rbit	r2, r2
 8008b7e:	60fa      	str	r2, [r7, #12]
  return result;
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	fab2 f282 	clz	r2, r2
 8008b86:	b2d2      	uxtb	r2, r2
 8008b88:	40d3      	lsrs	r3, r2
 8008b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8008bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8008b8c:	5cd3      	ldrb	r3, [r2, r3]
 8008b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8008b92:	4a09      	ldr	r2, [pc, #36]	@ (8008bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8008b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b96:	4b09      	ldr	r3, [pc, #36]	@ (8008bbc <HAL_RCC_ClockConfig+0x1d4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fb f8b0 	bl	8003d00 <HAL_InitTick>

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	40023c00 	.word	0x40023c00
 8008bb0:	40023800 	.word	0x40023800
 8008bb4:	08017e38 	.word	0x08017e38
 8008bb8:	20000070 	.word	0x20000070
 8008bbc:	20000074 	.word	0x20000074

08008bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bc4:	b094      	sub	sp, #80	@ 0x50
 8008bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bcc:	2300      	movs	r3, #0
 8008bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bd8:	4b7c      	ldr	r3, [pc, #496]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x20c>)
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f003 030c 	and.w	r3, r3, #12
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d00d      	beq.n	8008c00 <HAL_RCC_GetSysClockFreq+0x40>
 8008be4:	2b08      	cmp	r3, #8
 8008be6:	f200 80e7 	bhi.w	8008db8 <HAL_RCC_GetSysClockFreq+0x1f8>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d003      	beq.n	8008bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8008bf2:	e0e1      	b.n	8008db8 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bf4:	4b76      	ldr	r3, [pc, #472]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x210>)
 8008bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008bf8:	e0e1      	b.n	8008dbe <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bfa:	4b76      	ldr	r3, [pc, #472]	@ (8008dd4 <HAL_RCC_GetSysClockFreq+0x214>)
 8008bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008bfe:	e0de      	b.n	8008dbe <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c00:	4b72      	ldr	r3, [pc, #456]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x20c>)
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c08:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c0a:	4b70      	ldr	r3, [pc, #448]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x20c>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d065      	beq.n	8008ce2 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c16:	4b6d      	ldr	r3, [pc, #436]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x20c>)
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	099b      	lsrs	r3, r3, #6
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008c32:	4622      	mov	r2, r4
 8008c34:	462b      	mov	r3, r5
 8008c36:	f04f 0000 	mov.w	r0, #0
 8008c3a:	f04f 0100 	mov.w	r1, #0
 8008c3e:	0159      	lsls	r1, r3, #5
 8008c40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c44:	0150      	lsls	r0, r2, #5
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	1a51      	subs	r1, r2, r1
 8008c4e:	6139      	str	r1, [r7, #16]
 8008c50:	4629      	mov	r1, r5
 8008c52:	eb63 0301 	sbc.w	r3, r3, r1
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c64:	4659      	mov	r1, fp
 8008c66:	018b      	lsls	r3, r1, #6
 8008c68:	4651      	mov	r1, sl
 8008c6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008c6e:	4651      	mov	r1, sl
 8008c70:	018a      	lsls	r2, r1, #6
 8008c72:	46d4      	mov	ip, sl
 8008c74:	ebb2 080c 	subs.w	r8, r2, ip
 8008c78:	4659      	mov	r1, fp
 8008c7a:	eb63 0901 	sbc.w	r9, r3, r1
 8008c7e:	f04f 0200 	mov.w	r2, #0
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c92:	4690      	mov	r8, r2
 8008c94:	4699      	mov	r9, r3
 8008c96:	4623      	mov	r3, r4
 8008c98:	eb18 0303 	adds.w	r3, r8, r3
 8008c9c:	60bb      	str	r3, [r7, #8]
 8008c9e:	462b      	mov	r3, r5
 8008ca0:	eb49 0303 	adc.w	r3, r9, r3
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	024b      	lsls	r3, r1, #9
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	4629      	mov	r1, r5
 8008cba:	4604      	mov	r4, r0
 8008cbc:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8008cc0:	4601      	mov	r1, r0
 8008cc2:	024a      	lsls	r2, r1, #9
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cca:	2200      	movs	r2, #0
 8008ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008cd4:	f7f8 f80e 	bl	8000cf4 <__aeabi_uldivmod>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4613      	mov	r3, r2
 8008cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ce0:	e05c      	b.n	8008d9c <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ce2:	4b3a      	ldr	r3, [pc, #232]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x20c>)
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	099b      	lsrs	r3, r3, #6
 8008ce8:	2200      	movs	r2, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	4611      	mov	r1, r2
 8008cee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008cf2:	623b      	str	r3, [r7, #32]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008cfc:	4642      	mov	r2, r8
 8008cfe:	464b      	mov	r3, r9
 8008d00:	f04f 0000 	mov.w	r0, #0
 8008d04:	f04f 0100 	mov.w	r1, #0
 8008d08:	0159      	lsls	r1, r3, #5
 8008d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d0e:	0150      	lsls	r0, r2, #5
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	46c4      	mov	ip, r8
 8008d16:	ebb2 0a0c 	subs.w	sl, r2, ip
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	468c      	mov	ip, r1
 8008d20:	eb63 0b0c 	sbc.w	fp, r3, ip
 8008d24:	f04f 0200 	mov.w	r2, #0
 8008d28:	f04f 0300 	mov.w	r3, #0
 8008d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d38:	ebb2 040a 	subs.w	r4, r2, sl
 8008d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	f04f 0300 	mov.w	r3, #0
 8008d48:	00eb      	lsls	r3, r5, #3
 8008d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d4e:	00e2      	lsls	r2, r4, #3
 8008d50:	4614      	mov	r4, r2
 8008d52:	461d      	mov	r5, r3
 8008d54:	4603      	mov	r3, r0
 8008d56:	18e3      	adds	r3, r4, r3
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	eb45 0303 	adc.w	r3, r5, r3
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	f04f 0200 	mov.w	r2, #0
 8008d66:	f04f 0300 	mov.w	r3, #0
 8008d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d6e:	4629      	mov	r1, r5
 8008d70:	028b      	lsls	r3, r1, #10
 8008d72:	4620      	mov	r0, r4
 8008d74:	4629      	mov	r1, r5
 8008d76:	4604      	mov	r4, r0
 8008d78:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8008d7c:	4601      	mov	r1, r0
 8008d7e:	028a      	lsls	r2, r1, #10
 8008d80:	4610      	mov	r0, r2
 8008d82:	4619      	mov	r1, r3
 8008d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d86:	2200      	movs	r2, #0
 8008d88:	61bb      	str	r3, [r7, #24]
 8008d8a:	61fa      	str	r2, [r7, #28]
 8008d8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d90:	f7f7 ffb0 	bl	8000cf4 <__aeabi_uldivmod>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4613      	mov	r3, r2
 8008d9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8008dcc <HAL_RCC_GetSysClockFreq+0x20c>)
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	0c1b      	lsrs	r3, r3, #16
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	3301      	adds	r3, #1
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008dac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008db6:	e002      	b.n	8008dbe <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008db8:	4b05      	ldr	r3, [pc, #20]	@ (8008dd0 <HAL_RCC_GetSysClockFreq+0x210>)
 8008dba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008dbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3750      	adds	r7, #80	@ 0x50
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dca:	bf00      	nop
 8008dcc:	40023800 	.word	0x40023800
 8008dd0:	00f42400 	.word	0x00f42400
 8008dd4:	007a1200 	.word	0x007a1200

08008dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ddc:	4b02      	ldr	r3, [pc, #8]	@ (8008de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8008dde:	681b      	ldr	r3, [r3, #0]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bc80      	pop	{r7}
 8008de6:	4770      	bx	lr
 8008de8:	20000070 	.word	0x20000070

08008dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8008df2:	f7ff fff1 	bl	8008dd8 <HAL_RCC_GetHCLKFreq>
 8008df6:	4601      	mov	r1, r0
 8008df8:	4b0b      	ldr	r3, [pc, #44]	@ (8008e28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8008e00:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8008e04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	fa92 f2a2 	rbit	r2, r2
 8008e0c:	603a      	str	r2, [r7, #0]
  return result;
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	fab2 f282 	clz	r2, r2
 8008e14:	b2d2      	uxtb	r2, r2
 8008e16:	40d3      	lsrs	r3, r2
 8008e18:	4a04      	ldr	r2, [pc, #16]	@ (8008e2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8008e1a:	5cd3      	ldrb	r3, [r2, r3]
 8008e1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	40023800 	.word	0x40023800
 8008e2c:	08017e48 	.word	0x08017e48

08008e30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e30:	b084      	sub	sp, #16
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	f107 001c 	add.w	r0, r7, #28
 8008e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d122      	bne.n	8008e8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d105      	bne.n	8008e82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fabc 	bl	800a400 <USB_CoreReset>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]
 8008e8c:	e010      	b.n	8008eb0 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68db      	ldr	r3, [r3, #12]
 8008e92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f001 fab0 	bl	800a400 <USB_CoreReset>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d10b      	bne.n	8008ece <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	f043 0206 	orr.w	r2, r3, #6
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f043 0220 	orr.w	r2, r3, #32
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008eda:	b004      	add	sp, #16
 8008edc:	4770      	bx	lr
	...

08008ee0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008eee:	79fb      	ldrb	r3, [r7, #7]
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d165      	bne.n	8008fc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	4a41      	ldr	r2, [pc, #260]	@ (8008ffc <USB_SetTurnaroundTime+0x11c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d906      	bls.n	8008f0a <USB_SetTurnaroundTime+0x2a>
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	4a40      	ldr	r2, [pc, #256]	@ (8009000 <USB_SetTurnaroundTime+0x120>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d202      	bcs.n	8008f0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f04:	230f      	movs	r3, #15
 8008f06:	617b      	str	r3, [r7, #20]
 8008f08:	e062      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8009000 <USB_SetTurnaroundTime+0x120>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d306      	bcc.n	8008f20 <USB_SetTurnaroundTime+0x40>
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	4a3b      	ldr	r2, [pc, #236]	@ (8009004 <USB_SetTurnaroundTime+0x124>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d202      	bcs.n	8008f20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008f1a:	230e      	movs	r3, #14
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	e057      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	4a38      	ldr	r2, [pc, #224]	@ (8009004 <USB_SetTurnaroundTime+0x124>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d306      	bcc.n	8008f36 <USB_SetTurnaroundTime+0x56>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	4a37      	ldr	r2, [pc, #220]	@ (8009008 <USB_SetTurnaroundTime+0x128>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d202      	bcs.n	8008f36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f30:	230d      	movs	r3, #13
 8008f32:	617b      	str	r3, [r7, #20]
 8008f34:	e04c      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	4a33      	ldr	r2, [pc, #204]	@ (8009008 <USB_SetTurnaroundTime+0x128>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d306      	bcc.n	8008f4c <USB_SetTurnaroundTime+0x6c>
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	4a32      	ldr	r2, [pc, #200]	@ (800900c <USB_SetTurnaroundTime+0x12c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d802      	bhi.n	8008f4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f46:	230c      	movs	r3, #12
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e041      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800900c <USB_SetTurnaroundTime+0x12c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d906      	bls.n	8008f62 <USB_SetTurnaroundTime+0x82>
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4a2e      	ldr	r2, [pc, #184]	@ (8009010 <USB_SetTurnaroundTime+0x130>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d802      	bhi.n	8008f62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008f5c:	230b      	movs	r3, #11
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	e036      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	4a2a      	ldr	r2, [pc, #168]	@ (8009010 <USB_SetTurnaroundTime+0x130>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d906      	bls.n	8008f78 <USB_SetTurnaroundTime+0x98>
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	4a29      	ldr	r2, [pc, #164]	@ (8009014 <USB_SetTurnaroundTime+0x134>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d802      	bhi.n	8008f78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008f72:	230a      	movs	r3, #10
 8008f74:	617b      	str	r3, [r7, #20]
 8008f76:	e02b      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	4a26      	ldr	r2, [pc, #152]	@ (8009014 <USB_SetTurnaroundTime+0x134>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d906      	bls.n	8008f8e <USB_SetTurnaroundTime+0xae>
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4a25      	ldr	r2, [pc, #148]	@ (8009018 <USB_SetTurnaroundTime+0x138>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d202      	bcs.n	8008f8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008f88:	2309      	movs	r3, #9
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e020      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	4a21      	ldr	r2, [pc, #132]	@ (8009018 <USB_SetTurnaroundTime+0x138>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d306      	bcc.n	8008fa4 <USB_SetTurnaroundTime+0xc4>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	4a20      	ldr	r2, [pc, #128]	@ (800901c <USB_SetTurnaroundTime+0x13c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d802      	bhi.n	8008fa4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008f9e:	2308      	movs	r3, #8
 8008fa0:	617b      	str	r3, [r7, #20]
 8008fa2:	e015      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800901c <USB_SetTurnaroundTime+0x13c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d906      	bls.n	8008fba <USB_SetTurnaroundTime+0xda>
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4a1c      	ldr	r2, [pc, #112]	@ (8009020 <USB_SetTurnaroundTime+0x140>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d202      	bcs.n	8008fba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008fb4:	2307      	movs	r3, #7
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	e00a      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008fba:	2306      	movs	r3, #6
 8008fbc:	617b      	str	r3, [r7, #20]
 8008fbe:	e007      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008fc0:	79fb      	ldrb	r3, [r7, #7]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008fc6:	2309      	movs	r3, #9
 8008fc8:	617b      	str	r3, [r7, #20]
 8008fca:	e001      	b.n	8008fd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008fcc:	2309      	movs	r3, #9
 8008fce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	029b      	lsls	r3, r3, #10
 8008fe4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	371c      	adds	r7, #28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bc80      	pop	{r7}
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	00d8acbf 	.word	0x00d8acbf
 8009000:	00e4e1c0 	.word	0x00e4e1c0
 8009004:	00f42400 	.word	0x00f42400
 8009008:	01067380 	.word	0x01067380
 800900c:	011a499f 	.word	0x011a499f
 8009010:	01312cff 	.word	0x01312cff
 8009014:	014ca43f 	.word	0x014ca43f
 8009018:	016e3600 	.word	0x016e3600
 800901c:	01a6ab1f 	.word	0x01a6ab1f
 8009020:	01e84800 	.word	0x01e84800

08009024 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f043 0201 	orr.w	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009038:	2300      	movs	r3, #0
}
 800903a:	4618      	mov	r0, r3
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	bc80      	pop	{r7}
 8009042:	4770      	bx	lr

08009044 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f023 0201 	bic.w	r2, r3, #1
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	bc80      	pop	{r7}
 8009062:	4770      	bx	lr

08009064 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d115      	bne.n	80090b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009092:	2001      	movs	r0, #1
 8009094:	f7fa fe80 	bl	8003d98 <HAL_Delay>
      ms++;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3301      	adds	r3, #1
 800909c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 f922 	bl	800a2e8 <USB_GetMode>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d01e      	beq.n	80090e8 <USB_SetCurrentMode+0x84>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b31      	cmp	r3, #49	@ 0x31
 80090ae:	d9f0      	bls.n	8009092 <USB_SetCurrentMode+0x2e>
 80090b0:	e01a      	b.n	80090e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090b2:	78fb      	ldrb	r3, [r7, #3]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d115      	bne.n	80090e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090c4:	2001      	movs	r0, #1
 80090c6:	f7fa fe67 	bl	8003d98 <HAL_Delay>
      ms++;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	3301      	adds	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 f909 	bl	800a2e8 <USB_GetMode>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <USB_SetCurrentMode+0x84>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2b31      	cmp	r3, #49	@ 0x31
 80090e0:	d9f0      	bls.n	80090c4 <USB_SetCurrentMode+0x60>
 80090e2:	e001      	b.n	80090e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e005      	b.n	80090f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2b32      	cmp	r3, #50	@ 0x32
 80090ec:	d101      	bne.n	80090f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e000      	b.n	80090f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090fc:	b084      	sub	sp, #16
 80090fe:	b580      	push	{r7, lr}
 8009100:	b086      	sub	sp, #24
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800910a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800910e:	2300      	movs	r3, #0
 8009110:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009116:	2300      	movs	r3, #0
 8009118:	613b      	str	r3, [r7, #16]
 800911a:	e009      	b.n	8009130 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	3340      	adds	r3, #64	@ 0x40
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	3301      	adds	r3, #1
 800912e:	613b      	str	r3, [r7, #16]
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	2b0e      	cmp	r3, #14
 8009134:	d9f2      	bls.n	800911c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009138:	2b00      	cmp	r3, #0
 800913a:	d11c      	bne.n	8009176 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800914a:	f043 0302 	orr.w	r3, r3, #2
 800914e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009154:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009160:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	639a      	str	r2, [r3, #56]	@ 0x38
 8009174:	e00b      	b.n	800918e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800917a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009186:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009194:	461a      	mov	r2, r3
 8009196:	2300      	movs	r3, #0
 8009198:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800919a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919c:	2b01      	cmp	r3, #1
 800919e:	d10c      	bne.n	80091ba <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d104      	bne.n	80091b0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80091a6:	2100      	movs	r1, #0
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f965 	bl	8009478 <USB_SetDevSpeed>
 80091ae:	e008      	b.n	80091c2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80091b0:	2101      	movs	r1, #1
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f960 	bl	8009478 <USB_SetDevSpeed>
 80091b8:	e003      	b.n	80091c2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80091ba:	2103      	movs	r1, #3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f95b 	bl	8009478 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091c2:	2110      	movs	r1, #16
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 f8f3 	bl	80093b0 <USB_FlushTxFifo>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f91f 	bl	8009418 <USB_FlushRxFifo>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091ea:	461a      	mov	r2, r3
 80091ec:	2300      	movs	r3, #0
 80091ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091f6:	461a      	mov	r2, r3
 80091f8:	2300      	movs	r3, #0
 80091fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009202:	461a      	mov	r2, r3
 8009204:	2300      	movs	r3, #0
 8009206:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009208:	2300      	movs	r3, #0
 800920a:	613b      	str	r3, [r7, #16]
 800920c:	e043      	b.n	8009296 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	015a      	lsls	r2, r3, #5
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	4413      	add	r3, r2
 8009216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009224:	d118      	bne.n	8009258 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10a      	bne.n	8009242 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	015a      	lsls	r2, r3, #5
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4413      	add	r3, r2
 8009234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009238:	461a      	mov	r2, r3
 800923a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	e013      	b.n	800926a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800924e:	461a      	mov	r2, r3
 8009250:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	e008      	b.n	800926a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009264:	461a      	mov	r2, r3
 8009266:	2300      	movs	r3, #0
 8009268:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4413      	add	r3, r2
 8009272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009276:	461a      	mov	r2, r3
 8009278:	2300      	movs	r3, #0
 800927a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009288:	461a      	mov	r2, r3
 800928a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800928e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	3301      	adds	r3, #1
 8009294:	613b      	str	r3, [r7, #16]
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	429a      	cmp	r2, r3
 800929c:	d3b7      	bcc.n	800920e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800929e:	2300      	movs	r3, #0
 80092a0:	613b      	str	r3, [r7, #16]
 80092a2:	e043      	b.n	800932c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092ba:	d118      	bne.n	80092ee <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ce:	461a      	mov	r2, r3
 80092d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	e013      	b.n	8009300 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e4:	461a      	mov	r2, r3
 80092e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	e008      	b.n	8009300 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fa:	461a      	mov	r2, r3
 80092fc:	2300      	movs	r3, #0
 80092fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800930c:	461a      	mov	r2, r3
 800930e:	2300      	movs	r3, #0
 8009310:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800931e:	461a      	mov	r2, r3
 8009320:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009324:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	3301      	adds	r3, #1
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	429a      	cmp	r2, r3
 8009332:	d3b7      	bcc.n	80092a4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009342:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009346:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009354:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d105      	bne.n	8009368 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	f043 0210 	orr.w	r2, r3, #16
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	699a      	ldr	r2, [r3, #24]
 800936c:	4b0f      	ldr	r3, [pc, #60]	@ (80093ac <USB_DevInit+0x2b0>)
 800936e:	4313      	orrs	r3, r2
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d005      	beq.n	8009386 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	f043 0208 	orr.w	r2, r3, #8
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009388:	2b01      	cmp	r3, #1
 800938a:	d107      	bne.n	800939c <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009394:	f043 0304 	orr.w	r3, r3, #4
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093a8:	b004      	add	sp, #16
 80093aa:	4770      	bx	lr
 80093ac:	803c3800 	.word	0x803c3800

080093b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3301      	adds	r3, #1
 80093c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4a13      	ldr	r2, [pc, #76]	@ (8009414 <USB_FlushTxFifo+0x64>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d901      	bls.n	80093d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e01b      	b.n	8009408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	daf2      	bge.n	80093be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	019b      	lsls	r3, r3, #6
 80093e0:	f043 0220 	orr.w	r2, r3, #32
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	4a08      	ldr	r2, [pc, #32]	@ (8009414 <USB_FlushTxFifo+0x64>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d901      	bls.n	80093fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e006      	b.n	8009408 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b20      	cmp	r3, #32
 8009404:	d0f0      	beq.n	80093e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	00030d40 	.word	0x00030d40

08009418 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	3301      	adds	r3, #1
 8009428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	4a11      	ldr	r2, [pc, #68]	@ (8009474 <USB_FlushRxFifo+0x5c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d901      	bls.n	8009436 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009432:	2303      	movs	r3, #3
 8009434:	e018      	b.n	8009468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	daf2      	bge.n	8009424 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2210      	movs	r2, #16
 8009446:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	3301      	adds	r3, #1
 800944c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4a08      	ldr	r2, [pc, #32]	@ (8009474 <USB_FlushRxFifo+0x5c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d901      	bls.n	800945a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e006      	b.n	8009468 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f003 0310 	and.w	r3, r3, #16
 8009462:	2b10      	cmp	r3, #16
 8009464:	d0f0      	beq.n	8009448 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	bc80      	pop	{r7}
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	00030d40 	.word	0x00030d40

08009478 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	68f9      	ldr	r1, [r7, #12]
 8009494:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009498:	4313      	orrs	r3, r2
 800949a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bc80      	pop	{r7}
 80094a6:	4770      	bx	lr

080094a8 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b087      	sub	sp, #28
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f003 0306 	and.w	r3, r3, #6
 80094c0:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80094c8:	2300      	movs	r3, #0
 80094ca:	75fb      	strb	r3, [r7, #23]
 80094cc:	e00a      	b.n	80094e4 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d002      	beq.n	80094da <USB_GetDevSpeed+0x32>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b06      	cmp	r3, #6
 80094d8:	d102      	bne.n	80094e0 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80094da:	2302      	movs	r3, #2
 80094dc:	75fb      	strb	r3, [r7, #23]
 80094de:	e001      	b.n	80094e4 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80094e0:	230f      	movs	r3, #15
 80094e2:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	371c      	adds	r7, #28
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bc80      	pop	{r7}
 80094ee:	4770      	bx	lr

080094f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d13a      	bne.n	8009582 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009512:	69da      	ldr	r2, [r3, #28]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 030f 	and.w	r3, r3, #15
 800951c:	2101      	movs	r1, #1
 800951e:	fa01 f303 	lsl.w	r3, r1, r3
 8009522:	b29b      	uxth	r3, r3
 8009524:	68f9      	ldr	r1, [r7, #12]
 8009526:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800952a:	4313      	orrs	r3, r2
 800952c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009540:	2b00      	cmp	r3, #0
 8009542:	d155      	bne.n	80095f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	791b      	ldrb	r3, [r3, #4]
 800955e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009560:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	059b      	lsls	r3, r3, #22
 8009566:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009568:	4313      	orrs	r3, r2
 800956a:	68ba      	ldr	r2, [r7, #8]
 800956c:	0151      	lsls	r1, r2, #5
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	440a      	add	r2, r1
 8009572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800957a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	e036      	b.n	80095f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009588:	69da      	ldr	r2, [r3, #28]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	2101      	movs	r1, #1
 8009594:	fa01 f303 	lsl.w	r3, r1, r3
 8009598:	041b      	lsls	r3, r3, #16
 800959a:	68f9      	ldr	r1, [r7, #12]
 800959c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095a0:	4313      	orrs	r3, r2
 80095a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	015a      	lsls	r2, r3, #5
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	4413      	add	r3, r2
 80095ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d11a      	bne.n	80095f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	791b      	ldrb	r3, [r3, #4]
 80095d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80095d6:	430b      	orrs	r3, r1
 80095d8:	4313      	orrs	r3, r2
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	0151      	lsls	r1, r2, #5
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	440a      	add	r2, r1
 80095e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bc80      	pop	{r7}
 80095fa:	4770      	bx	lr

080095fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	785b      	ldrb	r3, [r3, #1]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d161      	bne.n	80096dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800962a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800962e:	d11f      	bne.n	8009670 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	0151      	lsls	r1, r2, #5
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	440a      	add	r2, r1
 8009646:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800964a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800964e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	0151      	lsls	r1, r2, #5
 8009662:	68fa      	ldr	r2, [r7, #12]
 8009664:	440a      	add	r2, r1
 8009666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800966a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800966e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	f003 030f 	and.w	r3, r3, #15
 8009680:	2101      	movs	r1, #1
 8009682:	fa01 f303 	lsl.w	r3, r1, r3
 8009686:	b29b      	uxth	r3, r3
 8009688:	43db      	mvns	r3, r3
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009690:	4013      	ands	r3, r2
 8009692:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800969a:	69da      	ldr	r2, [r3, #28]
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f003 030f 	and.w	r3, r3, #15
 80096a4:	2101      	movs	r1, #1
 80096a6:	fa01 f303 	lsl.w	r3, r1, r3
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	43db      	mvns	r3, r3
 80096ae:	68f9      	ldr	r1, [r7, #12]
 80096b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80096b4:	4013      	ands	r3, r2
 80096b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	0159      	lsls	r1, r3, #5
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	440b      	add	r3, r1
 80096ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096d2:	4619      	mov	r1, r3
 80096d4:	4b35      	ldr	r3, [pc, #212]	@ (80097ac <USB_DeactivateEndpoint+0x1b0>)
 80096d6:	4013      	ands	r3, r2
 80096d8:	600b      	str	r3, [r1, #0]
 80096da:	e060      	b.n	800979e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096f2:	d11f      	bne.n	8009734 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	0151      	lsls	r1, r2, #5
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	440a      	add	r2, r1
 800970a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800970e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009712:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	440a      	add	r2, r1
 800972a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800972e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009732:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800973a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	2101      	movs	r1, #1
 8009746:	fa01 f303 	lsl.w	r3, r1, r3
 800974a:	041b      	lsls	r3, r3, #16
 800974c:	43db      	mvns	r3, r3
 800974e:	68f9      	ldr	r1, [r7, #12]
 8009750:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009754:	4013      	ands	r3, r2
 8009756:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975e:	69da      	ldr	r2, [r3, #28]
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	f003 030f 	and.w	r3, r3, #15
 8009768:	2101      	movs	r1, #1
 800976a:	fa01 f303 	lsl.w	r3, r1, r3
 800976e:	041b      	lsls	r3, r3, #16
 8009770:	43db      	mvns	r3, r3
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009778:	4013      	ands	r3, r2
 800977a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	0159      	lsls	r1, r3, #5
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	440b      	add	r3, r1
 8009792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009796:	4619      	mov	r1, r3
 8009798:	4b05      	ldr	r3, [pc, #20]	@ (80097b0 <USB_DeactivateEndpoint+0x1b4>)
 800979a:	4013      	ands	r3, r2
 800979c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bc80      	pop	{r7}
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	ec337800 	.word	0xec337800
 80097b0:	eff37800 	.word	0xeff37800

080097b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08a      	sub	sp, #40	@ 0x28
 80097b8:	af02      	add	r7, sp, #8
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	785b      	ldrb	r3, [r3, #1]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	f040 817a 	bne.w	8009aca <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d132      	bne.n	8009844 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097de:	69bb      	ldr	r3, [r7, #24]
 80097e0:	015a      	lsls	r2, r3, #5
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	69ba      	ldr	r2, [r7, #24]
 80097ee:	0151      	lsls	r1, r2, #5
 80097f0:	69fa      	ldr	r2, [r7, #28]
 80097f2:	440a      	add	r2, r1
 80097f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097f8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80097fc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	69fa      	ldr	r2, [r7, #28]
 8009816:	440a      	add	r2, r1
 8009818:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800981c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800982e:	691b      	ldr	r3, [r3, #16]
 8009830:	69ba      	ldr	r2, [r7, #24]
 8009832:	0151      	lsls	r1, r2, #5
 8009834:	69fa      	ldr	r2, [r7, #28]
 8009836:	440a      	add	r2, r1
 8009838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800983c:	0cdb      	lsrs	r3, r3, #19
 800983e:	04db      	lsls	r3, r3, #19
 8009840:	6113      	str	r3, [r2, #16]
 8009842:	e092      	b.n	800996a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009844:	69bb      	ldr	r3, [r7, #24]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	0151      	lsls	r1, r2, #5
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	440a      	add	r2, r1
 800985a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800985e:	0cdb      	lsrs	r3, r3, #19
 8009860:	04db      	lsls	r3, r3, #19
 8009862:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	0151      	lsls	r1, r2, #5
 8009876:	69fa      	ldr	r2, [r7, #28]
 8009878:	440a      	add	r2, r1
 800987a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800987e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009882:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009886:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d11a      	bne.n	80098c4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	691a      	ldr	r2, [r3, #16]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	429a      	cmp	r2, r3
 8009898:	d903      	bls.n	80098a2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	689a      	ldr	r2, [r3, #8]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	69fb      	ldr	r3, [r7, #28]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	69ba      	ldr	r2, [r7, #24]
 80098b2:	0151      	lsls	r1, r2, #5
 80098b4:	69fa      	ldr	r2, [r7, #28]
 80098b6:	440a      	add	r2, r1
 80098b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098c0:	6113      	str	r3, [r2, #16]
 80098c2:	e01b      	b.n	80098fc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098c4:	69bb      	ldr	r3, [r7, #24]
 80098c6:	015a      	lsls	r2, r3, #5
 80098c8:	69fb      	ldr	r3, [r7, #28]
 80098ca:	4413      	add	r3, r2
 80098cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098d0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	6919      	ldr	r1, [r3, #16]
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	440b      	add	r3, r1
 80098dc:	1e59      	subs	r1, r3, #1
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80098e6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80098e8:	4ba2      	ldr	r3, [pc, #648]	@ (8009b74 <USB_EPStartXfer+0x3c0>)
 80098ea:	400b      	ands	r3, r1
 80098ec:	69b9      	ldr	r1, [r7, #24]
 80098ee:	0148      	lsls	r0, r1, #5
 80098f0:	69f9      	ldr	r1, [r7, #28]
 80098f2:	4401      	add	r1, r0
 80098f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80098f8:	4313      	orrs	r3, r2
 80098fa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009908:	691a      	ldr	r2, [r3, #16]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009912:	69b9      	ldr	r1, [r7, #24]
 8009914:	0148      	lsls	r0, r1, #5
 8009916:	69f9      	ldr	r1, [r7, #28]
 8009918:	4401      	add	r1, r0
 800991a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800991e:	4313      	orrs	r3, r2
 8009920:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	791b      	ldrb	r3, [r3, #4]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d11f      	bne.n	800996a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	4413      	add	r3, r2
 8009932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	69ba      	ldr	r2, [r7, #24]
 800993a:	0151      	lsls	r1, r2, #5
 800993c:	69fa      	ldr	r2, [r7, #28]
 800993e:	440a      	add	r2, r1
 8009940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009944:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009948:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	4413      	add	r3, r2
 8009952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	69ba      	ldr	r2, [r7, #24]
 800995a:	0151      	lsls	r1, r2, #5
 800995c:	69fa      	ldr	r2, [r7, #28]
 800995e:	440a      	add	r2, r1
 8009960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009964:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009968:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d14b      	bne.n	8009a08 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	69db      	ldr	r3, [r3, #28]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d009      	beq.n	800998c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009984:	461a      	mov	r2, r3
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	791b      	ldrb	r3, [r3, #4]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d128      	bne.n	80099e6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d110      	bne.n	80099c6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	69ba      	ldr	r2, [r7, #24]
 80099b4:	0151      	lsls	r1, r2, #5
 80099b6:	69fa      	ldr	r2, [r7, #28]
 80099b8:	440a      	add	r2, r1
 80099ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099be:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	e00f      	b.n	80099e6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	015a      	lsls	r2, r3, #5
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	4413      	add	r3, r2
 80099ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	0151      	lsls	r1, r2, #5
 80099d8:	69fa      	ldr	r2, [r7, #28]
 80099da:	440a      	add	r2, r1
 80099dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	015a      	lsls	r2, r3, #5
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	4413      	add	r3, r2
 80099ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	69ba      	ldr	r2, [r7, #24]
 80099f6:	0151      	lsls	r1, r2, #5
 80099f8:	69fa      	ldr	r2, [r7, #28]
 80099fa:	440a      	add	r2, r1
 80099fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a00:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	e165      	b.n	8009cd4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	015a      	lsls	r2, r3, #5
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	69ba      	ldr	r2, [r7, #24]
 8009a18:	0151      	lsls	r1, r2, #5
 8009a1a:	69fa      	ldr	r2, [r7, #28]
 8009a1c:	440a      	add	r2, r1
 8009a1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a22:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009a26:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	791b      	ldrb	r3, [r3, #4]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d015      	beq.n	8009a5c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f000 814d 	beq.w	8009cd4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 030f 	and.w	r3, r3, #15
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a50:	69f9      	ldr	r1, [r7, #28]
 8009a52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a56:	4313      	orrs	r3, r2
 8009a58:	634b      	str	r3, [r1, #52]	@ 0x34
 8009a5a:	e13b      	b.n	8009cd4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d110      	bne.n	8009a8e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	015a      	lsls	r2, r3, #5
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	4413      	add	r3, r2
 8009a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	69ba      	ldr	r2, [r7, #24]
 8009a7c:	0151      	lsls	r1, r2, #5
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	440a      	add	r2, r1
 8009a82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	e00f      	b.n	8009aae <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	69ba      	ldr	r2, [r7, #24]
 8009a9e:	0151      	lsls	r1, r2, #5
 8009aa0:	69fa      	ldr	r2, [r7, #28]
 8009aa2:	440a      	add	r2, r1
 8009aa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	68d9      	ldr	r1, [r3, #12]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	b298      	uxth	r0, r3
 8009abc:	79fb      	ldrb	r3, [r7, #7]
 8009abe:	9300      	str	r3, [sp, #0]
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f000 f9b7 	bl	8009e36 <USB_WritePacket>
 8009ac8:	e104      	b.n	8009cd4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	69fb      	ldr	r3, [r7, #28]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	0151      	lsls	r1, r2, #5
 8009adc:	69fa      	ldr	r2, [r7, #28]
 8009ade:	440a      	add	r2, r1
 8009ae0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ae4:	0cdb      	lsrs	r3, r3, #19
 8009ae6:	04db      	lsls	r3, r3, #19
 8009ae8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	69ba      	ldr	r2, [r7, #24]
 8009afa:	0151      	lsls	r1, r2, #5
 8009afc:	69fa      	ldr	r2, [r7, #28]
 8009afe:	440a      	add	r2, r1
 8009b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b04:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009b08:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009b0c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d131      	bne.n	8009b78 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009b2c:	69bb      	ldr	r3, [r7, #24]
 8009b2e:	015a      	lsls	r2, r3, #5
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	4413      	add	r3, r2
 8009b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b38:	691a      	ldr	r2, [r3, #16]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b42:	69b9      	ldr	r1, [r7, #24]
 8009b44:	0148      	lsls	r0, r1, #5
 8009b46:	69f9      	ldr	r1, [r7, #28]
 8009b48:	4401      	add	r1, r0
 8009b4a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	015a      	lsls	r2, r3, #5
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	4413      	add	r3, r2
 8009b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	0151      	lsls	r1, r2, #5
 8009b64:	69fa      	ldr	r2, [r7, #28]
 8009b66:	440a      	add	r2, r1
 8009b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b70:	6113      	str	r3, [r2, #16]
 8009b72:	e061      	b.n	8009c38 <USB_EPStartXfer+0x484>
 8009b74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d123      	bne.n	8009bc8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	015a      	lsls	r2, r3, #5
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	4413      	add	r3, r2
 8009b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b8c:	691a      	ldr	r2, [r3, #16]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b96:	69b9      	ldr	r1, [r7, #24]
 8009b98:	0148      	lsls	r0, r1, #5
 8009b9a:	69f9      	ldr	r1, [r7, #28]
 8009b9c:	4401      	add	r1, r0
 8009b9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009ba6:	69bb      	ldr	r3, [r7, #24]
 8009ba8:	015a      	lsls	r2, r3, #5
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	4413      	add	r3, r2
 8009bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	0151      	lsls	r1, r2, #5
 8009bb8:	69fa      	ldr	r2, [r7, #28]
 8009bba:	440a      	add	r2, r1
 8009bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009bc4:	6113      	str	r3, [r2, #16]
 8009bc6:	e037      	b.n	8009c38 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	691a      	ldr	r2, [r3, #16]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	1e5a      	subs	r2, r3, #1
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bdc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	8afa      	ldrh	r2, [r7, #22]
 8009be4:	fb03 f202 	mul.w	r2, r3, r2
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf8:	691a      	ldr	r2, [r3, #16]
 8009bfa:	8afb      	ldrh	r3, [r7, #22]
 8009bfc:	04d9      	lsls	r1, r3, #19
 8009bfe:	4b38      	ldr	r3, [pc, #224]	@ (8009ce0 <USB_EPStartXfer+0x52c>)
 8009c00:	400b      	ands	r3, r1
 8009c02:	69b9      	ldr	r1, [r7, #24]
 8009c04:	0148      	lsls	r0, r1, #5
 8009c06:	69f9      	ldr	r1, [r7, #28]
 8009c08:	4401      	add	r1, r0
 8009c0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c1e:	691a      	ldr	r2, [r3, #16]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c28:	69b9      	ldr	r1, [r7, #24]
 8009c2a:	0148      	lsls	r0, r1, #5
 8009c2c:	69f9      	ldr	r1, [r7, #28]
 8009c2e:	4401      	add	r1, r0
 8009c30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c34:	4313      	orrs	r3, r2
 8009c36:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d10d      	bne.n	8009c5a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d009      	beq.n	8009c5a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	68d9      	ldr	r1, [r3, #12]
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	015a      	lsls	r2, r3, #5
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c56:	460a      	mov	r2, r1
 8009c58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	791b      	ldrb	r3, [r3, #4]
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d128      	bne.n	8009cb4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d110      	bne.n	8009c94 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	0151      	lsls	r1, r2, #5
 8009c84:	69fa      	ldr	r2, [r7, #28]
 8009c86:	440a      	add	r2, r1
 8009c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	e00f      	b.n	8009cb4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	69ba      	ldr	r2, [r7, #24]
 8009ca4:	0151      	lsls	r1, r2, #5
 8009ca6:	69fa      	ldr	r2, [r7, #28]
 8009ca8:	440a      	add	r2, r1
 8009caa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	0151      	lsls	r1, r2, #5
 8009cc6:	69fa      	ldr	r2, [r7, #28]
 8009cc8:	440a      	add	r2, r1
 8009cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009cd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3720      	adds	r7, #32
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	1ff80000 	.word	0x1ff80000

08009ce4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d14a      	bne.n	8009d98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d1a:	f040 8086 	bne.w	8009e2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	7812      	ldrb	r2, [r2, #0]
 8009d32:	0151      	lsls	r1, r2, #5
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	440a      	add	r2, r1
 8009d38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	7812      	ldrb	r2, [r2, #0]
 8009d56:	0151      	lsls	r1, r2, #5
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	440a      	add	r2, r1
 8009d5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d902      	bls.n	8009d7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	75fb      	strb	r3, [r7, #23]
          break;
 8009d7a:	e056      	b.n	8009e2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d94:	d0e7      	beq.n	8009d66 <USB_EPStopXfer+0x82>
 8009d96:	e048      	b.n	8009e2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	015a      	lsls	r2, r3, #5
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	4413      	add	r3, r2
 8009da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009dac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009db0:	d13b      	bne.n	8009e2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	683a      	ldr	r2, [r7, #0]
 8009dc4:	7812      	ldrb	r2, [r2, #0]
 8009dc6:	0151      	lsls	r1, r2, #5
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	440a      	add	r2, r1
 8009dcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009dd4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	7812      	ldrb	r2, [r2, #0]
 8009dea:	0151      	lsls	r1, r2, #5
 8009dec:	693a      	ldr	r2, [r7, #16]
 8009dee:	440a      	add	r2, r1
 8009df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009df4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009df8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d902      	bls.n	8009e10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8009e0e:	e00c      	b.n	8009e2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e28:	d0e7      	beq.n	8009dfa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	371c      	adds	r7, #28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bc80      	pop	{r7}
 8009e34:	4770      	bx	lr

08009e36 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e36:	b480      	push	{r7}
 8009e38:	b089      	sub	sp, #36	@ 0x24
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	60f8      	str	r0, [r7, #12]
 8009e3e:	60b9      	str	r1, [r7, #8]
 8009e40:	4611      	mov	r1, r2
 8009e42:	461a      	mov	r2, r3
 8009e44:	460b      	mov	r3, r1
 8009e46:	71fb      	strb	r3, [r7, #7]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009e54:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d123      	bne.n	8009ea4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e5c:	88bb      	ldrh	r3, [r7, #4]
 8009e5e:	3303      	adds	r3, #3
 8009e60:	089b      	lsrs	r3, r3, #2
 8009e62:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e64:	2300      	movs	r3, #0
 8009e66:	61bb      	str	r3, [r7, #24]
 8009e68:	e018      	b.n	8009e9c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e6a:	79fb      	ldrb	r3, [r7, #7]
 8009e6c:	031a      	lsls	r2, r3, #12
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	4413      	add	r3, r2
 8009e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e76:	461a      	mov	r2, r3
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	3301      	adds	r3, #1
 8009e82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	3301      	adds	r3, #1
 8009e88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	3301      	adds	r3, #1
 8009e94:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	61bb      	str	r3, [r7, #24]
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d3e2      	bcc.n	8009e6a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3724      	adds	r7, #36	@ 0x24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bc80      	pop	{r7}
 8009eae:	4770      	bx	lr

08009eb0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b08b      	sub	sp, #44	@ 0x2c
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	4613      	mov	r3, r2
 8009ebc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ec6:	88fb      	ldrh	r3, [r7, #6]
 8009ec8:	089b      	lsrs	r3, r3, #2
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009ece:	88fb      	ldrh	r3, [r7, #6]
 8009ed0:	f003 0303 	and.w	r3, r3, #3
 8009ed4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	623b      	str	r3, [r7, #32]
 8009eda:	e014      	b.n	8009f06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eea:	3301      	adds	r3, #1
 8009eec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efc:	3301      	adds	r3, #1
 8009efe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	3301      	adds	r3, #1
 8009f04:	623b      	str	r3, [r7, #32]
 8009f06:	6a3a      	ldr	r2, [r7, #32]
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d3e6      	bcc.n	8009edc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009f0e:	8bfb      	ldrh	r3, [r7, #30]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01e      	beq.n	8009f52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009f14:	2300      	movs	r3, #0
 8009f16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f107 0310 	add.w	r3, r7, #16
 8009f24:	6812      	ldr	r2, [r2, #0]
 8009f26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009f28:	693a      	ldr	r2, [r7, #16]
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	00db      	lsls	r3, r3, #3
 8009f30:	fa22 f303 	lsr.w	r3, r2, r3
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f38:	701a      	strb	r2, [r3, #0]
      i++;
 8009f3a:	6a3b      	ldr	r3, [r7, #32]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f42:	3301      	adds	r3, #1
 8009f44:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009f46:	8bfb      	ldrh	r3, [r7, #30]
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009f4c:	8bfb      	ldrh	r3, [r7, #30]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1ea      	bne.n	8009f28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	372c      	adds	r7, #44	@ 0x2c
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bc80      	pop	{r7}
 8009f5c:	4770      	bx	lr

08009f5e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f5e:	b480      	push	{r7}
 8009f60:	b085      	sub	sp, #20
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
 8009f66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	785b      	ldrb	r3, [r3, #1]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d12c      	bne.n	8009fd4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	db12      	blt.n	8009fb2 <USB_EPSetStall+0x54>
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00f      	beq.n	8009fb2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	015a      	lsls	r2, r3, #5
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4413      	add	r3, r2
 8009f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	0151      	lsls	r1, r2, #5
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	440a      	add	r2, r1
 8009fa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009fb0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	0151      	lsls	r1, r2, #5
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	440a      	add	r2, r1
 8009fc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	e02b      	b.n	800a02c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	015a      	lsls	r2, r3, #5
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	4413      	add	r3, r2
 8009fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	db12      	blt.n	800a00c <USB_EPSetStall+0xae>
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00f      	beq.n	800a00c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	015a      	lsls	r2, r3, #5
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	0151      	lsls	r1, r2, #5
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	440a      	add	r2, r1
 800a002:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a006:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a00a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	0151      	lsls	r1, r2, #5
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	440a      	add	r2, r1
 800a022:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a026:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a02a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	bc80      	pop	{r7}
 800a036:	4770      	bx	lr

0800a038 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	785b      	ldrb	r3, [r3, #1]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d128      	bne.n	800a0a6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	015a      	lsls	r2, r3, #5
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	4413      	add	r3, r2
 800a05c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	0151      	lsls	r1, r2, #5
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	440a      	add	r2, r1
 800a06a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a06e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a072:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	791b      	ldrb	r3, [r3, #4]
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d003      	beq.n	800a084 <USB_EPClearStall+0x4c>
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	791b      	ldrb	r3, [r3, #4]
 800a080:	2b02      	cmp	r3, #2
 800a082:	d138      	bne.n	800a0f6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a09e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	e027      	b.n	800a0f6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	015a      	lsls	r2, r3, #5
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	0151      	lsls	r1, r2, #5
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	440a      	add	r2, r1
 800a0bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a0c4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	791b      	ldrb	r3, [r3, #4]
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d003      	beq.n	800a0d6 <USB_EPClearStall+0x9e>
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	791b      	ldrb	r3, [r3, #4]
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d10f      	bne.n	800a0f6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	015a      	lsls	r2, r3, #5
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	4413      	add	r3, r2
 800a0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	0151      	lsls	r1, r2, #5
 800a0e8:	68fa      	ldr	r2, [r7, #12]
 800a0ea:	440a      	add	r2, r1
 800a0ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0f4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bc80      	pop	{r7}
 800a100:	4770      	bx	lr

0800a102 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a102:	b480      	push	{r7}
 800a104:	b085      	sub	sp, #20
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
 800a10a:	460b      	mov	r3, r1
 800a10c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a120:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a124:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	78fb      	ldrb	r3, [r7, #3]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a136:	68f9      	ldr	r1, [r7, #12]
 800a138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a13c:	4313      	orrs	r3, r2
 800a13e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr

0800a14c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a17a:	f023 0302 	bic.w	r3, r3, #2
 800a17e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	bc80      	pop	{r7}
 800a18a:	4770      	bx	lr

0800a18c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1a6:	f023 0303 	bic.w	r3, r3, #3
 800a1aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1ba:	f043 0302 	orr.w	r3, r3, #2
 800a1be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bc80      	pop	{r7}
 800a1ca:	4770      	bx	lr

0800a1cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	699b      	ldr	r3, [r3, #24]
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3714      	adds	r7, #20
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bc80      	pop	{r7}
 800a1ee:	4770      	bx	lr

0800a1f0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	4013      	ands	r3, r2
 800a212:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	0c1b      	lsrs	r3, r3, #16
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bc80      	pop	{r7}
 800a220:	4770      	bx	lr

0800a222 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a222:	b480      	push	{r7}
 800a224:	b085      	sub	sp, #20
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a23e:	69db      	ldr	r3, [r3, #28]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	4013      	ands	r3, r2
 800a244:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	b29b      	uxth	r3, r3
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	bc80      	pop	{r7}
 800a252:	4770      	bx	lr

0800a254 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	4013      	ands	r3, r2
 800a280:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a282:	68bb      	ldr	r3, [r7, #8]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3714      	adds	r7, #20
 800a288:	46bd      	mov	sp, r7
 800a28a:	bc80      	pop	{r7}
 800a28c:	4770      	bx	lr

0800a28e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a28e:	b480      	push	{r7}
 800a290:	b087      	sub	sp, #28
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	460b      	mov	r3, r1
 800a298:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2b2:	78fb      	ldrb	r3, [r7, #3]
 800a2b4:	f003 030f 	and.w	r3, r3, #15
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a2be:	01db      	lsls	r3, r3, #7
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	015a      	lsls	r2, r3, #5
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	693a      	ldr	r2, [r7, #16]
 800a2d8:	4013      	ands	r3, r2
 800a2da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2dc:	68bb      	ldr	r3, [r7, #8]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	371c      	adds	r7, #28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bc80      	pop	{r7}
 800a2e6:	4770      	bx	lr

0800a2e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	f003 0301 	and.w	r3, r3, #1
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bc80      	pop	{r7}
 800a300:	4770      	bx	lr

0800a302 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a302:	b480      	push	{r7}
 800a304:	b085      	sub	sp, #20
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	68fa      	ldr	r2, [r7, #12]
 800a318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a31c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a320:	f023 0307 	bic.w	r3, r3, #7
 800a324:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a338:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	bc80      	pop	{r7}
 800a344:	4770      	bx	lr
	...

0800a348 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a348:	b480      	push	{r7}
 800a34a:	b087      	sub	sp, #28
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	460b      	mov	r3, r1
 800a352:	607a      	str	r2, [r7, #4]
 800a354:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	333c      	adds	r3, #60	@ 0x3c
 800a35e:	3304      	adds	r3, #4
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	4a25      	ldr	r2, [pc, #148]	@ (800a3fc <USB_EP0_OutStart+0xb4>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d90a      	bls.n	800a382 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a378:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a37c:	d101      	bne.n	800a382 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	e037      	b.n	800a3f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a388:	461a      	mov	r2, r3
 800a38a:	2300      	movs	r3, #0
 800a38c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	697a      	ldr	r2, [r7, #20]
 800a398:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a39c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a3a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	697a      	ldr	r2, [r7, #20]
 800a3ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3b0:	f043 0318 	orr.w	r3, r3, #24
 800a3b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	697a      	ldr	r2, [r7, #20]
 800a3c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a3c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3ca:	7afb      	ldrb	r3, [r7, #11]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d10f      	bne.n	800a3f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	697a      	ldr	r2, [r7, #20]
 800a3e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a3ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bc80      	pop	{r7}
 800a3fa:	4770      	bx	lr
 800a3fc:	4f54300a 	.word	0x4f54300a

0800a400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3301      	adds	r3, #1
 800a410:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4a12      	ldr	r2, [pc, #72]	@ (800a460 <USB_CoreReset+0x60>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d901      	bls.n	800a41e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e01b      	b.n	800a456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	daf2      	bge.n	800a40c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a426:	2300      	movs	r3, #0
 800a428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	f043 0201 	orr.w	r2, r3, #1
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	3301      	adds	r3, #1
 800a43a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4a08      	ldr	r2, [pc, #32]	@ (800a460 <USB_CoreReset+0x60>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d901      	bls.n	800a448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e006      	b.n	800a456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b01      	cmp	r3, #1
 800a452:	d0f0      	beq.n	800a436 <USB_CoreReset+0x36>

  return HAL_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bc80      	pop	{r7}
 800a45e:	4770      	bx	lr
 800a460:	00030d40 	.word	0x00030d40

0800a464 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	4603      	mov	r3, r0
 800a46c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800a46e:	88fb      	ldrh	r3, [r7, #6]
 800a470:	ba5b      	rev16	r3, r3
 800a472:	b29b      	uxth	r3, r3
}
 800a474:	4618      	mov	r0, r3
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	bc80      	pop	{r7}
 800a47c:	4770      	bx	lr

0800a47e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	061a      	lsls	r2, r3, #24
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	021b      	lsls	r3, r3, #8
 800a48e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a492:	431a      	orrs	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	0a1b      	lsrs	r3, r3, #8
 800a498:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a49c:	431a      	orrs	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	0e1b      	lsrs	r3, r3, #24
 800a4a2:	4313      	orrs	r3, r2
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
	...

0800a4b0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800a4b8:	4915      	ldr	r1, [pc, #84]	@ (800a510 <etharp_free_entry+0x60>)
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	4413      	add	r3, r2
 800a4c2:	00db      	lsls	r3, r3, #3
 800a4c4:	440b      	add	r3, r1
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d013      	beq.n	800a4f4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800a4cc:	4910      	ldr	r1, [pc, #64]	@ (800a510 <etharp_free_entry+0x60>)
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	4413      	add	r3, r2
 800a4d6:	00db      	lsls	r3, r3, #3
 800a4d8:	440b      	add	r3, r1
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f003 fbe9 	bl	800dcb4 <pbuf_free>
    arp_table[i].q = NULL;
 800a4e2:	490b      	ldr	r1, [pc, #44]	@ (800a510 <etharp_free_entry+0x60>)
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	005b      	lsls	r3, r3, #1
 800a4ea:	4413      	add	r3, r2
 800a4ec:	00db      	lsls	r3, r3, #3
 800a4ee:	440b      	add	r3, r1
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800a4f4:	4906      	ldr	r1, [pc, #24]	@ (800a510 <etharp_free_entry+0x60>)
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	005b      	lsls	r3, r3, #1
 800a4fc:	4413      	add	r3, r2
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	440b      	add	r3, r1
 800a502:	3314      	adds	r3, #20
 800a504:	2200      	movs	r2, #0
 800a506:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20006f7c 	.word	0x20006f7c

0800a514 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b082      	sub	sp, #8
 800a518:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a51a:	2300      	movs	r3, #0
 800a51c:	71fb      	strb	r3, [r7, #7]
 800a51e:	e096      	b.n	800a64e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800a520:	79fa      	ldrb	r2, [r7, #7]
 800a522:	494f      	ldr	r1, [pc, #316]	@ (800a660 <etharp_tmr+0x14c>)
 800a524:	4613      	mov	r3, r2
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	4413      	add	r3, r2
 800a52a:	00db      	lsls	r3, r3, #3
 800a52c:	440b      	add	r3, r1
 800a52e:	3314      	adds	r3, #20
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800a534:	79bb      	ldrb	r3, [r7, #6]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 8086 	beq.w	800a648 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800a53c:	79fa      	ldrb	r2, [r7, #7]
 800a53e:	4948      	ldr	r1, [pc, #288]	@ (800a660 <etharp_tmr+0x14c>)
 800a540:	4613      	mov	r3, r2
 800a542:	005b      	lsls	r3, r3, #1
 800a544:	4413      	add	r3, r2
 800a546:	00db      	lsls	r3, r3, #3
 800a548:	440b      	add	r3, r1
 800a54a:	3312      	adds	r3, #18
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	3301      	adds	r3, #1
 800a550:	b298      	uxth	r0, r3
 800a552:	4943      	ldr	r1, [pc, #268]	@ (800a660 <etharp_tmr+0x14c>)
 800a554:	4613      	mov	r3, r2
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	4413      	add	r3, r2
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	440b      	add	r3, r1
 800a55e:	3312      	adds	r3, #18
 800a560:	4602      	mov	r2, r0
 800a562:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a564:	79fa      	ldrb	r2, [r7, #7]
 800a566:	493e      	ldr	r1, [pc, #248]	@ (800a660 <etharp_tmr+0x14c>)
 800a568:	4613      	mov	r3, r2
 800a56a:	005b      	lsls	r3, r3, #1
 800a56c:	4413      	add	r3, r2
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	440b      	add	r3, r1
 800a572:	3312      	adds	r3, #18
 800a574:	881b      	ldrh	r3, [r3, #0]
 800a576:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800a57a:	d215      	bcs.n	800a5a8 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a57c:	79fa      	ldrb	r2, [r7, #7]
 800a57e:	4938      	ldr	r1, [pc, #224]	@ (800a660 <etharp_tmr+0x14c>)
 800a580:	4613      	mov	r3, r2
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	4413      	add	r3, r2
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	440b      	add	r3, r1
 800a58a:	3314      	adds	r3, #20
 800a58c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d10f      	bne.n	800a5b2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800a592:	79fa      	ldrb	r2, [r7, #7]
 800a594:	4932      	ldr	r1, [pc, #200]	@ (800a660 <etharp_tmr+0x14c>)
 800a596:	4613      	mov	r3, r2
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	4413      	add	r3, r2
 800a59c:	00db      	lsls	r3, r3, #3
 800a59e:	440b      	add	r3, r1
 800a5a0:	3312      	adds	r3, #18
 800a5a2:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800a5a4:	2b04      	cmp	r3, #4
 800a5a6:	d904      	bls.n	800a5b2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800a5a8:	79fb      	ldrb	r3, [r7, #7]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7ff ff80 	bl	800a4b0 <etharp_free_entry>
 800a5b0:	e04a      	b.n	800a648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800a5b2:	79fa      	ldrb	r2, [r7, #7]
 800a5b4:	492a      	ldr	r1, [pc, #168]	@ (800a660 <etharp_tmr+0x14c>)
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	4413      	add	r3, r2
 800a5bc:	00db      	lsls	r3, r3, #3
 800a5be:	440b      	add	r3, r1
 800a5c0:	3314      	adds	r3, #20
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d10a      	bne.n	800a5de <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800a5c8:	79fa      	ldrb	r2, [r7, #7]
 800a5ca:	4925      	ldr	r1, [pc, #148]	@ (800a660 <etharp_tmr+0x14c>)
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	005b      	lsls	r3, r3, #1
 800a5d0:	4413      	add	r3, r2
 800a5d2:	00db      	lsls	r3, r3, #3
 800a5d4:	440b      	add	r3, r1
 800a5d6:	3314      	adds	r3, #20
 800a5d8:	2204      	movs	r2, #4
 800a5da:	701a      	strb	r2, [r3, #0]
 800a5dc:	e034      	b.n	800a648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800a5de:	79fa      	ldrb	r2, [r7, #7]
 800a5e0:	491f      	ldr	r1, [pc, #124]	@ (800a660 <etharp_tmr+0x14c>)
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	005b      	lsls	r3, r3, #1
 800a5e6:	4413      	add	r3, r2
 800a5e8:	00db      	lsls	r3, r3, #3
 800a5ea:	440b      	add	r3, r1
 800a5ec:	3314      	adds	r3, #20
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b04      	cmp	r3, #4
 800a5f2:	d10a      	bne.n	800a60a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800a5f4:	79fa      	ldrb	r2, [r7, #7]
 800a5f6:	491a      	ldr	r1, [pc, #104]	@ (800a660 <etharp_tmr+0x14c>)
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	005b      	lsls	r3, r3, #1
 800a5fc:	4413      	add	r3, r2
 800a5fe:	00db      	lsls	r3, r3, #3
 800a600:	440b      	add	r3, r1
 800a602:	3314      	adds	r3, #20
 800a604:	2202      	movs	r2, #2
 800a606:	701a      	strb	r2, [r3, #0]
 800a608:	e01e      	b.n	800a648 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800a60a:	79fa      	ldrb	r2, [r7, #7]
 800a60c:	4914      	ldr	r1, [pc, #80]	@ (800a660 <etharp_tmr+0x14c>)
 800a60e:	4613      	mov	r3, r2
 800a610:	005b      	lsls	r3, r3, #1
 800a612:	4413      	add	r3, r2
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	440b      	add	r3, r1
 800a618:	3314      	adds	r3, #20
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d113      	bne.n	800a648 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800a620:	79fa      	ldrb	r2, [r7, #7]
 800a622:	490f      	ldr	r1, [pc, #60]	@ (800a660 <etharp_tmr+0x14c>)
 800a624:	4613      	mov	r3, r2
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	4413      	add	r3, r2
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	440b      	add	r3, r1
 800a62e:	3308      	adds	r3, #8
 800a630:	6818      	ldr	r0, [r3, #0]
 800a632:	79fa      	ldrb	r2, [r7, #7]
 800a634:	4613      	mov	r3, r2
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	4413      	add	r3, r2
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	4a08      	ldr	r2, [pc, #32]	@ (800a660 <etharp_tmr+0x14c>)
 800a63e:	4413      	add	r3, r2
 800a640:	3304      	adds	r3, #4
 800a642:	4619      	mov	r1, r3
 800a644:	f000 fe06 	bl	800b254 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a648:	79fb      	ldrb	r3, [r7, #7]
 800a64a:	3301      	adds	r3, #1
 800a64c:	71fb      	strb	r3, [r7, #7]
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	2b09      	cmp	r3, #9
 800a652:	f67f af65 	bls.w	800a520 <etharp_tmr+0xc>
      }
    }
  }
}
 800a656:	bf00      	nop
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20006f7c 	.word	0x20006f7c

0800a664 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b088      	sub	sp, #32
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	460b      	mov	r3, r1
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800a672:	230a      	movs	r3, #10
 800a674:	77fb      	strb	r3, [r7, #31]
 800a676:	230a      	movs	r3, #10
 800a678:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800a67a:	230a      	movs	r3, #10
 800a67c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800a682:	230a      	movs	r3, #10
 800a684:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	833b      	strh	r3, [r7, #24]
 800a68a:	2300      	movs	r3, #0
 800a68c:	82fb      	strh	r3, [r7, #22]
 800a68e:	2300      	movs	r3, #0
 800a690:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a692:	2300      	movs	r3, #0
 800a694:	773b      	strb	r3, [r7, #28]
 800a696:	e093      	b.n	800a7c0 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800a698:	7f3a      	ldrb	r2, [r7, #28]
 800a69a:	4990      	ldr	r1, [pc, #576]	@ (800a8dc <etharp_find_entry+0x278>)
 800a69c:	4613      	mov	r3, r2
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	4413      	add	r3, r2
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	440b      	add	r3, r1
 800a6a6:	3314      	adds	r3, #20
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800a6ac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a6b0:	2b0a      	cmp	r3, #10
 800a6b2:	d105      	bne.n	800a6c0 <etharp_find_entry+0x5c>
 800a6b4:	7cfb      	ldrb	r3, [r7, #19]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d102      	bne.n	800a6c0 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800a6ba:	7f3b      	ldrb	r3, [r7, #28]
 800a6bc:	777b      	strb	r3, [r7, #29]
 800a6be:	e07c      	b.n	800a7ba <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800a6c0:	7cfb      	ldrb	r3, [r7, #19]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d079      	beq.n	800a7ba <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800a6c6:	7cfb      	ldrb	r3, [r7, #19]
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d009      	beq.n	800a6e0 <etharp_find_entry+0x7c>
 800a6cc:	7cfb      	ldrb	r3, [r7, #19]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d806      	bhi.n	800a6e0 <etharp_find_entry+0x7c>
 800a6d2:	4b83      	ldr	r3, [pc, #524]	@ (800a8e0 <etharp_find_entry+0x27c>)
 800a6d4:	f240 1225 	movw	r2, #293	@ 0x125
 800a6d8:	4982      	ldr	r1, [pc, #520]	@ (800a8e4 <etharp_find_entry+0x280>)
 800a6da:	4883      	ldr	r0, [pc, #524]	@ (800a8e8 <etharp_find_entry+0x284>)
 800a6dc:	f00a fb68 	bl	8014db0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00f      	beq.n	800a706 <etharp_find_entry+0xa2>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6819      	ldr	r1, [r3, #0]
 800a6ea:	7f3a      	ldrb	r2, [r7, #28]
 800a6ec:	487b      	ldr	r0, [pc, #492]	@ (800a8dc <etharp_find_entry+0x278>)
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	005b      	lsls	r3, r3, #1
 800a6f2:	4413      	add	r3, r2
 800a6f4:	00db      	lsls	r3, r3, #3
 800a6f6:	4403      	add	r3, r0
 800a6f8:	3304      	adds	r3, #4
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4299      	cmp	r1, r3
 800a6fe:	d102      	bne.n	800a706 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800a700:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a704:	e0e5      	b.n	800a8d2 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800a706:	7cfb      	ldrb	r3, [r7, #19]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d13b      	bne.n	800a784 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800a70c:	7f3a      	ldrb	r2, [r7, #28]
 800a70e:	4973      	ldr	r1, [pc, #460]	@ (800a8dc <etharp_find_entry+0x278>)
 800a710:	4613      	mov	r3, r2
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	4413      	add	r3, r2
 800a716:	00db      	lsls	r3, r3, #3
 800a718:	440b      	add	r3, r1
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d018      	beq.n	800a752 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800a720:	7f3a      	ldrb	r2, [r7, #28]
 800a722:	496e      	ldr	r1, [pc, #440]	@ (800a8dc <etharp_find_entry+0x278>)
 800a724:	4613      	mov	r3, r2
 800a726:	005b      	lsls	r3, r3, #1
 800a728:	4413      	add	r3, r2
 800a72a:	00db      	lsls	r3, r3, #3
 800a72c:	440b      	add	r3, r1
 800a72e:	3312      	adds	r3, #18
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	8b3a      	ldrh	r2, [r7, #24]
 800a734:	429a      	cmp	r2, r3
 800a736:	d840      	bhi.n	800a7ba <etharp_find_entry+0x156>
            old_queue = i;
 800a738:	7f3b      	ldrb	r3, [r7, #28]
 800a73a:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800a73c:	7f3a      	ldrb	r2, [r7, #28]
 800a73e:	4967      	ldr	r1, [pc, #412]	@ (800a8dc <etharp_find_entry+0x278>)
 800a740:	4613      	mov	r3, r2
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	4413      	add	r3, r2
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	440b      	add	r3, r1
 800a74a:	3312      	adds	r3, #18
 800a74c:	881b      	ldrh	r3, [r3, #0]
 800a74e:	833b      	strh	r3, [r7, #24]
 800a750:	e033      	b.n	800a7ba <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800a752:	7f3a      	ldrb	r2, [r7, #28]
 800a754:	4961      	ldr	r1, [pc, #388]	@ (800a8dc <etharp_find_entry+0x278>)
 800a756:	4613      	mov	r3, r2
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	4413      	add	r3, r2
 800a75c:	00db      	lsls	r3, r3, #3
 800a75e:	440b      	add	r3, r1
 800a760:	3312      	adds	r3, #18
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	8afa      	ldrh	r2, [r7, #22]
 800a766:	429a      	cmp	r2, r3
 800a768:	d827      	bhi.n	800a7ba <etharp_find_entry+0x156>
            old_pending = i;
 800a76a:	7f3b      	ldrb	r3, [r7, #28]
 800a76c:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800a76e:	7f3a      	ldrb	r2, [r7, #28]
 800a770:	495a      	ldr	r1, [pc, #360]	@ (800a8dc <etharp_find_entry+0x278>)
 800a772:	4613      	mov	r3, r2
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	4413      	add	r3, r2
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	440b      	add	r3, r1
 800a77c:	3312      	adds	r3, #18
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	82fb      	strh	r3, [r7, #22]
 800a782:	e01a      	b.n	800a7ba <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800a784:	7cfb      	ldrb	r3, [r7, #19]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d917      	bls.n	800a7ba <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800a78a:	7f3a      	ldrb	r2, [r7, #28]
 800a78c:	4953      	ldr	r1, [pc, #332]	@ (800a8dc <etharp_find_entry+0x278>)
 800a78e:	4613      	mov	r3, r2
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	4413      	add	r3, r2
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	440b      	add	r3, r1
 800a798:	3312      	adds	r3, #18
 800a79a:	881b      	ldrh	r3, [r3, #0]
 800a79c:	8aba      	ldrh	r2, [r7, #20]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d80b      	bhi.n	800a7ba <etharp_find_entry+0x156>
            old_stable = i;
 800a7a2:	7f3b      	ldrb	r3, [r7, #28]
 800a7a4:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800a7a6:	7f3a      	ldrb	r2, [r7, #28]
 800a7a8:	494c      	ldr	r1, [pc, #304]	@ (800a8dc <etharp_find_entry+0x278>)
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	005b      	lsls	r3, r3, #1
 800a7ae:	4413      	add	r3, r2
 800a7b0:	00db      	lsls	r3, r3, #3
 800a7b2:	440b      	add	r3, r1
 800a7b4:	3312      	adds	r3, #18
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800a7ba:	7f3b      	ldrb	r3, [r7, #28]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	773b      	strb	r3, [r7, #28]
 800a7c0:	7f3b      	ldrb	r3, [r7, #28]
 800a7c2:	2b09      	cmp	r3, #9
 800a7c4:	f67f af68 	bls.w	800a698 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800a7c8:	7afb      	ldrb	r3, [r7, #11]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d108      	bne.n	800a7e4 <etharp_find_entry+0x180>
 800a7d2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a7d6:	2b0a      	cmp	r3, #10
 800a7d8:	d107      	bne.n	800a7ea <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800a7da:	7afb      	ldrb	r3, [r7, #11]
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d102      	bne.n	800a7ea <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800a7e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e8:	e073      	b.n	800a8d2 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800a7ea:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a7ee:	2b09      	cmp	r3, #9
 800a7f0:	dc02      	bgt.n	800a7f8 <etharp_find_entry+0x194>
    i = empty;
 800a7f2:	7f7b      	ldrb	r3, [r7, #29]
 800a7f4:	773b      	strb	r3, [r7, #28]
 800a7f6:	e036      	b.n	800a866 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800a7f8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800a7fc:	2b09      	cmp	r3, #9
 800a7fe:	dc13      	bgt.n	800a828 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800a800:	7fbb      	ldrb	r3, [r7, #30]
 800a802:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800a804:	7f3a      	ldrb	r2, [r7, #28]
 800a806:	4935      	ldr	r1, [pc, #212]	@ (800a8dc <etharp_find_entry+0x278>)
 800a808:	4613      	mov	r3, r2
 800a80a:	005b      	lsls	r3, r3, #1
 800a80c:	4413      	add	r3, r2
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	440b      	add	r3, r1
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d018      	beq.n	800a84a <etharp_find_entry+0x1e6>
 800a818:	4b31      	ldr	r3, [pc, #196]	@ (800a8e0 <etharp_find_entry+0x27c>)
 800a81a:	f240 126f 	movw	r2, #367	@ 0x16f
 800a81e:	4933      	ldr	r1, [pc, #204]	@ (800a8ec <etharp_find_entry+0x288>)
 800a820:	4831      	ldr	r0, [pc, #196]	@ (800a8e8 <etharp_find_entry+0x284>)
 800a822:	f00a fac5 	bl	8014db0 <iprintf>
 800a826:	e010      	b.n	800a84a <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800a828:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a82c:	2b09      	cmp	r3, #9
 800a82e:	dc02      	bgt.n	800a836 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800a830:	7ffb      	ldrb	r3, [r7, #31]
 800a832:	773b      	strb	r3, [r7, #28]
 800a834:	e009      	b.n	800a84a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800a836:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a83a:	2b09      	cmp	r3, #9
 800a83c:	dc02      	bgt.n	800a844 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800a83e:	7efb      	ldrb	r3, [r7, #27]
 800a840:	773b      	strb	r3, [r7, #28]
 800a842:	e002      	b.n	800a84a <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800a844:	f04f 33ff 	mov.w	r3, #4294967295
 800a848:	e043      	b.n	800a8d2 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a84a:	7f3b      	ldrb	r3, [r7, #28]
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d906      	bls.n	800a85e <etharp_find_entry+0x1fa>
 800a850:	4b23      	ldr	r3, [pc, #140]	@ (800a8e0 <etharp_find_entry+0x27c>)
 800a852:	f240 1281 	movw	r2, #385	@ 0x181
 800a856:	4926      	ldr	r1, [pc, #152]	@ (800a8f0 <etharp_find_entry+0x28c>)
 800a858:	4823      	ldr	r0, [pc, #140]	@ (800a8e8 <etharp_find_entry+0x284>)
 800a85a:	f00a faa9 	bl	8014db0 <iprintf>
    etharp_free_entry(i);
 800a85e:	7f3b      	ldrb	r3, [r7, #28]
 800a860:	4618      	mov	r0, r3
 800a862:	f7ff fe25 	bl	800a4b0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800a866:	7f3b      	ldrb	r3, [r7, #28]
 800a868:	2b09      	cmp	r3, #9
 800a86a:	d906      	bls.n	800a87a <etharp_find_entry+0x216>
 800a86c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8e0 <etharp_find_entry+0x27c>)
 800a86e:	f240 1285 	movw	r2, #389	@ 0x185
 800a872:	491f      	ldr	r1, [pc, #124]	@ (800a8f0 <etharp_find_entry+0x28c>)
 800a874:	481c      	ldr	r0, [pc, #112]	@ (800a8e8 <etharp_find_entry+0x284>)
 800a876:	f00a fa9b 	bl	8014db0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800a87a:	7f3a      	ldrb	r2, [r7, #28]
 800a87c:	4917      	ldr	r1, [pc, #92]	@ (800a8dc <etharp_find_entry+0x278>)
 800a87e:	4613      	mov	r3, r2
 800a880:	005b      	lsls	r3, r3, #1
 800a882:	4413      	add	r3, r2
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	440b      	add	r3, r1
 800a888:	3314      	adds	r3, #20
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d006      	beq.n	800a89e <etharp_find_entry+0x23a>
 800a890:	4b13      	ldr	r3, [pc, #76]	@ (800a8e0 <etharp_find_entry+0x27c>)
 800a892:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 800a896:	4917      	ldr	r1, [pc, #92]	@ (800a8f4 <etharp_find_entry+0x290>)
 800a898:	4813      	ldr	r0, [pc, #76]	@ (800a8e8 <etharp_find_entry+0x284>)
 800a89a:	f00a fa89 	bl	8014db0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d00a      	beq.n	800a8ba <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800a8a4:	7f3a      	ldrb	r2, [r7, #28]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6819      	ldr	r1, [r3, #0]
 800a8aa:	480c      	ldr	r0, [pc, #48]	@ (800a8dc <etharp_find_entry+0x278>)
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	4413      	add	r3, r2
 800a8b2:	00db      	lsls	r3, r3, #3
 800a8b4:	4403      	add	r3, r0
 800a8b6:	3304      	adds	r3, #4
 800a8b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800a8ba:	7f3a      	ldrb	r2, [r7, #28]
 800a8bc:	4907      	ldr	r1, [pc, #28]	@ (800a8dc <etharp_find_entry+0x278>)
 800a8be:	4613      	mov	r3, r2
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4413      	add	r3, r2
 800a8c4:	00db      	lsls	r3, r3, #3
 800a8c6:	440b      	add	r3, r1
 800a8c8:	3312      	adds	r3, #18
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800a8ce:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3720      	adds	r7, #32
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20006f7c 	.word	0x20006f7c
 800a8e0:	08016014 	.word	0x08016014
 800a8e4:	08016064 	.word	0x08016064
 800a8e8:	080160a4 	.word	0x080160a4
 800a8ec:	080160cc 	.word	0x080160cc
 800a8f0:	080160e4 	.word	0x080160e4
 800a8f4:	080160f8 	.word	0x080160f8

0800a8f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b088      	sub	sp, #32
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a90c:	2b06      	cmp	r3, #6
 800a90e:	d006      	beq.n	800a91e <etharp_update_arp_entry+0x26>
 800a910:	4b48      	ldr	r3, [pc, #288]	@ (800aa34 <etharp_update_arp_entry+0x13c>)
 800a912:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800a916:	4948      	ldr	r1, [pc, #288]	@ (800aa38 <etharp_update_arp_entry+0x140>)
 800a918:	4848      	ldr	r0, [pc, #288]	@ (800aa3c <etharp_update_arp_entry+0x144>)
 800a91a:	f00a fa49 	bl	8014db0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d012      	beq.n	800a94a <etharp_update_arp_entry+0x52>
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00e      	beq.n	800a94a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68f9      	ldr	r1, [r7, #12]
 800a932:	4618      	mov	r0, r3
 800a934:	f001 f99c 	bl	800bc70 <ip4_addr_isbroadcast_u32>
 800a938:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d105      	bne.n	800a94a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800a946:	2be0      	cmp	r3, #224	@ 0xe0
 800a948:	d102      	bne.n	800a950 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800a94a:	f06f 030f 	mvn.w	r3, #15
 800a94e:	e06c      	b.n	800aa2a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800a950:	78fb      	ldrb	r3, [r7, #3]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	4619      	mov	r1, r3
 800a956:	68b8      	ldr	r0, [r7, #8]
 800a958:	f7ff fe84 	bl	800a664 <etharp_find_entry>
 800a95c:	4603      	mov	r3, r0
 800a95e:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800a960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a964:	2b00      	cmp	r3, #0
 800a966:	da02      	bge.n	800a96e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800a968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a96c:	e05d      	b.n	800aa2a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800a96e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a972:	4933      	ldr	r1, [pc, #204]	@ (800aa40 <etharp_update_arp_entry+0x148>)
 800a974:	4613      	mov	r3, r2
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	4413      	add	r3, r2
 800a97a:	00db      	lsls	r3, r3, #3
 800a97c:	440b      	add	r3, r1
 800a97e:	3314      	adds	r3, #20
 800a980:	2202      	movs	r2, #2
 800a982:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800a984:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a988:	492d      	ldr	r1, [pc, #180]	@ (800aa40 <etharp_update_arp_entry+0x148>)
 800a98a:	4613      	mov	r3, r2
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4413      	add	r3, r2
 800a990:	00db      	lsls	r3, r3, #3
 800a992:	440b      	add	r3, r1
 800a994:	3308      	adds	r3, #8
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800a99a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	005b      	lsls	r3, r3, #1
 800a9a2:	4413      	add	r3, r2
 800a9a4:	00db      	lsls	r3, r3, #3
 800a9a6:	3308      	adds	r3, #8
 800a9a8:	4a25      	ldr	r2, [pc, #148]	@ (800aa40 <etharp_update_arp_entry+0x148>)
 800a9aa:	4413      	add	r3, r2
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	2206      	movs	r2, #6
 800a9b0:	6879      	ldr	r1, [r7, #4]
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f00a fb7b 	bl	80150ae <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800a9b8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a9bc:	4920      	ldr	r1, [pc, #128]	@ (800aa40 <etharp_update_arp_entry+0x148>)
 800a9be:	4613      	mov	r3, r2
 800a9c0:	005b      	lsls	r3, r3, #1
 800a9c2:	4413      	add	r3, r2
 800a9c4:	00db      	lsls	r3, r3, #3
 800a9c6:	440b      	add	r3, r1
 800a9c8:	3312      	adds	r3, #18
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800a9ce:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a9d2:	491b      	ldr	r1, [pc, #108]	@ (800aa40 <etharp_update_arp_entry+0x148>)
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	4413      	add	r3, r2
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	440b      	add	r3, r1
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d021      	beq.n	800aa28 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800a9e4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a9e8:	4915      	ldr	r1, [pc, #84]	@ (800aa40 <etharp_update_arp_entry+0x148>)
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	4413      	add	r3, r2
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	440b      	add	r3, r1
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800a9f8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a9fc:	4910      	ldr	r1, [pc, #64]	@ (800aa40 <etharp_update_arp_entry+0x148>)
 800a9fe:	4613      	mov	r3, r2
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	4413      	add	r3, r2
 800aa04:	00db      	lsls	r3, r3, #3
 800aa06:	440b      	add	r3, r1
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800aa12:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6939      	ldr	r1, [r7, #16]
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 fcc1 	bl	800b3a4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800aa22:	6938      	ldr	r0, [r7, #16]
 800aa24:	f003 f946 	bl	800dcb4 <pbuf_free>
  }
  return ERR_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	08016014 	.word	0x08016014
 800aa38:	08016124 	.word	0x08016124
 800aa3c:	080160a4 	.word	0x080160a4
 800aa40:	20006f7c 	.word	0x20006f7c

0800aa44 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800aa44:	b5b0      	push	{r4, r5, r7, lr}
 800aa46:	b08a      	sub	sp, #40	@ 0x28
 800aa48:	af04      	add	r7, sp, #16
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d107      	bne.n	800aa64 <etharp_input+0x20>
 800aa54:	4b3d      	ldr	r3, [pc, #244]	@ (800ab4c <etharp_input+0x108>)
 800aa56:	f44f 7222 	mov.w	r2, #648	@ 0x288
 800aa5a:	493d      	ldr	r1, [pc, #244]	@ (800ab50 <etharp_input+0x10c>)
 800aa5c:	483d      	ldr	r0, [pc, #244]	@ (800ab54 <etharp_input+0x110>)
 800aa5e:	f00a f9a7 	bl	8014db0 <iprintf>
 800aa62:	e06f      	b.n	800ab44 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa74:	d10c      	bne.n	800aa90 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800aa7a:	2b06      	cmp	r3, #6
 800aa7c:	d108      	bne.n	800aa90 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	d104      	bne.n	800aa90 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	885b      	ldrh	r3, [r3, #2]
 800aa8a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800aa8c:	2b08      	cmp	r3, #8
 800aa8e:	d003      	beq.n	800aa98 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f003 f90f 	bl	800dcb4 <pbuf_free>
    return;
 800aa96:	e055      	b.n	800ab44 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	330e      	adds	r3, #14
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	3318      	adds	r3, #24
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d102      	bne.n	800aab8 <etharp_input+0x74>
    for_us = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]
 800aab6:	e009      	b.n	800aacc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	3304      	adds	r3, #4
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	bf0c      	ite	eq
 800aac4:	2301      	moveq	r3, #1
 800aac6:	2300      	movne	r3, #0
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	f103 0208 	add.w	r2, r3, #8
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d001      	beq.n	800aadc <etharp_input+0x98>
 800aad8:	2301      	movs	r3, #1
 800aada:	e000      	b.n	800aade <etharp_input+0x9a>
 800aadc:	2302      	movs	r3, #2
 800aade:	f107 010c 	add.w	r1, r7, #12
 800aae2:	6838      	ldr	r0, [r7, #0]
 800aae4:	f7ff ff08 	bl	800a8f8 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	88db      	ldrh	r3, [r3, #6]
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaf2:	d003      	beq.n	800aafc <etharp_input+0xb8>
 800aaf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aaf8:	d01e      	beq.n	800ab38 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800aafa:	e020      	b.n	800ab3e <etharp_input+0xfa>
    if (for_us) {
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01c      	beq.n	800ab3c <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	f103 0529 	add.w	r5, r3, #41	@ 0x29
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800ab18:	693a      	ldr	r2, [r7, #16]
 800ab1a:	3208      	adds	r2, #8
      etharp_raw(netif,
 800ab1c:	2102      	movs	r1, #2
 800ab1e:	9103      	str	r1, [sp, #12]
 800ab20:	f107 010c 	add.w	r1, r7, #12
 800ab24:	9102      	str	r1, [sp, #8]
 800ab26:	9201      	str	r2, [sp, #4]
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	462b      	mov	r3, r5
 800ab2c:	4622      	mov	r2, r4
 800ab2e:	4601      	mov	r1, r0
 800ab30:	6838      	ldr	r0, [r7, #0]
 800ab32:	f000 fae1 	bl	800b0f8 <etharp_raw>
    break;
 800ab36:	e001      	b.n	800ab3c <etharp_input+0xf8>
    break;
 800ab38:	bf00      	nop
 800ab3a:	e000      	b.n	800ab3e <etharp_input+0xfa>
    break;
 800ab3c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f003 f8b8 	bl	800dcb4 <pbuf_free>
}
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bdb0      	pop	{r4, r5, r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	08016014 	.word	0x08016014
 800ab50:	0801617c 	.word	0x0801617c
 800ab54:	080160a4 	.word	0x080160a4

0800ab58 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b086      	sub	sp, #24
 800ab5c:	af02      	add	r7, sp, #8
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	4613      	mov	r3, r2
 800ab64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ab66:	79fa      	ldrb	r2, [r7, #7]
 800ab68:	4944      	ldr	r1, [pc, #272]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	4413      	add	r3, r2
 800ab70:	00db      	lsls	r3, r3, #3
 800ab72:	440b      	add	r3, r1
 800ab74:	3314      	adds	r3, #20
 800ab76:	781b      	ldrb	r3, [r3, #0]
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d806      	bhi.n	800ab8a <etharp_output_to_arp_index+0x32>
 800ab7c:	4b40      	ldr	r3, [pc, #256]	@ (800ac80 <etharp_output_to_arp_index+0x128>)
 800ab7e:	f44f 723b 	mov.w	r2, #748	@ 0x2ec
 800ab82:	4940      	ldr	r1, [pc, #256]	@ (800ac84 <etharp_output_to_arp_index+0x12c>)
 800ab84:	4840      	ldr	r0, [pc, #256]	@ (800ac88 <etharp_output_to_arp_index+0x130>)
 800ab86:	f00a f913 	bl	8014db0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ab8a:	79fa      	ldrb	r2, [r7, #7]
 800ab8c:	493b      	ldr	r1, [pc, #236]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800ab8e:	4613      	mov	r3, r2
 800ab90:	005b      	lsls	r3, r3, #1
 800ab92:	4413      	add	r3, r2
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	440b      	add	r3, r1
 800ab98:	3314      	adds	r3, #20
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d153      	bne.n	800ac48 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800aba0:	79fa      	ldrb	r2, [r7, #7]
 800aba2:	4936      	ldr	r1, [pc, #216]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800aba4:	4613      	mov	r3, r2
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	4413      	add	r3, r2
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	440b      	add	r3, r1
 800abae:	3312      	adds	r3, #18
 800abb0:	881b      	ldrh	r3, [r3, #0]
 800abb2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800abb6:	d919      	bls.n	800abec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800abb8:	79fa      	ldrb	r2, [r7, #7]
 800abba:	4613      	mov	r3, r2
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	4413      	add	r3, r2
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	4a2e      	ldr	r2, [pc, #184]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800abc4:	4413      	add	r3, r2
 800abc6:	3304      	adds	r3, #4
 800abc8:	4619      	mov	r1, r3
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f000 fb42 	bl	800b254 <etharp_request>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d138      	bne.n	800ac48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800abd6:	79fa      	ldrb	r2, [r7, #7]
 800abd8:	4928      	ldr	r1, [pc, #160]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800abda:	4613      	mov	r3, r2
 800abdc:	005b      	lsls	r3, r3, #1
 800abde:	4413      	add	r3, r2
 800abe0:	00db      	lsls	r3, r3, #3
 800abe2:	440b      	add	r3, r1
 800abe4:	3314      	adds	r3, #20
 800abe6:	2203      	movs	r2, #3
 800abe8:	701a      	strb	r2, [r3, #0]
 800abea:	e02d      	b.n	800ac48 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800abec:	79fa      	ldrb	r2, [r7, #7]
 800abee:	4923      	ldr	r1, [pc, #140]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800abf0:	4613      	mov	r3, r2
 800abf2:	005b      	lsls	r3, r3, #1
 800abf4:	4413      	add	r3, r2
 800abf6:	00db      	lsls	r3, r3, #3
 800abf8:	440b      	add	r3, r1
 800abfa:	3312      	adds	r3, #18
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800ac02:	d321      	bcc.n	800ac48 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ac04:	79fa      	ldrb	r2, [r7, #7]
 800ac06:	4613      	mov	r3, r2
 800ac08:	005b      	lsls	r3, r3, #1
 800ac0a:	4413      	add	r3, r2
 800ac0c:	00db      	lsls	r3, r3, #3
 800ac0e:	4a1b      	ldr	r2, [pc, #108]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800ac10:	4413      	add	r3, r2
 800ac12:	1d19      	adds	r1, r3, #4
 800ac14:	79fa      	ldrb	r2, [r7, #7]
 800ac16:	4613      	mov	r3, r2
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	4413      	add	r3, r2
 800ac1c:	00db      	lsls	r3, r3, #3
 800ac1e:	3308      	adds	r3, #8
 800ac20:	4a16      	ldr	r2, [pc, #88]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800ac22:	4413      	add	r3, r2
 800ac24:	3304      	adds	r3, #4
 800ac26:	461a      	mov	r2, r3
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 faf1 	bl	800b210 <etharp_request_dst>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d109      	bne.n	800ac48 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ac34:	79fa      	ldrb	r2, [r7, #7]
 800ac36:	4911      	ldr	r1, [pc, #68]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800ac38:	4613      	mov	r3, r2
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	4413      	add	r3, r2
 800ac3e:	00db      	lsls	r3, r3, #3
 800ac40:	440b      	add	r3, r1
 800ac42:	3314      	adds	r3, #20
 800ac44:	2203      	movs	r2, #3
 800ac46:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f103 0129 	add.w	r1, r3, #41	@ 0x29
 800ac4e:	79fa      	ldrb	r2, [r7, #7]
 800ac50:	4613      	mov	r3, r2
 800ac52:	005b      	lsls	r3, r3, #1
 800ac54:	4413      	add	r3, r2
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	3308      	adds	r3, #8
 800ac5a:	4a08      	ldr	r2, [pc, #32]	@ (800ac7c <etharp_output_to_arp_index+0x124>)
 800ac5c:	4413      	add	r3, r2
 800ac5e:	3304      	adds	r3, #4
 800ac60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac64:	9200      	str	r2, [sp, #0]
 800ac66:	460a      	mov	r2, r1
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 fb9a 	bl	800b3a4 <ethernet_output>
 800ac70:	4603      	mov	r3, r0
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20006f7c 	.word	0x20006f7c
 800ac80:	08016014 	.word	0x08016014
 800ac84:	0801619c 	.word	0x0801619c
 800ac88:	080160a4 	.word	0x080160a4

0800ac8c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	@ 0x28
 800ac90:	af02      	add	r7, sp, #8
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d106      	bne.n	800acb0 <etharp_output+0x24>
 800aca2:	4b69      	ldr	r3, [pc, #420]	@ (800ae48 <etharp_output+0x1bc>)
 800aca4:	f240 321b 	movw	r2, #795	@ 0x31b
 800aca8:	4968      	ldr	r1, [pc, #416]	@ (800ae4c <etharp_output+0x1c0>)
 800acaa:	4869      	ldr	r0, [pc, #420]	@ (800ae50 <etharp_output+0x1c4>)
 800acac:	f00a f880 	bl	8014db0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <etharp_output+0x38>
 800acb6:	4b64      	ldr	r3, [pc, #400]	@ (800ae48 <etharp_output+0x1bc>)
 800acb8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800acbc:	4965      	ldr	r1, [pc, #404]	@ (800ae54 <etharp_output+0x1c8>)
 800acbe:	4864      	ldr	r0, [pc, #400]	@ (800ae50 <etharp_output+0x1c4>)
 800acc0:	f00a f876 	bl	8014db0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d106      	bne.n	800acd8 <etharp_output+0x4c>
 800acca:	4b5f      	ldr	r3, [pc, #380]	@ (800ae48 <etharp_output+0x1bc>)
 800accc:	f240 321d 	movw	r2, #797	@ 0x31d
 800acd0:	4961      	ldr	r1, [pc, #388]	@ (800ae58 <etharp_output+0x1cc>)
 800acd2:	485f      	ldr	r0, [pc, #380]	@ (800ae50 <etharp_output+0x1c4>)
 800acd4:	f00a f86c 	bl	8014db0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68f9      	ldr	r1, [r7, #12]
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 ffc6 	bl	800bc70 <ip4_addr_isbroadcast_u32>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d002      	beq.n	800acf0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800acea:	4b5c      	ldr	r3, [pc, #368]	@ (800ae5c <etharp_output+0x1d0>)
 800acec:	61fb      	str	r3, [r7, #28]
 800acee:	e09b      	b.n	800ae28 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800acf8:	2be0      	cmp	r3, #224	@ 0xe0
 800acfa:	d118      	bne.n	800ad2e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800acfc:	2301      	movs	r3, #1
 800acfe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ad00:	2300      	movs	r3, #0
 800ad02:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ad04:	235e      	movs	r3, #94	@ 0x5e
 800ad06:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	3302      	adds	r3, #2
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	3303      	adds	r3, #3
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ad26:	f107 0310 	add.w	r3, r7, #16
 800ad2a:	61fb      	str	r3, [r7, #28]
 800ad2c:	e07c      	b.n	800ae28 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	3304      	adds	r3, #4
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	405a      	eors	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	3308      	adds	r3, #8
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4013      	ands	r3, r2
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d012      	beq.n	800ad6c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ad4c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00b      	beq.n	800ad6c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	330c      	adds	r3, #12
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	330c      	adds	r3, #12
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	e002      	b.n	800ad6c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ad66:	f06f 0303 	mvn.w	r3, #3
 800ad6a:	e069      	b.n	800ae40 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ad6c:	4b3c      	ldr	r3, [pc, #240]	@ (800ae60 <etharp_output+0x1d4>)
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	4619      	mov	r1, r3
 800ad72:	4a3c      	ldr	r2, [pc, #240]	@ (800ae64 <etharp_output+0x1d8>)
 800ad74:	460b      	mov	r3, r1
 800ad76:	005b      	lsls	r3, r3, #1
 800ad78:	440b      	add	r3, r1
 800ad7a:	00db      	lsls	r3, r3, #3
 800ad7c:	4413      	add	r3, r2
 800ad7e:	3314      	adds	r3, #20
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d917      	bls.n	800adb6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	4b35      	ldr	r3, [pc, #212]	@ (800ae60 <etharp_output+0x1d4>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	4934      	ldr	r1, [pc, #208]	@ (800ae64 <etharp_output+0x1d8>)
 800ad92:	4603      	mov	r3, r0
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	4403      	add	r3, r0
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	440b      	add	r3, r1
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d108      	bne.n	800adb6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ada4:	4b2e      	ldr	r3, [pc, #184]	@ (800ae60 <etharp_output+0x1d4>)
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	461a      	mov	r2, r3
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f7ff fed3 	bl	800ab58 <etharp_output_to_arp_index>
 800adb2:	4603      	mov	r3, r0
 800adb4:	e044      	b.n	800ae40 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800adb6:	2300      	movs	r3, #0
 800adb8:	75fb      	strb	r3, [r7, #23]
 800adba:	e02a      	b.n	800ae12 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800adbc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800adc0:	4928      	ldr	r1, [pc, #160]	@ (800ae64 <etharp_output+0x1d8>)
 800adc2:	4613      	mov	r3, r2
 800adc4:	005b      	lsls	r3, r3, #1
 800adc6:	4413      	add	r3, r2
 800adc8:	00db      	lsls	r3, r3, #3
 800adca:	440b      	add	r3, r1
 800adcc:	3314      	adds	r3, #20
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d918      	bls.n	800ae06 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	6819      	ldr	r1, [r3, #0]
 800add8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800addc:	4821      	ldr	r0, [pc, #132]	@ (800ae64 <etharp_output+0x1d8>)
 800adde:	4613      	mov	r3, r2
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	4413      	add	r3, r2
 800ade4:	00db      	lsls	r3, r3, #3
 800ade6:	4403      	add	r3, r0
 800ade8:	3304      	adds	r3, #4
 800adea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800adec:	4299      	cmp	r1, r3
 800adee:	d10a      	bne.n	800ae06 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800adf0:	7dfa      	ldrb	r2, [r7, #23]
 800adf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ae60 <etharp_output+0x1d4>)
 800adf4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
 800adf8:	461a      	mov	r2, r3
 800adfa:	68b9      	ldr	r1, [r7, #8]
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f7ff feab 	bl	800ab58 <etharp_output_to_arp_index>
 800ae02:	4603      	mov	r3, r0
 800ae04:	e01c      	b.n	800ae40 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ae06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	75fb      	strb	r3, [r7, #23]
 800ae12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae16:	2b09      	cmp	r3, #9
 800ae18:	ddd0      	ble.n	800adbc <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	69b9      	ldr	r1, [r7, #24]
 800ae1e:	68f8      	ldr	r0, [r7, #12]
 800ae20:	f000 f822 	bl	800ae68 <etharp_query>
 800ae24:	4603      	mov	r3, r0
 800ae26:	e00b      	b.n	800ae40 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800ae2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae32:	9300      	str	r3, [sp, #0]
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f000 fab3 	bl	800b3a4 <ethernet_output>
 800ae3e:	4603      	mov	r3, r0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3720      	adds	r7, #32
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	08016014 	.word	0x08016014
 800ae4c:	0801617c 	.word	0x0801617c
 800ae50:	080160a4 	.word	0x080160a4
 800ae54:	080161cc 	.word	0x080161cc
 800ae58:	0801616c 	.word	0x0801616c
 800ae5c:	08017e58 	.word	0x08017e58
 800ae60:	2000706c 	.word	0x2000706c
 800ae64:	20006f7c 	.word	0x20006f7c

0800ae68 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b08c      	sub	sp, #48	@ 0x30
 800ae6c:	af02      	add	r7, sp, #8
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	3329      	adds	r3, #41	@ 0x29
 800ae78:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ae7a:	23ff      	movs	r3, #255	@ 0xff
 800ae7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800ae80:	2300      	movs	r3, #0
 800ae82:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68f9      	ldr	r1, [r7, #12]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fef0 	bl	800bc70 <ip4_addr_isbroadcast_u32>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d10c      	bne.n	800aeb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ae9e:	2be0      	cmp	r3, #224	@ 0xe0
 800aea0:	d006      	beq.n	800aeb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d102      	bne.n	800aeb6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800aeb0:	f06f 030f 	mvn.w	r3, #15
 800aeb4:	e10e      	b.n	800b0d4 <etharp_query+0x26c>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	2101      	movs	r1, #1
 800aeba:	68b8      	ldr	r0, [r7, #8]
 800aebc:	f7ff fbd2 	bl	800a664 <etharp_find_entry>
 800aec0:	4603      	mov	r3, r0
 800aec2:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800aec4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	da02      	bge.n	800aed2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800aecc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aed0:	e100      	b.n	800b0d4 <etharp_query+0x26c>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800aed2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aed6:	4981      	ldr	r1, [pc, #516]	@ (800b0dc <etharp_query+0x274>)
 800aed8:	4613      	mov	r3, r2
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	4413      	add	r3, r2
 800aede:	00db      	lsls	r3, r3, #3
 800aee0:	440b      	add	r3, r1
 800aee2:	3314      	adds	r3, #20
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d117      	bne.n	800af1a <etharp_query+0xb2>
    is_new_entry = 1;
 800aeea:	2301      	movs	r3, #1
 800aeec:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800aeee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800aef2:	497a      	ldr	r1, [pc, #488]	@ (800b0dc <etharp_query+0x274>)
 800aef4:	4613      	mov	r3, r2
 800aef6:	005b      	lsls	r3, r3, #1
 800aef8:	4413      	add	r3, r2
 800aefa:	00db      	lsls	r3, r3, #3
 800aefc:	440b      	add	r3, r1
 800aefe:	3314      	adds	r3, #20
 800af00:	2201      	movs	r2, #1
 800af02:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800af04:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800af08:	4974      	ldr	r1, [pc, #464]	@ (800b0dc <etharp_query+0x274>)
 800af0a:	4613      	mov	r3, r2
 800af0c:	005b      	lsls	r3, r3, #1
 800af0e:	4413      	add	r3, r2
 800af10:	00db      	lsls	r3, r3, #3
 800af12:	440b      	add	r3, r1
 800af14:	3308      	adds	r3, #8
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800af1a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800af1e:	496f      	ldr	r1, [pc, #444]	@ (800b0dc <etharp_query+0x274>)
 800af20:	4613      	mov	r3, r2
 800af22:	005b      	lsls	r3, r3, #1
 800af24:	4413      	add	r3, r2
 800af26:	00db      	lsls	r3, r3, #3
 800af28:	440b      	add	r3, r1
 800af2a:	3314      	adds	r3, #20
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	2b01      	cmp	r3, #1
 800af30:	d012      	beq.n	800af58 <etharp_query+0xf0>
 800af32:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800af36:	4969      	ldr	r1, [pc, #420]	@ (800b0dc <etharp_query+0x274>)
 800af38:	4613      	mov	r3, r2
 800af3a:	005b      	lsls	r3, r3, #1
 800af3c:	4413      	add	r3, r2
 800af3e:	00db      	lsls	r3, r3, #3
 800af40:	440b      	add	r3, r1
 800af42:	3314      	adds	r3, #20
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b01      	cmp	r3, #1
 800af48:	d806      	bhi.n	800af58 <etharp_query+0xf0>
 800af4a:	4b65      	ldr	r3, [pc, #404]	@ (800b0e0 <etharp_query+0x278>)
 800af4c:	f240 32c7 	movw	r2, #967	@ 0x3c7
 800af50:	4964      	ldr	r1, [pc, #400]	@ (800b0e4 <etharp_query+0x27c>)
 800af52:	4865      	ldr	r0, [pc, #404]	@ (800b0e8 <etharp_query+0x280>)
 800af54:	f009 ff2c 	bl	8014db0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d102      	bne.n	800af64 <etharp_query+0xfc>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10c      	bne.n	800af7e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 f974 	bl	800b254 <etharp_request>
 800af6c:	4603      	mov	r3, r0
 800af6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d102      	bne.n	800af7e <etharp_query+0x116>
      return result;
 800af78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800af7c:	e0aa      	b.n	800b0d4 <etharp_query+0x26c>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d106      	bne.n	800af92 <etharp_query+0x12a>
 800af84:	4b56      	ldr	r3, [pc, #344]	@ (800b0e0 <etharp_query+0x278>)
 800af86:	f240 32db 	movw	r2, #987	@ 0x3db
 800af8a:	4958      	ldr	r1, [pc, #352]	@ (800b0ec <etharp_query+0x284>)
 800af8c:	4856      	ldr	r0, [pc, #344]	@ (800b0e8 <etharp_query+0x280>)
 800af8e:	f009 ff0f 	bl	8014db0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800af92:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800af96:	4951      	ldr	r1, [pc, #324]	@ (800b0dc <etharp_query+0x274>)
 800af98:	4613      	mov	r3, r2
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	4413      	add	r3, r2
 800af9e:	00db      	lsls	r3, r3, #3
 800afa0:	440b      	add	r3, r1
 800afa2:	3314      	adds	r3, #20
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d918      	bls.n	800afdc <etharp_query+0x174>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800afaa:	7cfa      	ldrb	r2, [r7, #19]
 800afac:	4b50      	ldr	r3, [pc, #320]	@ (800b0f0 <etharp_query+0x288>)
 800afae:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800afb0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800afb4:	4613      	mov	r3, r2
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	4413      	add	r3, r2
 800afba:	00db      	lsls	r3, r3, #3
 800afbc:	3308      	adds	r3, #8
 800afbe:	4a47      	ldr	r2, [pc, #284]	@ (800b0dc <etharp_query+0x274>)
 800afc0:	4413      	add	r3, r2
 800afc2:	3304      	adds	r3, #4
 800afc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800afc8:	9200      	str	r2, [sp, #0]
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f000 f9e8 	bl	800b3a4 <ethernet_output>
 800afd4:	4603      	mov	r3, r0
 800afd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800afda:	e079      	b.n	800b0d0 <etharp_query+0x268>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800afdc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800afe0:	493e      	ldr	r1, [pc, #248]	@ (800b0dc <etharp_query+0x274>)
 800afe2:	4613      	mov	r3, r2
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	4413      	add	r3, r2
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	440b      	add	r3, r1
 800afec:	3314      	adds	r3, #20
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d16d      	bne.n	800b0d0 <etharp_query+0x268>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800affc:	e01a      	b.n	800b034 <etharp_query+0x1cc>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	895a      	ldrh	r2, [r3, #10]
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	891b      	ldrh	r3, [r3, #8]
 800b006:	429a      	cmp	r2, r3
 800b008:	d10a      	bne.n	800b020 <etharp_query+0x1b8>
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d006      	beq.n	800b020 <etharp_query+0x1b8>
 800b012:	4b33      	ldr	r3, [pc, #204]	@ (800b0e0 <etharp_query+0x278>)
 800b014:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 800b018:	4936      	ldr	r1, [pc, #216]	@ (800b0f4 <etharp_query+0x28c>)
 800b01a:	4833      	ldr	r0, [pc, #204]	@ (800b0e8 <etharp_query+0x280>)
 800b01c:	f009 fec8 	bl	8014db0 <iprintf>
      if (p->type != PBUF_ROM) {
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	7b1b      	ldrb	r3, [r3, #12]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d002      	beq.n	800b02e <etharp_query+0x1c6>
        copy_needed = 1;
 800b028:	2301      	movs	r3, #1
 800b02a:	61bb      	str	r3, [r7, #24]
        break;
 800b02c:	e005      	b.n	800b03a <etharp_query+0x1d2>
      }
      p = p->next;
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1e1      	bne.n	800affe <etharp_query+0x196>
    }
    if (copy_needed) {
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d017      	beq.n	800b070 <etharp_query+0x208>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	891b      	ldrh	r3, [r3, #8]
 800b044:	2200      	movs	r2, #0
 800b046:	4619      	mov	r1, r3
 800b048:	2002      	movs	r0, #2
 800b04a:	f002 fabb 	bl	800d5c4 <pbuf_alloc>
 800b04e:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d011      	beq.n	800b07a <etharp_query+0x212>
        if (pbuf_copy(p, q) != ERR_OK) {
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	69f8      	ldr	r0, [r7, #28]
 800b05a:	f002 ff5d 	bl	800df18 <pbuf_copy>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00a      	beq.n	800b07a <etharp_query+0x212>
          pbuf_free(p);
 800b064:	69f8      	ldr	r0, [r7, #28]
 800b066:	f002 fe25 	bl	800dcb4 <pbuf_free>
          p = NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	61fb      	str	r3, [r7, #28]
 800b06e:	e004      	b.n	800b07a <etharp_query+0x212>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b074:	69f8      	ldr	r0, [r7, #28]
 800b076:	f002 fec7 	bl	800de08 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d024      	beq.n	800b0ca <etharp_query+0x262>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b080:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b084:	4915      	ldr	r1, [pc, #84]	@ (800b0dc <etharp_query+0x274>)
 800b086:	4613      	mov	r3, r2
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	4413      	add	r3, r2
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	440b      	add	r3, r1
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00b      	beq.n	800b0ae <etharp_query+0x246>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800b096:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b09a:	4910      	ldr	r1, [pc, #64]	@ (800b0dc <etharp_query+0x274>)
 800b09c:	4613      	mov	r3, r2
 800b09e:	005b      	lsls	r3, r3, #1
 800b0a0:	4413      	add	r3, r2
 800b0a2:	00db      	lsls	r3, r3, #3
 800b0a4:	440b      	add	r3, r1
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f002 fe03 	bl	800dcb4 <pbuf_free>
      }
      arp_table[i].q = p;
 800b0ae:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b0b2:	490a      	ldr	r1, [pc, #40]	@ (800b0dc <etharp_query+0x274>)
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	005b      	lsls	r3, r3, #1
 800b0b8:	4413      	add	r3, r2
 800b0ba:	00db      	lsls	r3, r3, #3
 800b0bc:	440b      	add	r3, r1
 800b0be:	69fa      	ldr	r2, [r7, #28]
 800b0c0:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b0c8:	e002      	b.n	800b0d0 <etharp_query+0x268>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b0ca:	23ff      	movs	r3, #255	@ 0xff
 800b0cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800b0d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3728      	adds	r7, #40	@ 0x28
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20006f7c 	.word	0x20006f7c
 800b0e0:	08016014 	.word	0x08016014
 800b0e4:	080161d8 	.word	0x080161d8
 800b0e8:	080160a4 	.word	0x080160a4
 800b0ec:	080161cc 	.word	0x080161cc
 800b0f0:	2000706c 	.word	0x2000706c
 800b0f4:	08016200 	.word	0x08016200

0800b0f8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08a      	sub	sp, #40	@ 0x28
 800b0fc:	af02      	add	r7, sp, #8
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
 800b104:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b106:	2300      	movs	r3, #0
 800b108:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d106      	bne.n	800b11e <etharp_raw+0x26>
 800b110:	4b3a      	ldr	r3, [pc, #232]	@ (800b1fc <etharp_raw+0x104>)
 800b112:	f44f 628b 	mov.w	r2, #1112	@ 0x458
 800b116:	493a      	ldr	r1, [pc, #232]	@ (800b200 <etharp_raw+0x108>)
 800b118:	483a      	ldr	r0, [pc, #232]	@ (800b204 <etharp_raw+0x10c>)
 800b11a:	f009 fe49 	bl	8014db0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b11e:	2200      	movs	r2, #0
 800b120:	211c      	movs	r1, #28
 800b122:	2002      	movs	r0, #2
 800b124:	f002 fa4e 	bl	800d5c4 <pbuf_alloc>
 800b128:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b130:	f04f 33ff 	mov.w	r3, #4294967295
 800b134:	e05d      	b.n	800b1f2 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	895b      	ldrh	r3, [r3, #10]
 800b13a:	2b1b      	cmp	r3, #27
 800b13c:	d806      	bhi.n	800b14c <etharp_raw+0x54>
 800b13e:	4b2f      	ldr	r3, [pc, #188]	@ (800b1fc <etharp_raw+0x104>)
 800b140:	f240 4263 	movw	r2, #1123	@ 0x463
 800b144:	4930      	ldr	r1, [pc, #192]	@ (800b208 <etharp_raw+0x110>)
 800b146:	482f      	ldr	r0, [pc, #188]	@ (800b204 <etharp_raw+0x10c>)
 800b148:	f009 fe32 	bl	8014db0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800b152:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff f985 	bl	800a464 <lwip_htons>
 800b15a:	4603      	mov	r3, r0
 800b15c:	461a      	mov	r2, r3
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b168:	2b06      	cmp	r3, #6
 800b16a:	d006      	beq.n	800b17a <etharp_raw+0x82>
 800b16c:	4b23      	ldr	r3, [pc, #140]	@ (800b1fc <etharp_raw+0x104>)
 800b16e:	f240 426a 	movw	r2, #1130	@ 0x46a
 800b172:	4926      	ldr	r1, [pc, #152]	@ (800b20c <etharp_raw+0x114>)
 800b174:	4823      	ldr	r0, [pc, #140]	@ (800b204 <etharp_raw+0x10c>)
 800b176:	f009 fe1b 	bl	8014db0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	3308      	adds	r3, #8
 800b17e:	2206      	movs	r2, #6
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	4618      	mov	r0, r3
 800b184:	f009 ff93 	bl	80150ae <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	3312      	adds	r3, #18
 800b18c:	2206      	movs	r2, #6
 800b18e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b190:	4618      	mov	r0, r3
 800b192:	f009 ff8c 	bl	80150ae <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	330e      	adds	r3, #14
 800b19a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b19c:	6812      	ldr	r2, [r2, #0]
 800b19e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	3318      	adds	r3, #24
 800b1a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1a6:	6812      	ldr	r2, [r2, #0]
 800b1a8:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	701a      	strb	r2, [r3, #0]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	f042 0201 	orr.w	r2, r2, #1
 800b1b6:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f042 0208 	orr.w	r2, r2, #8
 800b1c0:	709a      	strb	r2, [r3, #2]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2206      	movs	r2, #6
 800b1ca:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	2204      	movs	r2, #4
 800b1d0:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800b1d2:	f640 0306 	movw	r3, #2054	@ 0x806
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	69b9      	ldr	r1, [r7, #24]
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f000 f8e0 	bl	800b3a4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800b1e4:	69b8      	ldr	r0, [r7, #24]
 800b1e6:	f002 fd65 	bl	800dcb4 <pbuf_free>
  p = NULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800b1ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3720      	adds	r7, #32
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	08016014 	.word	0x08016014
 800b200:	0801617c 	.word	0x0801617c
 800b204:	080160a4 	.word	0x080160a4
 800b208:	0801621c 	.word	0x0801621c
 800b20c:	08016250 	.word	0x08016250

0800b210 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b088      	sub	sp, #32
 800b214:	af04      	add	r7, sp, #16
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f103 0129 	add.w	r1, r3, #41	@ 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f103 0029 	add.w	r0, r3, #41	@ 0x29
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800b22c:	2201      	movs	r2, #1
 800b22e:	9203      	str	r2, [sp, #12]
 800b230:	68ba      	ldr	r2, [r7, #8]
 800b232:	9202      	str	r2, [sp, #8]
 800b234:	4a06      	ldr	r2, [pc, #24]	@ (800b250 <etharp_request_dst+0x40>)
 800b236:	9201      	str	r2, [sp, #4]
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	4603      	mov	r3, r0
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff ff5a 	bl	800b0f8 <etharp_raw>
 800b244:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800b246:	4618      	mov	r0, r3
 800b248:	3710      	adds	r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	08017e60 	.word	0x08017e60

0800b254 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800b25e:	4a05      	ldr	r2, [pc, #20]	@ (800b274 <etharp_request+0x20>)
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f7ff ffd4 	bl	800b210 <etharp_request_dst>
 800b268:	4603      	mov	r3, r0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	08017e58 	.word	0x08017e58

0800b278 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b086      	sub	sp, #24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800b282:	230e      	movs	r3, #14
 800b284:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	895b      	ldrh	r3, [r3, #10]
 800b28a:	2b0e      	cmp	r3, #14
 800b28c:	d977      	bls.n	800b37e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	7b1a      	ldrb	r2, [r3, #12]
 800b298:	7b5b      	ldrb	r3, [r3, #13]
 800b29a:	021b      	lsls	r3, r3, #8
 800b29c:	4313      	orrs	r3, r2
 800b29e:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d023      	beq.n	800b2f4 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d10f      	bne.n	800b2d4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d11b      	bne.n	800b2f4 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800b2c0:	2b5e      	cmp	r3, #94	@ 0x5e
 800b2c2:	d117      	bne.n	800b2f4 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	7b5b      	ldrb	r3, [r3, #13]
 800b2c8:	f043 0310 	orr.w	r3, r3, #16
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	735a      	strb	r2, [r3, #13]
 800b2d2:	e00f      	b.n	800b2f4 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	2206      	movs	r2, #6
 800b2d8:	4931      	ldr	r1, [pc, #196]	@ (800b3a0 <ethernet_input+0x128>)
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f009 fddd 	bl	8014e9a <memcmp>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d106      	bne.n	800b2f4 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	7b5b      	ldrb	r3, [r3, #13]
 800b2ea:	f043 0308 	orr.w	r3, r3, #8
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800b2f4:	89fb      	ldrh	r3, [r7, #14]
 800b2f6:	2b08      	cmp	r3, #8
 800b2f8:	d003      	beq.n	800b302 <ethernet_input+0x8a>
 800b2fa:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800b2fe:	d01e      	beq.n	800b33e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800b300:	e046      	b.n	800b390 <ethernet_input+0x118>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b308:	f003 0308 	and.w	r3, r3, #8
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d038      	beq.n	800b382 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	895b      	ldrh	r3, [r3, #10]
 800b314:	461a      	mov	r2, r3
 800b316:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	db33      	blt.n	800b386 <ethernet_input+0x10e>
 800b31e:	8afb      	ldrh	r3, [r7, #22]
 800b320:	425b      	negs	r3, r3
 800b322:	b29b      	uxth	r3, r3
 800b324:	b21b      	sxth	r3, r3
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f002 fc9f 	bl	800dc6c <pbuf_header>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d128      	bne.n	800b386 <ethernet_input+0x10e>
        ip4_input(p, netif);
 800b334:	6839      	ldr	r1, [r7, #0]
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f000 fa8a 	bl	800b850 <ip4_input>
      break;
 800b33c:	e01d      	b.n	800b37a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b344:	f003 0308 	and.w	r3, r3, #8
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d01e      	beq.n	800b38a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	895b      	ldrh	r3, [r3, #10]
 800b350:	461a      	mov	r2, r3
 800b352:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b356:	429a      	cmp	r2, r3
 800b358:	db19      	blt.n	800b38e <ethernet_input+0x116>
 800b35a:	8afb      	ldrh	r3, [r7, #22]
 800b35c:	425b      	negs	r3, r3
 800b35e:	b29b      	uxth	r3, r3
 800b360:	b21b      	sxth	r3, r3
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f002 fc81 	bl	800dc6c <pbuf_header>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10e      	bne.n	800b38e <ethernet_input+0x116>
        etharp_input(p, netif);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7ff fb66 	bl	800aa44 <etharp_input>
      break;
 800b378:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	e00c      	b.n	800b398 <ethernet_input+0x120>
    goto free_and_return;
 800b37e:	bf00      	nop
 800b380:	e006      	b.n	800b390 <ethernet_input+0x118>
        goto free_and_return;
 800b382:	bf00      	nop
 800b384:	e004      	b.n	800b390 <ethernet_input+0x118>
        goto free_and_return;
 800b386:	bf00      	nop
 800b388:	e002      	b.n	800b390 <ethernet_input+0x118>
        goto free_and_return;
 800b38a:	bf00      	nop
 800b38c:	e000      	b.n	800b390 <ethernet_input+0x118>
        goto free_and_return;
 800b38e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f002 fc8f 	bl	800dcb4 <pbuf_free>
  return ERR_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	08017e58 	.word	0x08017e58

0800b3a4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800b3b2:	8c3b      	ldrh	r3, [r7, #32]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7ff f855 	bl	800a464 <lwip_htons>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800b3be:	210e      	movs	r1, #14
 800b3c0:	68b8      	ldr	r0, [r7, #8]
 800b3c2:	f002 fc53 	bl	800dc6c <pbuf_header>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d125      	bne.n	800b418 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	8afa      	ldrh	r2, [r7, #22]
 800b3d6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2206      	movs	r2, #6
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f009 fe65 	bl	80150ae <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	3306      	adds	r3, #6
 800b3e8:	2206      	movs	r2, #6
 800b3ea:	6879      	ldr	r1, [r7, #4]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f009 fe5e 	bl	80150ae <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b3f8:	2b06      	cmp	r3, #6
 800b3fa:	d006      	beq.n	800b40a <ethernet_output+0x66>
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b428 <ethernet_output+0x84>)
 800b3fe:	f240 122b 	movw	r2, #299	@ 0x12b
 800b402:	490a      	ldr	r1, [pc, #40]	@ (800b42c <ethernet_output+0x88>)
 800b404:	480a      	ldr	r0, [pc, #40]	@ (800b430 <ethernet_output+0x8c>)
 800b406:	f009 fcd3 	bl	8014db0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	68b9      	ldr	r1, [r7, #8]
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	4798      	blx	r3
 800b414:	4603      	mov	r3, r0
 800b416:	e002      	b.n	800b41e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800b418:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800b41a:	f06f 0301 	mvn.w	r3, #1
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	08016294 	.word	0x08016294
 800b42c:	080162e0 	.word	0x080162e0
 800b430:	08016314 	.word	0x08016314

0800b434 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b08e      	sub	sp, #56	@ 0x38
 800b438:	af04      	add	r7, sp, #16
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800b43e:	4b7a      	ldr	r3, [pc, #488]	@ (800b628 <icmp_input+0x1f4>)
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800b444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	f003 030f 	and.w	r3, r3, #15
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800b452:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b454:	2b13      	cmp	r3, #19
 800b456:	f240 80d1 	bls.w	800b5fc <icmp_input+0x1c8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	895b      	ldrh	r3, [r3, #10]
 800b45e:	2b03      	cmp	r3, #3
 800b460:	f240 80ce 	bls.w	800b600 <icmp_input+0x1cc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800b46e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 80bb 	beq.w	800b5ee <icmp_input+0x1ba>
 800b478:	2b08      	cmp	r3, #8
 800b47a:	f040 80bb 	bne.w	800b5f4 <icmp_input+0x1c0>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800b47e:	4b6b      	ldr	r3, [pc, #428]	@ (800b62c <icmp_input+0x1f8>)
 800b480:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b482:	4b69      	ldr	r3, [pc, #420]	@ (800b628 <icmp_input+0x1f4>)
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b48a:	2be0      	cmp	r3, #224	@ 0xe0
 800b48c:	f000 80bf 	beq.w	800b60e <icmp_input+0x1da>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800b490:	4b65      	ldr	r3, [pc, #404]	@ (800b628 <icmp_input+0x1f4>)
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	4a64      	ldr	r2, [pc, #400]	@ (800b628 <icmp_input+0x1f4>)
 800b496:	6812      	ldr	r2, [r2, #0]
 800b498:	4611      	mov	r1, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 fbe8 	bl	800bc70 <ip4_addr_isbroadcast_u32>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f040 80b5 	bne.w	800b612 <icmp_input+0x1de>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	891b      	ldrh	r3, [r3, #8]
 800b4ac:	2b07      	cmp	r3, #7
 800b4ae:	f240 80a9 	bls.w	800b604 <icmp_input+0x1d0>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b4b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b4b4:	330e      	adds	r3, #14
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	b21b      	sxth	r3, r3
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f002 fbd5 	bl	800dc6c <pbuf_header>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d046      	beq.n	800b556 <icmp_input+0x122>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	891a      	ldrh	r2, [r3, #8]
 800b4cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b4ce:	4413      	add	r3, r2
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	2002      	movs	r0, #2
 800b4d8:	f002 f874 	bl	800d5c4 <pbuf_alloc>
 800b4dc:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800b4de:	69bb      	ldr	r3, [r7, #24]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f000 8098 	beq.w	800b616 <icmp_input+0x1e2>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	895b      	ldrh	r3, [r3, #10]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b4ee:	3308      	adds	r3, #8
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d203      	bcs.n	800b4fc <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800b4f4:	69b8      	ldr	r0, [r7, #24]
 800b4f6:	f002 fbdd 	bl	800dcb4 <pbuf_free>
        goto icmperr;
 800b4fa:	e08d      	b.n	800b618 <icmp_input+0x1e4>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b502:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b504:	4618      	mov	r0, r3
 800b506:	f009 fdd2 	bl	80150ae <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800b50a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b50c:	425b      	negs	r3, r3
 800b50e:	b29b      	uxth	r3, r3
 800b510:	b21b      	sxth	r3, r3
 800b512:	4619      	mov	r1, r3
 800b514:	69b8      	ldr	r0, [r7, #24]
 800b516:	f002 fba9 	bl	800dc6c <pbuf_header>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d009      	beq.n	800b534 <icmp_input+0x100>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800b520:	4b43      	ldr	r3, [pc, #268]	@ (800b630 <icmp_input+0x1fc>)
 800b522:	22af      	movs	r2, #175	@ 0xaf
 800b524:	4943      	ldr	r1, [pc, #268]	@ (800b634 <icmp_input+0x200>)
 800b526:	4844      	ldr	r0, [pc, #272]	@ (800b638 <icmp_input+0x204>)
 800b528:	f009 fc42 	bl	8014db0 <iprintf>
        pbuf_free(r);
 800b52c:	69b8      	ldr	r0, [r7, #24]
 800b52e:	f002 fbc1 	bl	800dcb4 <pbuf_free>
        goto icmperr;
 800b532:	e071      	b.n	800b618 <icmp_input+0x1e4>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	69b8      	ldr	r0, [r7, #24]
 800b538:	f002 fcee 	bl	800df18 <pbuf_copy>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d003      	beq.n	800b54a <icmp_input+0x116>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800b542:	69b8      	ldr	r0, [r7, #24]
 800b544:	f002 fbb6 	bl	800dcb4 <pbuf_free>
        goto icmperr;
 800b548:	e066      	b.n	800b618 <icmp_input+0x1e4>
      }
      /* free the original p */
      pbuf_free(p);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f002 fbb2 	bl	800dcb4 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800b550:	69bb      	ldr	r3, [r7, #24]
 800b552:	607b      	str	r3, [r7, #4]
 800b554:	e015      	b.n	800b582 <icmp_input+0x14e>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800b556:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b558:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800b55c:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800b560:	33f2      	adds	r3, #242	@ 0xf2
 800b562:	b29b      	uxth	r3, r3
 800b564:	b21b      	sxth	r3, r3
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f002 fb7f 	bl	800dc6c <pbuf_header>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d006      	beq.n	800b582 <icmp_input+0x14e>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800b574:	4b2e      	ldr	r3, [pc, #184]	@ (800b630 <icmp_input+0x1fc>)
 800b576:	22c0      	movs	r2, #192	@ 0xc0
 800b578:	4930      	ldr	r1, [pc, #192]	@ (800b63c <icmp_input+0x208>)
 800b57a:	482f      	ldr	r0, [pc, #188]	@ (800b638 <icmp_input+0x204>)
 800b57c:	f009 fc18 	bl	8014db0 <iprintf>
        goto icmperr;
 800b580:	e04a      	b.n	800b618 <icmp_input+0x1e4>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800b588:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f002 fb6c 	bl	800dc6c <pbuf_header>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d12b      	bne.n	800b5f2 <icmp_input+0x1be>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800b5a8:	4b1f      	ldr	r3, [pc, #124]	@ (800b628 <icmp_input+0x1f4>)
 800b5aa:	691a      	ldr	r2, [r3, #16]
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	709a      	strb	r2, [r3, #2]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	22ff      	movs	r2, #255	@ 0xff
 800b5c4:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	729a      	strb	r2, [r3, #10]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	9302      	str	r3, [sp, #8]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	23ff      	movs	r3, #255	@ 0xff
 800b5de:	2200      	movs	r2, #0
 800b5e0:	69f9      	ldr	r1, [r7, #28]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa72 	bl	800bacc <ip4_output_if>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800b5ec:	e001      	b.n	800b5f2 <icmp_input+0x1be>
    break;
 800b5ee:	bf00      	nop
 800b5f0:	e000      	b.n	800b5f4 <icmp_input+0x1c0>
    break;
 800b5f2:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f002 fb5d 	bl	800dcb4 <pbuf_free>
  return;
 800b5fa:	e011      	b.n	800b620 <icmp_input+0x1ec>
    goto lenerr;
 800b5fc:	bf00      	nop
 800b5fe:	e002      	b.n	800b606 <icmp_input+0x1d2>
    goto lenerr;
 800b600:	bf00      	nop
 800b602:	e000      	b.n	800b606 <icmp_input+0x1d2>
      goto lenerr;
 800b604:	bf00      	nop
lenerr:
  pbuf_free(p);
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f002 fb54 	bl	800dcb4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b60c:	e008      	b.n	800b620 <icmp_input+0x1ec>
      goto icmperr;
 800b60e:	bf00      	nop
 800b610:	e002      	b.n	800b618 <icmp_input+0x1e4>
      goto icmperr;
 800b612:	bf00      	nop
 800b614:	e000      	b.n	800b618 <icmp_input+0x1e4>
        goto icmperr;
 800b616:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f002 fb4b 	bl	800dcb4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800b61e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800b620:	3728      	adds	r7, #40	@ 0x28
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	20007070 	.word	0x20007070
 800b62c:	20007084 	.word	0x20007084
 800b630:	0801633c 	.word	0x0801633c
 800b634:	08016388 	.word	0x08016388
 800b638:	080163c0 	.word	0x080163c0
 800b63c:	080163e8 	.word	0x080163e8

0800b640 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	460b      	mov	r3, r1
 800b64a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800b64c:	78fb      	ldrb	r3, [r7, #3]
 800b64e:	461a      	mov	r2, r3
 800b650:	2103      	movs	r1, #3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f814 	bl	800b680 <icmp_send_response>
}
 800b658:	bf00      	nop
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	460b      	mov	r3, r1
 800b66a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800b66c:	78fb      	ldrb	r3, [r7, #3]
 800b66e:	461a      	mov	r2, r3
 800b670:	210b      	movs	r1, #11
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f804 	bl	800b680 <icmp_send_response>
}
 800b678:	bf00      	nop
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b08c      	sub	sp, #48	@ 0x30
 800b684:	af04      	add	r7, sp, #16
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	460b      	mov	r3, r1
 800b68a:	70fb      	strb	r3, [r7, #3]
 800b68c:	4613      	mov	r3, r2
 800b68e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800b690:	2200      	movs	r2, #0
 800b692:	2124      	movs	r1, #36	@ 0x24
 800b694:	2001      	movs	r0, #1
 800b696:	f001 ff95 	bl	800d5c4 <pbuf_alloc>
 800b69a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d04c      	beq.n	800b73c <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	895b      	ldrh	r3, [r3, #10]
 800b6a6:	2b23      	cmp	r3, #35	@ 0x23
 800b6a8:	d806      	bhi.n	800b6b8 <icmp_send_response+0x38>
 800b6aa:	4b26      	ldr	r3, [pc, #152]	@ (800b744 <icmp_send_response+0xc4>)
 800b6ac:	f240 1261 	movw	r2, #353	@ 0x161
 800b6b0:	4925      	ldr	r1, [pc, #148]	@ (800b748 <icmp_send_response+0xc8>)
 800b6b2:	4826      	ldr	r0, [pc, #152]	@ (800b74c <icmp_send_response+0xcc>)
 800b6b4:	f009 fb7c 	bl	8014db0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	78fa      	ldrb	r2, [r7, #3]
 800b6c8:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	78ba      	ldrb	r2, [r7, #2]
 800b6ce:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	711a      	strb	r2, [r3, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	719a      	strb	r2, [r3, #6]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	f103 0008 	add.w	r0, r3, #8
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	221c      	movs	r2, #28
 800b6f2:	4619      	mov	r1, r3
 800b6f4:	f009 fcdb 	bl	80150ae <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800b6fe:	f107 030c 	add.w	r3, r7, #12
 800b702:	4618      	mov	r0, r3
 800b704:	f000 f83a 	bl	800b77c <ip4_route>
 800b708:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d011      	beq.n	800b734 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	2200      	movs	r2, #0
 800b714:	709a      	strb	r2, [r3, #2]
 800b716:	2200      	movs	r2, #0
 800b718:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800b71a:	f107 020c 	add.w	r2, r7, #12
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	9302      	str	r3, [sp, #8]
 800b722:	2301      	movs	r3, #1
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	2300      	movs	r3, #0
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	23ff      	movs	r3, #255	@ 0xff
 800b72c:	2100      	movs	r1, #0
 800b72e:	69f8      	ldr	r0, [r7, #28]
 800b730:	f000 f9cc 	bl	800bacc <ip4_output_if>
  }
  pbuf_free(q);
 800b734:	69f8      	ldr	r0, [r7, #28]
 800b736:	f002 fabd 	bl	800dcb4 <pbuf_free>
 800b73a:	e000      	b.n	800b73e <icmp_send_response+0xbe>
    return;
 800b73c:	bf00      	nop
}
 800b73e:	3720      	adds	r7, #32
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	0801633c 	.word	0x0801633c
 800b748:	0801641c 	.word	0x0801641c
 800b74c:	080163c0 	.word	0x080163c0

0800b750 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800b75a:	f001 fa6d 	bl	800cc38 <mem_init>
  memp_init();
 800b75e:	f001 fcfd 	bl	800d15c <memp_init>
  pbuf_init();
  netif_init();
 800b762:	f001 fdb5 	bl	800d2d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b766:	f007 fa51 	bl	8012c0c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b76a:	f002 fdad 	bl	800e2c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800b76e:	f007 f92f 	bl	80129d0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b772:	bf00      	nop
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
	...

0800b77c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800b784:	4b30      	ldr	r3, [pc, #192]	@ (800b848 <ip4_route+0xcc>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	e036      	b.n	800b7fa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	b2db      	uxtb	r3, r3
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d02b      	beq.n	800b7f4 <ip4_route+0x78>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b7a2:	089b      	lsrs	r3, r3, #2
 800b7a4:	f003 0301 	and.w	r3, r3, #1
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d022      	beq.n	800b7f4 <ip4_route+0x78>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d01d      	beq.n	800b7f4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	405a      	eors	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	3308      	adds	r3, #8
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d101      	bne.n	800b7d4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	e033      	b.n	800b83c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b7da:	f003 0302 	and.w	r3, r3, #2
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d108      	bne.n	800b7f4 <ip4_route+0x78>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	330c      	adds	r3, #12
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d101      	bne.n	800b7f4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	e023      	b.n	800b83c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1c5      	bne.n	800b78c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b800:	4b12      	ldr	r3, [pc, #72]	@ (800b84c <ip4_route+0xd0>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d015      	beq.n	800b834 <ip4_route+0xb8>
 800b808:	4b10      	ldr	r3, [pc, #64]	@ (800b84c <ip4_route+0xd0>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00d      	beq.n	800b834 <ip4_route+0xb8>
 800b818:	4b0c      	ldr	r3, [pc, #48]	@ (800b84c <ip4_route+0xd0>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b820:	f003 0304 	and.w	r3, r3, #4
 800b824:	2b00      	cmp	r3, #0
 800b826:	d005      	beq.n	800b834 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800b828:	4b08      	ldr	r3, [pc, #32]	@ (800b84c <ip4_route+0xd0>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3304      	adds	r3, #4
 800b82e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800b830:	2b00      	cmp	r3, #0
 800b832:	d101      	bne.n	800b838 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800b834:	2300      	movs	r3, #0
 800b836:	e001      	b.n	800b83c <ip4_route+0xc0>
  }

  return netif_default;
 800b838:	4b04      	ldr	r3, [pc, #16]	@ (800b84c <ip4_route+0xd0>)
 800b83a:	681b      	ldr	r3, [r3, #0]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	bc80      	pop	{r7}
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	2000c78c 	.word	0x2000c78c
 800b84c:	2000c790 	.word	0x2000c790

0800b850 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b086      	sub	sp, #24
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	091b      	lsrs	r3, r3, #4
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b04      	cmp	r3, #4
 800b86a:	d004      	beq.n	800b876 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f002 fa21 	bl	800dcb4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	e122      	b.n	800babc <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	f003 030f 	and.w	r3, r3, #15
 800b87e:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800b880:	897b      	ldrh	r3, [r7, #10]
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	885b      	ldrh	r3, [r3, #2]
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fe fde9 	bl	800a464 <lwip_htons>
 800b892:	4603      	mov	r3, r0
 800b894:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	891b      	ldrh	r3, [r3, #8]
 800b89a:	893a      	ldrh	r2, [r7, #8]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d204      	bcs.n	800b8aa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800b8a0:	893b      	ldrh	r3, [r7, #8]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f002 f891 	bl	800d9cc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	895b      	ldrh	r3, [r3, #10]
 800b8ae:	897a      	ldrh	r2, [r7, #10]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d807      	bhi.n	800b8c4 <ip4_input+0x74>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	891b      	ldrh	r3, [r3, #8]
 800b8b8:	893a      	ldrh	r2, [r7, #8]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d802      	bhi.n	800b8c4 <ip4_input+0x74>
 800b8be:	897b      	ldrh	r3, [r7, #10]
 800b8c0:	2b13      	cmp	r3, #19
 800b8c2:	d804      	bhi.n	800b8ce <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f002 f9f5 	bl	800dcb4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	e0f6      	b.n	800babc <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	4a7c      	ldr	r2, [pc, #496]	@ (800bac4 <ip4_input+0x274>)
 800b8d4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	4a7a      	ldr	r2, [pc, #488]	@ (800bac4 <ip4_input+0x274>)
 800b8dc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800b8de:	4b79      	ldr	r3, [pc, #484]	@ (800bac4 <ip4_input+0x274>)
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b8e6:	2be0      	cmp	r3, #224	@ 0xe0
 800b8e8:	d112      	bne.n	800b910 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d007      	beq.n	800b90a <ip4_input+0xba>
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d002      	beq.n	800b90a <ip4_input+0xba>
      netif = inp;
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	613b      	str	r3, [r7, #16]
 800b908:	e041      	b.n	800b98e <ip4_input+0x13e>
    } else {
      netif = NULL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	613b      	str	r3, [r7, #16]
 800b90e:	e03e      	b.n	800b98e <ip4_input+0x13e>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800b910:	2301      	movs	r3, #1
 800b912:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	b2db      	uxtb	r3, r3
 800b924:	2b00      	cmp	r3, #0
 800b926:	d014      	beq.n	800b952 <ip4_input+0x102>
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	3304      	adds	r3, #4
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d00f      	beq.n	800b952 <ip4_input+0x102>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b932:	4b64      	ldr	r3, [pc, #400]	@ (800bac4 <ip4_input+0x274>)
 800b934:	695a      	ldr	r2, [r3, #20]
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	3304      	adds	r3, #4
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d026      	beq.n	800b98e <ip4_input+0x13e>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800b940:	4b60      	ldr	r3, [pc, #384]	@ (800bac4 <ip4_input+0x274>)
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	6939      	ldr	r1, [r7, #16]
 800b946:	4618      	mov	r0, r3
 800b948:	f000 f992 	bl	800bc70 <ip4_addr_isbroadcast_u32>
 800b94c:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d11d      	bne.n	800b98e <ip4_input+0x13e>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00d      	beq.n	800b974 <ip4_input+0x124>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800b958:	4b5a      	ldr	r3, [pc, #360]	@ (800bac4 <ip4_input+0x274>)
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b960:	d102      	bne.n	800b968 <ip4_input+0x118>
          netif = NULL;
 800b962:	2300      	movs	r3, #0
 800b964:	613b      	str	r3, [r7, #16]
          break;
 800b966:	e012      	b.n	800b98e <ip4_input+0x13e>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800b968:	2300      	movs	r3, #0
 800b96a:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800b96c:	4b56      	ldr	r3, [pc, #344]	@ (800bac8 <ip4_input+0x278>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	613b      	str	r3, [r7, #16]
 800b972:	e002      	b.n	800b97a <ip4_input+0x12a>
      } else {
        netif = netif->next;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d102      	bne.n	800b988 <ip4_input+0x138>
        netif = netif->next;
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1c4      	bne.n	800b918 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b98e:	4b4d      	ldr	r3, [pc, #308]	@ (800bac4 <ip4_input+0x274>)
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	6839      	ldr	r1, [r7, #0]
 800b994:	4618      	mov	r0, r3
 800b996:	f000 f96b 	bl	800bc70 <ip4_addr_isbroadcast_u32>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d105      	bne.n	800b9ac <ip4_input+0x15c>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800b9a0:	4b48      	ldr	r3, [pc, #288]	@ (800bac4 <ip4_input+0x274>)
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800b9a8:	2be0      	cmp	r3, #224	@ 0xe0
 800b9aa:	d104      	bne.n	800b9b6 <ip4_input+0x166>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f002 f981 	bl	800dcb4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e082      	b.n	800babc <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d104      	bne.n	800b9c6 <ip4_input+0x176>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f002 f979 	bl	800dcb4 <pbuf_free>
    return ERR_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	e07a      	b.n	800babc <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	88db      	ldrh	r3, [r3, #6]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800b9d2:	4013      	ands	r3, r2
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d00b      	beq.n	800b9f0 <ip4_input+0x1a0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fdcd 	bl	800c578 <ip4_reass>
 800b9de:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d101      	bne.n	800b9ea <ip4_input+0x19a>
      return ERR_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e068      	b.n	800babc <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800b9f0:	4a34      	ldr	r2, [pc, #208]	@ (800bac4 <ip4_input+0x274>)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800b9f6:	4a33      	ldr	r2, [pc, #204]	@ (800bac4 <ip4_input+0x274>)
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800b9fc:	4a31      	ldr	r2, [pc, #196]	@ (800bac4 <ip4_input+0x274>)
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	f003 030f 	and.w	r3, r3, #15
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	4b2c      	ldr	r3, [pc, #176]	@ (800bac4 <ip4_input+0x274>)
 800ba12:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800ba14:	897b      	ldrh	r3, [r7, #10]
 800ba16:	425b      	negs	r3, r3
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	b21b      	sxth	r3, r3
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f002 f924 	bl	800dc6c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	7a5b      	ldrb	r3, [r3, #9]
 800ba28:	2b11      	cmp	r3, #17
 800ba2a:	d006      	beq.n	800ba3a <ip4_input+0x1ea>
 800ba2c:	2b11      	cmp	r3, #17
 800ba2e:	dc13      	bgt.n	800ba58 <ip4_input+0x208>
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d00c      	beq.n	800ba4e <ip4_input+0x1fe>
 800ba34:	2b06      	cmp	r3, #6
 800ba36:	d005      	beq.n	800ba44 <ip4_input+0x1f4>
 800ba38:	e00e      	b.n	800ba58 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f007 f95d 	bl	8012cfc <udp_input>
      break;
 800ba42:	e028      	b.n	800ba96 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f003 fe14 	bl	800f674 <tcp_input>
      break;
 800ba4c:	e023      	b.n	800ba96 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800ba4e:	6839      	ldr	r1, [r7, #0]
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7ff fcef 	bl	800b434 <icmp_input>
      break;
 800ba56:	e01e      	b.n	800ba96 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ba58:	4b1a      	ldr	r3, [pc, #104]	@ (800bac4 <ip4_input+0x274>)
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	6939      	ldr	r1, [r7, #16]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 f906 	bl	800bc70 <ip4_addr_isbroadcast_u32>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d112      	bne.n	800ba90 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ba6a:	4b16      	ldr	r3, [pc, #88]	@ (800bac4 <ip4_input+0x274>)
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ba72:	2be0      	cmp	r3, #224	@ 0xe0
 800ba74:	d00c      	beq.n	800ba90 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800ba76:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f002 f907 	bl	800dc90 <pbuf_header_force>
        p->payload = iphdr;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ba88:	2102      	movs	r1, #2
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f7ff fdd8 	bl	800b640 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f002 f90f 	bl	800dcb4 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ba96:	4b0b      	ldr	r3, [pc, #44]	@ (800bac4 <ip4_input+0x274>)
 800ba98:	2200      	movs	r2, #0
 800ba9a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ba9c:	4b09      	ldr	r3, [pc, #36]	@ (800bac4 <ip4_input+0x274>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800baa2:	4b08      	ldr	r3, [pc, #32]	@ (800bac4 <ip4_input+0x274>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800baa8:	4b06      	ldr	r3, [pc, #24]	@ (800bac4 <ip4_input+0x274>)
 800baaa:	2200      	movs	r2, #0
 800baac:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800baae:	4b05      	ldr	r3, [pc, #20]	@ (800bac4 <ip4_input+0x274>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800bab4:	4b03      	ldr	r3, [pc, #12]	@ (800bac4 <ip4_input+0x274>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3718      	adds	r7, #24
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	20007070 	.word	0x20007070
 800bac8:	2000c78c 	.word	0x2000c78c

0800bacc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b08a      	sub	sp, #40	@ 0x28
 800bad0:	af04      	add	r7, sp, #16
 800bad2:	60f8      	str	r0, [r7, #12]
 800bad4:	60b9      	str	r1, [r7, #8]
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d009      	beq.n	800baf8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <ip4_output_if+0x26>
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d102      	bne.n	800baf8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800baf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf4:	3304      	adds	r3, #4
 800baf6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800baf8:	78fa      	ldrb	r2, [r7, #3]
 800bafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafc:	9302      	str	r3, [sp, #8]
 800bafe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bb02:	9301      	str	r3, [sp, #4]
 800bb04:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	6979      	ldr	r1, [r7, #20]
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f000 f805 	bl	800bb20 <ip4_output_if_src>
 800bb16:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	89db      	ldrh	r3, [r3, #14]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d006      	beq.n	800bb44 <ip4_output_if_src+0x24>
 800bb36:	4b48      	ldr	r3, [pc, #288]	@ (800bc58 <ip4_output_if_src+0x138>)
 800bb38:	f240 3233 	movw	r2, #819	@ 0x333
 800bb3c:	4947      	ldr	r1, [pc, #284]	@ (800bc5c <ip4_output_if_src+0x13c>)
 800bb3e:	4848      	ldr	r0, [pc, #288]	@ (800bc60 <ip4_output_if_src+0x140>)
 800bb40:	f009 f936 	bl	8014db0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d060      	beq.n	800bc0c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800bb4a:	2314      	movs	r3, #20
 800bb4c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800bb4e:	2114      	movs	r1, #20
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f002 f88b 	bl	800dc6c <pbuf_header>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800bb5c:	f06f 0301 	mvn.w	r3, #1
 800bb60:	e075      	b.n	800bc4e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	895b      	ldrh	r3, [r3, #10]
 800bb6c:	2b13      	cmp	r3, #19
 800bb6e:	d806      	bhi.n	800bb7e <ip4_output_if_src+0x5e>
 800bb70:	4b39      	ldr	r3, [pc, #228]	@ (800bc58 <ip4_output_if_src+0x138>)
 800bb72:	f44f 7258 	mov.w	r2, #864	@ 0x360
 800bb76:	493b      	ldr	r1, [pc, #236]	@ (800bc64 <ip4_output_if_src+0x144>)
 800bb78:	4839      	ldr	r0, [pc, #228]	@ (800bc60 <ip4_output_if_src+0x140>)
 800bb7a:	f009 f919 	bl	8014db0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	78fa      	ldrb	r2, [r7, #3]
 800bb82:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800bb8a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681a      	ldr	r2, [r3, #0]
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800bb94:	8b7b      	ldrh	r3, [r7, #26]
 800bb96:	089b      	lsrs	r3, r3, #2
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bbac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	891b      	ldrh	r3, [r3, #8]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fe fc56 	bl	800a464 <lwip_htons>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	461a      	mov	r2, r3
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	719a      	strb	r2, [r3, #6]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800bbca:	4b27      	ldr	r3, [pc, #156]	@ (800bc68 <ip4_output_if_src+0x148>)
 800bbcc:	881b      	ldrh	r3, [r3, #0]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f7fe fc48 	bl	800a464 <lwip_htons>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800bbdc:	4b22      	ldr	r3, [pc, #136]	@ (800bc68 <ip4_output_if_src+0x148>)
 800bbde:	881b      	ldrh	r3, [r3, #0]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	4b20      	ldr	r3, [pc, #128]	@ (800bc68 <ip4_output_if_src+0x148>)
 800bbe6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d104      	bne.n	800bbf8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800bbee:	4b1f      	ldr	r3, [pc, #124]	@ (800bc6c <ip4_output_if_src+0x14c>)
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	60da      	str	r2, [r3, #12]
 800bbf6:	e003      	b.n	800bc00 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	2200      	movs	r2, #0
 800bc04:	729a      	strb	r2, [r3, #10]
 800bc06:	2200      	movs	r2, #0
 800bc08:	72da      	strb	r2, [r3, #11]
 800bc0a:	e008      	b.n	800bc1e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800bc12:	69fb      	ldr	r3, [r7, #28]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800bc18:	f107 0314 	add.w	r3, r7, #20
 800bc1c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800bc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00c      	beq.n	800bc40 <ip4_output_if_src+0x120>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	891a      	ldrh	r2, [r3, #8]
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d906      	bls.n	800bc40 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 fe48 	bl	800c8cc <ip4_frag>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	e006      	b.n	800bc4e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800bc40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	68f9      	ldr	r1, [r7, #12]
 800bc48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bc4a:	4798      	blx	r3
 800bc4c:	4603      	mov	r3, r0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3720      	adds	r7, #32
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	08016448 	.word	0x08016448
 800bc5c:	08016494 	.word	0x08016494
 800bc60:	080164a0 	.word	0x080164a0
 800bc64:	080164c8 	.word	0x080164c8
 800bc68:	20007088 	.word	0x20007088
 800bc6c:	08017e68 	.word	0x08017e68

0800bc70 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc84:	d002      	beq.n	800bc8c <ip4_addr_isbroadcast_u32+0x1c>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e02a      	b.n	800bce6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bc96:	f003 0302 	and.w	r3, r3, #2
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e021      	b.n	800bce6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	3304      	adds	r3, #4
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d101      	bne.n	800bcb2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e019      	b.n	800bce6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	405a      	eors	r2, r3
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4013      	ands	r3, r2
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10d      	bne.n	800bce4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	3308      	adds	r3, #8
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	43da      	mvns	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	3308      	adds	r3, #8
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d101      	bne.n	800bce4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e000      	b.n	800bce6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800bce4:	2300      	movs	r3, #0
  }
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr

0800bcf0 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08a      	sub	sp, #40	@ 0x28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800bcfa:	f107 030c 	add.w	r3, r7, #12
 800bcfe:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 800bd08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bd0c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd0e:	d903      	bls.n	800bd18 <ip4addr_aton+0x28>
 800bd10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bd14:	2b39      	cmp	r3, #57	@ 0x39
 800bd16:	d901      	bls.n	800bd1c <ip4addr_aton+0x2c>
      return 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	e11e      	b.n	800bf5a <ip4addr_aton+0x26a>
    }
    val = 0;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 800bd20:	230a      	movs	r3, #10
 800bd22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 800bd26:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bd2a:	2b30      	cmp	r3, #48	@ 0x30
 800bd2c:	d11c      	bne.n	800bd68 <ip4addr_aton+0x78>
      c = *++cp;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	3301      	adds	r3, #1
 800bd32:	607b      	str	r3, [r7, #4]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 800bd3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bd40:	2b78      	cmp	r3, #120	@ 0x78
 800bd42:	d003      	beq.n	800bd4c <ip4addr_aton+0x5c>
 800bd44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bd48:	2b58      	cmp	r3, #88	@ 0x58
 800bd4a:	d10a      	bne.n	800bd62 <ip4addr_aton+0x72>
        base = 16;
 800bd4c:	2310      	movs	r3, #16
 800bd4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	3301      	adds	r3, #1
 800bd56:	607b      	str	r3, [r7, #4]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800bd60:	e002      	b.n	800bd68 <ip4addr_aton+0x78>
      } else {
        base = 8;
 800bd62:	2308      	movs	r3, #8
 800bd64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 800bd68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bd6c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd6e:	d915      	bls.n	800bd9c <ip4addr_aton+0xac>
 800bd70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bd74:	2b39      	cmp	r3, #57	@ 0x39
 800bd76:	d811      	bhi.n	800bd9c <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 800bd78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bd7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd7e:	fb03 f202 	mul.w	r2, r3, r2
 800bd82:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bd86:	4413      	add	r3, r2
 800bd88:	3b30      	subs	r3, #48	@ 0x30
 800bd8a:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	607b      	str	r3, [r7, #4]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800bd9a:	e036      	b.n	800be0a <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 800bd9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800bda0:	2b10      	cmp	r3, #16
 800bda2:	d133      	bne.n	800be0c <ip4addr_aton+0x11c>
 800bda4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bda8:	2b2f      	cmp	r3, #47	@ 0x2f
 800bdaa:	d903      	bls.n	800bdb4 <ip4addr_aton+0xc4>
 800bdac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bdb0:	2b39      	cmp	r3, #57	@ 0x39
 800bdb2:	d90f      	bls.n	800bdd4 <ip4addr_aton+0xe4>
 800bdb4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bdb8:	2b60      	cmp	r3, #96	@ 0x60
 800bdba:	d903      	bls.n	800bdc4 <ip4addr_aton+0xd4>
 800bdbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bdc0:	2b66      	cmp	r3, #102	@ 0x66
 800bdc2:	d907      	bls.n	800bdd4 <ip4addr_aton+0xe4>
 800bdc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bdc8:	2b40      	cmp	r3, #64	@ 0x40
 800bdca:	d91f      	bls.n	800be0c <ip4addr_aton+0x11c>
 800bdcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800bdd0:	2b46      	cmp	r3, #70	@ 0x46
 800bdd2:	d81b      	bhi.n	800be0c <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd6:	011b      	lsls	r3, r3, #4
 800bdd8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bddc:	f102 010a 	add.w	r1, r2, #10
 800bde0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bde4:	2a60      	cmp	r2, #96	@ 0x60
 800bde6:	d905      	bls.n	800bdf4 <ip4addr_aton+0x104>
 800bde8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800bdec:	2a7a      	cmp	r2, #122	@ 0x7a
 800bdee:	d801      	bhi.n	800bdf4 <ip4addr_aton+0x104>
 800bdf0:	2261      	movs	r2, #97	@ 0x61
 800bdf2:	e000      	b.n	800bdf6 <ip4addr_aton+0x106>
 800bdf4:	2241      	movs	r2, #65	@ 0x41
 800bdf6:	1a8a      	subs	r2, r1, r2
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	3301      	adds	r3, #1
 800be00:	607b      	str	r3, [r7, #4]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (isdigit(c)) {
 800be0a:	e7ad      	b.n	800bd68 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 800be0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be10:	2b2e      	cmp	r3, #46	@ 0x2e
 800be12:	d114      	bne.n	800be3e <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800be14:	f107 030c 	add.w	r3, r7, #12
 800be18:	330c      	adds	r3, #12
 800be1a:	69fa      	ldr	r2, [r7, #28]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d301      	bcc.n	800be24 <ip4addr_aton+0x134>
        return 0;
 800be20:	2300      	movs	r3, #0
 800be22:	e09a      	b.n	800bf5a <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	1d1a      	adds	r2, r3, #4
 800be28:	61fa      	str	r2, [r7, #28]
 800be2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be2c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	3301      	adds	r3, #1
 800be32:	607b      	str	r3, [r7, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!isdigit(c)) {
 800be3c:	e764      	b.n	800bd08 <ip4addr_aton+0x18>
    } else {
      break;
 800be3e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 800be40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be44:	2b00      	cmp	r3, #0
 800be46:	d019      	beq.n	800be7c <ip4addr_aton+0x18c>
 800be48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be4c:	2b20      	cmp	r3, #32
 800be4e:	d015      	beq.n	800be7c <ip4addr_aton+0x18c>
 800be50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be54:	2b0c      	cmp	r3, #12
 800be56:	d011      	beq.n	800be7c <ip4addr_aton+0x18c>
 800be58:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be5c:	2b0a      	cmp	r3, #10
 800be5e:	d00d      	beq.n	800be7c <ip4addr_aton+0x18c>
 800be60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be64:	2b0d      	cmp	r3, #13
 800be66:	d009      	beq.n	800be7c <ip4addr_aton+0x18c>
 800be68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be6c:	2b09      	cmp	r3, #9
 800be6e:	d005      	beq.n	800be7c <ip4addr_aton+0x18c>
 800be70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800be74:	2b0b      	cmp	r3, #11
 800be76:	d001      	beq.n	800be7c <ip4addr_aton+0x18c>
    return 0;
 800be78:	2300      	movs	r3, #0
 800be7a:	e06e      	b.n	800bf5a <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800be7c:	f107 030c 	add.w	r3, r7, #12
 800be80:	69fa      	ldr	r2, [r7, #28]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	109b      	asrs	r3, r3, #2
 800be86:	3301      	adds	r3, #1
 800be88:	2b04      	cmp	r3, #4
 800be8a:	d853      	bhi.n	800bf34 <ip4addr_aton+0x244>
 800be8c:	a201      	add	r2, pc, #4	@ (adr r2, 800be94 <ip4addr_aton+0x1a4>)
 800be8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be92:	bf00      	nop
 800be94:	0800bea9 	.word	0x0800bea9
 800be98:	0800bf45 	.word	0x0800bf45
 800be9c:	0800bead 	.word	0x0800bead
 800bea0:	0800becf 	.word	0x0800becf
 800bea4:	0800befd 	.word	0x0800befd

  case 0:
    return 0;       /* initial nondigit */
 800bea8:	2300      	movs	r3, #0
 800beaa:	e056      	b.n	800bf5a <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 800beac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800beb2:	d301      	bcc.n	800beb8 <ip4addr_aton+0x1c8>
      return 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	e050      	b.n	800bf5a <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2bff      	cmp	r3, #255	@ 0xff
 800bebc:	d901      	bls.n	800bec2 <ip4addr_aton+0x1d2>
      return 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	e04b      	b.n	800bf5a <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	061b      	lsls	r3, r3, #24
 800bec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bec8:	4313      	orrs	r3, r2
 800beca:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800becc:	e03b      	b.n	800bf46 <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 800bece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bed4:	d301      	bcc.n	800beda <ip4addr_aton+0x1ea>
      return 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	e03f      	b.n	800bf5a <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2bff      	cmp	r3, #255	@ 0xff
 800bede:	d802      	bhi.n	800bee6 <ip4addr_aton+0x1f6>
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	2bff      	cmp	r3, #255	@ 0xff
 800bee4:	d901      	bls.n	800beea <ip4addr_aton+0x1fa>
      return 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	e037      	b.n	800bf5a <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	061a      	lsls	r2, r3, #24
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	041b      	lsls	r3, r3, #16
 800bef2:	4313      	orrs	r3, r2
 800bef4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bef6:	4313      	orrs	r3, r2
 800bef8:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800befa:	e024      	b.n	800bf46 <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	2bff      	cmp	r3, #255	@ 0xff
 800bf00:	d901      	bls.n	800bf06 <ip4addr_aton+0x216>
      return 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	e029      	b.n	800bf5a <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2bff      	cmp	r3, #255	@ 0xff
 800bf0a:	d805      	bhi.n	800bf18 <ip4addr_aton+0x228>
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	2bff      	cmp	r3, #255	@ 0xff
 800bf10:	d802      	bhi.n	800bf18 <ip4addr_aton+0x228>
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2bff      	cmp	r3, #255	@ 0xff
 800bf16:	d901      	bls.n	800bf1c <ip4addr_aton+0x22c>
      return 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e01e      	b.n	800bf5a <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	061a      	lsls	r2, r3, #24
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	041b      	lsls	r3, r3, #16
 800bf24:	431a      	orrs	r2, r3
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	021b      	lsls	r3, r3, #8
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 800bf32:	e008      	b.n	800bf46 <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 800bf34:	4b0b      	ldr	r3, [pc, #44]	@ (800bf64 <ip4addr_aton+0x274>)
 800bf36:	f240 1203 	movw	r2, #259	@ 0x103
 800bf3a:	490b      	ldr	r1, [pc, #44]	@ (800bf68 <ip4addr_aton+0x278>)
 800bf3c:	480b      	ldr	r0, [pc, #44]	@ (800bf6c <ip4addr_aton+0x27c>)
 800bf3e:	f008 ff37 	bl	8014db0 <iprintf>
    break;
 800bf42:	e000      	b.n	800bf46 <ip4addr_aton+0x256>
    break;
 800bf44:	bf00      	nop
  }
  if (addr) {
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d005      	beq.n	800bf58 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800bf4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf4e:	f7fe fa96 	bl	800a47e <lwip_htonl>
 800bf52:	4602      	mov	r2, r0
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800bf58:	2301      	movs	r3, #1
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3728      	adds	r7, #40	@ 0x28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	080164f8 	.word	0x080164f8
 800bf68:	08016548 	.word	0x08016548
 800bf6c:	08016554 	.word	0x08016554

0800bf70 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800bf76:	2300      	movs	r3, #0
 800bf78:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800bf7a:	4b12      	ldr	r3, [pc, #72]	@ (800bfc4 <ip_reass_tmr+0x54>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800bf80:	e018      	b.n	800bfb4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	7fdb      	ldrb	r3, [r3, #31]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00b      	beq.n	800bfa2 <ip_reass_tmr+0x32>
      r->timer--;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	7fdb      	ldrb	r3, [r3, #31]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60fb      	str	r3, [r7, #12]
 800bfa0:	e008      	b.n	800bfb4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800bfac:	68b9      	ldr	r1, [r7, #8]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f80a 	bl	800bfc8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1e3      	bne.n	800bf82 <ip_reass_tmr+0x12>
     }
   }
}
 800bfba:	bf00      	nop
 800bfbc:	bf00      	nop
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	2000708c 	.word	0x2000708c

0800bfc8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b088      	sub	sp, #32
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d105      	bne.n	800bfea <ip_reass_free_complete_datagram+0x22>
 800bfde:	4b45      	ldr	r3, [pc, #276]	@ (800c0f4 <ip_reass_free_complete_datagram+0x12c>)
 800bfe0:	22ab      	movs	r2, #171	@ 0xab
 800bfe2:	4945      	ldr	r1, [pc, #276]	@ (800c0f8 <ip_reass_free_complete_datagram+0x130>)
 800bfe4:	4845      	ldr	r0, [pc, #276]	@ (800c0fc <ip_reass_free_complete_datagram+0x134>)
 800bfe6:	f008 fee3 	bl	8014db0 <iprintf>
  if (prev != NULL) {
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00a      	beq.n	800c006 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d005      	beq.n	800c006 <ip_reass_free_complete_datagram+0x3e>
 800bffa:	4b3e      	ldr	r3, [pc, #248]	@ (800c0f4 <ip_reass_free_complete_datagram+0x12c>)
 800bffc:	22ad      	movs	r2, #173	@ 0xad
 800bffe:	4940      	ldr	r1, [pc, #256]	@ (800c100 <ip_reass_free_complete_datagram+0x138>)
 800c000:	483e      	ldr	r0, [pc, #248]	@ (800c0fc <ip_reass_free_complete_datagram+0x134>)
 800c002:	f008 fed5 	bl	8014db0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	685b      	ldr	r3, [r3, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	889b      	ldrh	r3, [r3, #4]
 800c012:	b29b      	uxth	r3, r3
 800c014:	2b00      	cmp	r3, #0
 800c016:	d12a      	bne.n	800c06e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	6858      	ldr	r0, [r3, #4]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	3308      	adds	r3, #8
 800c02e:	2214      	movs	r2, #20
 800c030:	4619      	mov	r1, r3
 800c032:	f009 f83c 	bl	80150ae <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c036:	2101      	movs	r1, #1
 800c038:	69b8      	ldr	r0, [r7, #24]
 800c03a:	f7ff fb11 	bl	800b660 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c03e:	69b8      	ldr	r0, [r7, #24]
 800c040:	f001 fecc 	bl	800dddc <pbuf_clen>
 800c044:	4603      	mov	r3, r0
 800c046:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c048:	8bfa      	ldrh	r2, [r7, #30]
 800c04a:	8a7b      	ldrh	r3, [r7, #18]
 800c04c:	4413      	add	r3, r2
 800c04e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c052:	db05      	blt.n	800c060 <ip_reass_free_complete_datagram+0x98>
 800c054:	4b27      	ldr	r3, [pc, #156]	@ (800c0f4 <ip_reass_free_complete_datagram+0x12c>)
 800c056:	22bc      	movs	r2, #188	@ 0xbc
 800c058:	492a      	ldr	r1, [pc, #168]	@ (800c104 <ip_reass_free_complete_datagram+0x13c>)
 800c05a:	4828      	ldr	r0, [pc, #160]	@ (800c0fc <ip_reass_free_complete_datagram+0x134>)
 800c05c:	f008 fea8 	bl	8014db0 <iprintf>
    pbufs_freed += clen;
 800c060:	8bfa      	ldrh	r2, [r7, #30]
 800c062:	8a7b      	ldrh	r3, [r7, #18]
 800c064:	4413      	add	r3, r2
 800c066:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c068:	69b8      	ldr	r0, [r7, #24]
 800c06a:	f001 fe23 	bl	800dcb4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c074:	e01f      	b.n	800c0b6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f001 fea8 	bl	800dddc <pbuf_clen>
 800c08c:	4603      	mov	r3, r0
 800c08e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c090:	8bfa      	ldrh	r2, [r7, #30]
 800c092:	8a7b      	ldrh	r3, [r7, #18]
 800c094:	4413      	add	r3, r2
 800c096:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c09a:	db05      	blt.n	800c0a8 <ip_reass_free_complete_datagram+0xe0>
 800c09c:	4b15      	ldr	r3, [pc, #84]	@ (800c0f4 <ip_reass_free_complete_datagram+0x12c>)
 800c09e:	22cc      	movs	r2, #204	@ 0xcc
 800c0a0:	4918      	ldr	r1, [pc, #96]	@ (800c104 <ip_reass_free_complete_datagram+0x13c>)
 800c0a2:	4816      	ldr	r0, [pc, #88]	@ (800c0fc <ip_reass_free_complete_datagram+0x134>)
 800c0a4:	f008 fe84 	bl	8014db0 <iprintf>
    pbufs_freed += clen;
 800c0a8:	8bfa      	ldrh	r2, [r7, #30]
 800c0aa:	8a7b      	ldrh	r3, [r7, #18]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f001 fdff 	bl	800dcb4 <pbuf_free>
  while (p != NULL) {
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1dc      	bne.n	800c076 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 f8c2 	bl	800c248 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800c0c4:	4b10      	ldr	r3, [pc, #64]	@ (800c108 <ip_reass_free_complete_datagram+0x140>)
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	8bfa      	ldrh	r2, [r7, #30]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d905      	bls.n	800c0da <ip_reass_free_complete_datagram+0x112>
 800c0ce:	4b09      	ldr	r3, [pc, #36]	@ (800c0f4 <ip_reass_free_complete_datagram+0x12c>)
 800c0d0:	22d2      	movs	r2, #210	@ 0xd2
 800c0d2:	490e      	ldr	r1, [pc, #56]	@ (800c10c <ip_reass_free_complete_datagram+0x144>)
 800c0d4:	4809      	ldr	r0, [pc, #36]	@ (800c0fc <ip_reass_free_complete_datagram+0x134>)
 800c0d6:	f008 fe6b 	bl	8014db0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800c0da:	4b0b      	ldr	r3, [pc, #44]	@ (800c108 <ip_reass_free_complete_datagram+0x140>)
 800c0dc:	881a      	ldrh	r2, [r3, #0]
 800c0de:	8bfb      	ldrh	r3, [r7, #30]
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	4b08      	ldr	r3, [pc, #32]	@ (800c108 <ip_reass_free_complete_datagram+0x140>)
 800c0e6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c0e8:	8bfb      	ldrh	r3, [r7, #30]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3720      	adds	r7, #32
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	0801657c 	.word	0x0801657c
 800c0f8:	080165cc 	.word	0x080165cc
 800c0fc:	080165d8 	.word	0x080165d8
 800c100:	08016600 	.word	0x08016600
 800c104:	08016614 	.word	0x08016614
 800c108:	20007090 	.word	0x20007090
 800c10c:	08016634 	.word	0x08016634

0800c110 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b08a      	sub	sp, #40	@ 0x28
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c11a:	2300      	movs	r3, #0
 800c11c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c11e:	2300      	movs	r3, #0
 800c120:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c122:	2300      	movs	r3, #0
 800c124:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c126:	2300      	movs	r3, #0
 800c128:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c12e:	4b28      	ldr	r3, [pc, #160]	@ (800c1d0 <ip_reass_remove_oldest_datagram+0xc0>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800c134:	e030      	b.n	800c198 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c138:	695a      	ldr	r2, [r3, #20]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d10c      	bne.n	800c15c <ip_reass_remove_oldest_datagram+0x4c>
 800c142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c144:	699a      	ldr	r2, [r3, #24]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d106      	bne.n	800c15c <ip_reass_remove_oldest_datagram+0x4c>
 800c14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c150:	899a      	ldrh	r2, [r3, #12]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	889b      	ldrh	r3, [r3, #4]
 800c156:	b29b      	uxth	r3, r3
 800c158:	429a      	cmp	r2, r3
 800c15a:	d014      	beq.n	800c186 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	3301      	adds	r3, #1
 800c160:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d104      	bne.n	800c172 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	61bb      	str	r3, [r7, #24]
 800c170:	e009      	b.n	800c186 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c174:	7fda      	ldrb	r2, [r3, #31]
 800c176:	6a3b      	ldr	r3, [r7, #32]
 800c178:	7fdb      	ldrb	r3, [r3, #31]
 800c17a:	429a      	cmp	r2, r3
 800c17c:	d803      	bhi.n	800c186 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c180:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d001      	beq.n	800c192 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c190:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800c198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1cb      	bne.n	800c136 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c19e:	6a3b      	ldr	r3, [r7, #32]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d008      	beq.n	800c1b6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c1a4:	69b9      	ldr	r1, [r7, #24]
 800c1a6:	6a38      	ldr	r0, [r7, #32]
 800c1a8:	f7ff ff0e 	bl	800bfc8 <ip_reass_free_complete_datagram>
 800c1ac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	da02      	bge.n	800c1c4 <ip_reass_remove_oldest_datagram+0xb4>
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	dcac      	bgt.n	800c11e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c1c4:	697b      	ldr	r3, [r7, #20]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3728      	adds	r7, #40	@ 0x28
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	2000708c 	.word	0x2000708c

0800c1d4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c1de:	2004      	movs	r0, #4
 800c1e0:	f001 f800 	bl	800d1e4 <memp_malloc>
 800c1e4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d110      	bne.n	800c20e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7ff ff8e 	bl	800c110 <ip_reass_remove_oldest_datagram>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	dc03      	bgt.n	800c204 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c1fc:	2004      	movs	r0, #4
 800c1fe:	f000 fff1 	bl	800d1e4 <memp_malloc>
 800c202:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d101      	bne.n	800c20e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c20a:	2300      	movs	r3, #0
 800c20c:	e016      	b.n	800c23c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c20e:	2220      	movs	r2, #32
 800c210:	2100      	movs	r1, #0
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f008 fe51 	bl	8014eba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2203      	movs	r2, #3
 800c21c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c21e:	4b09      	ldr	r3, [pc, #36]	@ (800c244 <ip_reass_enqueue_new_datagram+0x70>)
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c226:	4a07      	ldr	r2, [pc, #28]	@ (800c244 <ip_reass_enqueue_new_datagram+0x70>)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3308      	adds	r3, #8
 800c230:	2214      	movs	r2, #20
 800c232:	6879      	ldr	r1, [r7, #4]
 800c234:	4618      	mov	r0, r3
 800c236:	f008 ff3a 	bl	80150ae <memcpy>
  return ipr;
 800c23a:	68fb      	ldr	r3, [r7, #12]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}
 800c244:	2000708c 	.word	0x2000708c

0800c248 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c252:	4b10      	ldr	r3, [pc, #64]	@ (800c294 <ip_reass_dequeue_datagram+0x4c>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d104      	bne.n	800c266 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a0c      	ldr	r2, [pc, #48]	@ (800c294 <ip_reass_dequeue_datagram+0x4c>)
 800c262:	6013      	str	r3, [r2, #0]
 800c264:	e00d      	b.n	800c282 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d106      	bne.n	800c27a <ip_reass_dequeue_datagram+0x32>
 800c26c:	4b0a      	ldr	r3, [pc, #40]	@ (800c298 <ip_reass_dequeue_datagram+0x50>)
 800c26e:	f240 1245 	movw	r2, #325	@ 0x145
 800c272:	490a      	ldr	r1, [pc, #40]	@ (800c29c <ip_reass_dequeue_datagram+0x54>)
 800c274:	480a      	ldr	r0, [pc, #40]	@ (800c2a0 <ip_reass_dequeue_datagram+0x58>)
 800c276:	f008 fd9b 	bl	8014db0 <iprintf>
    prev->next = ipr->next;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c282:	6879      	ldr	r1, [r7, #4]
 800c284:	2004      	movs	r0, #4
 800c286:	f000 fff9 	bl	800d27c <memp_free>
}
 800c28a:	bf00      	nop
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	2000708c 	.word	0x2000708c
 800c298:	0801657c 	.word	0x0801657c
 800c29c:	08016650 	.word	0x08016650
 800c2a0:	080165d8 	.word	0x080165d8

0800c2a4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b08c      	sub	sp, #48	@ 0x30
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	885b      	ldrh	r3, [r3, #2]
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7fe f8cd 	bl	800a464 <lwip_htons>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	f003 030f 	and.w	r3, r3, #15
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	88db      	ldrh	r3, [r3, #6]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fe f8bc 	bl	800a464 <lwip_htons>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	00db      	lsls	r3, r3, #3
 800c2f6:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800c2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c300:	2200      	movs	r2, #0
 800c302:	701a      	strb	r2, [r3, #0]
 800c304:	2200      	movs	r2, #0
 800c306:	705a      	strb	r2, [r3, #1]
 800c308:	2200      	movs	r2, #0
 800c30a:	709a      	strb	r2, [r3, #2]
 800c30c:	2200      	movs	r2, #0
 800c30e:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c312:	8b3a      	ldrh	r2, [r7, #24]
 800c314:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800c316:	8b3a      	ldrh	r2, [r7, #24]
 800c318:	8b7b      	ldrh	r3, [r7, #26]
 800c31a:	4413      	add	r3, r2
 800c31c:	b29a      	uxth	r2, r3
 800c31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c320:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	627b      	str	r3, [r7, #36]	@ 0x24
 800c328:	e061      	b.n	800c3ee <ip_reass_chain_frag_into_datagram_and_validate+0x14a>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800c32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800c330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c332:	889b      	ldrh	r3, [r3, #4]
 800c334:	b29a      	uxth	r2, r3
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	889b      	ldrh	r3, [r3, #4]
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d232      	bcs.n	800c3a6 <ip_reass_chain_frag_into_datagram_and_validate+0x102>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c344:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01f      	beq.n	800c38c <ip_reass_chain_frag_into_datagram_and_validate+0xe8>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34e:	889b      	ldrh	r3, [r3, #4]
 800c350:	b29a      	uxth	r2, r3
 800c352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c354:	88db      	ldrh	r3, [r3, #6]
 800c356:	b29b      	uxth	r3, r3
 800c358:	429a      	cmp	r2, r3
 800c35a:	f0c0 80e3 	bcc.w	800c524 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
 800c35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c360:	88db      	ldrh	r3, [r3, #6]
 800c362:	b29a      	uxth	r2, r3
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	889b      	ldrh	r3, [r3, #4]
 800c368:	b29b      	uxth	r3, r3
 800c36a:	429a      	cmp	r2, r3
 800c36c:	f200 80da 	bhi.w	800c524 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c378:	88db      	ldrh	r3, [r3, #6]
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37e:	889b      	ldrh	r3, [r3, #4]
 800c380:	b29b      	uxth	r3, r3
 800c382:	429a      	cmp	r2, r3
 800c384:	d037      	beq.n	800c3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c38a:	e034      	b.n	800c3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
        if (iprh->end > iprh_tmp->start) {
 800c38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c38e:	88db      	ldrh	r3, [r3, #6]
 800c390:	b29a      	uxth	r2, r3
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	889b      	ldrh	r3, [r3, #4]
 800c396:	b29b      	uxth	r3, r3
 800c398:	429a      	cmp	r2, r3
 800c39a:	f200 80c5 	bhi.w	800c528 <ip_reass_chain_frag_into_datagram_and_validate+0x284>
        ipr->p = new_p;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	605a      	str	r2, [r3, #4]
      break;
 800c3a4:	e027      	b.n	800c3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x152>
    } else if (iprh->start == iprh_tmp->start) {
 800c3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a8:	889b      	ldrh	r3, [r3, #4]
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	889b      	ldrh	r3, [r3, #4]
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	f000 80ba 	beq.w	800c52c <ip_reass_chain_frag_into_datagram_and_validate+0x288>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ba:	889b      	ldrh	r3, [r3, #4]
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	697b      	ldr	r3, [r7, #20]
 800c3c0:	88db      	ldrh	r3, [r3, #6]
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	f0c0 80b3 	bcc.w	800c530 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d009      	beq.n	800c3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
        if (iprh_prev->end != iprh_tmp->start) {
 800c3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d2:	88db      	ldrh	r3, [r3, #6]
 800c3d4:	b29a      	uxth	r2, r3
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	889b      	ldrh	r3, [r3, #4]
 800c3da:	b29b      	uxth	r3, r3
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d001      	beq.n	800c3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x140>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800c3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d19a      	bne.n	800c32a <ip_reass_chain_frag_into_datagram_and_validate+0x86>
 800c3f4:	e000      	b.n	800c3f8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
      break;
 800c3f6:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d12d      	bne.n	800c45a <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
    if (iprh_prev != NULL) {
 800c3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c400:	2b00      	cmp	r3, #0
 800c402:	d01c      	beq.n	800c43e <ip_reass_chain_frag_into_datagram_and_validate+0x19a>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c406:	88db      	ldrh	r3, [r3, #6]
 800c408:	b29a      	uxth	r2, r3
 800c40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40c:	889b      	ldrh	r3, [r3, #4]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	429a      	cmp	r2, r3
 800c412:	d906      	bls.n	800c422 <ip_reass_chain_frag_into_datagram_and_validate+0x17e>
 800c414:	4b51      	ldr	r3, [pc, #324]	@ (800c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c416:	f240 12ab 	movw	r2, #427	@ 0x1ab
 800c41a:	4951      	ldr	r1, [pc, #324]	@ (800c560 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c41c:	4851      	ldr	r0, [pc, #324]	@ (800c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c41e:	f008 fcc7 	bl	8014db0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42a:	88db      	ldrh	r3, [r3, #6]
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c430:	889b      	ldrh	r3, [r3, #4]
 800c432:	b29b      	uxth	r3, r3
 800c434:	429a      	cmp	r2, r3
 800c436:	d010      	beq.n	800c45a <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
        valid = 0;
 800c438:	2300      	movs	r3, #0
 800c43a:	623b      	str	r3, [r7, #32]
 800c43c:	e00d      	b.n	800c45a <ip_reass_chain_frag_into_datagram_and_validate+0x1b6>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d006      	beq.n	800c454 <ip_reass_chain_frag_into_datagram_and_validate+0x1b0>
 800c446:	4b45      	ldr	r3, [pc, #276]	@ (800c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c448:	f240 12b3 	movw	r2, #435	@ 0x1b3
 800c44c:	4946      	ldr	r1, [pc, #280]	@ (800c568 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c44e:	4845      	ldr	r0, [pc, #276]	@ (800c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c450:	f008 fcae 	bl	8014db0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d105      	bne.n	800c46c <ip_reass_chain_frag_into_datagram_and_validate+0x1c8>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	7f9b      	ldrb	r3, [r3, #30]
 800c464:	f003 0301 	and.w	r3, r3, #1
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d059      	beq.n	800c520 <ip_reass_chain_frag_into_datagram_and_validate+0x27c>
    /* and had no holes so far */
    if (valid) {
 800c46c:	6a3b      	ldr	r3, [r7, #32]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d04f      	beq.n	800c512 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d006      	beq.n	800c488 <ip_reass_chain_frag_into_datagram_and_validate+0x1e4>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	889b      	ldrh	r3, [r3, #4]
 800c482:	b29b      	uxth	r3, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <ip_reass_chain_frag_into_datagram_and_validate+0x1ea>
        valid = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	623b      	str	r3, [r7, #32]
 800c48c:	e041      	b.n	800c512 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c490:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800c492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c498:	e012      	b.n	800c4c0 <ip_reass_chain_frag_into_datagram_and_validate+0x21c>
          iprh = (struct ip_reass_helper*)q->payload;
 800c49a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800c4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a2:	88db      	ldrh	r3, [r3, #6]
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a8:	889b      	ldrh	r3, [r3, #4]
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d002      	beq.n	800c4b6 <ip_reass_chain_frag_into_datagram_and_validate+0x212>
            valid = 0;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	623b      	str	r3, [r7, #32]
            break;
 800c4b4:	e007      	b.n	800c4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x222>
          }
          iprh_prev = iprh;
 800c4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800c4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800c4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1e9      	bne.n	800c49a <ip_reass_chain_frag_into_datagram_and_validate+0x1f6>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d022      	beq.n	800c512 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d106      	bne.n	800c4e2 <ip_reass_chain_frag_into_datagram_and_validate+0x23e>
 800c4d4:	4b21      	ldr	r3, [pc, #132]	@ (800c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c4d6:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 800c4da:	4924      	ldr	r1, [pc, #144]	@ (800c56c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c4dc:	4821      	ldr	r0, [pc, #132]	@ (800c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c4de:	f008 fc67 	bl	8014db0 <iprintf>
          LWIP_ASSERT("sanity check",
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d106      	bne.n	800c4fc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
 800c4ee:	4b1b      	ldr	r3, [pc, #108]	@ (800c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c4f0:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800c4f4:	491d      	ldr	r1, [pc, #116]	@ (800c56c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c4f6:	481b      	ldr	r0, [pc, #108]	@ (800c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c4f8:	f008 fc5a 	bl	8014db0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d006      	beq.n	800c512 <ip_reass_chain_frag_into_datagram_and_validate+0x26e>
 800c504:	4b15      	ldr	r3, [pc, #84]	@ (800c55c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c506:	f240 12d7 	movw	r2, #471	@ 0x1d7
 800c50a:	4919      	ldr	r1, [pc, #100]	@ (800c570 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c50c:	4815      	ldr	r0, [pc, #84]	@ (800c564 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c50e:	f008 fc4f 	bl	8014db0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c512:	6a3b      	ldr	r3, [r7, #32]
 800c514:	2b00      	cmp	r3, #0
 800c516:	bf14      	ite	ne
 800c518:	2301      	movne	r3, #1
 800c51a:	2300      	moveq	r3, #0
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	e018      	b.n	800c552 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c520:	2300      	movs	r3, #0
 800c522:	e016      	b.n	800c552 <ip_reass_chain_frag_into_datagram_and_validate+0x2ae>
          goto freepbuf;
 800c524:	bf00      	nop
 800c526:	e004      	b.n	800c532 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
          goto freepbuf;
 800c528:	bf00      	nop
 800c52a:	e002      	b.n	800c532 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800c52c:	bf00      	nop
 800c52e:	e000      	b.n	800c532 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      goto freepbuf;
 800c530:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800c532:	68b8      	ldr	r0, [r7, #8]
 800c534:	f001 fc52 	bl	800dddc <pbuf_clen>
 800c538:	4603      	mov	r3, r0
 800c53a:	461a      	mov	r2, r3
 800c53c:	4b0d      	ldr	r3, [pc, #52]	@ (800c574 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c53e:	881b      	ldrh	r3, [r3, #0]
 800c540:	1a9b      	subs	r3, r3, r2
 800c542:	b29a      	uxth	r2, r3
 800c544:	4b0b      	ldr	r3, [pc, #44]	@ (800c574 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c546:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800c548:	68b8      	ldr	r0, [r7, #8]
 800c54a:	f001 fbb3 	bl	800dcb4 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c54e:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800c552:	4618      	mov	r0, r3
 800c554:	3730      	adds	r7, #48	@ 0x30
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	0801657c 	.word	0x0801657c
 800c560:	0801666c 	.word	0x0801666c
 800c564:	080165d8 	.word	0x080165d8
 800c568:	0801668c 	.word	0x0801668c
 800c56c:	080166c4 	.word	0x080166c4
 800c570:	080166d4 	.word	0x080166d4
 800c574:	20007090 	.word	0x20007090

0800c578 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08e      	sub	sp, #56	@ 0x38
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	62bb      	str	r3, [r7, #40]	@ 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800c586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	f003 030f 	and.w	r3, r3, #15
 800c58e:	2b05      	cmp	r3, #5
 800c590:	f040 8130 	bne.w	800c7f4 <ip4_reass+0x27c>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c596:	88db      	ldrh	r3, [r3, #6]
 800c598:	b29b      	uxth	r3, r3
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7fd ff62 	bl	800a464 <lwip_htons>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	00db      	lsls	r3, r3, #3
 800c5aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ae:	885b      	ldrh	r3, [r3, #2]
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7fd ff56 	bl	800a464 <lwip_htons>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	f003 030f 	and.w	r3, r3, #15
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f001 fc04 	bl	800dddc <pbuf_clen>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800c5d8:	4b8e      	ldr	r3, [pc, #568]	@ (800c814 <ip4_reass+0x29c>)
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5e0:	4413      	add	r3, r2
 800c5e2:	2b0a      	cmp	r3, #10
 800c5e4:	dd10      	ble.n	800c608 <ip4_reass+0x90>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c5e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ec:	f7ff fd90 	bl	800c110 <ip_reass_remove_oldest_datagram>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f000 8100 	beq.w	800c7f8 <ip4_reass+0x280>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800c5f8:	4b86      	ldr	r3, [pc, #536]	@ (800c814 <ip4_reass+0x29c>)
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c600:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800c602:	2b0a      	cmp	r3, #10
 800c604:	f300 80f8 	bgt.w	800c7f8 <ip4_reass+0x280>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c608:	4b83      	ldr	r3, [pc, #524]	@ (800c818 <ip4_reass+0x2a0>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c60e:	e015      	b.n	800c63c <ip4_reass+0xc4>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800c610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c612:	695a      	ldr	r2, [r3, #20]
 800c614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c616:	68db      	ldr	r3, [r3, #12]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d10c      	bne.n	800c636 <ip4_reass+0xbe>
 800c61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61e:	699a      	ldr	r2, [r3, #24]
 800c620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c622:	691b      	ldr	r3, [r3, #16]
 800c624:	429a      	cmp	r2, r3
 800c626:	d106      	bne.n	800c636 <ip4_reass+0xbe>
 800c628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62a:	899a      	ldrh	r2, [r3, #12]
 800c62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c62e:	889b      	ldrh	r3, [r3, #4]
 800c630:	b29b      	uxth	r3, r3
 800c632:	429a      	cmp	r2, r3
 800c634:	d006      	beq.n	800c644 <ip4_reass+0xcc>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800c636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e6      	bne.n	800c610 <ip4_reass+0x98>
 800c642:	e000      	b.n	800c646 <ip4_reass+0xce>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800c644:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800c646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d109      	bne.n	800c660 <ip4_reass+0xe8>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800c64c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c64e:	4619      	mov	r1, r3
 800c650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c652:	f7ff fdbf 	bl	800c1d4 <ip_reass_enqueue_new_datagram>
 800c656:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800c658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d11c      	bne.n	800c698 <ip4_reass+0x120>
      goto nullreturn;
 800c65e:	e0d0      	b.n	800c802 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c662:	88db      	ldrh	r3, [r3, #6]
 800c664:	b29b      	uxth	r3, r3
 800c666:	4618      	mov	r0, r3
 800c668:	f7fd fefc 	bl	800a464 <lwip_htons>
 800c66c:	4603      	mov	r3, r0
 800c66e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c672:	2b00      	cmp	r3, #0
 800c674:	d110      	bne.n	800c698 <ip4_reass+0x120>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800c676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c678:	89db      	ldrh	r3, [r3, #14]
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fd fef2 	bl	800a464 <lwip_htons>
 800c680:	4603      	mov	r3, r0
 800c682:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800c686:	2b00      	cmp	r3, #0
 800c688:	d006      	beq.n	800c698 <ip4_reass+0x120>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800c68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c68c:	3308      	adds	r3, #8
 800c68e:	2214      	movs	r2, #20
 800c690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c692:	4618      	mov	r0, r3
 800c694:	f008 fd0b 	bl	80150ae <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800c698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69a:	88db      	ldrh	r3, [r3, #6]
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	f003 0320 	and.w	r3, r3, #32
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	bf0c      	ite	eq
 800c6a6:	2301      	moveq	r3, #1
 800c6a8:	2300      	movne	r3, #0
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00e      	beq.n	800c6d2 <ip4_reass+0x15a>
    u16_t datagram_len = (u16_t)(offset + len);
 800c6b4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c6b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6b8:	4413      	add	r3, r2
 800c6ba:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800c6bc:	8b7a      	ldrh	r2, [r7, #26]
 800c6be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	f0c0 809b 	bcc.w	800c7fc <ip4_reass+0x284>
 800c6c6:	8b7b      	ldrh	r3, [r7, #26]
 800c6c8:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	f200 8095 	bhi.w	800c7fc <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800c6d2:	69fa      	ldr	r2, [r7, #28]
 800c6d4:	6879      	ldr	r1, [r7, #4]
 800c6d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6d8:	f7ff fde4 	bl	800c2a4 <ip_reass_chain_frag_into_datagram_and_validate>
 800c6dc:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e4:	f000 808c 	beq.w	800c800 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800c6e8:	4b4a      	ldr	r3, [pc, #296]	@ (800c814 <ip4_reass+0x29c>)
 800c6ea:	881a      	ldrh	r2, [r3, #0]
 800c6ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c6ee:	4413      	add	r3, r2
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	4b48      	ldr	r3, [pc, #288]	@ (800c814 <ip4_reass+0x29c>)
 800c6f4:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d00d      	beq.n	800c718 <ip4_reass+0x1a0>
    u16_t datagram_len = (u16_t)(offset + len);
 800c6fc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c6fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c700:	4413      	add	r3, r2
 800c702:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800c704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c706:	8a7a      	ldrh	r2, [r7, #18]
 800c708:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800c70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c70c:	7f9b      	ldrb	r3, [r3, #30]
 800c70e:	f043 0301 	orr.w	r3, r3, #1
 800c712:	b2da      	uxtb	r2, r3
 800c714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c716:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d168      	bne.n	800c7f0 <ip4_reass+0x278>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800c71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c720:	8b9b      	ldrh	r3, [r3, #28]
 800c722:	3314      	adds	r3, #20
 800c724:	b29a      	uxth	r2, r3
 800c726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c728:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800c72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	685b      	ldr	r3, [r3, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800c734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800c73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c73e:	3308      	adds	r3, #8
 800c740:	2214      	movs	r2, #20
 800c742:	4619      	mov	r1, r3
 800c744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c746:	f008 fcb2 	bl	80150ae <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800c74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c74c:	8b9b      	ldrh	r3, [r3, #28]
 800c74e:	4618      	mov	r0, r3
 800c750:	f7fd fe88 	bl	800a464 <lwip_htons>
 800c754:	4603      	mov	r3, r0
 800c756:	461a      	mov	r2, r3
 800c758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800c75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c75e:	2200      	movs	r2, #0
 800c760:	719a      	strb	r2, [r3, #6]
 800c762:	2200      	movs	r2, #0
 800c764:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800c766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c768:	2200      	movs	r2, #0
 800c76a:	729a      	strb	r2, [r3, #10]
 800c76c:	2200      	movs	r2, #0
 800c76e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800c770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800c776:	e00e      	b.n	800c796 <ip4_reass+0x21e>
      iprh = (struct ip_reass_helper*)r->payload;
 800c778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800c77e:	f06f 0113 	mvn.w	r1, #19
 800c782:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c784:	f001 fa72 	bl	800dc6c <pbuf_header>
      pbuf_cat(p, r);
 800c788:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f001 fb5e 	bl	800de4c <pbuf_cat>
      r = iprh->next_pbuf;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800c796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d1ed      	bne.n	800c778 <ip4_reass+0x200>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800c79c:	4b1e      	ldr	r3, [pc, #120]	@ (800c818 <ip4_reass+0x2a0>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d102      	bne.n	800c7ac <ip4_reass+0x234>
      ipr_prev = NULL;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7aa:	e010      	b.n	800c7ce <ip4_reass+0x256>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c7ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c818 <ip4_reass+0x2a0>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7b2:	e007      	b.n	800c7c4 <ip4_reass+0x24c>
        if (ipr_prev->next == ipr) {
 800c7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d006      	beq.n	800c7cc <ip4_reass+0x254>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800c7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d1f4      	bne.n	800c7b4 <ip4_reass+0x23c>
 800c7ca:	e000      	b.n	800c7ce <ip4_reass+0x256>
          break;
 800c7cc:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800c7ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c7d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c7d2:	f7ff fd39 	bl	800c248 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f001 fb00 	bl	800dddc <pbuf_clen>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	461a      	mov	r2, r3
 800c7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c814 <ip4_reass+0x29c>)
 800c7e2:	881b      	ldrh	r3, [r3, #0]
 800c7e4:	1a9b      	subs	r3, r3, r2
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800c814 <ip4_reass+0x29c>)
 800c7ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	e00c      	b.n	800c80a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	e00a      	b.n	800c80a <ip4_reass+0x292>
    goto nullreturn;
 800c7f4:	bf00      	nop
 800c7f6:	e004      	b.n	800c802 <ip4_reass+0x28a>
      goto nullreturn;
 800c7f8:	bf00      	nop
 800c7fa:	e002      	b.n	800c802 <ip4_reass+0x28a>
      goto nullreturn;
 800c7fc:	bf00      	nop
 800c7fe:	e000      	b.n	800c802 <ip4_reass+0x28a>
    goto nullreturn;
 800c800:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f001 fa56 	bl	800dcb4 <pbuf_free>
  return NULL;
 800c808:	2300      	movs	r3, #0
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3738      	adds	r7, #56	@ 0x38
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20007090 	.word	0x20007090
 800c818:	2000708c 	.word	0x2000708c

0800c81c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800c820:	2005      	movs	r0, #5
 800c822:	f000 fcdf 	bl	800d1e4 <memp_malloc>
 800c826:	4603      	mov	r3, r0
}
 800c828:	4618      	mov	r0, r3
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d106      	bne.n	800c848 <ip_frag_free_pbuf_custom_ref+0x1c>
 800c83a:	4b07      	ldr	r3, [pc, #28]	@ (800c858 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800c83c:	f240 22ae 	movw	r2, #686	@ 0x2ae
 800c840:	4906      	ldr	r1, [pc, #24]	@ (800c85c <ip_frag_free_pbuf_custom_ref+0x30>)
 800c842:	4807      	ldr	r0, [pc, #28]	@ (800c860 <ip_frag_free_pbuf_custom_ref+0x34>)
 800c844:	f008 fab4 	bl	8014db0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800c848:	6879      	ldr	r1, [r7, #4]
 800c84a:	2005      	movs	r0, #5
 800c84c:	f000 fd16 	bl	800d27c <memp_free>
}
 800c850:	bf00      	nop
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	0801657c 	.word	0x0801657c
 800c85c:	080166f8 	.word	0x080166f8
 800c860:	080165d8 	.word	0x080165d8

0800c864 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <ipfrag_free_pbuf_custom+0x20>
 800c876:	4b11      	ldr	r3, [pc, #68]	@ (800c8bc <ipfrag_free_pbuf_custom+0x58>)
 800c878:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 800c87c:	4910      	ldr	r1, [pc, #64]	@ (800c8c0 <ipfrag_free_pbuf_custom+0x5c>)
 800c87e:	4811      	ldr	r0, [pc, #68]	@ (800c8c4 <ipfrag_free_pbuf_custom+0x60>)
 800c880:	f008 fa96 	bl	8014db0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d006      	beq.n	800c89a <ipfrag_free_pbuf_custom+0x36>
 800c88c:	4b0b      	ldr	r3, [pc, #44]	@ (800c8bc <ipfrag_free_pbuf_custom+0x58>)
 800c88e:	f240 22b9 	movw	r2, #697	@ 0x2b9
 800c892:	490d      	ldr	r1, [pc, #52]	@ (800c8c8 <ipfrag_free_pbuf_custom+0x64>)
 800c894:	480b      	ldr	r0, [pc, #44]	@ (800c8c4 <ipfrag_free_pbuf_custom+0x60>)
 800c896:	f008 fa8b 	bl	8014db0 <iprintf>
  if (pcr->original != NULL) {
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d004      	beq.n	800c8ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	695b      	ldr	r3, [r3, #20]
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f001 fa04 	bl	800dcb4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f7ff ffbd 	bl	800c82c <ip_frag_free_pbuf_custom_ref>
}
 800c8b2:	bf00      	nop
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	0801657c 	.word	0x0801657c
 800c8c0:	08016704 	.word	0x08016704
 800c8c4:	080165d8 	.word	0x080165d8
 800c8c8:	08016710 	.word	0x08016710

0800c8cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b092      	sub	sp, #72	@ 0x48
 800c8d0:	af02      	add	r7, sp, #8
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c8e0:	3b14      	subs	r3, #20
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	da00      	bge.n	800c8e8 <ip4_frag+0x1c>
 800c8e6:	3307      	adds	r3, #7
 800c8e8:	10db      	asrs	r3, r3, #3
 800c8ea:	867b      	strh	r3, [r7, #50]	@ 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800c8ec:	2314      	movs	r3, #20
 800c8ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iphdr = original_iphdr;
 800c8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800c8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	f003 030f 	and.w	r3, r3, #15
 800c902:	2b05      	cmp	r3, #5
 800c904:	d009      	beq.n	800c91a <ip4_frag+0x4e>
 800c906:	4b7a      	ldr	r3, [pc, #488]	@ (800caf0 <ip4_frag+0x224>)
 800c908:	f240 22e1 	movw	r2, #737	@ 0x2e1
 800c90c:	4979      	ldr	r1, [pc, #484]	@ (800caf4 <ip4_frag+0x228>)
 800c90e:	487a      	ldr	r0, [pc, #488]	@ (800caf8 <ip4_frag+0x22c>)
 800c910:	f008 fa4e 	bl	8014db0 <iprintf>
 800c914:	f06f 0305 	mvn.w	r3, #5
 800c918:	e0e6      	b.n	800cae8 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800c91a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c91c:	88db      	ldrh	r3, [r3, #6]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	4618      	mov	r0, r3
 800c922:	f7fd fd9f 	bl	800a464 <lwip_htons>
 800c926:	4603      	mov	r3, r0
 800c928:	86bb      	strh	r3, [r7, #52]	@ 0x34
  ofo = tmp & IP_OFFMASK;
 800c92a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c92c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c930:	873b      	strh	r3, [r7, #56]	@ 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800c932:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c934:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d009      	beq.n	800c950 <ip4_frag+0x84>
 800c93c:	4b6c      	ldr	r3, [pc, #432]	@ (800caf0 <ip4_frag+0x224>)
 800c93e:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800c942:	496e      	ldr	r1, [pc, #440]	@ (800cafc <ip4_frag+0x230>)
 800c944:	486c      	ldr	r0, [pc, #432]	@ (800caf8 <ip4_frag+0x22c>)
 800c946:	f008 fa33 	bl	8014db0 <iprintf>
 800c94a:	f06f 0305 	mvn.w	r3, #5
 800c94e:	e0cb      	b.n	800cae8 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	891b      	ldrh	r3, [r3, #8]
 800c954:	3b14      	subs	r3, #20
 800c956:	877b      	strh	r3, [r7, #58]	@ 0x3a

  while (left) {
 800c958:	e0bd      	b.n	800cad6 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800c95a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800c95c:	00da      	lsls	r2, r3, #3
 800c95e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c960:	4293      	cmp	r3, r2
 800c962:	bfa8      	it	ge
 800c964:	4613      	movge	r3, r2
 800c966:	84fb      	strh	r3, [r7, #38]	@ 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800c968:	2200      	movs	r2, #0
 800c96a:	2114      	movs	r1, #20
 800c96c:	2002      	movs	r0, #2
 800c96e:	f000 fe29 	bl	800d5c4 <pbuf_alloc>
 800c972:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 80b3 	beq.w	800cae2 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	895b      	ldrh	r3, [r3, #10]
 800c980:	2b13      	cmp	r3, #19
 800c982:	d806      	bhi.n	800c992 <ip4_frag+0xc6>
 800c984:	4b5a      	ldr	r3, [pc, #360]	@ (800caf0 <ip4_frag+0x224>)
 800c986:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800c98a:	495d      	ldr	r1, [pc, #372]	@ (800cb00 <ip4_frag+0x234>)
 800c98c:	485a      	ldr	r0, [pc, #360]	@ (800caf8 <ip4_frag+0x22c>)
 800c98e:	f008 fa0f 	bl	8014db0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	2214      	movs	r2, #20
 800c998:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c99a:	4618      	mov	r0, r3
 800c99c:	f008 fb87 	bl	80150ae <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	62bb      	str	r3, [r7, #40]	@ 0x28

    left_to_copy = fragsize;
 800c9a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c9a8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    while (left_to_copy) {
 800c9aa:	e04f      	b.n	800ca4c <ip4_frag+0x180>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	895a      	ldrh	r2, [r3, #10]
 800c9b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c9b2:	1ad3      	subs	r3, r2, r3
 800c9b4:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800c9b6:	8b7a      	ldrh	r2, [r7, #26]
 800c9b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	bf28      	it	cs
 800c9be:	4613      	movcs	r3, r2
 800c9c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800c9c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d105      	bne.n	800c9d4 <ip4_frag+0x108>
        poff = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	60fb      	str	r3, [r7, #12]
        continue;
 800c9d2:	e03b      	b.n	800ca4c <ip4_frag+0x180>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800c9d4:	f7ff ff22 	bl	800c81c <ip_frag_alloc_pbuf_custom_ref>
 800c9d8:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d103      	bne.n	800c9e8 <ip4_frag+0x11c>
        pbuf_free(rambuf);
 800c9e0:	6a38      	ldr	r0, [r7, #32]
 800c9e2:	f001 f967 	bl	800dcb4 <pbuf_free>
        goto memerr;
 800c9e6:	e07d      	b.n	800cae4 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c9e8:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800c9ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c9f0:	4413      	add	r3, r2
 800c9f2:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 800c9f4:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800c9f6:	9201      	str	r2, [sp, #4]
 800c9f8:	9300      	str	r3, [sp, #0]
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	2004      	movs	r0, #4
 800ca00:	f000 ff7a 	bl	800d8f8 <pbuf_alloced_custom>
 800ca04:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d106      	bne.n	800ca1a <ip4_frag+0x14e>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ca0c:	6978      	ldr	r0, [r7, #20]
 800ca0e:	f7ff ff0d 	bl	800c82c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ca12:	6a38      	ldr	r0, [r7, #32]
 800ca14:	f001 f94e 	bl	800dcb4 <pbuf_free>
        goto memerr;
 800ca18:	e064      	b.n	800cae4 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f001 f9f4 	bl	800de08 <pbuf_ref>
      pcr->original = p;
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	68fa      	ldr	r2, [r7, #12]
 800ca24:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	4a36      	ldr	r2, [pc, #216]	@ (800cb04 <ip4_frag+0x238>)
 800ca2a:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ca2c:	6939      	ldr	r1, [r7, #16]
 800ca2e:	6a38      	ldr	r0, [r7, #32]
 800ca30:	f001 fa0c 	bl	800de4c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800ca34:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800ca36:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      if (left_to_copy) {
 800ca3c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d004      	beq.n	800ca4c <ip4_frag+0x180>
        poff = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	86fb      	strh	r3, [r7, #54]	@ 0x36
        p = p->next;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ca4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1ac      	bne.n	800c9ac <ip4_frag+0xe0>
      }
    }
    poff += newpbuflen;
 800ca52:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ca54:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ca56:	4413      	add	r3, r2
 800ca58:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ca5e:	f1a3 0213 	sub.w	r2, r3, #19
 800ca62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ca64:	429a      	cmp	r2, r3
 800ca66:	bfcc      	ite	gt
 800ca68:	2301      	movgt	r3, #1
 800ca6a:	2300      	movle	r3, #0
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ca70:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ca72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca76:	86bb      	strh	r3, [r7, #52]	@ 0x34
    if (!last) {
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d103      	bne.n	800ca86 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800ca7e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ca80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800ca84:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ca86:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fd fceb 	bl	800a464 <lwip_htons>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	461a      	mov	r2, r3
 800ca92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800ca96:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca98:	3314      	adds	r3, #20
 800ca9a:	b29b      	uxth	r3, r3
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fd fce1 	bl	800a464 <lwip_htons>
 800caa2:	4603      	mov	r3, r0
 800caa4:	461a      	mov	r2, r3
 800caa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800caaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caac:	2200      	movs	r2, #0
 800caae:	729a      	strb	r2, [r3, #10]
 800cab0:	2200      	movs	r2, #0
 800cab2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	695b      	ldr	r3, [r3, #20]
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	6a39      	ldr	r1, [r7, #32]
 800cabc:	68b8      	ldr	r0, [r7, #8]
 800cabe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cac0:	6a38      	ldr	r0, [r7, #32]
 800cac2:	f001 f8f7 	bl	800dcb4 <pbuf_free>
    left -= fragsize;
 800cac6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cac8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800caca:	1ad3      	subs	r3, r2, r3
 800cacc:	877b      	strh	r3, [r7, #58]	@ 0x3a
    ofo += nfb;
 800cace:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800cad0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800cad2:	4413      	add	r3, r2
 800cad4:	873b      	strh	r3, [r7, #56]	@ 0x38
  while (left) {
 800cad6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cad8:	2b00      	cmp	r3, #0
 800cada:	f47f af3e 	bne.w	800c95a <ip4_frag+0x8e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	e002      	b.n	800cae8 <ip4_frag+0x21c>
      goto memerr;
 800cae2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3740      	adds	r7, #64	@ 0x40
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	0801657c 	.word	0x0801657c
 800caf4:	0801671c 	.word	0x0801671c
 800caf8:	080165d8 	.word	0x080165d8
 800cafc:	08016744 	.word	0x08016744
 800cb00:	08016760 	.word	0x08016760
 800cb04:	0800c865 	.word	0x0800c865

0800cb08 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cb10:	4b40      	ldr	r3, [pc, #256]	@ (800cc14 <plug_holes+0x10c>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	687a      	ldr	r2, [r7, #4]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d206      	bcs.n	800cb28 <plug_holes+0x20>
 800cb1a:	4b3f      	ldr	r3, [pc, #252]	@ (800cc18 <plug_holes+0x110>)
 800cb1c:	f240 125d 	movw	r2, #349	@ 0x15d
 800cb20:	493e      	ldr	r1, [pc, #248]	@ (800cc1c <plug_holes+0x114>)
 800cb22:	483f      	ldr	r0, [pc, #252]	@ (800cc20 <plug_holes+0x118>)
 800cb24:	f008 f944 	bl	8014db0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cb28:	4b3e      	ldr	r3, [pc, #248]	@ (800cc24 <plug_holes+0x11c>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d306      	bcc.n	800cb40 <plug_holes+0x38>
 800cb32:	4b39      	ldr	r3, [pc, #228]	@ (800cc18 <plug_holes+0x110>)
 800cb34:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800cb38:	493b      	ldr	r1, [pc, #236]	@ (800cc28 <plug_holes+0x120>)
 800cb3a:	4839      	ldr	r0, [pc, #228]	@ (800cc20 <plug_holes+0x118>)
 800cb3c:	f008 f938 	bl	8014db0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	791b      	ldrb	r3, [r3, #4]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d006      	beq.n	800cb56 <plug_holes+0x4e>
 800cb48:	4b33      	ldr	r3, [pc, #204]	@ (800cc18 <plug_holes+0x110>)
 800cb4a:	f240 125f 	movw	r2, #351	@ 0x15f
 800cb4e:	4937      	ldr	r1, [pc, #220]	@ (800cc2c <plug_holes+0x124>)
 800cb50:	4833      	ldr	r0, [pc, #204]	@ (800cc20 <plug_holes+0x118>)
 800cb52:	f008 f92d 	bl	8014db0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	881b      	ldrh	r3, [r3, #0]
 800cb5a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cb5e:	d906      	bls.n	800cb6e <plug_holes+0x66>
 800cb60:	4b2d      	ldr	r3, [pc, #180]	@ (800cc18 <plug_holes+0x110>)
 800cb62:	f44f 72b1 	mov.w	r2, #354	@ 0x162
 800cb66:	4932      	ldr	r1, [pc, #200]	@ (800cc30 <plug_holes+0x128>)
 800cb68:	482d      	ldr	r0, [pc, #180]	@ (800cc20 <plug_holes+0x118>)
 800cb6a:	f008 f921 	bl	8014db0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800cb6e:	4b29      	ldr	r3, [pc, #164]	@ (800cc14 <plug_holes+0x10c>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	8812      	ldrh	r2, [r2, #0]
 800cb76:	4413      	add	r3, r2
 800cb78:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d01f      	beq.n	800cbc2 <plug_holes+0xba>
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	791b      	ldrb	r3, [r3, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d11b      	bne.n	800cbc2 <plug_holes+0xba>
 800cb8a:	4b26      	ldr	r3, [pc, #152]	@ (800cc24 <plug_holes+0x11c>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	68fa      	ldr	r2, [r7, #12]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d016      	beq.n	800cbc2 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cb94:	4b27      	ldr	r3, [pc, #156]	@ (800cc34 <plug_holes+0x12c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d102      	bne.n	800cba4 <plug_holes+0x9c>
      lfree = mem;
 800cb9e:	4a25      	ldr	r2, [pc, #148]	@ (800cc34 <plug_holes+0x12c>)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	881a      	ldrh	r2, [r3, #0]
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800cbac:	4b19      	ldr	r3, [pc, #100]	@ (800cc14 <plug_holes+0x10c>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	1ad1      	subs	r1, r2, r3
 800cbb4:	4b17      	ldr	r3, [pc, #92]	@ (800cc14 <plug_holes+0x10c>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	8812      	ldrh	r2, [r2, #0]
 800cbbc:	4413      	add	r3, r2
 800cbbe:	b28a      	uxth	r2, r1
 800cbc0:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800cbc2:	4b14      	ldr	r3, [pc, #80]	@ (800cc14 <plug_holes+0x10c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	8852      	ldrh	r2, [r2, #2]
 800cbca:	4413      	add	r3, r2
 800cbcc:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cbce:	68ba      	ldr	r2, [r7, #8]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d01a      	beq.n	800cc0c <plug_holes+0x104>
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	791b      	ldrb	r3, [r3, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d116      	bne.n	800cc0c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cbde:	4b15      	ldr	r3, [pc, #84]	@ (800cc34 <plug_holes+0x12c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d102      	bne.n	800cbee <plug_holes+0xe6>
      lfree = pmem;
 800cbe8:	4a12      	ldr	r2, [pc, #72]	@ (800cc34 <plug_holes+0x12c>)
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	881a      	ldrh	r2, [r3, #0]
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800cbf6:	4b07      	ldr	r3, [pc, #28]	@ (800cc14 <plug_holes+0x10c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	1ad1      	subs	r1, r2, r3
 800cbfe:	4b05      	ldr	r3, [pc, #20]	@ (800cc14 <plug_holes+0x10c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	8812      	ldrh	r2, [r2, #0]
 800cc06:	4413      	add	r3, r2
 800cc08:	b28a      	uxth	r2, r1
 800cc0a:	805a      	strh	r2, [r3, #2]
  }
}
 800cc0c:	bf00      	nop
 800cc0e:	3710      	adds	r7, #16
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	200098a8 	.word	0x200098a8
 800cc18:	08016780 	.word	0x08016780
 800cc1c:	080167c8 	.word	0x080167c8
 800cc20:	080167e0 	.word	0x080167e0
 800cc24:	200098ac 	.word	0x200098ac
 800cc28:	08016808 	.word	0x08016808
 800cc2c:	08016824 	.word	0x08016824
 800cc30:	08016840 	.word	0x08016840
 800cc34:	200098b0 	.word	0x200098b0

0800cc38 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cc3e:	4b18      	ldr	r3, [pc, #96]	@ (800cca0 <mem_init+0x68>)
 800cc40:	3303      	adds	r3, #3
 800cc42:	f023 0303 	bic.w	r3, r3, #3
 800cc46:	461a      	mov	r2, r3
 800cc48:	4b16      	ldr	r3, [pc, #88]	@ (800cca4 <mem_init+0x6c>)
 800cc4a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cc4c:	4b15      	ldr	r3, [pc, #84]	@ (800cca4 <mem_init+0x6c>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cc58:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800cc66:	4b0f      	ldr	r3, [pc, #60]	@ (800cca4 <mem_init+0x6c>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 800cc6e:	4a0e      	ldr	r2, [pc, #56]	@ (800cca8 <mem_init+0x70>)
 800cc70:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cc72:	4b0d      	ldr	r3, [pc, #52]	@ (800cca8 <mem_init+0x70>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2201      	movs	r2, #1
 800cc78:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cc7a:	4b0b      	ldr	r3, [pc, #44]	@ (800cca8 <mem_init+0x70>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cc82:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cc84:	4b08      	ldr	r3, [pc, #32]	@ (800cca8 <mem_init+0x70>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800cc8c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cc8e:	4b05      	ldr	r3, [pc, #20]	@ (800cca4 <mem_init+0x6c>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a06      	ldr	r2, [pc, #24]	@ (800ccac <mem_init+0x74>)
 800cc94:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800cc96:	bf00      	nop
 800cc98:	370c      	adds	r7, #12
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bc80      	pop	{r7}
 800cc9e:	4770      	bx	lr
 800cca0:	20007094 	.word	0x20007094
 800cca4:	200098a8 	.word	0x200098a8
 800cca8:	200098ac 	.word	0x200098ac
 800ccac:	200098b0 	.word	0x200098b0

0800ccb0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d043      	beq.n	800cd46 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f003 0303 	and.w	r3, r3, #3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d006      	beq.n	800ccd6 <mem_free+0x26>
 800ccc8:	4b22      	ldr	r3, [pc, #136]	@ (800cd54 <mem_free+0xa4>)
 800ccca:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 800ccce:	4922      	ldr	r1, [pc, #136]	@ (800cd58 <mem_free+0xa8>)
 800ccd0:	4822      	ldr	r0, [pc, #136]	@ (800cd5c <mem_free+0xac>)
 800ccd2:	f008 f86d 	bl	8014db0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ccd6:	4b22      	ldr	r3, [pc, #136]	@ (800cd60 <mem_free+0xb0>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	687a      	ldr	r2, [r7, #4]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d304      	bcc.n	800ccea <mem_free+0x3a>
 800cce0:	4b20      	ldr	r3, [pc, #128]	@ (800cd64 <mem_free+0xb4>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d306      	bcc.n	800ccf8 <mem_free+0x48>
 800ccea:	4b1a      	ldr	r3, [pc, #104]	@ (800cd54 <mem_free+0xa4>)
 800ccec:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 800ccf0:	491d      	ldr	r1, [pc, #116]	@ (800cd68 <mem_free+0xb8>)
 800ccf2:	481a      	ldr	r0, [pc, #104]	@ (800cd5c <mem_free+0xac>)
 800ccf4:	f008 f85c 	bl	8014db0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ccf8:	4b19      	ldr	r3, [pc, #100]	@ (800cd60 <mem_free+0xb0>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d323      	bcc.n	800cd4a <mem_free+0x9a>
 800cd02:	4b18      	ldr	r3, [pc, #96]	@ (800cd64 <mem_free+0xb4>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d21e      	bcs.n	800cd4a <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3b08      	subs	r3, #8
 800cd10:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	791b      	ldrb	r3, [r3, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d106      	bne.n	800cd28 <mem_free+0x78>
 800cd1a:	4b0e      	ldr	r3, [pc, #56]	@ (800cd54 <mem_free+0xa4>)
 800cd1c:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 800cd20:	4912      	ldr	r1, [pc, #72]	@ (800cd6c <mem_free+0xbc>)
 800cd22:	480e      	ldr	r0, [pc, #56]	@ (800cd5c <mem_free+0xac>)
 800cd24:	f008 f844 	bl	8014db0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cd2e:	4b10      	ldr	r3, [pc, #64]	@ (800cd70 <mem_free+0xc0>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d202      	bcs.n	800cd3e <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cd38:	4a0d      	ldr	r2, [pc, #52]	@ (800cd70 <mem_free+0xc0>)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f7ff fee2 	bl	800cb08 <plug_holes>
 800cd44:	e002      	b.n	800cd4c <mem_free+0x9c>
    return;
 800cd46:	bf00      	nop
 800cd48:	e000      	b.n	800cd4c <mem_free+0x9c>
    return;
 800cd4a:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	08016780 	.word	0x08016780
 800cd58:	0801686c 	.word	0x0801686c
 800cd5c:	080167e0 	.word	0x080167e0
 800cd60:	200098a8 	.word	0x200098a8
 800cd64:	200098ac 	.word	0x200098ac
 800cd68:	08016890 	.word	0x08016890
 800cd6c:	080168a8 	.word	0x080168a8
 800cd70:	200098b0 	.word	0x200098b0

0800cd74 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b086      	sub	sp, #24
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800cd80:	887b      	ldrh	r3, [r7, #2]
 800cd82:	3303      	adds	r3, #3
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	f023 0303 	bic.w	r3, r3, #3
 800cd8a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800cd8c:	887b      	ldrh	r3, [r7, #2]
 800cd8e:	2b0b      	cmp	r3, #11
 800cd90:	d801      	bhi.n	800cd96 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cd92:	230c      	movs	r3, #12
 800cd94:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800cd96:	887b      	ldrh	r3, [r7, #2]
 800cd98:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cd9c:	d901      	bls.n	800cda2 <mem_trim+0x2e>
    return NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	e0b1      	b.n	800cf06 <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cda2:	4b5b      	ldr	r3, [pc, #364]	@ (800cf10 <mem_trim+0x19c>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d304      	bcc.n	800cdb6 <mem_trim+0x42>
 800cdac:	4b59      	ldr	r3, [pc, #356]	@ (800cf14 <mem_trim+0x1a0>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d306      	bcc.n	800cdc4 <mem_trim+0x50>
 800cdb6:	4b58      	ldr	r3, [pc, #352]	@ (800cf18 <mem_trim+0x1a4>)
 800cdb8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800cdbc:	4957      	ldr	r1, [pc, #348]	@ (800cf1c <mem_trim+0x1a8>)
 800cdbe:	4858      	ldr	r0, [pc, #352]	@ (800cf20 <mem_trim+0x1ac>)
 800cdc0:	f007 fff6 	bl	8014db0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cdc4:	4b52      	ldr	r3, [pc, #328]	@ (800cf10 <mem_trim+0x19c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	687a      	ldr	r2, [r7, #4]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d304      	bcc.n	800cdd8 <mem_trim+0x64>
 800cdce:	4b51      	ldr	r3, [pc, #324]	@ (800cf14 <mem_trim+0x1a0>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d301      	bcc.n	800cddc <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	e094      	b.n	800cf06 <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3b08      	subs	r3, #8
 800cde0:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800cde2:	4b4b      	ldr	r3, [pc, #300]	@ (800cf10 <mem_trim+0x19c>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	697a      	ldr	r2, [r7, #20]
 800cde8:	1ad3      	subs	r3, r2, r3
 800cdea:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	881a      	ldrh	r2, [r3, #0]
 800cdf0:	8a7b      	ldrh	r3, [r7, #18]
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	3b08      	subs	r3, #8
 800cdf8:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cdfa:	887a      	ldrh	r2, [r7, #2]
 800cdfc:	8a3b      	ldrh	r3, [r7, #16]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d906      	bls.n	800ce10 <mem_trim+0x9c>
 800ce02:	4b45      	ldr	r3, [pc, #276]	@ (800cf18 <mem_trim+0x1a4>)
 800ce04:	f240 2206 	movw	r2, #518	@ 0x206
 800ce08:	4946      	ldr	r1, [pc, #280]	@ (800cf24 <mem_trim+0x1b0>)
 800ce0a:	4845      	ldr	r0, [pc, #276]	@ (800cf20 <mem_trim+0x1ac>)
 800ce0c:	f007 ffd0 	bl	8014db0 <iprintf>
  if (newsize > size) {
 800ce10:	887a      	ldrh	r2, [r7, #2]
 800ce12:	8a3b      	ldrh	r3, [r7, #16]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d901      	bls.n	800ce1c <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	e074      	b.n	800cf06 <mem_trim+0x192>
  }
  if (newsize == size) {
 800ce1c:	887a      	ldrh	r2, [r7, #2]
 800ce1e:	8a3b      	ldrh	r3, [r7, #16]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d101      	bne.n	800ce28 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	e06e      	b.n	800cf06 <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800ce28:	4b39      	ldr	r3, [pc, #228]	@ (800cf10 <mem_trim+0x19c>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	697a      	ldr	r2, [r7, #20]
 800ce2e:	8812      	ldrh	r2, [r2, #0]
 800ce30:	4413      	add	r3, r2
 800ce32:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	791b      	ldrb	r3, [r3, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d131      	bne.n	800cea0 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ce42:	8a7a      	ldrh	r2, [r7, #18]
 800ce44:	887b      	ldrh	r3, [r7, #2]
 800ce46:	4413      	add	r3, r2
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 800ce4e:	4b36      	ldr	r3, [pc, #216]	@ (800cf28 <mem_trim+0x1b4>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	68fa      	ldr	r2, [r7, #12]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d105      	bne.n	800ce64 <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800ce58:	4b2d      	ldr	r3, [pc, #180]	@ (800cf10 <mem_trim+0x19c>)
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	897b      	ldrh	r3, [r7, #10]
 800ce5e:	4413      	add	r3, r2
 800ce60:	4a31      	ldr	r2, [pc, #196]	@ (800cf28 <mem_trim+0x1b4>)
 800ce62:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ce64:	4b2a      	ldr	r3, [pc, #168]	@ (800cf10 <mem_trim+0x19c>)
 800ce66:	681a      	ldr	r2, [r3, #0]
 800ce68:	897b      	ldrh	r3, [r7, #10]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	893a      	ldrh	r2, [r7, #8]
 800ce78:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	8a7a      	ldrh	r2, [r7, #18]
 800ce7e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	897a      	ldrh	r2, [r7, #10]
 800ce84:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	881b      	ldrh	r3, [r3, #0]
 800ce8a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ce8e:	d039      	beq.n	800cf04 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800ce90:	4b1f      	ldr	r3, [pc, #124]	@ (800cf10 <mem_trim+0x19c>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	8812      	ldrh	r2, [r2, #0]
 800ce98:	4413      	add	r3, r2
 800ce9a:	897a      	ldrh	r2, [r7, #10]
 800ce9c:	805a      	strh	r2, [r3, #2]
 800ce9e:	e031      	b.n	800cf04 <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cea0:	887b      	ldrh	r3, [r7, #2]
 800cea2:	f103 0214 	add.w	r2, r3, #20
 800cea6:	8a3b      	ldrh	r3, [r7, #16]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	d82b      	bhi.n	800cf04 <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800ceac:	8a7a      	ldrh	r2, [r7, #18]
 800ceae:	887b      	ldrh	r3, [r7, #2]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	3308      	adds	r3, #8
 800ceb6:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800ceb8:	4b15      	ldr	r3, [pc, #84]	@ (800cf10 <mem_trim+0x19c>)
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	897b      	ldrh	r3, [r7, #10]
 800cebe:	4413      	add	r3, r2
 800cec0:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 800cec2:	4b19      	ldr	r3, [pc, #100]	@ (800cf28 <mem_trim+0x1b4>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d202      	bcs.n	800ced2 <mem_trim+0x15e>
      lfree = mem2;
 800cecc:	4a16      	ldr	r2, [pc, #88]	@ (800cf28 <mem_trim+0x1b4>)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	881a      	ldrh	r2, [r3, #0]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	8a7a      	ldrh	r2, [r7, #18]
 800cee4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	897a      	ldrh	r2, [r7, #10]
 800ceea:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	881b      	ldrh	r3, [r3, #0]
 800cef0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cef4:	d006      	beq.n	800cf04 <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800cef6:	4b06      	ldr	r3, [pc, #24]	@ (800cf10 <mem_trim+0x19c>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	8812      	ldrh	r2, [r2, #0]
 800cefe:	4413      	add	r3, r2
 800cf00:	897a      	ldrh	r2, [r7, #10]
 800cf02:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800cf04:	687b      	ldr	r3, [r7, #4]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3718      	adds	r7, #24
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	200098a8 	.word	0x200098a8
 800cf14:	200098ac 	.word	0x200098ac
 800cf18:	08016780 	.word	0x08016780
 800cf1c:	080168bc 	.word	0x080168bc
 800cf20:	080167e0 	.word	0x080167e0
 800cf24:	080168d4 	.word	0x080168d4
 800cf28:	200098b0 	.word	0x200098b0

0800cf2c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	4603      	mov	r3, r0
 800cf34:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800cf36:	88fb      	ldrh	r3, [r7, #6]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <mem_malloc+0x14>
    return NULL;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	e0c7      	b.n	800d0d0 <mem_malloc+0x1a4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800cf40:	88fb      	ldrh	r3, [r7, #6]
 800cf42:	3303      	adds	r3, #3
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	f023 0303 	bic.w	r3, r3, #3
 800cf4a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800cf4c:	88fb      	ldrh	r3, [r7, #6]
 800cf4e:	2b0b      	cmp	r3, #11
 800cf50:	d801      	bhi.n	800cf56 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cf52:	230c      	movs	r3, #12
 800cf54:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800cf56:	88fb      	ldrh	r3, [r7, #6]
 800cf58:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cf5c:	d901      	bls.n	800cf62 <mem_malloc+0x36>
    return NULL;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	e0b6      	b.n	800d0d0 <mem_malloc+0x1a4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800cf62:	4b5d      	ldr	r3, [pc, #372]	@ (800d0d8 <mem_malloc+0x1ac>)
 800cf64:	681a      	ldr	r2, [r3, #0]
 800cf66:	4b5d      	ldr	r3, [pc, #372]	@ (800d0dc <mem_malloc+0x1b0>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	1ad3      	subs	r3, r2, r3
 800cf6c:	83fb      	strh	r3, [r7, #30]
 800cf6e:	e0a7      	b.n	800d0c0 <mem_malloc+0x194>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800cf70:	4b5a      	ldr	r3, [pc, #360]	@ (800d0dc <mem_malloc+0x1b0>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	8bfb      	ldrh	r3, [r7, #30]
 800cf76:	4413      	add	r3, r2
 800cf78:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	791b      	ldrb	r3, [r3, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f040 8098 	bne.w	800d0b4 <mem_malloc+0x188>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	881b      	ldrh	r3, [r3, #0]
 800cf88:	461a      	mov	r2, r3
 800cf8a:	8bfb      	ldrh	r3, [r7, #30]
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	f1a3 0208 	sub.w	r2, r3, #8
 800cf92:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800cf94:	429a      	cmp	r2, r3
 800cf96:	f0c0 808d 	bcc.w	800d0b4 <mem_malloc+0x188>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	8bfb      	ldrh	r3, [r7, #30]
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	f1a3 0208 	sub.w	r2, r3, #8
 800cfa8:	88fb      	ldrh	r3, [r7, #6]
 800cfaa:	3314      	adds	r3, #20
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d327      	bcc.n	800d000 <mem_malloc+0xd4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800cfb0:	8bfa      	ldrh	r2, [r7, #30]
 800cfb2:	88fb      	ldrh	r3, [r7, #6]
 800cfb4:	4413      	add	r3, r2
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	3308      	adds	r3, #8
 800cfba:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800cfbc:	4b47      	ldr	r3, [pc, #284]	@ (800d0dc <mem_malloc+0x1b0>)
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	8a7b      	ldrh	r3, [r7, #18]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	881a      	ldrh	r2, [r3, #0]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	8bfa      	ldrh	r2, [r7, #30]
 800cfd8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	8a7a      	ldrh	r2, [r7, #18]
 800cfde:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800cfee:	d00a      	beq.n	800d006 <mem_malloc+0xda>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800cff0:	4b3a      	ldr	r3, [pc, #232]	@ (800d0dc <mem_malloc+0x1b0>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	8812      	ldrh	r2, [r2, #0]
 800cff8:	4413      	add	r3, r2
 800cffa:	8a7a      	ldrh	r2, [r7, #18]
 800cffc:	805a      	strh	r2, [r3, #2]
 800cffe:	e002      	b.n	800d006 <mem_malloc+0xda>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	2201      	movs	r2, #1
 800d004:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d006:	4b34      	ldr	r3, [pc, #208]	@ (800d0d8 <mem_malloc+0x1ac>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	697a      	ldr	r2, [r7, #20]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d127      	bne.n	800d060 <mem_malloc+0x134>
          struct mem *cur = lfree;
 800d010:	4b31      	ldr	r3, [pc, #196]	@ (800d0d8 <mem_malloc+0x1ac>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d016:	e005      	b.n	800d024 <mem_malloc+0xf8>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800d018:	4b30      	ldr	r3, [pc, #192]	@ (800d0dc <mem_malloc+0x1b0>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	69ba      	ldr	r2, [r7, #24]
 800d01e:	8812      	ldrh	r2, [r2, #0]
 800d020:	4413      	add	r3, r2
 800d022:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	791b      	ldrb	r3, [r3, #4]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d004      	beq.n	800d036 <mem_malloc+0x10a>
 800d02c:	4b2c      	ldr	r3, [pc, #176]	@ (800d0e0 <mem_malloc+0x1b4>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	69ba      	ldr	r2, [r7, #24]
 800d032:	429a      	cmp	r2, r3
 800d034:	d1f0      	bne.n	800d018 <mem_malloc+0xec>
          }
          lfree = cur;
 800d036:	4a28      	ldr	r2, [pc, #160]	@ (800d0d8 <mem_malloc+0x1ac>)
 800d038:	69bb      	ldr	r3, [r7, #24]
 800d03a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d03c:	4b26      	ldr	r3, [pc, #152]	@ (800d0d8 <mem_malloc+0x1ac>)
 800d03e:	681a      	ldr	r2, [r3, #0]
 800d040:	4b27      	ldr	r3, [pc, #156]	@ (800d0e0 <mem_malloc+0x1b4>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	429a      	cmp	r2, r3
 800d046:	d00b      	beq.n	800d060 <mem_malloc+0x134>
 800d048:	4b23      	ldr	r3, [pc, #140]	@ (800d0d8 <mem_malloc+0x1ac>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	791b      	ldrb	r3, [r3, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d006      	beq.n	800d060 <mem_malloc+0x134>
 800d052:	4b24      	ldr	r3, [pc, #144]	@ (800d0e4 <mem_malloc+0x1b8>)
 800d054:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800d058:	4923      	ldr	r1, [pc, #140]	@ (800d0e8 <mem_malloc+0x1bc>)
 800d05a:	4824      	ldr	r0, [pc, #144]	@ (800d0ec <mem_malloc+0x1c0>)
 800d05c:	f007 fea8 	bl	8014db0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d060:	88fa      	ldrh	r2, [r7, #6]
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	4413      	add	r3, r2
 800d066:	3308      	adds	r3, #8
 800d068:	4a1d      	ldr	r2, [pc, #116]	@ (800d0e0 <mem_malloc+0x1b4>)
 800d06a:	6812      	ldr	r2, [r2, #0]
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d906      	bls.n	800d07e <mem_malloc+0x152>
 800d070:	4b1c      	ldr	r3, [pc, #112]	@ (800d0e4 <mem_malloc+0x1b8>)
 800d072:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800d076:	491e      	ldr	r1, [pc, #120]	@ (800d0f0 <mem_malloc+0x1c4>)
 800d078:	481c      	ldr	r0, [pc, #112]	@ (800d0ec <mem_malloc+0x1c0>)
 800d07a:	f007 fe99 	bl	8014db0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	f003 0303 	and.w	r3, r3, #3
 800d084:	2b00      	cmp	r3, #0
 800d086:	d006      	beq.n	800d096 <mem_malloc+0x16a>
 800d088:	4b16      	ldr	r3, [pc, #88]	@ (800d0e4 <mem_malloc+0x1b8>)
 800d08a:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800d08e:	4919      	ldr	r1, [pc, #100]	@ (800d0f4 <mem_malloc+0x1c8>)
 800d090:	4816      	ldr	r0, [pc, #88]	@ (800d0ec <mem_malloc+0x1c0>)
 800d092:	f007 fe8d 	bl	8014db0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	f003 0303 	and.w	r3, r3, #3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d006      	beq.n	800d0ae <mem_malloc+0x182>
 800d0a0:	4b10      	ldr	r3, [pc, #64]	@ (800d0e4 <mem_malloc+0x1b8>)
 800d0a2:	f240 22d7 	movw	r2, #727	@ 0x2d7
 800d0a6:	4914      	ldr	r1, [pc, #80]	@ (800d0f8 <mem_malloc+0x1cc>)
 800d0a8:	4810      	ldr	r0, [pc, #64]	@ (800d0ec <mem_malloc+0x1c0>)
 800d0aa:	f007 fe81 	bl	8014db0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	3308      	adds	r3, #8
 800d0b2:	e00d      	b.n	800d0d0 <mem_malloc+0x1a4>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800d0b4:	4b09      	ldr	r3, [pc, #36]	@ (800d0dc <mem_malloc+0x1b0>)
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	8bfb      	ldrh	r3, [r7, #30]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	881b      	ldrh	r3, [r3, #0]
 800d0be:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800d0c0:	8bfa      	ldrh	r2, [r7, #30]
 800d0c2:	88fb      	ldrh	r3, [r7, #6]
 800d0c4:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	f4ff af51 	bcc.w	800cf70 <mem_malloc+0x44>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3720      	adds	r7, #32
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	200098b0 	.word	0x200098b0
 800d0dc:	200098a8 	.word	0x200098a8
 800d0e0:	200098ac 	.word	0x200098ac
 800d0e4:	08016780 	.word	0x08016780
 800d0e8:	080168f4 	.word	0x080168f4
 800d0ec:	080167e0 	.word	0x080167e0
 800d0f0:	08016910 	.word	0x08016910
 800d0f4:	08016940 	.word	0x08016940
 800d0f8:	08016970 	.word	0x08016970

0800d0fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	3303      	adds	r3, #3
 800d112:	f023 0303 	bic.w	r3, r3, #3
 800d116:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d118:	2300      	movs	r3, #0
 800d11a:	60fb      	str	r3, [r7, #12]
 800d11c:	e011      	b.n	800d142 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	461a      	mov	r2, r3
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	4413      	add	r3, r2
 800d13a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	3301      	adds	r3, #1
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	885b      	ldrh	r3, [r3, #2]
 800d146:	461a      	mov	r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	4293      	cmp	r3, r2
 800d14c:	dbe7      	blt.n	800d11e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d14e:	bf00      	nop
 800d150:	bf00      	nop
 800d152:	3714      	adds	r7, #20
 800d154:	46bd      	mov	sp, r7
 800d156:	bc80      	pop	{r7}
 800d158:	4770      	bx	lr
	...

0800d15c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d162:	2300      	movs	r3, #0
 800d164:	80fb      	strh	r3, [r7, #6]
 800d166:	e009      	b.n	800d17c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d168:	88fb      	ldrh	r3, [r7, #6]
 800d16a:	4a08      	ldr	r2, [pc, #32]	@ (800d18c <memp_init+0x30>)
 800d16c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d170:	4618      	mov	r0, r3
 800d172:	f7ff ffc3 	bl	800d0fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d176:	88fb      	ldrh	r3, [r7, #6]
 800d178:	3301      	adds	r3, #1
 800d17a:	80fb      	strh	r3, [r7, #6]
 800d17c:	88fb      	ldrh	r3, [r7, #6]
 800d17e:	2b08      	cmp	r3, #8
 800d180:	d9f2      	bls.n	800d168 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d182:	bf00      	nop
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}
 800d18c:	08017ed8 	.word	0x08017ed8

0800d190 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d012      	beq.n	800d1cc <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	689b      	ldr	r3, [r3, #8]
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	6812      	ldr	r2, [r2, #0]
 800d1ae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f003 0303 	and.w	r3, r3, #3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d006      	beq.n	800d1c8 <do_memp_malloc_pool+0x38>
 800d1ba:	4b07      	ldr	r3, [pc, #28]	@ (800d1d8 <do_memp_malloc_pool+0x48>)
 800d1bc:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800d1c0:	4906      	ldr	r1, [pc, #24]	@ (800d1dc <do_memp_malloc_pool+0x4c>)
 800d1c2:	4807      	ldr	r0, [pc, #28]	@ (800d1e0 <do_memp_malloc_pool+0x50>)
 800d1c4:	f007 fdf4 	bl	8014db0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	e000      	b.n	800d1ce <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
 800d1d6:	bf00      	nop
 800d1d8:	08016994 	.word	0x08016994
 800d1dc:	080169dc 	.word	0x080169dc
 800d1e0:	08016a00 	.word	0x08016a00

0800d1e4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d1ee:	79fb      	ldrb	r3, [r7, #7]
 800d1f0:	2b08      	cmp	r3, #8
 800d1f2:	d908      	bls.n	800d206 <memp_malloc+0x22>
 800d1f4:	4b0a      	ldr	r3, [pc, #40]	@ (800d220 <memp_malloc+0x3c>)
 800d1f6:	f240 1287 	movw	r2, #391	@ 0x187
 800d1fa:	490a      	ldr	r1, [pc, #40]	@ (800d224 <memp_malloc+0x40>)
 800d1fc:	480a      	ldr	r0, [pc, #40]	@ (800d228 <memp_malloc+0x44>)
 800d1fe:	f007 fdd7 	bl	8014db0 <iprintf>
 800d202:	2300      	movs	r3, #0
 800d204:	e008      	b.n	800d218 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d206:	79fb      	ldrb	r3, [r7, #7]
 800d208:	4a08      	ldr	r2, [pc, #32]	@ (800d22c <memp_malloc+0x48>)
 800d20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d20e:	4618      	mov	r0, r3
 800d210:	f7ff ffbe 	bl	800d190 <do_memp_malloc_pool>
 800d214:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d216:	68fb      	ldr	r3, [r7, #12]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	08016994 	.word	0x08016994
 800d224:	08016a3c 	.word	0x08016a3c
 800d228:	08016a00 	.word	0x08016a00
 800d22c:	08017ed8 	.word	0x08017ed8

0800d230 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	f003 0303 	and.w	r3, r3, #3
 800d240:	2b00      	cmp	r3, #0
 800d242:	d006      	beq.n	800d252 <do_memp_free_pool+0x22>
 800d244:	4b0a      	ldr	r3, [pc, #40]	@ (800d270 <do_memp_free_pool+0x40>)
 800d246:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d24a:	490a      	ldr	r1, [pc, #40]	@ (800d274 <do_memp_free_pool+0x44>)
 800d24c:	480a      	ldr	r0, [pc, #40]	@ (800d278 <do_memp_free_pool+0x48>)
 800d24e:	f007 fdaf 	bl	8014db0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d268:	bf00      	nop
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	08016994 	.word	0x08016994
 800d274:	08016a5c 	.word	0x08016a5c
 800d278:	08016a00 	.word	0x08016a00

0800d27c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	4603      	mov	r3, r0
 800d284:	6039      	str	r1, [r7, #0]
 800d286:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d288:	79fb      	ldrb	r3, [r7, #7]
 800d28a:	2b08      	cmp	r3, #8
 800d28c:	d907      	bls.n	800d29e <memp_free+0x22>
 800d28e:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c0 <memp_free+0x44>)
 800d290:	f240 12db 	movw	r2, #475	@ 0x1db
 800d294:	490b      	ldr	r1, [pc, #44]	@ (800d2c4 <memp_free+0x48>)
 800d296:	480c      	ldr	r0, [pc, #48]	@ (800d2c8 <memp_free+0x4c>)
 800d298:	f007 fd8a 	bl	8014db0 <iprintf>
 800d29c:	e00c      	b.n	800d2b8 <memp_free+0x3c>

  if (mem == NULL) {
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d008      	beq.n	800d2b6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d2a4:	79fb      	ldrb	r3, [r7, #7]
 800d2a6:	4a09      	ldr	r2, [pc, #36]	@ (800d2cc <memp_free+0x50>)
 800d2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	f7ff ffbe 	bl	800d230 <do_memp_free_pool>
 800d2b4:	e000      	b.n	800d2b8 <memp_free+0x3c>
    return;
 800d2b6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d2b8:	3708      	adds	r7, #8
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	08016994 	.word	0x08016994
 800d2c4:	08016a7c 	.word	0x08016a7c
 800d2c8:	08016a00 	.word	0x08016a00
 800d2cc:	08017ed8 	.word	0x08017ed8

0800d2d0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d2d4:	bf00      	nop
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bc80      	pop	{r7}
 800d2da:	4770      	bx	lr

0800d2dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	60b9      	str	r1, [r7, #8]
 800d2e6:	607a      	str	r2, [r7, #4]
 800d2e8:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800d2ea:	69fb      	ldr	r3, [r7, #28]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d105      	bne.n	800d2fc <netif_add+0x20>
 800d2f0:	4b21      	ldr	r3, [pc, #132]	@ (800d378 <netif_add+0x9c>)
 800d2f2:	22fb      	movs	r2, #251	@ 0xfb
 800d2f4:	4921      	ldr	r1, [pc, #132]	@ (800d37c <netif_add+0xa0>)
 800d2f6:	4822      	ldr	r0, [pc, #136]	@ (800d380 <netif_add+0xa4>)
 800d2f8:	f007 fd5a 	bl	8014db0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2200      	movs	r2, #0
 800d306:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2200      	movs	r2, #0
 800d30c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2200      	movs	r2, #0
 800d312:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2203      	movs	r2, #3
 800d31a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2200      	movs	r2, #0
 800d322:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	69ba      	ldr	r2, [r7, #24]
 800d328:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800d32a:	4b16      	ldr	r3, [pc, #88]	@ (800d384 <netif_add+0xa8>)
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	1c5a      	adds	r2, r3, #1
 800d330:	b2d1      	uxtb	r1, r2
 800d332:	4a14      	ldr	r2, [pc, #80]	@ (800d384 <netif_add+0xa8>)
 800d334:	7011      	strb	r1, [r2, #0]
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
  netif->input = input;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6a3a      	ldr	r2, [r7, #32]
 800d340:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	68b9      	ldr	r1, [r7, #8]
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 f81f 	bl	800d38c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	4798      	blx	r3
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d001      	beq.n	800d35e <netif_add+0x82>
    return NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	e007      	b.n	800d36e <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d35e:	4b0a      	ldr	r3, [pc, #40]	@ (800d388 <netif_add+0xac>)
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d366:	4a08      	ldr	r2, [pc, #32]	@ (800d388 <netif_add+0xac>)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800d36c:	68fb      	ldr	r3, [r7, #12]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	08016a98 	.word	0x08016a98
 800d37c:	08016ae0 	.word	0x08016ae0
 800d380:	08016af8 	.word	0x08016af8
 800d384:	2000c794 	.word	0x2000c794
 800d388:	2000c78c 	.word	0x2000c78c

0800d38c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
 800d398:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d003      	beq.n	800d3a8 <netif_set_addr+0x1c>
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d10c      	bne.n	800d3c2 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	f000 f81a 	bl	800d3e4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800d3b0:	6879      	ldr	r1, [r7, #4]
 800d3b2:	68f8      	ldr	r0, [r7, #12]
 800d3b4:	f000 f861 	bl	800d47a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800d3b8:	6839      	ldr	r1, [r7, #0]
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f000 f84a 	bl	800d454 <netif_set_gw>
 800d3c0:	e00c      	b.n	800d3dc <netif_set_addr+0x50>
  } else {
    netif_set_netmask(netif, netmask);
 800d3c2:	6879      	ldr	r1, [r7, #4]
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 f858 	bl	800d47a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800d3ca:	6839      	ldr	r1, [r7, #0]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f000 f841 	bl	800d454 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f000 f805 	bl	800d3e4 <netif_set_ipaddr>
  }
}
 800d3da:	bf00      	nop
 800d3dc:	bf00      	nop
 800d3de:	3710      	adds	r7, #16
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d003      	beq.n	800d3fc <netif_set_ipaddr+0x18>
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	e002      	b.n	800d402 <netif_set_ipaddr+0x1e>
 800d3fc:	4b14      	ldr	r3, [pc, #80]	@ (800d450 <netif_set_ipaddr+0x6c>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3304      	adds	r3, #4
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d01c      	beq.n	800d448 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	3304      	adds	r3, #4
 800d412:	f107 020c 	add.w	r2, r7, #12
 800d416:	4611      	mov	r1, r2
 800d418:	4618      	mov	r0, r3
 800d41a:	f002 f8eb 	bl	800f5f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	3304      	adds	r3, #4
 800d422:	f107 020c 	add.w	r2, r7, #12
 800d426:	4611      	mov	r1, r2
 800d428:	4618      	mov	r0, r3
 800d42a:	f005 fee7 	bl	80131fc <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d002      	beq.n	800d43a <netif_set_ipaddr+0x56>
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	e000      	b.n	800d43c <netif_set_ipaddr+0x58>
 800d43a:	2300      	movs	r3, #0
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d440:	2101      	movs	r1, #1
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f000 f85d 	bl	800d502 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800d448:	bf00      	nop
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}
 800d450:	08017e68 	.word	0x08017e68

0800d454 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800d454:	b480      	push	{r7}
 800d456:	b083      	sub	sp, #12
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d002      	beq.n	800d46a <netif_set_gw+0x16>
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	e000      	b.n	800d46c <netif_set_gw+0x18>
 800d46a:	2300      	movs	r3, #0
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	bc80      	pop	{r7}
 800d478:	4770      	bx	lr

0800d47a <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800d47a:	b480      	push	{r7}
 800d47c:	b083      	sub	sp, #12
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
 800d482:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d002      	beq.n	800d490 <netif_set_netmask+0x16>
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	e000      	b.n	800d492 <netif_set_netmask+0x18>
 800d490:	2300      	movs	r3, #0
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800d496:	bf00      	nop
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bc80      	pop	{r7}
 800d49e:	4770      	bx	lr

0800d4a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d4a8:	4a03      	ldr	r2, [pc, #12]	@ (800d4b8 <netif_set_default+0x18>)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d4ae:	bf00      	nop
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bc80      	pop	{r7}
 800d4b6:	4770      	bx	lr
 800d4b8:	2000c790 	.word	0x2000c790

0800d4bc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d113      	bne.n	800d4fa <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d4d8:	f043 0301 	orr.w	r3, r3, #1
 800d4dc:	b2da      	uxtb	r2, r3
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d4ea:	f003 0304 	and.w	r3, r3, #4
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d003      	beq.n	800d4fa <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800d4f2:	2103      	movs	r1, #3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f804 	bl	800d502 <netif_issue_reports>
    }
  }
}
 800d4fa:	bf00      	nop
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b082      	sub	sp, #8
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	460b      	mov	r3, r1
 800d50c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d50e:	78fb      	ldrb	r3, [r7, #3]
 800d510:	f003 0301 	and.w	r3, r3, #1
 800d514:	2b00      	cmp	r3, #0
 800d516:	d011      	beq.n	800d53c <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	3304      	adds	r3, #4
 800d51c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00c      	beq.n	800d53c <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d528:	f003 0308 	and.w	r3, r3, #8
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d005      	beq.n	800d53c <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3304      	adds	r3, #4
 800d534:	4619      	mov	r1, r3
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f7fd fe8c 	bl	800b254 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800d53c:	bf00      	nop
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  if (netif) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d002      	beq.n	800d55a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	61da      	str	r2, [r3, #28]
  }
}
 800d55a:	bf00      	nop
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	bc80      	pop	{r7}
 800d562:	4770      	bx	lr

0800d564 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d56a:	4b0e      	ldr	r3, [pc, #56]	@ (800d5a4 <pbuf_free_ooseq+0x40>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d570:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a8 <pbuf_free_ooseq+0x44>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	607b      	str	r3, [r7, #4]
 800d576:	e00f      	b.n	800d598 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d008      	beq.n	800d592 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d584:	4618      	mov	r0, r3
 800d586:	f001 fd72 	bl	800f06e <tcp_segs_free>
      pcb->ooseq = NULL;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	671a      	str	r2, [r3, #112]	@ 0x70
      return;
 800d590:	e005      	b.n	800d59e <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	607b      	str	r3, [r7, #4]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1ec      	bne.n	800d578 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	2000c795 	.word	0x2000c795
 800d5a8:	2000c7a4 	.word	0x2000c7a4

0800d5ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d5b0:	4b03      	ldr	r3, [pc, #12]	@ (800d5c0 <pbuf_pool_is_empty+0x14>)
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d5b6:	bf00      	nop
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bc80      	pop	{r7}
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop
 800d5c0:	2000c795 	.word	0x2000c795

0800d5c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b088      	sub	sp, #32
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	71fb      	strb	r3, [r7, #7]
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	80bb      	strh	r3, [r7, #4]
 800d5d2:	4613      	mov	r3, r2
 800d5d4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800d5d6:	79fb      	ldrb	r3, [r7, #7]
 800d5d8:	2b04      	cmp	r3, #4
 800d5da:	d81c      	bhi.n	800d616 <pbuf_alloc+0x52>
 800d5dc:	a201      	add	r2, pc, #4	@ (adr r2, 800d5e4 <pbuf_alloc+0x20>)
 800d5de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5e2:	bf00      	nop
 800d5e4:	0800d5f9 	.word	0x0800d5f9
 800d5e8:	0800d5ff 	.word	0x0800d5ff
 800d5ec:	0800d605 	.word	0x0800d605
 800d5f0:	0800d60b 	.word	0x0800d60b
 800d5f4:	0800d611 	.word	0x0800d611
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d5f8:	2336      	movs	r3, #54	@ 0x36
 800d5fa:	82fb      	strh	r3, [r7, #22]
    break;
 800d5fc:	e014      	b.n	800d628 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d5fe:	2322      	movs	r3, #34	@ 0x22
 800d600:	82fb      	strh	r3, [r7, #22]
    break;
 800d602:	e011      	b.n	800d628 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d604:	230e      	movs	r3, #14
 800d606:	82fb      	strh	r3, [r7, #22]
    break;
 800d608:	e00e      	b.n	800d628 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d60a:	2300      	movs	r3, #0
 800d60c:	82fb      	strh	r3, [r7, #22]
    break;
 800d60e:	e00b      	b.n	800d628 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800d610:	2300      	movs	r3, #0
 800d612:	82fb      	strh	r3, [r7, #22]
    break;
 800d614:	e008      	b.n	800d628 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800d616:	4ba1      	ldr	r3, [pc, #644]	@ (800d89c <pbuf_alloc+0x2d8>)
 800d618:	f44f 728b 	mov.w	r2, #278	@ 0x116
 800d61c:	49a0      	ldr	r1, [pc, #640]	@ (800d8a0 <pbuf_alloc+0x2dc>)
 800d61e:	48a1      	ldr	r0, [pc, #644]	@ (800d8a4 <pbuf_alloc+0x2e0>)
 800d620:	f007 fbc6 	bl	8014db0 <iprintf>
    return NULL;
 800d624:	2300      	movs	r3, #0
 800d626:	e15c      	b.n	800d8e2 <pbuf_alloc+0x31e>
  }

  switch (type) {
 800d628:	79bb      	ldrb	r3, [r7, #6]
 800d62a:	2b03      	cmp	r3, #3
 800d62c:	d00d      	beq.n	800d64a <pbuf_alloc+0x86>
 800d62e:	2b03      	cmp	r3, #3
 800d630:	f300 8146 	bgt.w	800d8c0 <pbuf_alloc+0x2fc>
 800d634:	2b00      	cmp	r3, #0
 800d636:	f000 80d0 	beq.w	800d7da <pbuf_alloc+0x216>
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f2c0 8140 	blt.w	800d8c0 <pbuf_alloc+0x2fc>
 800d640:	3b01      	subs	r3, #1
 800d642:	2b01      	cmp	r3, #1
 800d644:	f200 813c 	bhi.w	800d8c0 <pbuf_alloc+0x2fc>
 800d648:	e10d      	b.n	800d866 <pbuf_alloc+0x2a2>
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d64a:	2008      	movs	r0, #8
 800d64c:	f7ff fdca 	bl	800d1e4 <memp_malloc>
 800d650:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d103      	bne.n	800d660 <pbuf_alloc+0x9c>
      PBUF_POOL_IS_EMPTY();
 800d658:	f7ff ffa8 	bl	800d5ac <pbuf_pool_is_empty>
      return NULL;
 800d65c:	2300      	movs	r3, #0
 800d65e:	e140      	b.n	800d8e2 <pbuf_alloc+0x31e>
    }
    p->type = type;
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	79ba      	ldrb	r2, [r7, #6]
 800d664:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	2200      	movs	r2, #0
 800d66a:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800d66c:	8afb      	ldrh	r3, [r7, #22]
 800d66e:	3310      	adds	r3, #16
 800d670:	69fa      	ldr	r2, [r7, #28]
 800d672:	4413      	add	r3, r2
 800d674:	3303      	adds	r3, #3
 800d676:	f023 0303 	bic.w	r3, r3, #3
 800d67a:	461a      	mov	r2, r3
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	685b      	ldr	r3, [r3, #4]
 800d684:	f003 0303 	and.w	r3, r3, #3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d006      	beq.n	800d69a <pbuf_alloc+0xd6>
 800d68c:	4b83      	ldr	r3, [pc, #524]	@ (800d89c <pbuf_alloc+0x2d8>)
 800d68e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d692:	4985      	ldr	r1, [pc, #532]	@ (800d8a8 <pbuf_alloc+0x2e4>)
 800d694:	4883      	ldr	r0, [pc, #524]	@ (800d8a4 <pbuf_alloc+0x2e0>)
 800d696:	f007 fb8b 	bl	8014db0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	88ba      	ldrh	r2, [r7, #4]
 800d69e:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800d6a0:	8afb      	ldrh	r3, [r7, #22]
 800d6a2:	3303      	adds	r3, #3
 800d6a4:	f023 0303 	bic.w	r3, r3, #3
 800d6a8:	f5c3 7214 	rsb	r2, r3, #592	@ 0x250
 800d6ac:	88bb      	ldrh	r3, [r7, #4]
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	bf28      	it	cs
 800d6b2:	4613      	movcs	r3, r2
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	69fa      	ldr	r2, [r7, #28]
 800d6c0:	8952      	ldrh	r2, [r2, #10]
 800d6c2:	441a      	add	r2, r3
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d906      	bls.n	800d6dc <pbuf_alloc+0x118>
 800d6ce:	4b73      	ldr	r3, [pc, #460]	@ (800d89c <pbuf_alloc+0x2d8>)
 800d6d0:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800d6d4:	4975      	ldr	r1, [pc, #468]	@ (800d8ac <pbuf_alloc+0x2e8>)
 800d6d6:	4873      	ldr	r0, [pc, #460]	@ (800d8a4 <pbuf_alloc+0x2e0>)
 800d6d8:	f007 fb6a 	bl	8014db0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d6dc:	8afb      	ldrh	r3, [r7, #22]
 800d6de:	3303      	adds	r3, #3
 800d6e0:	f023 0303 	bic.w	r3, r3, #3
 800d6e4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d6e8:	d106      	bne.n	800d6f8 <pbuf_alloc+0x134>
 800d6ea:	4b6c      	ldr	r3, [pc, #432]	@ (800d89c <pbuf_alloc+0x2d8>)
 800d6ec:	f240 1231 	movw	r2, #305	@ 0x131
 800d6f0:	496f      	ldr	r1, [pc, #444]	@ (800d8b0 <pbuf_alloc+0x2ec>)
 800d6f2:	486c      	ldr	r0, [pc, #432]	@ (800d8a4 <pbuf_alloc+0x2e0>)
 800d6f4:	f007 fb5c 	bl	8014db0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800d702:	88bb      	ldrh	r3, [r7, #4]
 800d704:	69fa      	ldr	r2, [r7, #28]
 800d706:	8952      	ldrh	r2, [r2, #10]
 800d708:	1a9b      	subs	r3, r3, r2
 800d70a:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800d70c:	e061      	b.n	800d7d2 <pbuf_alloc+0x20e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d70e:	2008      	movs	r0, #8
 800d710:	f7ff fd68 	bl	800d1e4 <memp_malloc>
 800d714:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <pbuf_alloc+0x166>
        PBUF_POOL_IS_EMPTY();
 800d71c:	f7ff ff46 	bl	800d5ac <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800d720:	69f8      	ldr	r0, [r7, #28]
 800d722:	f000 fac7 	bl	800dcb4 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800d726:	2300      	movs	r3, #0
 800d728:	e0db      	b.n	800d8e2 <pbuf_alloc+0x31e>
      }
      q->type = type;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	79ba      	ldrb	r2, [r7, #6]
 800d72e:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2200      	movs	r2, #0
 800d734:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2200      	movs	r2, #0
 800d73a:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	68fa      	ldr	r2, [r7, #12]
 800d740:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d748:	4293      	cmp	r3, r2
 800d74a:	dd06      	ble.n	800d75a <pbuf_alloc+0x196>
 800d74c:	4b53      	ldr	r3, [pc, #332]	@ (800d89c <pbuf_alloc+0x2d8>)
 800d74e:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 800d752:	4958      	ldr	r1, [pc, #352]	@ (800d8b4 <pbuf_alloc+0x2f0>)
 800d754:	4853      	ldr	r0, [pc, #332]	@ (800d8a4 <pbuf_alloc+0x2e0>)
 800d756:	f007 fb2b 	bl	8014db0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	b29b      	uxth	r3, r3
 800d766:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d76a:	bf28      	it	cs
 800d76c:	f44f 7314 	movcs.w	r3, #592	@ 0x250
 800d770:	b29a      	uxth	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	f103 0210 	add.w	r2, r3, #16
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	685b      	ldr	r3, [r3, #4]
 800d784:	f003 0303 	and.w	r3, r3, #3
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d006      	beq.n	800d79a <pbuf_alloc+0x1d6>
 800d78c:	4b43      	ldr	r3, [pc, #268]	@ (800d89c <pbuf_alloc+0x2d8>)
 800d78e:	f240 1251 	movw	r2, #337	@ 0x151
 800d792:	4949      	ldr	r1, [pc, #292]	@ (800d8b8 <pbuf_alloc+0x2f4>)
 800d794:	4843      	ldr	r0, [pc, #268]	@ (800d8a4 <pbuf_alloc+0x2e0>)
 800d796:	f007 fb0b 	bl	8014db0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	69fa      	ldr	r2, [r7, #28]
 800d7a0:	8952      	ldrh	r2, [r2, #10]
 800d7a2:	441a      	add	r2, r3
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d906      	bls.n	800d7bc <pbuf_alloc+0x1f8>
 800d7ae:	4b3b      	ldr	r3, [pc, #236]	@ (800d89c <pbuf_alloc+0x2d8>)
 800d7b0:	f240 1253 	movw	r2, #339	@ 0x153
 800d7b4:	493d      	ldr	r1, [pc, #244]	@ (800d8ac <pbuf_alloc+0x2e8>)
 800d7b6:	483b      	ldr	r0, [pc, #236]	@ (800d8a4 <pbuf_alloc+0x2e0>)
 800d7b8:	f007 fafa 	bl	8014db0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	895b      	ldrh	r3, [r3, #10]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	1a9b      	subs	r3, r3, r2
 800d7cc:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	dc9a      	bgt.n	800d70e <pbuf_alloc+0x14a>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800d7d8:	e07c      	b.n	800d8d4 <pbuf_alloc+0x310>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800d7da:	8afb      	ldrh	r3, [r7, #22]
 800d7dc:	3313      	adds	r3, #19
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	f023 0303 	bic.w	r3, r3, #3
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	88bb      	ldrh	r3, [r7, #4]
 800d7e8:	3303      	adds	r3, #3
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	f023 0303 	bic.w	r3, r3, #3
 800d7f0:	b29b      	uxth	r3, r3
 800d7f2:	4413      	add	r3, r2
 800d7f4:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800d7f6:	897a      	ldrh	r2, [r7, #10]
 800d7f8:	88bb      	ldrh	r3, [r7, #4]
 800d7fa:	3303      	adds	r3, #3
 800d7fc:	f023 0303 	bic.w	r3, r3, #3
 800d800:	429a      	cmp	r2, r3
 800d802:	d201      	bcs.n	800d808 <pbuf_alloc+0x244>
        return NULL;
 800d804:	2300      	movs	r3, #0
 800d806:	e06c      	b.n	800d8e2 <pbuf_alloc+0x31e>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800d808:	897b      	ldrh	r3, [r7, #10]
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7ff fb8e 	bl	800cf2c <mem_malloc>
 800d810:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d101      	bne.n	800d81c <pbuf_alloc+0x258>
      return NULL;
 800d818:	2300      	movs	r3, #0
 800d81a:	e062      	b.n	800d8e2 <pbuf_alloc+0x31e>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800d81c:	8afb      	ldrh	r3, [r7, #22]
 800d81e:	3310      	adds	r3, #16
 800d820:	69fa      	ldr	r2, [r7, #28]
 800d822:	4413      	add	r3, r2
 800d824:	3303      	adds	r3, #3
 800d826:	f023 0303 	bic.w	r3, r3, #3
 800d82a:	461a      	mov	r2, r3
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	88ba      	ldrh	r2, [r7, #4]
 800d834:	811a      	strh	r2, [r3, #8]
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	891a      	ldrh	r2, [r3, #8]
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	2200      	movs	r2, #0
 800d842:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d844:	69fb      	ldr	r3, [r7, #28]
 800d846:	79ba      	ldrb	r2, [r7, #6]
 800d848:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	f003 0303 	and.w	r3, r3, #3
 800d852:	2b00      	cmp	r3, #0
 800d854:	d03d      	beq.n	800d8d2 <pbuf_alloc+0x30e>
 800d856:	4b11      	ldr	r3, [pc, #68]	@ (800d89c <pbuf_alloc+0x2d8>)
 800d858:	f44f 72bb 	mov.w	r2, #374	@ 0x176
 800d85c:	4917      	ldr	r1, [pc, #92]	@ (800d8bc <pbuf_alloc+0x2f8>)
 800d85e:	4811      	ldr	r0, [pc, #68]	@ (800d8a4 <pbuf_alloc+0x2e0>)
 800d860:	f007 faa6 	bl	8014db0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800d864:	e035      	b.n	800d8d2 <pbuf_alloc+0x30e>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d866:	2007      	movs	r0, #7
 800d868:	f7ff fcbc 	bl	800d1e4 <memp_malloc>
 800d86c:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d101      	bne.n	800d878 <pbuf_alloc+0x2b4>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800d874:	2300      	movs	r3, #0
 800d876:	e034      	b.n	800d8e2 <pbuf_alloc+0x31e>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	2200      	movs	r2, #0
 800d87c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	88ba      	ldrh	r2, [r7, #4]
 800d882:	811a      	strh	r2, [r3, #8]
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	891a      	ldrh	r2, [r3, #8]
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	2200      	movs	r2, #0
 800d890:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	79ba      	ldrb	r2, [r7, #6]
 800d896:	731a      	strb	r2, [r3, #12]
    break;
 800d898:	e01c      	b.n	800d8d4 <pbuf_alloc+0x310>
 800d89a:	bf00      	nop
 800d89c:	08016b20 	.word	0x08016b20
 800d8a0:	08016b68 	.word	0x08016b68
 800d8a4:	08016b84 	.word	0x08016b84
 800d8a8:	08016bac 	.word	0x08016bac
 800d8ac:	08016bdc 	.word	0x08016bdc
 800d8b0:	08016c10 	.word	0x08016c10
 800d8b4:	08016c44 	.word	0x08016c44
 800d8b8:	08016c58 	.word	0x08016c58
 800d8bc:	08016c88 	.word	0x08016c88
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d8c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d8ec <pbuf_alloc+0x328>)
 800d8c2:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 800d8c6:	490a      	ldr	r1, [pc, #40]	@ (800d8f0 <pbuf_alloc+0x32c>)
 800d8c8:	480a      	ldr	r0, [pc, #40]	@ (800d8f4 <pbuf_alloc+0x330>)
 800d8ca:	f007 fa71 	bl	8014db0 <iprintf>
    return NULL;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	e007      	b.n	800d8e2 <pbuf_alloc+0x31e>
    break;
 800d8d2:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d8e0:	69fb      	ldr	r3, [r7, #28]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3720      	adds	r7, #32
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	08016b20 	.word	0x08016b20
 800d8f0:	08016cb4 	.word	0x08016cb4
 800d8f4:	08016b84 	.word	0x08016b84

0800d8f8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b084      	sub	sp, #16
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	603b      	str	r3, [r7, #0]
 800d900:	4603      	mov	r3, r0
 800d902:	71fb      	strb	r3, [r7, #7]
 800d904:	460b      	mov	r3, r1
 800d906:	80bb      	strh	r3, [r7, #4]
 800d908:	4613      	mov	r3, r2
 800d90a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800d90c:	79fb      	ldrb	r3, [r7, #7]
 800d90e:	2b04      	cmp	r3, #4
 800d910:	d81b      	bhi.n	800d94a <pbuf_alloced_custom+0x52>
 800d912:	a201      	add	r2, pc, #4	@ (adr r2, 800d918 <pbuf_alloced_custom+0x20>)
 800d914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d918:	0800d92d 	.word	0x0800d92d
 800d91c:	0800d933 	.word	0x0800d933
 800d920:	0800d939 	.word	0x0800d939
 800d924:	0800d93f 	.word	0x0800d93f
 800d928:	0800d945 	.word	0x0800d945
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d92c:	2336      	movs	r3, #54	@ 0x36
 800d92e:	81fb      	strh	r3, [r7, #14]
    break;
 800d930:	e014      	b.n	800d95c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d932:	2322      	movs	r3, #34	@ 0x22
 800d934:	81fb      	strh	r3, [r7, #14]
    break;
 800d936:	e011      	b.n	800d95c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d938:	230e      	movs	r3, #14
 800d93a:	81fb      	strh	r3, [r7, #14]
    break;
 800d93c:	e00e      	b.n	800d95c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d93e:	2300      	movs	r3, #0
 800d940:	81fb      	strh	r3, [r7, #14]
    break;
 800d942:	e00b      	b.n	800d95c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800d944:	2300      	movs	r3, #0
 800d946:	81fb      	strh	r3, [r7, #14]
    break;
 800d948:	e008      	b.n	800d95c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800d94a:	4b1d      	ldr	r3, [pc, #116]	@ (800d9c0 <pbuf_alloced_custom+0xc8>)
 800d94c:	f240 12c5 	movw	r2, #453	@ 0x1c5
 800d950:	491c      	ldr	r1, [pc, #112]	@ (800d9c4 <pbuf_alloced_custom+0xcc>)
 800d952:	481d      	ldr	r0, [pc, #116]	@ (800d9c8 <pbuf_alloced_custom+0xd0>)
 800d954:	f007 fa2c 	bl	8014db0 <iprintf>
    return NULL;
 800d958:	2300      	movs	r3, #0
 800d95a:	e02d      	b.n	800d9b8 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d95c:	89fb      	ldrh	r3, [r7, #14]
 800d95e:	3303      	adds	r3, #3
 800d960:	f023 0203 	bic.w	r2, r3, #3
 800d964:	88bb      	ldrh	r3, [r7, #4]
 800d966:	441a      	add	r2, r3
 800d968:	8bbb      	ldrh	r3, [r7, #28]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d901      	bls.n	800d972 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d96e:	2300      	movs	r3, #0
 800d970:	e022      	b.n	800d9b8 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	2200      	movs	r2, #0
 800d976:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800d978:	69bb      	ldr	r3, [r7, #24]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d008      	beq.n	800d990 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d97e:	89fb      	ldrh	r3, [r7, #14]
 800d980:	3303      	adds	r3, #3
 800d982:	f023 0303 	bic.w	r3, r3, #3
 800d986:	69ba      	ldr	r2, [r7, #24]
 800d988:	441a      	add	r2, r3
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	605a      	str	r2, [r3, #4]
 800d98e:	e002      	b.n	800d996 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	2200      	movs	r2, #0
 800d994:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	2202      	movs	r2, #2
 800d99a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	88ba      	ldrh	r2, [r7, #4]
 800d9a0:	811a      	strh	r2, [r3, #8]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	891a      	ldrh	r2, [r3, #8]
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	79ba      	ldrb	r2, [r7, #6]
 800d9ae:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800d9b6:	683b      	ldr	r3, [r7, #0]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	08016b20 	.word	0x08016b20
 800d9c4:	08016cd0 	.word	0x08016cd0
 800d9c8:	08016b84 	.word	0x08016b84

0800d9cc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d106      	bne.n	800d9ec <pbuf_realloc+0x20>
 800d9de:	4b4b      	ldr	r3, [pc, #300]	@ (800db0c <pbuf_realloc+0x140>)
 800d9e0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800d9e4:	494a      	ldr	r1, [pc, #296]	@ (800db10 <pbuf_realloc+0x144>)
 800d9e6:	484b      	ldr	r0, [pc, #300]	@ (800db14 <pbuf_realloc+0x148>)
 800d9e8:	f007 f9e2 	bl	8014db0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	7b1b      	ldrb	r3, [r3, #12]
 800d9f0:	2b03      	cmp	r3, #3
 800d9f2:	d012      	beq.n	800da1a <pbuf_realloc+0x4e>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7b1b      	ldrb	r3, [r3, #12]
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d00e      	beq.n	800da1a <pbuf_realloc+0x4e>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	7b1b      	ldrb	r3, [r3, #12]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00a      	beq.n	800da1a <pbuf_realloc+0x4e>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	7b1b      	ldrb	r3, [r3, #12]
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d006      	beq.n	800da1a <pbuf_realloc+0x4e>
 800da0c:	4b3f      	ldr	r3, [pc, #252]	@ (800db0c <pbuf_realloc+0x140>)
 800da0e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800da12:	4941      	ldr	r1, [pc, #260]	@ (800db18 <pbuf_realloc+0x14c>)
 800da14:	483f      	ldr	r0, [pc, #252]	@ (800db14 <pbuf_realloc+0x148>)
 800da16:	f007 f9cb 	bl	8014db0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	891b      	ldrh	r3, [r3, #8]
 800da1e:	887a      	ldrh	r2, [r7, #2]
 800da20:	429a      	cmp	r2, r3
 800da22:	d26e      	bcs.n	800db02 <pbuf_realloc+0x136>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800da24:	887b      	ldrh	r3, [r7, #2]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	8912      	ldrh	r2, [r2, #8]
 800da2a:	1a9b      	subs	r3, r3, r2
 800da2c:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800da2e:	887b      	ldrh	r3, [r7, #2]
 800da30:	827b      	strh	r3, [r7, #18]
  q = p;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800da36:	e025      	b.n	800da84 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	895b      	ldrh	r3, [r3, #10]
 800da3c:	8a7a      	ldrh	r2, [r7, #18]
 800da3e:	1ad3      	subs	r3, r2, r3
 800da40:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800da48:	4293      	cmp	r3, r2
 800da4a:	dd06      	ble.n	800da5a <pbuf_realloc+0x8e>
 800da4c:	4b2f      	ldr	r3, [pc, #188]	@ (800db0c <pbuf_realloc+0x140>)
 800da4e:	f240 220b 	movw	r2, #523	@ 0x20b
 800da52:	4932      	ldr	r1, [pc, #200]	@ (800db1c <pbuf_realloc+0x150>)
 800da54:	482f      	ldr	r0, [pc, #188]	@ (800db14 <pbuf_realloc+0x148>)
 800da56:	f007 f9ab 	bl	8014db0 <iprintf>
    q->tot_len += (u16_t)grow;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	891a      	ldrh	r2, [r3, #8]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	b29b      	uxth	r3, r3
 800da62:	4413      	add	r3, r2
 800da64:	b29a      	uxth	r2, r3
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <pbuf_realloc+0xb8>
 800da76:	4b25      	ldr	r3, [pc, #148]	@ (800db0c <pbuf_realloc+0x140>)
 800da78:	f240 220f 	movw	r2, #527	@ 0x20f
 800da7c:	4928      	ldr	r1, [pc, #160]	@ (800db20 <pbuf_realloc+0x154>)
 800da7e:	4825      	ldr	r0, [pc, #148]	@ (800db14 <pbuf_realloc+0x148>)
 800da80:	f007 f996 	bl	8014db0 <iprintf>
  while (rem_len > q->len) {
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	895b      	ldrh	r3, [r3, #10]
 800da88:	8a7a      	ldrh	r2, [r7, #18]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d8d4      	bhi.n	800da38 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	7b1b      	ldrb	r3, [r3, #12]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d121      	bne.n	800dada <pbuf_realloc+0x10e>
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	895b      	ldrh	r3, [r3, #10]
 800da9a:	8a7a      	ldrh	r2, [r7, #18]
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d01c      	beq.n	800dada <pbuf_realloc+0x10e>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	7b5b      	ldrb	r3, [r3, #13]
 800daa4:	f003 0302 	and.w	r3, r3, #2
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d116      	bne.n	800dada <pbuf_realloc+0x10e>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	685a      	ldr	r2, [r3, #4]
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	8a7b      	ldrh	r3, [r7, #18]
 800dab8:	4413      	add	r3, r2
 800daba:	b29b      	uxth	r3, r3
 800dabc:	4619      	mov	r1, r3
 800dabe:	6978      	ldr	r0, [r7, #20]
 800dac0:	f7ff f958 	bl	800cd74 <mem_trim>
 800dac4:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d106      	bne.n	800dada <pbuf_realloc+0x10e>
 800dacc:	4b0f      	ldr	r3, [pc, #60]	@ (800db0c <pbuf_realloc+0x140>)
 800dace:	f240 221d 	movw	r2, #541	@ 0x21d
 800dad2:	4914      	ldr	r1, [pc, #80]	@ (800db24 <pbuf_realloc+0x158>)
 800dad4:	480f      	ldr	r0, [pc, #60]	@ (800db14 <pbuf_realloc+0x148>)
 800dad6:	f007 f96b 	bl	8014db0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	8a7a      	ldrh	r2, [r7, #18]
 800dade:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	895a      	ldrh	r2, [r3, #10]
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d004      	beq.n	800dafa <pbuf_realloc+0x12e>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4618      	mov	r0, r3
 800daf6:	f000 f8dd 	bl	800dcb4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	2200      	movs	r2, #0
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	e000      	b.n	800db04 <pbuf_realloc+0x138>
    return;
 800db02:	bf00      	nop

}
 800db04:	3718      	adds	r7, #24
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	08016b20 	.word	0x08016b20
 800db10:	08016cf4 	.word	0x08016cf4
 800db14:	08016b84 	.word	0x08016b84
 800db18:	08016d0c 	.word	0x08016d0c
 800db1c:	08016d28 	.word	0x08016d28
 800db20:	08016d3c 	.word	0x08016d3c
 800db24:	08016d54 	.word	0x08016d54

0800db28 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	460b      	mov	r3, r1
 800db32:	807b      	strh	r3, [r7, #2]
 800db34:	4613      	mov	r3, r2
 800db36:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d106      	bne.n	800db4c <pbuf_header_impl+0x24>
 800db3e:	4b46      	ldr	r3, [pc, #280]	@ (800dc58 <pbuf_header_impl+0x130>)
 800db40:	f240 223f 	movw	r2, #575	@ 0x23f
 800db44:	4945      	ldr	r1, [pc, #276]	@ (800dc5c <pbuf_header_impl+0x134>)
 800db46:	4846      	ldr	r0, [pc, #280]	@ (800dc60 <pbuf_header_impl+0x138>)
 800db48:	f007 f932 	bl	8014db0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800db4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <pbuf_header_impl+0x32>
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d101      	bne.n	800db5e <pbuf_header_impl+0x36>
    return 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	e078      	b.n	800dc50 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800db5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db62:	2b00      	cmp	r3, #0
 800db64:	da10      	bge.n	800db88 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800db66:	887b      	ldrh	r3, [r7, #2]
 800db68:	425b      	negs	r3, r3
 800db6a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	895b      	ldrh	r3, [r3, #10]
 800db70:	89fa      	ldrh	r2, [r7, #14]
 800db72:	429a      	cmp	r2, r3
 800db74:	d90a      	bls.n	800db8c <pbuf_header_impl+0x64>
 800db76:	4b38      	ldr	r3, [pc, #224]	@ (800dc58 <pbuf_header_impl+0x130>)
 800db78:	f240 2247 	movw	r2, #583	@ 0x247
 800db7c:	4939      	ldr	r1, [pc, #228]	@ (800dc64 <pbuf_header_impl+0x13c>)
 800db7e:	4838      	ldr	r0, [pc, #224]	@ (800dc60 <pbuf_header_impl+0x138>)
 800db80:	f007 f916 	bl	8014db0 <iprintf>
 800db84:	2301      	movs	r3, #1
 800db86:	e063      	b.n	800dc50 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800db88:	887b      	ldrh	r3, [r7, #2]
 800db8a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	7b1b      	ldrb	r3, [r3, #12]
 800db90:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800db98:	89bb      	ldrh	r3, [r7, #12]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d002      	beq.n	800dba4 <pbuf_header_impl+0x7c>
 800db9e:	89bb      	ldrh	r3, [r7, #12]
 800dba0:	2b03      	cmp	r3, #3
 800dba2:	d112      	bne.n	800dbca <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	685a      	ldr	r2, [r3, #4]
 800dba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbac:	425b      	negs	r3, r3
 800dbae:	441a      	add	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	685a      	ldr	r2, [r3, #4]
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	3310      	adds	r3, #16
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d238      	bcs.n	800dc32 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	e042      	b.n	800dc50 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800dbca:	89bb      	ldrh	r3, [r7, #12]
 800dbcc:	2b02      	cmp	r3, #2
 800dbce:	d002      	beq.n	800dbd6 <pbuf_header_impl+0xae>
 800dbd0:	89bb      	ldrh	r3, [r7, #12]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d124      	bne.n	800dc20 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800dbd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	da0d      	bge.n	800dbfa <pbuf_header_impl+0xd2>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	895b      	ldrh	r3, [r3, #10]
 800dbe2:	89fa      	ldrh	r2, [r7, #14]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d808      	bhi.n	800dbfa <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	685a      	ldr	r2, [r3, #4]
 800dbec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbf0:	425b      	negs	r3, r3
 800dbf2:	441a      	add	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	605a      	str	r2, [r3, #4]
 800dbf8:	e011      	b.n	800dc1e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800dbfa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	dd0b      	ble.n	800dc1a <pbuf_header_impl+0xf2>
 800dc02:	787b      	ldrb	r3, [r7, #1]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d008      	beq.n	800dc1a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc10:	425b      	negs	r3, r3
 800dc12:	441a      	add	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	605a      	str	r2, [r3, #4]
 800dc18:	e001      	b.n	800dc1e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e018      	b.n	800dc50 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800dc1e:	e008      	b.n	800dc32 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800dc20:	4b0d      	ldr	r3, [pc, #52]	@ (800dc58 <pbuf_header_impl+0x130>)
 800dc22:	f240 2277 	movw	r2, #631	@ 0x277
 800dc26:	4910      	ldr	r1, [pc, #64]	@ (800dc68 <pbuf_header_impl+0x140>)
 800dc28:	480d      	ldr	r0, [pc, #52]	@ (800dc60 <pbuf_header_impl+0x138>)
 800dc2a:	f007 f8c1 	bl	8014db0 <iprintf>
    return 1;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	e00e      	b.n	800dc50 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	895a      	ldrh	r2, [r3, #10]
 800dc36:	887b      	ldrh	r3, [r7, #2]
 800dc38:	4413      	add	r3, r2
 800dc3a:	b29a      	uxth	r2, r3
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	891a      	ldrh	r2, [r3, #8]
 800dc44:	887b      	ldrh	r3, [r7, #2]
 800dc46:	4413      	add	r3, r2
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	08016b20 	.word	0x08016b20
 800dc5c:	08016d70 	.word	0x08016d70
 800dc60:	08016b84 	.word	0x08016b84
 800dc64:	08016d7c 	.word	0x08016d7c
 800dc68:	08016d9c 	.word	0x08016d9c

0800dc6c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	460b      	mov	r3, r1
 800dc76:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800dc78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f7ff ff51 	bl	800db28 <pbuf_header_impl>
 800dc86:	4603      	mov	r3, r0
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3708      	adds	r7, #8
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800dc9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dca0:	2201      	movs	r2, #1
 800dca2:	4619      	mov	r1, r3
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7ff ff3f 	bl	800db28 <pbuf_header_impl>
 800dcaa:	4603      	mov	r3, r0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3708      	adds	r7, #8
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d10b      	bne.n	800dcda <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d106      	bne.n	800dcd6 <pbuf_free+0x22>
 800dcc8:	4b3e      	ldr	r3, [pc, #248]	@ (800ddc4 <pbuf_free+0x110>)
 800dcca:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800dcce:	493e      	ldr	r1, [pc, #248]	@ (800ddc8 <pbuf_free+0x114>)
 800dcd0:	483e      	ldr	r0, [pc, #248]	@ (800ddcc <pbuf_free+0x118>)
 800dcd2:	f007 f86d 	bl	8014db0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e070      	b.n	800ddbc <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	7b1b      	ldrb	r3, [r3, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d012      	beq.n	800dd08 <pbuf_free+0x54>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	7b1b      	ldrb	r3, [r3, #12]
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d00e      	beq.n	800dd08 <pbuf_free+0x54>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	7b1b      	ldrb	r3, [r3, #12]
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	d00a      	beq.n	800dd08 <pbuf_free+0x54>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	7b1b      	ldrb	r3, [r3, #12]
 800dcf6:	2b03      	cmp	r3, #3
 800dcf8:	d006      	beq.n	800dd08 <pbuf_free+0x54>
 800dcfa:	4b32      	ldr	r3, [pc, #200]	@ (800ddc4 <pbuf_free+0x110>)
 800dcfc:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800dd00:	4933      	ldr	r1, [pc, #204]	@ (800ddd0 <pbuf_free+0x11c>)
 800dd02:	4832      	ldr	r0, [pc, #200]	@ (800ddcc <pbuf_free+0x118>)
 800dd04:	f007 f854 	bl	8014db0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dd0c:	e052      	b.n	800ddb4 <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	89db      	ldrh	r3, [r3, #14]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d106      	bne.n	800dd24 <pbuf_free+0x70>
 800dd16:	4b2b      	ldr	r3, [pc, #172]	@ (800ddc4 <pbuf_free+0x110>)
 800dd18:	f240 22eb 	movw	r2, #747	@ 0x2eb
 800dd1c:	492d      	ldr	r1, [pc, #180]	@ (800ddd4 <pbuf_free+0x120>)
 800dd1e:	482b      	ldr	r0, [pc, #172]	@ (800ddcc <pbuf_free+0x118>)
 800dd20:	f007 f846 	bl	8014db0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	89db      	ldrh	r3, [r3, #14]
 800dd28:	3b01      	subs	r3, #1
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	81da      	strh	r2, [r3, #14]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	89db      	ldrh	r3, [r3, #14]
 800dd34:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dd36:	8abb      	ldrh	r3, [r7, #20]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d139      	bne.n	800ddb0 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	7b1b      	ldrb	r3, [r3, #12]
 800dd46:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	7b5b      	ldrb	r3, [r3, #13]
 800dd4c:	f003 0302 	and.w	r3, r3, #2
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d011      	beq.n	800dd78 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	691b      	ldr	r3, [r3, #16]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <pbuf_free+0xba>
 800dd60:	4b18      	ldr	r3, [pc, #96]	@ (800ddc4 <pbuf_free+0x110>)
 800dd62:	f240 22f9 	movw	r2, #761	@ 0x2f9
 800dd66:	491c      	ldr	r1, [pc, #112]	@ (800ddd8 <pbuf_free+0x124>)
 800dd68:	4818      	ldr	r0, [pc, #96]	@ (800ddcc <pbuf_free+0x118>)
 800dd6a:	f007 f821 	bl	8014db0 <iprintf>
        pc->custom_free_function(p);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	4798      	blx	r3
 800dd76:	e015      	b.n	800dda4 <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800dd78:	89fb      	ldrh	r3, [r7, #14]
 800dd7a:	2b03      	cmp	r3, #3
 800dd7c:	d104      	bne.n	800dd88 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 800dd7e:	6879      	ldr	r1, [r7, #4]
 800dd80:	2008      	movs	r0, #8
 800dd82:	f7ff fa7b 	bl	800d27c <memp_free>
 800dd86:	e00d      	b.n	800dda4 <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800dd88:	89fb      	ldrh	r3, [r7, #14]
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d002      	beq.n	800dd94 <pbuf_free+0xe0>
 800dd8e:	89fb      	ldrh	r3, [r7, #14]
 800dd90:	2b02      	cmp	r3, #2
 800dd92:	d104      	bne.n	800dd9e <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 800dd94:	6879      	ldr	r1, [r7, #4]
 800dd96:	2007      	movs	r0, #7
 800dd98:	f7ff fa70 	bl	800d27c <memp_free>
 800dd9c:	e002      	b.n	800dda4 <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f7fe ff86 	bl	800ccb0 <mem_free>
        }
      }
      count++;
 800dda4:	7dfb      	ldrb	r3, [r7, #23]
 800dda6:	3301      	adds	r3, #1
 800dda8:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800ddaa:	693b      	ldr	r3, [r7, #16]
 800ddac:	607b      	str	r3, [r7, #4]
 800ddae:	e001      	b.n	800ddb4 <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1a9      	bne.n	800dd0e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ddba:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	3718      	adds	r7, #24
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}
 800ddc4:	08016b20 	.word	0x08016b20
 800ddc8:	08016d70 	.word	0x08016d70
 800ddcc:	08016b84 	.word	0x08016b84
 800ddd0:	08016dac 	.word	0x08016dac
 800ddd4:	08016dc4 	.word	0x08016dc4
 800ddd8:	08016ddc 	.word	0x08016ddc

0800dddc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dddc:	b480      	push	{r7}
 800ddde:	b085      	sub	sp, #20
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dde4:	2300      	movs	r3, #0
 800dde6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dde8:	e005      	b.n	800ddf6 <pbuf_clen+0x1a>
    ++len;
 800ddea:	89fb      	ldrh	r3, [r7, #14]
 800ddec:	3301      	adds	r3, #1
 800ddee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d1f6      	bne.n	800ddea <pbuf_clen+0xe>
  }
  return len;
 800ddfc:	89fb      	ldrh	r3, [r7, #14]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3714      	adds	r7, #20
 800de02:	46bd      	mov	sp, r7
 800de04:	bc80      	pop	{r7}
 800de06:	4770      	bx	lr

0800de08 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d010      	beq.n	800de38 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	89db      	ldrh	r3, [r3, #14]
 800de1a:	3301      	adds	r3, #1
 800de1c:	b29a      	uxth	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	89db      	ldrh	r3, [r3, #14]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d106      	bne.n	800de38 <pbuf_ref+0x30>
 800de2a:	4b05      	ldr	r3, [pc, #20]	@ (800de40 <pbuf_ref+0x38>)
 800de2c:	f240 3239 	movw	r2, #825	@ 0x339
 800de30:	4904      	ldr	r1, [pc, #16]	@ (800de44 <pbuf_ref+0x3c>)
 800de32:	4805      	ldr	r0, [pc, #20]	@ (800de48 <pbuf_ref+0x40>)
 800de34:	f006 ffbc 	bl	8014db0 <iprintf>
  }
}
 800de38:	bf00      	nop
 800de3a:	3708      	adds	r7, #8
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	08016b20 	.word	0x08016b20
 800de44:	08016e00 	.word	0x08016e00
 800de48:	08016b84 	.word	0x08016b84

0800de4c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d002      	beq.n	800de62 <pbuf_cat+0x16>
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d107      	bne.n	800de72 <pbuf_cat+0x26>
 800de62:	4b20      	ldr	r3, [pc, #128]	@ (800dee4 <pbuf_cat+0x98>)
 800de64:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800de68:	491f      	ldr	r1, [pc, #124]	@ (800dee8 <pbuf_cat+0x9c>)
 800de6a:	4820      	ldr	r0, [pc, #128]	@ (800deec <pbuf_cat+0xa0>)
 800de6c:	f006 ffa0 	bl	8014db0 <iprintf>
 800de70:	e034      	b.n	800dedc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	60fb      	str	r3, [r7, #12]
 800de76:	e00a      	b.n	800de8e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	891a      	ldrh	r2, [r3, #8]
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	891b      	ldrh	r3, [r3, #8]
 800de80:	4413      	add	r3, r2
 800de82:	b29a      	uxth	r2, r3
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	60fb      	str	r3, [r7, #12]
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1f0      	bne.n	800de78 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	891a      	ldrh	r2, [r3, #8]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	895b      	ldrh	r3, [r3, #10]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d006      	beq.n	800deb0 <pbuf_cat+0x64>
 800dea2:	4b10      	ldr	r3, [pc, #64]	@ (800dee4 <pbuf_cat+0x98>)
 800dea4:	f240 3255 	movw	r2, #853	@ 0x355
 800dea8:	4911      	ldr	r1, [pc, #68]	@ (800def0 <pbuf_cat+0xa4>)
 800deaa:	4810      	ldr	r0, [pc, #64]	@ (800deec <pbuf_cat+0xa0>)
 800deac:	f006 ff80 	bl	8014db0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d006      	beq.n	800dec6 <pbuf_cat+0x7a>
 800deb8:	4b0a      	ldr	r3, [pc, #40]	@ (800dee4 <pbuf_cat+0x98>)
 800deba:	f240 3256 	movw	r2, #854	@ 0x356
 800debe:	490d      	ldr	r1, [pc, #52]	@ (800def4 <pbuf_cat+0xa8>)
 800dec0:	480a      	ldr	r0, [pc, #40]	@ (800deec <pbuf_cat+0xa0>)
 800dec2:	f006 ff75 	bl	8014db0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	891a      	ldrh	r2, [r3, #8]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	891b      	ldrh	r3, [r3, #8]
 800dece:	4413      	add	r3, r2
 800ded0:	b29a      	uxth	r2, r3
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	08016b20 	.word	0x08016b20
 800dee8:	08016e14 	.word	0x08016e14
 800deec:	08016b84 	.word	0x08016b84
 800def0:	08016e4c 	.word	0x08016e4c
 800def4:	08016e7c 	.word	0x08016e7c

0800def8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800df02:	6839      	ldr	r1, [r7, #0]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f7ff ffa1 	bl	800de4c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800df0a:	6838      	ldr	r0, [r7, #0]
 800df0c:	f7ff ff7c 	bl	800de08 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800df10:	bf00      	nop
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b084      	sub	sp, #16
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800df22:	2300      	movs	r3, #0
 800df24:	81fb      	strh	r3, [r7, #14]
 800df26:	2300      	movs	r3, #0
 800df28:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d008      	beq.n	800df42 <pbuf_copy+0x2a>
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d005      	beq.n	800df42 <pbuf_copy+0x2a>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	891a      	ldrh	r2, [r3, #8]
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	891b      	ldrh	r3, [r3, #8]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d209      	bcs.n	800df56 <pbuf_copy+0x3e>
 800df42:	4b54      	ldr	r3, [pc, #336]	@ (800e094 <pbuf_copy+0x17c>)
 800df44:	f44f 726f 	mov.w	r2, #956	@ 0x3bc
 800df48:	4953      	ldr	r1, [pc, #332]	@ (800e098 <pbuf_copy+0x180>)
 800df4a:	4854      	ldr	r0, [pc, #336]	@ (800e09c <pbuf_copy+0x184>)
 800df4c:	f006 ff30 	bl	8014db0 <iprintf>
 800df50:	f06f 030f 	mvn.w	r3, #15
 800df54:	e099      	b.n	800e08a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	895b      	ldrh	r3, [r3, #10]
 800df5a:	461a      	mov	r2, r3
 800df5c:	89fb      	ldrh	r3, [r7, #14]
 800df5e:	1ad2      	subs	r2, r2, r3
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	895b      	ldrh	r3, [r3, #10]
 800df64:	4619      	mov	r1, r3
 800df66:	89bb      	ldrh	r3, [r7, #12]
 800df68:	1acb      	subs	r3, r1, r3
 800df6a:	429a      	cmp	r2, r3
 800df6c:	db05      	blt.n	800df7a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	895a      	ldrh	r2, [r3, #10]
 800df72:	89bb      	ldrh	r3, [r7, #12]
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	817b      	strh	r3, [r7, #10]
 800df78:	e004      	b.n	800df84 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	895a      	ldrh	r2, [r3, #10]
 800df7e:	89fb      	ldrh	r3, [r7, #14]
 800df80:	1ad3      	subs	r3, r2, r3
 800df82:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	685a      	ldr	r2, [r3, #4]
 800df88:	89fb      	ldrh	r3, [r7, #14]
 800df8a:	18d0      	adds	r0, r2, r3
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	685a      	ldr	r2, [r3, #4]
 800df90:	89bb      	ldrh	r3, [r7, #12]
 800df92:	4413      	add	r3, r2
 800df94:	897a      	ldrh	r2, [r7, #10]
 800df96:	4619      	mov	r1, r3
 800df98:	f007 f889 	bl	80150ae <memcpy>
    offset_to += len;
 800df9c:	89fa      	ldrh	r2, [r7, #14]
 800df9e:	897b      	ldrh	r3, [r7, #10]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800dfa4:	89ba      	ldrh	r2, [r7, #12]
 800dfa6:	897b      	ldrh	r3, [r7, #10]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	895b      	ldrh	r3, [r3, #10]
 800dfb0:	89fa      	ldrh	r2, [r7, #14]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d906      	bls.n	800dfc4 <pbuf_copy+0xac>
 800dfb6:	4b37      	ldr	r3, [pc, #220]	@ (800e094 <pbuf_copy+0x17c>)
 800dfb8:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800dfbc:	4938      	ldr	r1, [pc, #224]	@ (800e0a0 <pbuf_copy+0x188>)
 800dfbe:	4837      	ldr	r0, [pc, #220]	@ (800e09c <pbuf_copy+0x184>)
 800dfc0:	f006 fef6 	bl	8014db0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	895b      	ldrh	r3, [r3, #10]
 800dfc8:	89ba      	ldrh	r2, [r7, #12]
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d906      	bls.n	800dfdc <pbuf_copy+0xc4>
 800dfce:	4b31      	ldr	r3, [pc, #196]	@ (800e094 <pbuf_copy+0x17c>)
 800dfd0:	f240 32ce 	movw	r2, #974	@ 0x3ce
 800dfd4:	4933      	ldr	r1, [pc, #204]	@ (800e0a4 <pbuf_copy+0x18c>)
 800dfd6:	4831      	ldr	r0, [pc, #196]	@ (800e09c <pbuf_copy+0x184>)
 800dfd8:	f006 feea 	bl	8014db0 <iprintf>
    if (offset_from >= p_from->len) {
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	895b      	ldrh	r3, [r3, #10]
 800dfe0:	89ba      	ldrh	r2, [r7, #12]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d304      	bcc.n	800dff0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	895b      	ldrh	r3, [r3, #10]
 800dff4:	89fa      	ldrh	r2, [r7, #14]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d114      	bne.n	800e024 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dffa:	2300      	movs	r3, #0
 800dffc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d10c      	bne.n	800e024 <pbuf_copy+0x10c>
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d009      	beq.n	800e024 <pbuf_copy+0x10c>
 800e010:	4b20      	ldr	r3, [pc, #128]	@ (800e094 <pbuf_copy+0x17c>)
 800e012:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e016:	4924      	ldr	r1, [pc, #144]	@ (800e0a8 <pbuf_copy+0x190>)
 800e018:	4820      	ldr	r0, [pc, #128]	@ (800e09c <pbuf_copy+0x184>)
 800e01a:	f006 fec9 	bl	8014db0 <iprintf>
 800e01e:	f06f 030f 	mvn.w	r3, #15
 800e022:	e032      	b.n	800e08a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d013      	beq.n	800e052 <pbuf_copy+0x13a>
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	895a      	ldrh	r2, [r3, #10]
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	891b      	ldrh	r3, [r3, #8]
 800e032:	429a      	cmp	r2, r3
 800e034:	d10d      	bne.n	800e052 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d009      	beq.n	800e052 <pbuf_copy+0x13a>
 800e03e:	4b15      	ldr	r3, [pc, #84]	@ (800e094 <pbuf_copy+0x17c>)
 800e040:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800e044:	4919      	ldr	r1, [pc, #100]	@ (800e0ac <pbuf_copy+0x194>)
 800e046:	4815      	ldr	r0, [pc, #84]	@ (800e09c <pbuf_copy+0x184>)
 800e048:	f006 feb2 	bl	8014db0 <iprintf>
 800e04c:	f06f 0305 	mvn.w	r3, #5
 800e050:	e01b      	b.n	800e08a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d013      	beq.n	800e080 <pbuf_copy+0x168>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	895a      	ldrh	r2, [r3, #10]
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	891b      	ldrh	r3, [r3, #8]
 800e060:	429a      	cmp	r2, r3
 800e062:	d10d      	bne.n	800e080 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d009      	beq.n	800e080 <pbuf_copy+0x168>
 800e06c:	4b09      	ldr	r3, [pc, #36]	@ (800e094 <pbuf_copy+0x17c>)
 800e06e:	f240 32e2 	movw	r2, #994	@ 0x3e2
 800e072:	490e      	ldr	r1, [pc, #56]	@ (800e0ac <pbuf_copy+0x194>)
 800e074:	4809      	ldr	r0, [pc, #36]	@ (800e09c <pbuf_copy+0x184>)
 800e076:	f006 fe9b 	bl	8014db0 <iprintf>
 800e07a:	f06f 0305 	mvn.w	r3, #5
 800e07e:	e004      	b.n	800e08a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	f47f af67 	bne.w	800df56 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3710      	adds	r7, #16
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	08016b20 	.word	0x08016b20
 800e098:	08016ec8 	.word	0x08016ec8
 800e09c:	08016b84 	.word	0x08016b84
 800e0a0:	08016ef8 	.word	0x08016ef8
 800e0a4:	08016f10 	.word	0x08016f10
 800e0a8:	08016f2c 	.word	0x08016f2c
 800e0ac:	08016f3c 	.word	0x08016f3c

0800e0b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b088      	sub	sp, #32
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	4611      	mov	r1, r2
 800e0bc:	461a      	mov	r2, r3
 800e0be:	460b      	mov	r3, r1
 800e0c0:	80fb      	strh	r3, [r7, #6]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d108      	bne.n	800e0e2 <pbuf_copy_partial+0x32>
 800e0d0:	4b30      	ldr	r3, [pc, #192]	@ (800e194 <pbuf_copy_partial+0xe4>)
 800e0d2:	f240 32fe 	movw	r2, #1022	@ 0x3fe
 800e0d6:	4930      	ldr	r1, [pc, #192]	@ (800e198 <pbuf_copy_partial+0xe8>)
 800e0d8:	4830      	ldr	r0, [pc, #192]	@ (800e19c <pbuf_copy_partial+0xec>)
 800e0da:	f006 fe69 	bl	8014db0 <iprintf>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e054      	b.n	800e18c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d108      	bne.n	800e0fa <pbuf_copy_partial+0x4a>
 800e0e8:	4b2a      	ldr	r3, [pc, #168]	@ (800e194 <pbuf_copy_partial+0xe4>)
 800e0ea:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800e0ee:	492c      	ldr	r1, [pc, #176]	@ (800e1a0 <pbuf_copy_partial+0xf0>)
 800e0f0:	482a      	ldr	r0, [pc, #168]	@ (800e19c <pbuf_copy_partial+0xec>)
 800e0f2:	f006 fe5d 	bl	8014db0 <iprintf>
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e048      	b.n	800e18c <pbuf_copy_partial+0xdc>

  left = 0;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <pbuf_copy_partial+0x5a>
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <pbuf_copy_partial+0x5e>
    return 0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	e03e      	b.n	800e18c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	61fb      	str	r3, [r7, #28]
 800e112:	e034      	b.n	800e17e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800e114:	88bb      	ldrh	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00a      	beq.n	800e130 <pbuf_copy_partial+0x80>
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	895b      	ldrh	r3, [r3, #10]
 800e11e:	88ba      	ldrh	r2, [r7, #4]
 800e120:	429a      	cmp	r2, r3
 800e122:	d305      	bcc.n	800e130 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	895b      	ldrh	r3, [r3, #10]
 800e128:	88ba      	ldrh	r2, [r7, #4]
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	80bb      	strh	r3, [r7, #4]
 800e12e:	e023      	b.n	800e178 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	895a      	ldrh	r2, [r3, #10]
 800e134:	88bb      	ldrh	r3, [r7, #4]
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e13a:	8b3a      	ldrh	r2, [r7, #24]
 800e13c:	88fb      	ldrh	r3, [r7, #6]
 800e13e:	429a      	cmp	r2, r3
 800e140:	d901      	bls.n	800e146 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800e142:	88fb      	ldrh	r3, [r7, #6]
 800e144:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800e146:	8b7b      	ldrh	r3, [r7, #26]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	18d0      	adds	r0, r2, r3
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	88bb      	ldrh	r3, [r7, #4]
 800e152:	4413      	add	r3, r2
 800e154:	8b3a      	ldrh	r2, [r7, #24]
 800e156:	4619      	mov	r1, r3
 800e158:	f006 ffa9 	bl	80150ae <memcpy>
      copied_total += buf_copy_len;
 800e15c:	8afa      	ldrh	r2, [r7, #22]
 800e15e:	8b3b      	ldrh	r3, [r7, #24]
 800e160:	4413      	add	r3, r2
 800e162:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800e164:	8b7a      	ldrh	r2, [r7, #26]
 800e166:	8b3b      	ldrh	r3, [r7, #24]
 800e168:	4413      	add	r3, r2
 800e16a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800e16c:	88fa      	ldrh	r2, [r7, #6]
 800e16e:	8b3b      	ldrh	r3, [r7, #24]
 800e170:	1ad3      	subs	r3, r2, r3
 800e172:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	61fb      	str	r3, [r7, #28]
 800e17e:	88fb      	ldrh	r3, [r7, #6]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <pbuf_copy_partial+0xda>
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1c4      	bne.n	800e114 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800e18a:	8afb      	ldrh	r3, [r7, #22]
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3720      	adds	r7, #32
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	08016b20 	.word	0x08016b20
 800e198:	08016f68 	.word	0x08016f68
 800e19c:	08016b84 	.word	0x08016b84
 800e1a0:	08016f88 	.word	0x08016f88

0800e1a4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b088      	sub	sp, #32
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	60f8      	str	r0, [r7, #12]
 800e1ac:	60b9      	str	r1, [r7, #8]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 800e1b2:	88fb      	ldrh	r3, [r7, #6]
 800e1b4:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d109      	bne.n	800e1d4 <pbuf_take+0x30>
 800e1c0:	4b3a      	ldr	r3, [pc, #232]	@ (800e2ac <pbuf_take+0x108>)
 800e1c2:	f240 4284 	movw	r2, #1156	@ 0x484
 800e1c6:	493a      	ldr	r1, [pc, #232]	@ (800e2b0 <pbuf_take+0x10c>)
 800e1c8:	483a      	ldr	r0, [pc, #232]	@ (800e2b4 <pbuf_take+0x110>)
 800e1ca:	f006 fdf1 	bl	8014db0 <iprintf>
 800e1ce:	f06f 030f 	mvn.w	r3, #15
 800e1d2:	e066      	b.n	800e2a2 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d109      	bne.n	800e1ee <pbuf_take+0x4a>
 800e1da:	4b34      	ldr	r3, [pc, #208]	@ (800e2ac <pbuf_take+0x108>)
 800e1dc:	f240 4285 	movw	r2, #1157	@ 0x485
 800e1e0:	4935      	ldr	r1, [pc, #212]	@ (800e2b8 <pbuf_take+0x114>)
 800e1e2:	4834      	ldr	r0, [pc, #208]	@ (800e2b4 <pbuf_take+0x110>)
 800e1e4:	f006 fde4 	bl	8014db0 <iprintf>
 800e1e8:	f06f 030f 	mvn.w	r3, #15
 800e1ec:	e059      	b.n	800e2a2 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	891b      	ldrh	r3, [r3, #8]
 800e1f2:	88fa      	ldrh	r2, [r7, #6]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d909      	bls.n	800e20c <pbuf_take+0x68>
 800e1f8:	4b2c      	ldr	r3, [pc, #176]	@ (800e2ac <pbuf_take+0x108>)
 800e1fa:	f240 4286 	movw	r2, #1158	@ 0x486
 800e1fe:	492f      	ldr	r1, [pc, #188]	@ (800e2bc <pbuf_take+0x118>)
 800e200:	482c      	ldr	r0, [pc, #176]	@ (800e2b4 <pbuf_take+0x110>)
 800e202:	f006 fdd5 	bl	8014db0 <iprintf>
 800e206:	f04f 33ff 	mov.w	r3, #4294967295
 800e20a:	e04a      	b.n	800e2a2 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d007      	beq.n	800e222 <pbuf_take+0x7e>
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d004      	beq.n	800e222 <pbuf_take+0x7e>
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	891b      	ldrh	r3, [r3, #8]
 800e21c:	88fa      	ldrh	r2, [r7, #6]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d902      	bls.n	800e228 <pbuf_take+0x84>
    return ERR_ARG;
 800e222:	f06f 030f 	mvn.w	r3, #15
 800e226:	e03c      	b.n	800e2a2 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	61fb      	str	r3, [r7, #28]
 800e22c:	e027      	b.n	800e27e <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d106      	bne.n	800e242 <pbuf_take+0x9e>
 800e234:	4b1d      	ldr	r3, [pc, #116]	@ (800e2ac <pbuf_take+0x108>)
 800e236:	f240 428e 	movw	r2, #1166	@ 0x48e
 800e23a:	4921      	ldr	r1, [pc, #132]	@ (800e2c0 <pbuf_take+0x11c>)
 800e23c:	481d      	ldr	r0, [pc, #116]	@ (800e2b4 <pbuf_take+0x110>)
 800e23e:	f006 fdb7 	bl	8014db0 <iprintf>
    buf_copy_len = total_copy_len;
 800e242:	8b3b      	ldrh	r3, [r7, #24]
 800e244:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	895b      	ldrh	r3, [r3, #10]
 800e24a:	8b7a      	ldrh	r2, [r7, #26]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d902      	bls.n	800e256 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	895b      	ldrh	r3, [r3, #10]
 800e254:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800e256:	69fb      	ldr	r3, [r7, #28]
 800e258:	6858      	ldr	r0, [r3, #4]
 800e25a:	8afb      	ldrh	r3, [r7, #22]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	4413      	add	r3, r2
 800e260:	8b7a      	ldrh	r2, [r7, #26]
 800e262:	4619      	mov	r1, r3
 800e264:	f006 ff23 	bl	80150ae <memcpy>
    total_copy_len -= buf_copy_len;
 800e268:	8b3a      	ldrh	r2, [r7, #24]
 800e26a:	8b7b      	ldrh	r3, [r7, #26]
 800e26c:	1ad3      	subs	r3, r2, r3
 800e26e:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 800e270:	8afa      	ldrh	r2, [r7, #22]
 800e272:	8b7b      	ldrh	r3, [r7, #26]
 800e274:	4413      	add	r3, r2
 800e276:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	61fb      	str	r3, [r7, #28]
 800e27e:	8b3b      	ldrh	r3, [r7, #24]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d1d4      	bne.n	800e22e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800e284:	8b3b      	ldrh	r3, [r7, #24]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d103      	bne.n	800e292 <pbuf_take+0xee>
 800e28a:	8afa      	ldrh	r2, [r7, #22]
 800e28c:	88fb      	ldrh	r3, [r7, #6]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d006      	beq.n	800e2a0 <pbuf_take+0xfc>
 800e292:	4b06      	ldr	r3, [pc, #24]	@ (800e2ac <pbuf_take+0x108>)
 800e294:	f240 4299 	movw	r2, #1177	@ 0x499
 800e298:	490a      	ldr	r1, [pc, #40]	@ (800e2c4 <pbuf_take+0x120>)
 800e29a:	4806      	ldr	r0, [pc, #24]	@ (800e2b4 <pbuf_take+0x110>)
 800e29c:	f006 fd88 	bl	8014db0 <iprintf>
  return ERR_OK;
 800e2a0:	2300      	movs	r3, #0
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3720      	adds	r7, #32
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	08016b20 	.word	0x08016b20
 800e2b0:	08016fac 	.word	0x08016fac
 800e2b4:	08016b84 	.word	0x08016b84
 800e2b8:	08016fc4 	.word	0x08016fc4
 800e2bc:	08016fe0 	.word	0x08016fe0
 800e2c0:	08017000 	.word	0x08017000
 800e2c4:	08017018 	.word	0x08017018

0800e2c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800e2cc:	bf00      	nop
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bc80      	pop	{r7}
 800e2d2:	4770      	bx	lr

0800e2d4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e2d8:	f000 fdfc 	bl	800eed4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e2dc:	4b07      	ldr	r3, [pc, #28]	@ (800e2fc <tcp_tmr+0x28>)
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	b2da      	uxtb	r2, r3
 800e2e4:	4b05      	ldr	r3, [pc, #20]	@ (800e2fc <tcp_tmr+0x28>)
 800e2e6:	701a      	strb	r2, [r3, #0]
 800e2e8:	4b04      	ldr	r3, [pc, #16]	@ (800e2fc <tcp_tmr+0x28>)
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	f003 0301 	and.w	r3, r3, #1
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e2f4:	f000 fb2a 	bl	800e94c <tcp_slowtmr>
  }
}
 800e2f8:	bf00      	nop
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	2000c7ad 	.word	0x2000c7ad

0800e300 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e300:	b480      	push	{r7}
 800e302:	b085      	sub	sp, #20
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	60fb      	str	r3, [r7, #12]
 800e30e:	e00a      	b.n	800e326 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e314:	683a      	ldr	r2, [r7, #0]
 800e316:	429a      	cmp	r2, r3
 800e318:	d102      	bne.n	800e320 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2200      	movs	r2, #0
 800e31e:	679a      	str	r2, [r3, #120]	@ 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	60fb      	str	r3, [r7, #12]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d1f1      	bne.n	800e310 <tcp_remove_listener+0x10>
      }
   }
}
 800e32c:	bf00      	nop
 800e32e:	bf00      	nop
 800e330:	3714      	adds	r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	bc80      	pop	{r7}
 800e336:	4770      	bx	lr

0800e338 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d105      	bne.n	800e352 <tcp_listen_closed+0x1a>
 800e346:	4b13      	ldr	r3, [pc, #76]	@ (800e394 <tcp_listen_closed+0x5c>)
 800e348:	22c0      	movs	r2, #192	@ 0xc0
 800e34a:	4913      	ldr	r1, [pc, #76]	@ (800e398 <tcp_listen_closed+0x60>)
 800e34c:	4813      	ldr	r0, [pc, #76]	@ (800e39c <tcp_listen_closed+0x64>)
 800e34e:	f006 fd2f 	bl	8014db0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	7d1b      	ldrb	r3, [r3, #20]
 800e356:	2b01      	cmp	r3, #1
 800e358:	d005      	beq.n	800e366 <tcp_listen_closed+0x2e>
 800e35a:	4b0e      	ldr	r3, [pc, #56]	@ (800e394 <tcp_listen_closed+0x5c>)
 800e35c:	22c1      	movs	r2, #193	@ 0xc1
 800e35e:	4910      	ldr	r1, [pc, #64]	@ (800e3a0 <tcp_listen_closed+0x68>)
 800e360:	480e      	ldr	r0, [pc, #56]	@ (800e39c <tcp_listen_closed+0x64>)
 800e362:	f006 fd25 	bl	8014db0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e366:	2301      	movs	r3, #1
 800e368:	60fb      	str	r3, [r7, #12]
 800e36a:	e00b      	b.n	800e384 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800e36c:	4a0d      	ldr	r2, [pc, #52]	@ (800e3a4 <tcp_listen_closed+0x6c>)
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	6879      	ldr	r1, [r7, #4]
 800e378:	4618      	mov	r0, r3
 800e37a:	f7ff ffc1 	bl	800e300 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	3301      	adds	r3, #1
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2b03      	cmp	r3, #3
 800e388:	d9f0      	bls.n	800e36c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e38a:	bf00      	nop
 800e38c:	bf00      	nop
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}
 800e394:	080170bc 	.word	0x080170bc
 800e398:	08017104 	.word	0x08017104
 800e39c:	08017110 	.word	0x08017110
 800e3a0:	08017138 	.word	0x08017138
 800e3a4:	08017f14 	.word	0x08017f14

0800e3a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e3a8:	b5b0      	push	{r4, r5, r7, lr}
 800e3aa:	b086      	sub	sp, #24
 800e3ac:	af02      	add	r7, sp, #8
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e3b4:	78fb      	ldrb	r3, [r7, #3]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d075      	beq.n	800e4a6 <tcp_close_shutdown+0xfe>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	7d1b      	ldrb	r3, [r3, #20]
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	d003      	beq.n	800e3ca <tcp_close_shutdown+0x22>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	7d1b      	ldrb	r3, [r3, #20]
 800e3c6:	2b07      	cmp	r3, #7
 800e3c8:	d16d      	bne.n	800e4a6 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d104      	bne.n	800e3dc <tcp_close_shutdown+0x34>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3d6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e3da:	d064      	beq.n	800e4a6 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	7e9b      	ldrb	r3, [r3, #26]
 800e3e0:	f003 0310 	and.w	r3, r3, #16
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d106      	bne.n	800e3f6 <tcp_close_shutdown+0x4e>
 800e3e8:	4b5b      	ldr	r3, [pc, #364]	@ (800e558 <tcp_close_shutdown+0x1b0>)
 800e3ea:	f240 120f 	movw	r2, #271	@ 0x10f
 800e3ee:	495b      	ldr	r1, [pc, #364]	@ (800e55c <tcp_close_shutdown+0x1b4>)
 800e3f0:	485b      	ldr	r0, [pc, #364]	@ (800e560 <tcp_close_shutdown+0x1b8>)
 800e3f2:	f006 fcdd 	bl	8014db0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800e3fe:	687c      	ldr	r4, [r7, #4]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	1d1d      	adds	r5, r3, #4
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	8adb      	ldrh	r3, [r3, #22]
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	8b12      	ldrh	r2, [r2, #24]
 800e40c:	9201      	str	r2, [sp, #4]
 800e40e:	9300      	str	r3, [sp, #0]
 800e410:	462b      	mov	r3, r5
 800e412:	4622      	mov	r2, r4
 800e414:	f004 f85e 	bl	80124d4 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f000 ffd1 	bl	800f3c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e41e:	4b51      	ldr	r3, [pc, #324]	@ (800e564 <tcp_close_shutdown+0x1bc>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	429a      	cmp	r2, r3
 800e426:	d105      	bne.n	800e434 <tcp_close_shutdown+0x8c>
 800e428:	4b4e      	ldr	r3, [pc, #312]	@ (800e564 <tcp_close_shutdown+0x1bc>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	4a4d      	ldr	r2, [pc, #308]	@ (800e564 <tcp_close_shutdown+0x1bc>)
 800e430:	6013      	str	r3, [r2, #0]
 800e432:	e013      	b.n	800e45c <tcp_close_shutdown+0xb4>
 800e434:	4b4b      	ldr	r3, [pc, #300]	@ (800e564 <tcp_close_shutdown+0x1bc>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	60fb      	str	r3, [r7, #12]
 800e43a:	e00c      	b.n	800e456 <tcp_close_shutdown+0xae>
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	429a      	cmp	r2, r3
 800e444:	d104      	bne.n	800e450 <tcp_close_shutdown+0xa8>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	68da      	ldr	r2, [r3, #12]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	60da      	str	r2, [r3, #12]
 800e44e:	e005      	b.n	800e45c <tcp_close_shutdown+0xb4>
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	60fb      	str	r3, [r7, #12]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d1ef      	bne.n	800e43c <tcp_close_shutdown+0x94>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	60da      	str	r2, [r3, #12]
 800e462:	4b41      	ldr	r3, [pc, #260]	@ (800e568 <tcp_close_shutdown+0x1c0>)
 800e464:	2201      	movs	r2, #1
 800e466:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	7d1b      	ldrb	r3, [r3, #20]
 800e46c:	2b04      	cmp	r3, #4
 800e46e:	d10c      	bne.n	800e48a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	220a      	movs	r2, #10
 800e474:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e476:	4b3d      	ldr	r3, [pc, #244]	@ (800e56c <tcp_close_shutdown+0x1c4>)
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	60da      	str	r2, [r3, #12]
 800e47e:	4a3b      	ldr	r2, [pc, #236]	@ (800e56c <tcp_close_shutdown+0x1c4>)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6013      	str	r3, [r2, #0]
 800e484:	f004 fa6e 	bl	8012964 <tcp_timer_needed>
 800e488:	e00b      	b.n	800e4a2 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800e48a:	4b39      	ldr	r3, [pc, #228]	@ (800e570 <tcp_close_shutdown+0x1c8>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	429a      	cmp	r2, r3
 800e492:	d102      	bne.n	800e49a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800e494:	f003 faf2 	bl	8011a7c <tcp_trigger_input_pcb_close>
 800e498:	e003      	b.n	800e4a2 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	2001      	movs	r0, #1
 800e49e:	f7fe feed 	bl	800d27c <memp_free>
        }
      }
      return ERR_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	e053      	b.n	800e54e <tcp_close_shutdown+0x1a6>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	7d1b      	ldrb	r3, [r3, #20]
 800e4aa:	2b02      	cmp	r3, #2
 800e4ac:	d03d      	beq.n	800e52a <tcp_close_shutdown+0x182>
 800e4ae:	2b02      	cmp	r3, #2
 800e4b0:	dc47      	bgt.n	800e542 <tcp_close_shutdown+0x19a>
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d002      	beq.n	800e4bc <tcp_close_shutdown+0x114>
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	d02b      	beq.n	800e512 <tcp_close_shutdown+0x16a>
 800e4ba:	e042      	b.n	800e542 <tcp_close_shutdown+0x19a>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	8adb      	ldrh	r3, [r3, #22]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d021      	beq.n	800e508 <tcp_close_shutdown+0x160>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e4c4:	4b2b      	ldr	r3, [pc, #172]	@ (800e574 <tcp_close_shutdown+0x1cc>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d105      	bne.n	800e4da <tcp_close_shutdown+0x132>
 800e4ce:	4b29      	ldr	r3, [pc, #164]	@ (800e574 <tcp_close_shutdown+0x1cc>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	4a27      	ldr	r2, [pc, #156]	@ (800e574 <tcp_close_shutdown+0x1cc>)
 800e4d6:	6013      	str	r3, [r2, #0]
 800e4d8:	e013      	b.n	800e502 <tcp_close_shutdown+0x15a>
 800e4da:	4b26      	ldr	r3, [pc, #152]	@ (800e574 <tcp_close_shutdown+0x1cc>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	60bb      	str	r3, [r7, #8]
 800e4e0:	e00c      	b.n	800e4fc <tcp_close_shutdown+0x154>
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d104      	bne.n	800e4f6 <tcp_close_shutdown+0x14e>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	68da      	ldr	r2, [r3, #12]
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	60da      	str	r2, [r3, #12]
 800e4f4:	e005      	b.n	800e502 <tcp_close_shutdown+0x15a>
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	60bb      	str	r3, [r7, #8]
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1ef      	bne.n	800e4e2 <tcp_close_shutdown+0x13a>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800e508:	6879      	ldr	r1, [r7, #4]
 800e50a:	2001      	movs	r0, #1
 800e50c:	f7fe feb6 	bl	800d27c <memp_free>
    break;
 800e510:	e01c      	b.n	800e54c <tcp_close_shutdown+0x1a4>
  case LISTEN:
    tcp_listen_closed(pcb);
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f7ff ff10 	bl	800e338 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e518:	6879      	ldr	r1, [r7, #4]
 800e51a:	4817      	ldr	r0, [pc, #92]	@ (800e578 <tcp_close_shutdown+0x1d0>)
 800e51c:	f000 ff92 	bl	800f444 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e520:	6879      	ldr	r1, [r7, #4]
 800e522:	2002      	movs	r0, #2
 800e524:	f7fe feaa 	bl	800d27c <memp_free>
    break;
 800e528:	e010      	b.n	800e54c <tcp_close_shutdown+0x1a4>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800e52a:	6879      	ldr	r1, [r7, #4]
 800e52c:	480d      	ldr	r0, [pc, #52]	@ (800e564 <tcp_close_shutdown+0x1bc>)
 800e52e:	f000 ff89 	bl	800f444 <tcp_pcb_remove>
 800e532:	4b0d      	ldr	r3, [pc, #52]	@ (800e568 <tcp_close_shutdown+0x1c0>)
 800e534:	2201      	movs	r2, #1
 800e536:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800e538:	6879      	ldr	r1, [r7, #4]
 800e53a:	2001      	movs	r0, #1
 800e53c:	f7fe fe9e 	bl	800d27c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800e540:	e004      	b.n	800e54c <tcp_close_shutdown+0x1a4>
  default:
    return tcp_close_shutdown_fin(pcb);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f000 f81a 	bl	800e57c <tcp_close_shutdown_fin>
 800e548:	4603      	mov	r3, r0
 800e54a:	e000      	b.n	800e54e <tcp_close_shutdown+0x1a6>
  }
  return ERR_OK;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bdb0      	pop	{r4, r5, r7, pc}
 800e556:	bf00      	nop
 800e558:	080170bc 	.word	0x080170bc
 800e55c:	08017150 	.word	0x08017150
 800e560:	08017110 	.word	0x08017110
 800e564:	2000c7a4 	.word	0x2000c7a4
 800e568:	2000c7ac 	.word	0x2000c7ac
 800e56c:	2000c7a8 	.word	0x2000c7a8
 800e570:	2000c7e4 	.word	0x2000c7e4
 800e574:	2000c79c 	.word	0x2000c79c
 800e578:	2000c7a0 	.word	0x2000c7a0

0800e57c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d106      	bne.n	800e598 <tcp_close_shutdown_fin+0x1c>
 800e58a:	4b2e      	ldr	r3, [pc, #184]	@ (800e644 <tcp_close_shutdown_fin+0xc8>)
 800e58c:	f240 124d 	movw	r2, #333	@ 0x14d
 800e590:	492d      	ldr	r1, [pc, #180]	@ (800e648 <tcp_close_shutdown_fin+0xcc>)
 800e592:	482e      	ldr	r0, [pc, #184]	@ (800e64c <tcp_close_shutdown_fin+0xd0>)
 800e594:	f006 fc0c 	bl	8014db0 <iprintf>

  switch (pcb->state) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	7d1b      	ldrb	r3, [r3, #20]
 800e59c:	2b07      	cmp	r3, #7
 800e59e:	d020      	beq.n	800e5e2 <tcp_close_shutdown_fin+0x66>
 800e5a0:	2b07      	cmp	r3, #7
 800e5a2:	dc2b      	bgt.n	800e5fc <tcp_close_shutdown_fin+0x80>
 800e5a4:	2b03      	cmp	r3, #3
 800e5a6:	d002      	beq.n	800e5ae <tcp_close_shutdown_fin+0x32>
 800e5a8:	2b04      	cmp	r3, #4
 800e5aa:	d00d      	beq.n	800e5c8 <tcp_close_shutdown_fin+0x4c>
 800e5ac:	e026      	b.n	800e5fc <tcp_close_shutdown_fin+0x80>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800e5ae:	6878      	ldr	r0, [r7, #4]
 800e5b0:	f003 faee 	bl	8011b90 <tcp_send_fin>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e5b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d11f      	bne.n	800e600 <tcp_close_shutdown_fin+0x84>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2205      	movs	r2, #5
 800e5c4:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e5c6:	e01b      	b.n	800e600 <tcp_close_shutdown_fin+0x84>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f003 fae1 	bl	8011b90 <tcp_send_fin>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e5d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d114      	bne.n	800e604 <tcp_close_shutdown_fin+0x88>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2205      	movs	r2, #5
 800e5de:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e5e0:	e010      	b.n	800e604 <tcp_close_shutdown_fin+0x88>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f003 fad4 	bl	8011b90 <tcp_send_fin>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d109      	bne.n	800e608 <tcp_close_shutdown_fin+0x8c>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2209      	movs	r2, #9
 800e5f8:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e5fa:	e005      	b.n	800e608 <tcp_close_shutdown_fin+0x8c>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	e01c      	b.n	800e63a <tcp_close_shutdown_fin+0xbe>
    break;
 800e600:	bf00      	nop
 800e602:	e002      	b.n	800e60a <tcp_close_shutdown_fin+0x8e>
    break;
 800e604:	bf00      	nop
 800e606:	e000      	b.n	800e60a <tcp_close_shutdown_fin+0x8e>
    break;
 800e608:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d103      	bne.n	800e61a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f003 fcda 	bl	8011fcc <tcp_output>
 800e618:	e00d      	b.n	800e636 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e61a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e61e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e622:	d108      	bne.n	800e636 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	7e9b      	ldrb	r3, [r3, #26]
 800e628:	f043 0308 	orr.w	r3, r3, #8
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e632:	2300      	movs	r3, #0
 800e634:	e001      	b.n	800e63a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e636:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	080170bc 	.word	0x080170bc
 800e648:	08017104 	.word	0x08017104
 800e64c:	08017110 	.word	0x08017110

0800e650 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	7d1b      	ldrb	r3, [r3, #20]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d006      	beq.n	800e66e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	7e9b      	ldrb	r3, [r3, #26]
 800e664:	f043 0310 	orr.w	r3, r3, #16
 800e668:	b2da      	uxtb	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e66e:	2101      	movs	r1, #1
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff fe99 	bl	800e3a8 <tcp_close_shutdown>
 800e676:	4603      	mov	r3, r0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b08c      	sub	sp, #48	@ 0x30
 800e684:	af02      	add	r7, sp, #8
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	7d1b      	ldrb	r3, [r3, #20]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d106      	bne.n	800e6a0 <tcp_abandon+0x20>
 800e692:	4b4d      	ldr	r3, [pc, #308]	@ (800e7c8 <tcp_abandon+0x148>)
 800e694:	f240 12df 	movw	r2, #479	@ 0x1df
 800e698:	494c      	ldr	r1, [pc, #304]	@ (800e7cc <tcp_abandon+0x14c>)
 800e69a:	484d      	ldr	r0, [pc, #308]	@ (800e7d0 <tcp_abandon+0x150>)
 800e69c:	f006 fb88 	bl	8014db0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	7d1b      	ldrb	r3, [r3, #20]
 800e6a4:	2b0a      	cmp	r3, #10
 800e6a6:	d108      	bne.n	800e6ba <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	484a      	ldr	r0, [pc, #296]	@ (800e7d4 <tcp_abandon+0x154>)
 800e6ac:	f000 feca 	bl	800f444 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e6b0:	6879      	ldr	r1, [r7, #4]
 800e6b2:	2001      	movs	r0, #1
 800e6b4:	f7fe fde2 	bl	800d27c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800e6b8:	e081      	b.n	800e7be <tcp_abandon+0x13e>
    int send_rst = 0;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	847b      	strh	r3, [r7, #34]	@ 0x22
    seqno = pcb->snd_nxt;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e6c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6cc:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6d4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	691b      	ldr	r3, [r3, #16]
 800e6da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	7d1b      	ldrb	r3, [r3, #20]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d126      	bne.n	800e732 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	8adb      	ldrh	r3, [r3, #22]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d02e      	beq.n	800e74a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e6ec:	4b3a      	ldr	r3, [pc, #232]	@ (800e7d8 <tcp_abandon+0x158>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	687a      	ldr	r2, [r7, #4]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d105      	bne.n	800e702 <tcp_abandon+0x82>
 800e6f6:	4b38      	ldr	r3, [pc, #224]	@ (800e7d8 <tcp_abandon+0x158>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	4a36      	ldr	r2, [pc, #216]	@ (800e7d8 <tcp_abandon+0x158>)
 800e6fe:	6013      	str	r3, [r2, #0]
 800e700:	e013      	b.n	800e72a <tcp_abandon+0xaa>
 800e702:	4b35      	ldr	r3, [pc, #212]	@ (800e7d8 <tcp_abandon+0x158>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	61fb      	str	r3, [r7, #28]
 800e708:	e00c      	b.n	800e724 <tcp_abandon+0xa4>
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	429a      	cmp	r2, r3
 800e712:	d104      	bne.n	800e71e <tcp_abandon+0x9e>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	68da      	ldr	r2, [r3, #12]
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	60da      	str	r2, [r3, #12]
 800e71c:	e005      	b.n	800e72a <tcp_abandon+0xaa>
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	61fb      	str	r3, [r7, #28]
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1ef      	bne.n	800e70a <tcp_abandon+0x8a>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2200      	movs	r2, #0
 800e72e:	60da      	str	r2, [r3, #12]
 800e730:	e00b      	b.n	800e74a <tcp_abandon+0xca>
      send_rst = reset;
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	8adb      	ldrh	r3, [r3, #22]
 800e73a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e73c:	6879      	ldr	r1, [r7, #4]
 800e73e:	4827      	ldr	r0, [pc, #156]	@ (800e7dc <tcp_abandon+0x15c>)
 800e740:	f000 fe80 	bl	800f444 <tcp_pcb_remove>
 800e744:	4b26      	ldr	r3, [pc, #152]	@ (800e7e0 <tcp_abandon+0x160>)
 800e746:	2201      	movs	r2, #1
 800e748:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d004      	beq.n	800e75c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e756:	4618      	mov	r0, r3
 800e758:	f000 fc89 	bl	800f06e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e760:	2b00      	cmp	r3, #0
 800e762:	d004      	beq.n	800e76e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e768:	4618      	mov	r0, r3
 800e76a:	f000 fc80 	bl	800f06e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e772:	2b00      	cmp	r3, #0
 800e774:	d004      	beq.n	800e780 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e77a:	4618      	mov	r0, r3
 800e77c:	f000 fc77 	bl	800f06e <tcp_segs_free>
    if (send_rst) {
 800e780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00c      	beq.n	800e7a0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e786:	687a      	ldr	r2, [r7, #4]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	1d19      	adds	r1, r3, #4
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	8b1b      	ldrh	r3, [r3, #24]
 800e790:	9301      	str	r3, [sp, #4]
 800e792:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	460b      	mov	r3, r1
 800e798:	6979      	ldr	r1, [r7, #20]
 800e79a:	69b8      	ldr	r0, [r7, #24]
 800e79c:	f003 fe9a 	bl	80124d4 <tcp_rst>
    last_state = pcb->state;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	7d1b      	ldrb	r3, [r3, #20]
 800e7a4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800e7a6:	6879      	ldr	r1, [r7, #4]
 800e7a8:	2001      	movs	r0, #1
 800e7aa:	f7fe fd67 	bl	800d27c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d004      	beq.n	800e7be <tcp_abandon+0x13e>
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	f06f 010c 	mvn.w	r1, #12
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	4798      	blx	r3
}
 800e7be:	bf00      	nop
 800e7c0:	3728      	adds	r7, #40	@ 0x28
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	080170bc 	.word	0x080170bc
 800e7cc:	0801716c 	.word	0x0801716c
 800e7d0:	08017110 	.word	0x08017110
 800e7d4:	2000c7a8 	.word	0x2000c7a8
 800e7d8:	2000c79c 	.word	0x2000c79c
 800e7dc:	2000c7a4 	.word	0x2000c7a4
 800e7e0:	2000c7ac 	.word	0x2000c7ac

0800e7e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e7ec:	2101      	movs	r1, #1
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7ff ff46 	bl	800e680 <tcp_abandon>
}
 800e7f4:	bf00      	nop
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e80c:	4413      	add	r3, r2
 800e80e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e818:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e81c:	bf28      	it	cs
 800e81e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e822:	b292      	uxth	r2, r2
 800e824:	4413      	add	r3, r2
 800e826:	68fa      	ldr	r2, [r7, #12]
 800e828:	1ad3      	subs	r3, r2, r3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	db08      	blt.n	800e840 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	1ad3      	subs	r3, r2, r3
 800e83e:	e020      	b.n	800e882 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	dd03      	ble.n	800e856 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2200      	movs	r2, #0
 800e852:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e854:	e014      	b.n	800e880 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e868:	d306      	bcc.n	800e878 <tcp_update_rcv_ann_wnd+0x7c>
 800e86a:	4b08      	ldr	r3, [pc, #32]	@ (800e88c <tcp_update_rcv_ann_wnd+0x90>)
 800e86c:	f44f 7242 	mov.w	r2, #776	@ 0x308
 800e870:	4907      	ldr	r1, [pc, #28]	@ (800e890 <tcp_update_rcv_ann_wnd+0x94>)
 800e872:	4808      	ldr	r0, [pc, #32]	@ (800e894 <tcp_update_rcv_ann_wnd+0x98>)
 800e874:	f006 fa9c 	bl	8014db0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e880:	2300      	movs	r3, #0
  }
}
 800e882:	4618      	mov	r0, r3
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	080170bc 	.word	0x080170bc
 800e890:	080171ec 	.word	0x080171ec
 800e894:	08017110 	.word	0x08017110

0800e898 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b084      	sub	sp, #16
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	7d1b      	ldrb	r3, [r3, #20]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d106      	bne.n	800e8ba <tcp_recved+0x22>
 800e8ac:	4b23      	ldr	r3, [pc, #140]	@ (800e93c <tcp_recved+0xa4>)
 800e8ae:	f240 321f 	movw	r2, #799	@ 0x31f
 800e8b2:	4923      	ldr	r1, [pc, #140]	@ (800e940 <tcp_recved+0xa8>)
 800e8b4:	4823      	ldr	r0, [pc, #140]	@ (800e944 <tcp_recved+0xac>)
 800e8b6:	f006 fa7b 	bl	8014db0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e8be:	887b      	ldrh	r3, [r7, #2]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	b29a      	uxth	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	851a      	strh	r2, [r3, #40]	@ 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8cc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e8d0:	d904      	bls.n	800e8dc <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e8d8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e8da:	e017      	b.n	800e90c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d113      	bne.n	800e90c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	7d1b      	ldrb	r3, [r3, #20]
 800e8e8:	2b07      	cmp	r3, #7
 800e8ea:	d003      	beq.n	800e8f4 <tcp_recved+0x5c>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	7d1b      	ldrb	r3, [r3, #20]
 800e8f0:	2b09      	cmp	r3, #9
 800e8f2:	d104      	bne.n	800e8fe <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e8fa:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e8fc:	e006      	b.n	800e90c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800e8fe:	4b0f      	ldr	r3, [pc, #60]	@ (800e93c <tcp_recved+0xa4>)
 800e900:	f240 322d 	movw	r2, #813	@ 0x32d
 800e904:	4910      	ldr	r1, [pc, #64]	@ (800e948 <tcp_recved+0xb0>)
 800e906:	480f      	ldr	r0, [pc, #60]	@ (800e944 <tcp_recved+0xac>)
 800e908:	f006 fa52 	bl	8014db0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f7ff ff75 	bl	800e7fc <tcp_update_rcv_ann_wnd>
 800e912:	4603      	mov	r3, r0
 800e914:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e91c:	db09      	blt.n	800e932 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	7e9b      	ldrb	r3, [r3, #26]
 800e922:	f043 0302 	orr.w	r3, r3, #2
 800e926:	b2da      	uxtb	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f003 fb4d 	bl	8011fcc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e932:	bf00      	nop
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	080170bc 	.word	0x080170bc
 800e940:	08017208 	.word	0x08017208
 800e944:	08017110 	.word	0x08017110
 800e948:	08017230 	.word	0x08017230

0800e94c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e94c:	b5b0      	push	{r4, r5, r7, lr}
 800e94e:	b08c      	sub	sp, #48	@ 0x30
 800e950:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e952:	2300      	movs	r3, #0
 800e954:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800e956:	4b98      	ldr	r3, [pc, #608]	@ (800ebb8 <tcp_slowtmr+0x26c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	3301      	adds	r3, #1
 800e95c:	4a96      	ldr	r2, [pc, #600]	@ (800ebb8 <tcp_slowtmr+0x26c>)
 800e95e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e960:	4b96      	ldr	r3, [pc, #600]	@ (800ebbc <tcp_slowtmr+0x270>)
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	3301      	adds	r3, #1
 800e966:	b2da      	uxtb	r2, r3
 800e968:	4b94      	ldr	r3, [pc, #592]	@ (800ebbc <tcp_slowtmr+0x270>)
 800e96a:	701a      	strb	r2, [r3, #0]
 800e96c:	e000      	b.n	800e970 <tcp_slowtmr+0x24>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e96e:	bf00      	nop
  prev = NULL;
 800e970:	2300      	movs	r3, #0
 800e972:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800e974:	4b92      	ldr	r3, [pc, #584]	@ (800ebc0 <tcp_slowtmr+0x274>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800e97a:	e227      	b.n	800edcc <tcp_slowtmr+0x480>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e97e:	7d1b      	ldrb	r3, [r3, #20]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d106      	bne.n	800e992 <tcp_slowtmr+0x46>
 800e984:	4b8f      	ldr	r3, [pc, #572]	@ (800ebc4 <tcp_slowtmr+0x278>)
 800e986:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 800e98a:	498f      	ldr	r1, [pc, #572]	@ (800ebc8 <tcp_slowtmr+0x27c>)
 800e98c:	488f      	ldr	r0, [pc, #572]	@ (800ebcc <tcp_slowtmr+0x280>)
 800e98e:	f006 fa0f 	bl	8014db0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e994:	7d1b      	ldrb	r3, [r3, #20]
 800e996:	2b01      	cmp	r3, #1
 800e998:	d106      	bne.n	800e9a8 <tcp_slowtmr+0x5c>
 800e99a:	4b8a      	ldr	r3, [pc, #552]	@ (800ebc4 <tcp_slowtmr+0x278>)
 800e99c:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e9a0:	498b      	ldr	r1, [pc, #556]	@ (800ebd0 <tcp_slowtmr+0x284>)
 800e9a2:	488a      	ldr	r0, [pc, #552]	@ (800ebcc <tcp_slowtmr+0x280>)
 800e9a4:	f006 fa04 	bl	8014db0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9aa:	7d1b      	ldrb	r3, [r3, #20]
 800e9ac:	2b0a      	cmp	r3, #10
 800e9ae:	d106      	bne.n	800e9be <tcp_slowtmr+0x72>
 800e9b0:	4b84      	ldr	r3, [pc, #528]	@ (800ebc4 <tcp_slowtmr+0x278>)
 800e9b2:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 800e9b6:	4987      	ldr	r1, [pc, #540]	@ (800ebd4 <tcp_slowtmr+0x288>)
 800e9b8:	4884      	ldr	r0, [pc, #528]	@ (800ebcc <tcp_slowtmr+0x280>)
 800e9ba:	f006 f9f9 	bl	8014db0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c0:	7f5a      	ldrb	r2, [r3, #29]
 800e9c2:	4b7e      	ldr	r3, [pc, #504]	@ (800ebbc <tcp_slowtmr+0x270>)
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d103      	bne.n	800e9d2 <tcp_slowtmr+0x86>
      pcb = pcb->next;
 800e9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9cc:	68db      	ldr	r3, [r3, #12]
 800e9ce:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 800e9d0:	e1fc      	b.n	800edcc <tcp_slowtmr+0x480>
    pcb->last_timer = tcp_timer_ctr;
 800e9d2:	4b7a      	ldr	r3, [pc, #488]	@ (800ebbc <tcp_slowtmr+0x270>)
 800e9d4:	781a      	ldrb	r2, [r3, #0]
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9d8:	775a      	strb	r2, [r3, #29]
    pcb_remove = 0;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	77bb      	strb	r3, [r7, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e4:	7d1b      	ldrb	r3, [r3, #20]
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d108      	bne.n	800e9fc <tcp_slowtmr+0xb0>
 800e9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e9f0:	2b05      	cmp	r3, #5
 800e9f2:	d903      	bls.n	800e9fc <tcp_slowtmr+0xb0>
      ++pcb_remove;
 800e9f4:	7ffb      	ldrb	r3, [r7, #31]
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	77fb      	strb	r3, [r7, #31]
 800e9fa:	e0a2      	b.n	800eb42 <tcp_slowtmr+0x1f6>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800e9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ea02:	2b0b      	cmp	r3, #11
 800ea04:	d903      	bls.n	800ea0e <tcp_slowtmr+0xc2>
      ++pcb_remove;
 800ea06:	7ffb      	ldrb	r3, [r7, #31]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	77fb      	strb	r3, [r7, #31]
 800ea0c:	e099      	b.n	800eb42 <tcp_slowtmr+0x1f6>
      if (pcb->persist_backoff > 0) {
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea10:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d032      	beq.n	800ea7e <tcp_slowtmr+0x132>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800ea18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea1a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800ea1e:	3b01      	subs	r3, #1
 800ea20:	4a6d      	ldr	r2, [pc, #436]	@ (800ebd8 <tcp_slowtmr+0x28c>)
 800ea22:	5cd3      	ldrb	r3, [r2, r3]
 800ea24:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800ea26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea28:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ea2c:	7cfa      	ldrb	r2, [r7, #19]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d907      	bls.n	800ea42 <tcp_slowtmr+0xf6>
          pcb->persist_cnt++;
 800ea32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea34:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ea38:	3301      	adds	r3, #1
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea3e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 800ea42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea44:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800ea48:	7cfa      	ldrb	r2, [r7, #19]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d879      	bhi.n	800eb42 <tcp_slowtmr+0x1f6>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800ea4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea50:	f003 fec7 	bl	80127e2 <tcp_zero_window_probe>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d173      	bne.n	800eb42 <tcp_slowtmr+0x1f6>
            pcb->persist_cnt = 0;
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ea62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea64:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800ea68:	2b06      	cmp	r3, #6
 800ea6a:	d86a      	bhi.n	800eb42 <tcp_slowtmr+0x1f6>
              pcb->persist_backoff++;
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea6e:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800ea72:	3301      	adds	r3, #1
 800ea74:	b2da      	uxtb	r2, r3
 800ea76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea78:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800ea7c:	e061      	b.n	800eb42 <tcp_slowtmr+0x1f6>
        if (pcb->rtime >= 0) {
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	db08      	blt.n	800ea9a <tcp_slowtmr+0x14e>
          ++pcb->rtime;
 800ea88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	3301      	adds	r3, #1
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	b21a      	sxth	r2, r3
 800ea96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea98:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d04f      	beq.n	800eb42 <tcp_slowtmr+0x1f6>
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaaa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800eaae:	429a      	cmp	r2, r3
 800eab0:	db47      	blt.n	800eb42 <tcp_slowtmr+0x1f6>
          if (pcb->state != SYN_SENT) {
 800eab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eab4:	7d1b      	ldrb	r3, [r3, #20]
 800eab6:	2b02      	cmp	r3, #2
 800eab8:	d018      	beq.n	800eaec <tcp_slowtmr+0x1a0>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800eaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eabc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eac0:	2b0c      	cmp	r3, #12
 800eac2:	bf28      	it	cs
 800eac4:	230c      	movcs	r3, #12
 800eac6:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800eac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800eace:	10db      	asrs	r3, r3, #3
 800ead0:	b21b      	sxth	r3, r3
 800ead2:	461a      	mov	r2, r3
 800ead4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800eada:	4413      	add	r3, r2
 800eadc:	7dfa      	ldrb	r2, [r7, #23]
 800eade:	493f      	ldr	r1, [pc, #252]	@ (800ebdc <tcp_slowtmr+0x290>)
 800eae0:	5c8a      	ldrb	r2, [r1, r2]
 800eae2:	4093      	lsls	r3, r2
 800eae4:	b21a      	sxth	r2, r3
 800eae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
          pcb->rtime = 0;
 800eaec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaee:	2200      	movs	r2, #0
 800eaf0:	861a      	strh	r2, [r3, #48]	@ 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800eaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eafe:	4293      	cmp	r3, r2
 800eb00:	bf28      	it	cs
 800eb02:	4613      	movcs	r3, r2
 800eb04:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800eb06:	8abb      	ldrh	r3, [r7, #20]
 800eb08:	085b      	lsrs	r3, r3, #1
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800eb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb14:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800eb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb1c:	005b      	lsls	r3, r3, #1
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d206      	bcs.n	800eb32 <tcp_slowtmr+0x1e6>
            pcb->ssthresh = (pcb->mss << 1);
 800eb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb28:	005b      	lsls	r3, r3, #1
 800eb2a:	b29a      	uxth	r2, r3
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb2e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
          pcb->cwnd = pcb->mss;
 800eb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb34:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800eb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb38:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          tcp_rexmit_rto(pcb);
 800eb3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb3e:	f003 fd3f 	bl	80125c0 <tcp_rexmit_rto>
    if (pcb->state == FIN_WAIT_2) {
 800eb42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb44:	7d1b      	ldrb	r3, [r3, #20]
 800eb46:	2b06      	cmp	r3, #6
 800eb48:	d10f      	bne.n	800eb6a <tcp_slowtmr+0x21e>
      if (pcb->flags & TF_RXCLOSED) {
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb4c:	7e9b      	ldrb	r3, [r3, #26]
 800eb4e:	f003 0310 	and.w	r3, r3, #16
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d009      	beq.n	800eb6a <tcp_slowtmr+0x21e>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb56:	4b18      	ldr	r3, [pc, #96]	@ (800ebb8 <tcp_slowtmr+0x26c>)
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5c:	6a1b      	ldr	r3, [r3, #32]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	2b28      	cmp	r3, #40	@ 0x28
 800eb62:	d902      	bls.n	800eb6a <tcp_slowtmr+0x21e>
          ++pcb_remove;
 800eb64:	7ffb      	ldrb	r3, [r7, #31]
 800eb66:	3301      	adds	r3, #1
 800eb68:	77fb      	strb	r3, [r7, #31]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb6c:	7a1b      	ldrb	r3, [r3, #8]
 800eb6e:	f003 0308 	and.w	r3, r3, #8
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d05d      	beq.n	800ec32 <tcp_slowtmr+0x2e6>
       ((pcb->state == ESTABLISHED) ||
 800eb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb78:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb7a:	2b04      	cmp	r3, #4
 800eb7c:	d003      	beq.n	800eb86 <tcp_slowtmr+0x23a>
        (pcb->state == CLOSE_WAIT))) {
 800eb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb80:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800eb82:	2b07      	cmp	r3, #7
 800eb84:	d155      	bne.n	800ec32 <tcp_slowtmr+0x2e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb86:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb8 <tcp_slowtmr+0x26c>)
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb8c:	6a1b      	ldr	r3, [r3, #32]
 800eb8e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800eb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eb96:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800eb9a:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800eb9e:	4910      	ldr	r1, [pc, #64]	@ (800ebe0 <tcp_slowtmr+0x294>)
 800eba0:	fba1 1303 	umull	r1, r3, r1, r3
 800eba4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d91c      	bls.n	800ebe4 <tcp_slowtmr+0x298>
        ++pcb_remove;
 800ebaa:	7ffb      	ldrb	r3, [r7, #31]
 800ebac:	3301      	adds	r3, #1
 800ebae:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800ebb0:	7fbb      	ldrb	r3, [r7, #30]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	77bb      	strb	r3, [r7, #30]
 800ebb6:	e03c      	b.n	800ec32 <tcp_slowtmr+0x2e6>
 800ebb8:	2000c798 	.word	0x2000c798
 800ebbc:	2000c7ae 	.word	0x2000c7ae
 800ebc0:	2000c7a4 	.word	0x2000c7a4
 800ebc4:	080170bc 	.word	0x080170bc
 800ebc8:	08017284 	.word	0x08017284
 800ebcc:	08017110 	.word	0x08017110
 800ebd0:	080172b0 	.word	0x080172b0
 800ebd4:	080172dc 	.word	0x080172dc
 800ebd8:	08017f0c 	.word	0x08017f0c
 800ebdc:	08017efc 	.word	0x08017efc
 800ebe0:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebe4:	4b97      	ldr	r3, [pc, #604]	@ (800ee44 <tcp_slowtmr+0x4f8>)
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebea:	6a1b      	ldr	r3, [r3, #32]
 800ebec:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ebee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf0:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800ebf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf6:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	4b92      	ldr	r3, [pc, #584]	@ (800ee48 <tcp_slowtmr+0x4fc>)
 800ebfe:	fb00 f303 	mul.w	r3, r0, r3
 800ec02:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800ec04:	4991      	ldr	r1, [pc, #580]	@ (800ee4c <tcp_slowtmr+0x500>)
 800ec06:	fba1 1303 	umull	r1, r3, r1, r3
 800ec0a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d910      	bls.n	800ec32 <tcp_slowtmr+0x2e6>
        err = tcp_keepalive(pcb);
 800ec10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ec12:	f003 fda9 	bl	8012768 <tcp_keepalive>
 800ec16:	4603      	mov	r3, r0
 800ec18:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800ec1a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d107      	bne.n	800ec32 <tcp_slowtmr+0x2e6>
          pcb->keep_cnt_sent++;
 800ec22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec24:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800ec28:	3301      	adds	r3, #1
 800ec2a:	b2da      	uxtb	r2, r3
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2e:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    if (pcb->ooseq != NULL &&
 800ec32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d016      	beq.n	800ec68 <tcp_slowtmr+0x31c>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800ec3a:	4b82      	ldr	r3, [pc, #520]	@ (800ee44 <tcp_slowtmr+0x4f8>)
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec40:	6a1b      	ldr	r3, [r3, #32]
 800ec42:	1ad2      	subs	r2, r2, r3
 800ec44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec46:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	005b      	lsls	r3, r3, #1
 800ec50:	440b      	add	r3, r1
 800ec52:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d307      	bcc.n	800ec68 <tcp_slowtmr+0x31c>
      tcp_segs_free(pcb->ooseq);
 800ec58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f000 fa06 	bl	800f06e <tcp_segs_free>
      pcb->ooseq = NULL;
 800ec62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec64:	2200      	movs	r2, #0
 800ec66:	671a      	str	r2, [r3, #112]	@ 0x70
    if (pcb->state == SYN_RCVD) {
 800ec68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec6a:	7d1b      	ldrb	r3, [r3, #20]
 800ec6c:	2b03      	cmp	r3, #3
 800ec6e:	d109      	bne.n	800ec84 <tcp_slowtmr+0x338>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec70:	4b74      	ldr	r3, [pc, #464]	@ (800ee44 <tcp_slowtmr+0x4f8>)
 800ec72:	681a      	ldr	r2, [r3, #0]
 800ec74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec76:	6a1b      	ldr	r3, [r3, #32]
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	2b28      	cmp	r3, #40	@ 0x28
 800ec7c:	d902      	bls.n	800ec84 <tcp_slowtmr+0x338>
        ++pcb_remove;
 800ec7e:	7ffb      	ldrb	r3, [r7, #31]
 800ec80:	3301      	adds	r3, #1
 800ec82:	77fb      	strb	r3, [r7, #31]
    if (pcb->state == LAST_ACK) {
 800ec84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec86:	7d1b      	ldrb	r3, [r3, #20]
 800ec88:	2b09      	cmp	r3, #9
 800ec8a:	d109      	bne.n	800eca0 <tcp_slowtmr+0x354>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ec8c:	4b6d      	ldr	r3, [pc, #436]	@ (800ee44 <tcp_slowtmr+0x4f8>)
 800ec8e:	681a      	ldr	r2, [r3, #0]
 800ec90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec92:	6a1b      	ldr	r3, [r3, #32]
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	2bf0      	cmp	r3, #240	@ 0xf0
 800ec98:	d902      	bls.n	800eca0 <tcp_slowtmr+0x354>
        ++pcb_remove;
 800ec9a:	7ffb      	ldrb	r3, [r7, #31]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	77fb      	strb	r3, [r7, #31]
    if (pcb_remove) {
 800eca0:	7ffb      	ldrb	r3, [r7, #31]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d05d      	beq.n	800ed62 <tcp_slowtmr+0x416>
      tcp_err_fn err_fn = pcb->errf;
 800eca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ecac:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800ecae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecb0:	f000 fb86 	bl	800f3c0 <tcp_pcb_purge>
      if (prev != NULL) {
 800ecb4:	6a3b      	ldr	r3, [r7, #32]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d010      	beq.n	800ecdc <tcp_slowtmr+0x390>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ecba:	4b65      	ldr	r3, [pc, #404]	@ (800ee50 <tcp_slowtmr+0x504>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d106      	bne.n	800ecd2 <tcp_slowtmr+0x386>
 800ecc4:	4b63      	ldr	r3, [pc, #396]	@ (800ee54 <tcp_slowtmr+0x508>)
 800ecc6:	f240 4289 	movw	r2, #1161	@ 0x489
 800ecca:	4963      	ldr	r1, [pc, #396]	@ (800ee58 <tcp_slowtmr+0x50c>)
 800eccc:	4863      	ldr	r0, [pc, #396]	@ (800ee5c <tcp_slowtmr+0x510>)
 800ecce:	f006 f86f 	bl	8014db0 <iprintf>
        prev->next = pcb->next;
 800ecd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd4:	68da      	ldr	r2, [r3, #12]
 800ecd6:	6a3b      	ldr	r3, [r7, #32]
 800ecd8:	60da      	str	r2, [r3, #12]
 800ecda:	e00f      	b.n	800ecfc <tcp_slowtmr+0x3b0>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ecdc:	4b5c      	ldr	r3, [pc, #368]	@ (800ee50 <tcp_slowtmr+0x504>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d006      	beq.n	800ecf4 <tcp_slowtmr+0x3a8>
 800ece6:	4b5b      	ldr	r3, [pc, #364]	@ (800ee54 <tcp_slowtmr+0x508>)
 800ece8:	f240 428d 	movw	r2, #1165	@ 0x48d
 800ecec:	495c      	ldr	r1, [pc, #368]	@ (800ee60 <tcp_slowtmr+0x514>)
 800ecee:	485b      	ldr	r0, [pc, #364]	@ (800ee5c <tcp_slowtmr+0x510>)
 800ecf0:	f006 f85e 	bl	8014db0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ecf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	4a55      	ldr	r2, [pc, #340]	@ (800ee50 <tcp_slowtmr+0x504>)
 800ecfa:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ecfc:	7fbb      	ldrb	r3, [r7, #30]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d010      	beq.n	800ed24 <tcp_slowtmr+0x3d8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ed02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed04:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800ed06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed08:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ed0a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800ed0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed0e:	1d1d      	adds	r5, r3, #4
 800ed10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed12:	8adb      	ldrh	r3, [r3, #22]
 800ed14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed16:	8b12      	ldrh	r2, [r2, #24]
 800ed18:	9201      	str	r2, [sp, #4]
 800ed1a:	9300      	str	r3, [sp, #0]
 800ed1c:	462b      	mov	r3, r5
 800ed1e:	4622      	mov	r2, r4
 800ed20:	f003 fbd8 	bl	80124d4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ed24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed26:	691b      	ldr	r3, [r3, #16]
 800ed28:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed2c:	7d1b      	ldrb	r3, [r3, #20]
 800ed2e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ed30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed32:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ed34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ed3a:	6839      	ldr	r1, [r7, #0]
 800ed3c:	2001      	movs	r0, #1
 800ed3e:	f7fe fa9d 	bl	800d27c <memp_free>
      tcp_active_pcbs_changed = 0;
 800ed42:	4b48      	ldr	r3, [pc, #288]	@ (800ee64 <tcp_slowtmr+0x518>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d004      	beq.n	800ed58 <tcp_slowtmr+0x40c>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f06f 010c 	mvn.w	r1, #12
 800ed54:	68b8      	ldr	r0, [r7, #8]
 800ed56:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ed58:	4b42      	ldr	r3, [pc, #264]	@ (800ee64 <tcp_slowtmr+0x518>)
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d035      	beq.n	800edcc <tcp_slowtmr+0x480>
        goto tcp_slowtmr_start;
 800ed60:	e606      	b.n	800e970 <tcp_slowtmr+0x24>
      prev = pcb;
 800ed62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed64:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800ed66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed68:	68db      	ldr	r3, [r3, #12]
 800ed6a:	627b      	str	r3, [r7, #36]	@ 0x24
      ++prev->polltmr;
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
 800ed6e:	7edb      	ldrb	r3, [r3, #27]
 800ed70:	3301      	adds	r3, #1
 800ed72:	b2da      	uxtb	r2, r3
 800ed74:	6a3b      	ldr	r3, [r7, #32]
 800ed76:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800ed78:	6a3b      	ldr	r3, [r7, #32]
 800ed7a:	7eda      	ldrb	r2, [r3, #27]
 800ed7c:	6a3b      	ldr	r3, [r7, #32]
 800ed7e:	7f1b      	ldrb	r3, [r3, #28]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d323      	bcc.n	800edcc <tcp_slowtmr+0x480>
        prev->polltmr = 0;
 800ed84:	6a3b      	ldr	r3, [r7, #32]
 800ed86:	2200      	movs	r2, #0
 800ed88:	76da      	strb	r2, [r3, #27]
        tcp_active_pcbs_changed = 0;
 800ed8a:	4b36      	ldr	r3, [pc, #216]	@ (800ee64 <tcp_slowtmr+0x518>)
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ed90:	6a3b      	ldr	r3, [r7, #32]
 800ed92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d00a      	beq.n	800edb0 <tcp_slowtmr+0x464>
 800ed9a:	6a3b      	ldr	r3, [r7, #32]
 800ed9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eda0:	6a3a      	ldr	r2, [r7, #32]
 800eda2:	6912      	ldr	r2, [r2, #16]
 800eda4:	6a39      	ldr	r1, [r7, #32]
 800eda6:	4610      	mov	r0, r2
 800eda8:	4798      	blx	r3
 800edaa:	4603      	mov	r3, r0
 800edac:	777b      	strb	r3, [r7, #29]
 800edae:	e001      	b.n	800edb4 <tcp_slowtmr+0x468>
 800edb0:	2300      	movs	r3, #0
 800edb2:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800edb4:	4b2b      	ldr	r3, [pc, #172]	@ (800ee64 <tcp_slowtmr+0x518>)
 800edb6:	781b      	ldrb	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	f47f add8 	bne.w	800e96e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800edbe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d102      	bne.n	800edcc <tcp_slowtmr+0x480>
          tcp_output(prev);
 800edc6:	6a38      	ldr	r0, [r7, #32]
 800edc8:	f003 f900 	bl	8011fcc <tcp_output>
  while (pcb != NULL) {
 800edcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f47f add4 	bne.w	800e97c <tcp_slowtmr+0x30>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800edd4:	2300      	movs	r3, #0
 800edd6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800edd8:	4b23      	ldr	r3, [pc, #140]	@ (800ee68 <tcp_slowtmr+0x51c>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800edde:	e068      	b.n	800eeb2 <tcp_slowtmr+0x566>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ede0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede2:	7d1b      	ldrb	r3, [r3, #20]
 800ede4:	2b0a      	cmp	r3, #10
 800ede6:	d006      	beq.n	800edf6 <tcp_slowtmr+0x4aa>
 800ede8:	4b1a      	ldr	r3, [pc, #104]	@ (800ee54 <tcp_slowtmr+0x508>)
 800edea:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800edee:	491f      	ldr	r1, [pc, #124]	@ (800ee6c <tcp_slowtmr+0x520>)
 800edf0:	481a      	ldr	r0, [pc, #104]	@ (800ee5c <tcp_slowtmr+0x510>)
 800edf2:	f005 ffdd 	bl	8014db0 <iprintf>
    pcb_remove = 0;
 800edf6:	2300      	movs	r3, #0
 800edf8:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800edfa:	4b12      	ldr	r3, [pc, #72]	@ (800ee44 <tcp_slowtmr+0x4f8>)
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	1ad3      	subs	r3, r2, r3
 800ee04:	2bf0      	cmp	r3, #240	@ 0xf0
 800ee06:	d902      	bls.n	800ee0e <tcp_slowtmr+0x4c2>
      ++pcb_remove;
 800ee08:	7ffb      	ldrb	r3, [r7, #31]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ee0e:	7ffb      	ldrb	r3, [r7, #31]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d049      	beq.n	800eea8 <tcp_slowtmr+0x55c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ee14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee16:	f000 fad3 	bl	800f3c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ee1a:	6a3b      	ldr	r3, [r7, #32]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d029      	beq.n	800ee74 <tcp_slowtmr+0x528>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ee20:	4b11      	ldr	r3, [pc, #68]	@ (800ee68 <tcp_slowtmr+0x51c>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d106      	bne.n	800ee38 <tcp_slowtmr+0x4ec>
 800ee2a:	4b0a      	ldr	r3, [pc, #40]	@ (800ee54 <tcp_slowtmr+0x508>)
 800ee2c:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 800ee30:	490f      	ldr	r1, [pc, #60]	@ (800ee70 <tcp_slowtmr+0x524>)
 800ee32:	480a      	ldr	r0, [pc, #40]	@ (800ee5c <tcp_slowtmr+0x510>)
 800ee34:	f005 ffbc 	bl	8014db0 <iprintf>
        prev->next = pcb->next;
 800ee38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3a:	68da      	ldr	r2, [r3, #12]
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	60da      	str	r2, [r3, #12]
 800ee40:	e028      	b.n	800ee94 <tcp_slowtmr+0x548>
 800ee42:	bf00      	nop
 800ee44:	2000c798 	.word	0x2000c798
 800ee48:	000124f8 	.word	0x000124f8
 800ee4c:	10624dd3 	.word	0x10624dd3
 800ee50:	2000c7a4 	.word	0x2000c7a4
 800ee54:	080170bc 	.word	0x080170bc
 800ee58:	0801730c 	.word	0x0801730c
 800ee5c:	08017110 	.word	0x08017110
 800ee60:	08017338 	.word	0x08017338
 800ee64:	2000c7ac 	.word	0x2000c7ac
 800ee68:	2000c7a8 	.word	0x2000c7a8
 800ee6c:	08017364 	.word	0x08017364
 800ee70:	08017394 	.word	0x08017394
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ee74:	4b13      	ldr	r3, [pc, #76]	@ (800eec4 <tcp_slowtmr+0x578>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d006      	beq.n	800ee8c <tcp_slowtmr+0x540>
 800ee7e:	4b12      	ldr	r3, [pc, #72]	@ (800eec8 <tcp_slowtmr+0x57c>)
 800ee80:	f240 42cf 	movw	r2, #1231	@ 0x4cf
 800ee84:	4911      	ldr	r1, [pc, #68]	@ (800eecc <tcp_slowtmr+0x580>)
 800ee86:	4812      	ldr	r0, [pc, #72]	@ (800eed0 <tcp_slowtmr+0x584>)
 800ee88:	f005 ff92 	bl	8014db0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ee8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	4a0c      	ldr	r2, [pc, #48]	@ (800eec4 <tcp_slowtmr+0x578>)
 800ee92:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ee94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee96:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800ee98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9a:	68db      	ldr	r3, [r3, #12]
 800ee9c:	627b      	str	r3, [r7, #36]	@ 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ee9e:	69b9      	ldr	r1, [r7, #24]
 800eea0:	2001      	movs	r0, #1
 800eea2:	f7fe f9eb 	bl	800d27c <memp_free>
 800eea6:	e004      	b.n	800eeb2 <tcp_slowtmr+0x566>
    } else {
      prev = pcb;
 800eea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeaa:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800eeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeae:	68db      	ldr	r3, [r3, #12]
 800eeb0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (pcb != NULL) {
 800eeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d193      	bne.n	800ede0 <tcp_slowtmr+0x494>
    }
  }
}
 800eeb8:	bf00      	nop
 800eeba:	bf00      	nop
 800eebc:	3728      	adds	r7, #40	@ 0x28
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bdb0      	pop	{r4, r5, r7, pc}
 800eec2:	bf00      	nop
 800eec4:	2000c7a8 	.word	0x2000c7a8
 800eec8:	080170bc 	.word	0x080170bc
 800eecc:	080173bc 	.word	0x080173bc
 800eed0:	08017110 	.word	0x08017110

0800eed4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800eeda:	4b2d      	ldr	r3, [pc, #180]	@ (800ef90 <tcp_fasttmr+0xbc>)
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	3301      	adds	r3, #1
 800eee0:	b2da      	uxtb	r2, r3
 800eee2:	4b2b      	ldr	r3, [pc, #172]	@ (800ef90 <tcp_fasttmr+0xbc>)
 800eee4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800eee6:	4b2b      	ldr	r3, [pc, #172]	@ (800ef94 <tcp_fasttmr+0xc0>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eeec:	e048      	b.n	800ef80 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	7f5a      	ldrb	r2, [r3, #29]
 800eef2:	4b27      	ldr	r3, [pc, #156]	@ (800ef90 <tcp_fasttmr+0xbc>)
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d03f      	beq.n	800ef7a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eefa:	4b25      	ldr	r3, [pc, #148]	@ (800ef90 <tcp_fasttmr+0xbc>)
 800eefc:	781a      	ldrb	r2, [r3, #0]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	7e9b      	ldrb	r3, [r3, #26]
 800ef06:	f003 0301 	and.w	r3, r3, #1
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d010      	beq.n	800ef30 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	7e9b      	ldrb	r3, [r3, #26]
 800ef12:	f043 0302 	orr.w	r3, r3, #2
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f003 f855 	bl	8011fcc <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	7e9b      	ldrb	r3, [r3, #26]
 800ef26:	f023 0303 	bic.w	r3, r3, #3
 800ef2a:	b2da      	uxtb	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	7e9b      	ldrb	r3, [r3, #26]
 800ef34:	f003 0308 	and.w	r3, r3, #8
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d009      	beq.n	800ef50 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	7e9b      	ldrb	r3, [r3, #26]
 800ef40:	f023 0308 	bic.w	r3, r3, #8
 800ef44:	b2da      	uxtb	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7ff fb16 	bl	800e57c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00a      	beq.n	800ef74 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ef5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ef98 <tcp_fasttmr+0xc4>)
 800ef60:	2200      	movs	r2, #0
 800ef62:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 f819 	bl	800ef9c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ef6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ef98 <tcp_fasttmr+0xc4>)
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d000      	beq.n	800ef74 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ef72:	e7b8      	b.n	800eee6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	607b      	str	r3, [r7, #4]
 800ef78:	e002      	b.n	800ef80 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d1b3      	bne.n	800eeee <tcp_fasttmr+0x1a>
    }
  }
}
 800ef86:	bf00      	nop
 800ef88:	bf00      	nop
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	2000c7ae 	.word	0x2000c7ae
 800ef94:	2000c7a4 	.word	0x2000c7a4
 800ef98:	2000c7ac 	.word	0x2000c7ac

0800ef9c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ef9c:	b590      	push	{r4, r7, lr}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efa8:	7b5b      	ldrb	r3, [r3, #13]
 800efaa:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efb0:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2200      	movs	r2, #0
 800efb6:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d00b      	beq.n	800efda <tcp_process_refused_data+0x3e>
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6918      	ldr	r0, [r3, #16]
 800efcc:	2300      	movs	r3, #0
 800efce:	68ba      	ldr	r2, [r7, #8]
 800efd0:	6879      	ldr	r1, [r7, #4]
 800efd2:	47a0      	blx	r4
 800efd4:	4603      	mov	r3, r0
 800efd6:	73fb      	strb	r3, [r7, #15]
 800efd8:	e007      	b.n	800efea <tcp_process_refused_data+0x4e>
 800efda:	2300      	movs	r3, #0
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	6879      	ldr	r1, [r7, #4]
 800efe0:	2000      	movs	r0, #0
 800efe2:	f000 f88d 	bl	800f100 <tcp_recv_null>
 800efe6:	4603      	mov	r3, r0
 800efe8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800efea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d12a      	bne.n	800f048 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800eff2:	7bbb      	ldrb	r3, [r7, #14]
 800eff4:	f003 0320 	and.w	r3, r3, #32
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d033      	beq.n	800f064 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f000:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f004:	d005      	beq.n	800f012 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f00a:	3301      	adds	r3, #1
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d00b      	beq.n	800f034 <tcp_process_refused_data+0x98>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6918      	ldr	r0, [r3, #16]
 800f026:	2300      	movs	r3, #0
 800f028:	2200      	movs	r2, #0
 800f02a:	6879      	ldr	r1, [r7, #4]
 800f02c:	47a0      	blx	r4
 800f02e:	4603      	mov	r3, r0
 800f030:	73fb      	strb	r3, [r7, #15]
 800f032:	e001      	b.n	800f038 <tcp_process_refused_data+0x9c>
 800f034:	2300      	movs	r3, #0
 800f036:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f03c:	f113 0f0d 	cmn.w	r3, #13
 800f040:	d110      	bne.n	800f064 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800f042:	f06f 030c 	mvn.w	r3, #12
 800f046:	e00e      	b.n	800f066 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800f048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f04c:	f113 0f0d 	cmn.w	r3, #13
 800f050:	d102      	bne.n	800f058 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f052:	f06f 030c 	mvn.w	r3, #12
 800f056:	e006      	b.n	800f066 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 800f05e:	f06f 0304 	mvn.w	r3, #4
 800f062:	e000      	b.n	800f066 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800f064:	2300      	movs	r3, #0
}
 800f066:	4618      	mov	r0, r3
 800f068:	3714      	adds	r7, #20
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd90      	pop	{r4, r7, pc}

0800f06e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b084      	sub	sp, #16
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f076:	e007      	b.n	800f088 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 f80a 	bl	800f098 <tcp_seg_free>
    seg = next;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1f4      	bne.n	800f078 <tcp_segs_free+0xa>
  }
}
 800f08e:	bf00      	nop
 800f090:	bf00      	nop
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00c      	beq.n	800f0c0 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d004      	beq.n	800f0b8 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	685b      	ldr	r3, [r3, #4]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe fdfe 	bl	800dcb4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f0b8:	6879      	ldr	r1, [r7, #4]
 800f0ba:	2003      	movs	r0, #3
 800f0bc:	f7fe f8de 	bl	800d27c <memp_free>
  }
}
 800f0c0:	bf00      	nop
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f0d0:	2003      	movs	r0, #3
 800f0d2:	f7fe f887 	bl	800d1e4 <memp_malloc>
 800f0d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d101      	bne.n	800f0e2 <tcp_seg_copy+0x1a>
    return NULL;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	e00a      	b.n	800f0f8 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f0e2:	2210      	movs	r2, #16
 800f0e4:	6879      	ldr	r1, [r7, #4]
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	f005 ffe1 	bl	80150ae <memcpy>
  pbuf_ref(cseg->p);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7fe fe89 	bl	800de08 <pbuf_ref>
  return cseg;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3710      	adds	r7, #16
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd80      	pop	{r7, pc}

0800f100 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b084      	sub	sp, #16
 800f104:	af00      	add	r7, sp, #0
 800f106:	60f8      	str	r0, [r7, #12]
 800f108:	60b9      	str	r1, [r7, #8]
 800f10a:	607a      	str	r2, [r7, #4]
 800f10c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d009      	beq.n	800f128 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	891b      	ldrh	r3, [r3, #8]
 800f118:	4619      	mov	r1, r3
 800f11a:	68b8      	ldr	r0, [r7, #8]
 800f11c:	f7ff fbbc 	bl	800e898 <tcp_recved>
    pbuf_free(p);
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7fe fdc7 	bl	800dcb4 <pbuf_free>
 800f126:	e008      	b.n	800f13a <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800f128:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d104      	bne.n	800f13a <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800f130:	68b8      	ldr	r0, [r7, #8]
 800f132:	f7ff fa8d 	bl	800e650 <tcp_close>
 800f136:	4603      	mov	r3, r0
 800f138:	e000      	b.n	800f13c <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3710      	adds	r7, #16
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}

0800f144 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af00      	add	r7, sp, #0
 800f14a:	4603      	mov	r3, r0
 800f14c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f14e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f152:	2b00      	cmp	r3, #0
 800f154:	db01      	blt.n	800f15a <tcp_kill_prio+0x16>
 800f156:	79fb      	ldrb	r3, [r7, #7]
 800f158:	e000      	b.n	800f15c <tcp_kill_prio+0x18>
 800f15a:	237f      	movs	r3, #127	@ 0x7f
 800f15c:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f162:	2300      	movs	r3, #0
 800f164:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f166:	4b16      	ldr	r3, [pc, #88]	@ (800f1c0 <tcp_kill_prio+0x7c>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	617b      	str	r3, [r7, #20]
 800f16c:	e01a      	b.n	800f1a4 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	7d5b      	ldrb	r3, [r3, #21]
 800f172:	7afa      	ldrb	r2, [r7, #11]
 800f174:	429a      	cmp	r2, r3
 800f176:	d312      	bcc.n	800f19e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f178:	4b12      	ldr	r3, [pc, #72]	@ (800f1c4 <tcp_kill_prio+0x80>)
 800f17a:	681a      	ldr	r2, [r3, #0]
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	6a1b      	ldr	r3, [r3, #32]
 800f180:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800f182:	68fa      	ldr	r2, [r7, #12]
 800f184:	429a      	cmp	r2, r3
 800f186:	d80a      	bhi.n	800f19e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800f188:	4b0e      	ldr	r3, [pc, #56]	@ (800f1c4 <tcp_kill_prio+0x80>)
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	6a1b      	ldr	r3, [r3, #32]
 800f190:	1ad3      	subs	r3, r2, r3
 800f192:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	7d5b      	ldrb	r3, [r3, #21]
 800f19c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	68db      	ldr	r3, [r3, #12]
 800f1a2:	617b      	str	r3, [r7, #20]
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1e1      	bne.n	800f16e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d002      	beq.n	800f1b6 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f1b0:	6938      	ldr	r0, [r7, #16]
 800f1b2:	f7ff fb17 	bl	800e7e4 <tcp_abort>
  }
}
 800f1b6:	bf00      	nop
 800f1b8:	3718      	adds	r7, #24
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	2000c7a4 	.word	0x2000c7a4
 800f1c4:	2000c798 	.word	0x2000c798

0800f1c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f1d2:	79fb      	ldrb	r3, [r7, #7]
 800f1d4:	2b08      	cmp	r3, #8
 800f1d6:	d009      	beq.n	800f1ec <tcp_kill_state+0x24>
 800f1d8:	79fb      	ldrb	r3, [r7, #7]
 800f1da:	2b09      	cmp	r3, #9
 800f1dc:	d006      	beq.n	800f1ec <tcp_kill_state+0x24>
 800f1de:	4b1a      	ldr	r3, [pc, #104]	@ (800f248 <tcp_kill_state+0x80>)
 800f1e0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800f1e4:	4919      	ldr	r1, [pc, #100]	@ (800f24c <tcp_kill_state+0x84>)
 800f1e6:	481a      	ldr	r0, [pc, #104]	@ (800f250 <tcp_kill_state+0x88>)
 800f1e8:	f005 fde2 	bl	8014db0 <iprintf>

  inactivity = 0;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1f4:	4b17      	ldr	r3, [pc, #92]	@ (800f254 <tcp_kill_state+0x8c>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	617b      	str	r3, [r7, #20]
 800f1fa:	e017      	b.n	800f22c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	7d1b      	ldrb	r3, [r3, #20]
 800f200:	79fa      	ldrb	r2, [r7, #7]
 800f202:	429a      	cmp	r2, r3
 800f204:	d10f      	bne.n	800f226 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f206:	4b14      	ldr	r3, [pc, #80]	@ (800f258 <tcp_kill_state+0x90>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	697b      	ldr	r3, [r7, #20]
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	1ad3      	subs	r3, r2, r3
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	429a      	cmp	r2, r3
 800f214:	d807      	bhi.n	800f226 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f216:	4b10      	ldr	r3, [pc, #64]	@ (800f258 <tcp_kill_state+0x90>)
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	617b      	str	r3, [r7, #20]
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d1e4      	bne.n	800f1fc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d003      	beq.n	800f240 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f238:	2100      	movs	r1, #0
 800f23a:	6938      	ldr	r0, [r7, #16]
 800f23c:	f7ff fa20 	bl	800e680 <tcp_abandon>
  }
}
 800f240:	bf00      	nop
 800f242:	3718      	adds	r7, #24
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	080170bc 	.word	0x080170bc
 800f24c:	080173e4 	.word	0x080173e4
 800f250:	08017110 	.word	0x08017110
 800f254:	2000c7a4 	.word	0x2000c7a4
 800f258:	2000c798 	.word	0x2000c798

0800f25c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f262:	2300      	movs	r3, #0
 800f264:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f266:	2300      	movs	r3, #0
 800f268:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f26a:	4b12      	ldr	r3, [pc, #72]	@ (800f2b4 <tcp_kill_timewait+0x58>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	60fb      	str	r3, [r7, #12]
 800f270:	e012      	b.n	800f298 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f272:	4b11      	ldr	r3, [pc, #68]	@ (800f2b8 <tcp_kill_timewait+0x5c>)
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6a1b      	ldr	r3, [r3, #32]
 800f27a:	1ad3      	subs	r3, r2, r3
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d807      	bhi.n	800f292 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f282:	4b0d      	ldr	r3, [pc, #52]	@ (800f2b8 <tcp_kill_timewait+0x5c>)
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	6a1b      	ldr	r3, [r3, #32]
 800f28a:	1ad3      	subs	r3, r2, r3
 800f28c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1e9      	bne.n	800f272 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d002      	beq.n	800f2aa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f2a4:	68b8      	ldr	r0, [r7, #8]
 800f2a6:	f7ff fa9d 	bl	800e7e4 <tcp_abort>
  }
}
 800f2aa:	bf00      	nop
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	2000c7a8 	.word	0x2000c7a8
 800f2b8:	2000c798 	.word	0x2000c798

0800f2bc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2c6:	2001      	movs	r0, #1
 800f2c8:	f7fd ff8c 	bl	800d1e4 <memp_malloc>
 800f2cc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d124      	bne.n	800f31e <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f2d4:	f7ff ffc2 	bl	800f25c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2d8:	2001      	movs	r0, #1
 800f2da:	f7fd ff83 	bl	800d1e4 <memp_malloc>
 800f2de:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d11b      	bne.n	800f31e <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f2e6:	2009      	movs	r0, #9
 800f2e8:	f7ff ff6e 	bl	800f1c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f2ec:	2001      	movs	r0, #1
 800f2ee:	f7fd ff79 	bl	800d1e4 <memp_malloc>
 800f2f2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d111      	bne.n	800f31e <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f2fa:	2008      	movs	r0, #8
 800f2fc:	f7ff ff64 	bl	800f1c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f300:	2001      	movs	r0, #1
 800f302:	f7fd ff6f 	bl	800d1e4 <memp_malloc>
 800f306:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d107      	bne.n	800f31e <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f30e:	79fb      	ldrb	r3, [r7, #7]
 800f310:	4618      	mov	r0, r3
 800f312:	f7ff ff17 	bl	800f144 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f316:	2001      	movs	r0, #1
 800f318:	f7fd ff64 	bl	800d1e4 <memp_malloc>
 800f31c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d03f      	beq.n	800f3a4 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f324:	2298      	movs	r2, #152	@ 0x98
 800f326:	2100      	movs	r1, #0
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f005 fdc6 	bl	8014eba <memset>
    pcb->prio = prio;
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	79fa      	ldrb	r2, [r7, #7]
 800f332:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f33a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f344:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	22ff      	movs	r2, #255	@ 0xff
 800f352:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f35a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2206      	movs	r2, #6
 800f360:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2206      	movs	r2, #6
 800f368:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f370:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2201      	movs	r2, #1
 800f376:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f37a:	4b0d      	ldr	r3, [pc, #52]	@ (800f3b0 <tcp_alloc+0xf4>)
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f382:	4b0c      	ldr	r3, [pc, #48]	@ (800f3b4 <tcp_alloc+0xf8>)
 800f384:	781a      	ldrb	r2, [r3, #0]
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f390:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	4a08      	ldr	r2, [pc, #32]	@ (800f3b8 <tcp_alloc+0xfc>)
 800f398:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	4a07      	ldr	r2, [pc, #28]	@ (800f3bc <tcp_alloc+0x100>)
 800f3a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3710      	adds	r7, #16
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bd80      	pop	{r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	2000c798 	.word	0x2000c798
 800f3b4:	2000c7ae 	.word	0x2000c7ae
 800f3b8:	0800f101 	.word	0x0800f101
 800f3bc:	006ddd00 	.word	0x006ddd00

0800f3c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b082      	sub	sp, #8
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	7d1b      	ldrb	r3, [r3, #20]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d034      	beq.n	800f43a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f3d4:	2b0a      	cmp	r3, #10
 800f3d6:	d030      	beq.n	800f43a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d02c      	beq.n	800f43a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d007      	beq.n	800f3f8 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fe fc61 	bl	800dcb4 <pbuf_free>
      pcb->refused_data = NULL;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7ff fe36 	bl	800f06e <tcp_segs_free>
    pcb->ooseq = NULL;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	2200      	movs	r2, #0
 800f406:	671a      	str	r2, [r3, #112]	@ 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f40e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f414:	4618      	mov	r0, r3
 800f416:	f7ff fe2a 	bl	800f06e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f41e:	4618      	mov	r0, r3
 800f420:	f7ff fe25 	bl	800f06e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2200      	movs	r2, #0
 800f428:	669a      	str	r2, [r3, #104]	@ 0x68
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	66da      	str	r2, [r3, #108]	@ 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800f43a:	bf00      	nop
 800f43c:	3708      	adds	r7, #8
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}
	...

0800f444 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	683a      	ldr	r2, [r7, #0]
 800f454:	429a      	cmp	r2, r3
 800f456:	d105      	bne.n	800f464 <tcp_pcb_remove+0x20>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	68da      	ldr	r2, [r3, #12]
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	601a      	str	r2, [r3, #0]
 800f462:	e013      	b.n	800f48c <tcp_pcb_remove+0x48>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	60fb      	str	r3, [r7, #12]
 800f46a:	e00c      	b.n	800f486 <tcp_pcb_remove+0x42>
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	68db      	ldr	r3, [r3, #12]
 800f470:	683a      	ldr	r2, [r7, #0]
 800f472:	429a      	cmp	r2, r3
 800f474:	d104      	bne.n	800f480 <tcp_pcb_remove+0x3c>
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	68da      	ldr	r2, [r3, #12]
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	60da      	str	r2, [r3, #12]
 800f47e:	e005      	b.n	800f48c <tcp_pcb_remove+0x48>
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	68db      	ldr	r3, [r3, #12]
 800f484:	60fb      	str	r3, [r7, #12]
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d1ef      	bne.n	800f46c <tcp_pcb_remove+0x28>
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	2200      	movs	r2, #0
 800f490:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f492:	6838      	ldr	r0, [r7, #0]
 800f494:	f7ff ff94 	bl	800f3c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	7d1b      	ldrb	r3, [r3, #20]
 800f49c:	2b0a      	cmp	r3, #10
 800f49e:	d013      	beq.n	800f4c8 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800f4a4:	2b01      	cmp	r3, #1
 800f4a6:	d00f      	beq.n	800f4c8 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	7e9b      	ldrb	r3, [r3, #26]
 800f4ac:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d009      	beq.n	800f4c8 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	7e9b      	ldrb	r3, [r3, #26]
 800f4b8:	f043 0302 	orr.w	r3, r3, #2
 800f4bc:	b2da      	uxtb	r2, r3
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800f4c2:	6838      	ldr	r0, [r7, #0]
 800f4c4:	f002 fd82 	bl	8011fcc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	7d1b      	ldrb	r3, [r3, #20]
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d020      	beq.n	800f512 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d006      	beq.n	800f4e6 <tcp_pcb_remove+0xa2>
 800f4d8:	4b13      	ldr	r3, [pc, #76]	@ (800f528 <tcp_pcb_remove+0xe4>)
 800f4da:	f240 7253 	movw	r2, #1875	@ 0x753
 800f4de:	4913      	ldr	r1, [pc, #76]	@ (800f52c <tcp_pcb_remove+0xe8>)
 800f4e0:	4813      	ldr	r0, [pc, #76]	@ (800f530 <tcp_pcb_remove+0xec>)
 800f4e2:	f005 fc65 	bl	8014db0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f4e6:	683b      	ldr	r3, [r7, #0]
 800f4e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d006      	beq.n	800f4fc <tcp_pcb_remove+0xb8>
 800f4ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f528 <tcp_pcb_remove+0xe4>)
 800f4f0:	f240 7254 	movw	r2, #1876	@ 0x754
 800f4f4:	490f      	ldr	r1, [pc, #60]	@ (800f534 <tcp_pcb_remove+0xf0>)
 800f4f6:	480e      	ldr	r0, [pc, #56]	@ (800f530 <tcp_pcb_remove+0xec>)
 800f4f8:	f005 fc5a 	bl	8014db0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f500:	2b00      	cmp	r3, #0
 800f502:	d006      	beq.n	800f512 <tcp_pcb_remove+0xce>
 800f504:	4b08      	ldr	r3, [pc, #32]	@ (800f528 <tcp_pcb_remove+0xe4>)
 800f506:	f240 7256 	movw	r2, #1878	@ 0x756
 800f50a:	490b      	ldr	r1, [pc, #44]	@ (800f538 <tcp_pcb_remove+0xf4>)
 800f50c:	4808      	ldr	r0, [pc, #32]	@ (800f530 <tcp_pcb_remove+0xec>)
 800f50e:	f005 fc4f 	bl	8014db0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	2200      	movs	r2, #0
 800f516:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	2200      	movs	r2, #0
 800f51c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f51e:	bf00      	nop
 800f520:	3710      	adds	r7, #16
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
 800f526:	bf00      	nop
 800f528:	080170bc 	.word	0x080170bc
 800f52c:	0801748c 	.word	0x0801748c
 800f530:	08017110 	.word	0x08017110
 800f534:	080174a4 	.word	0x080174a4
 800f538:	080174c0 	.word	0x080174c0

0800f53c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f544:	4b06      	ldr	r3, [pc, #24]	@ (800f560 <tcp_next_iss+0x24>)
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	4b06      	ldr	r3, [pc, #24]	@ (800f564 <tcp_next_iss+0x28>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	4413      	add	r3, r2
 800f54e:	4a04      	ldr	r2, [pc, #16]	@ (800f560 <tcp_next_iss+0x24>)
 800f550:	6013      	str	r3, [r2, #0]
  return iss;
 800f552:	4b03      	ldr	r3, [pc, #12]	@ (800f560 <tcp_next_iss+0x24>)
 800f554:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f556:	4618      	mov	r0, r3
 800f558:	370c      	adds	r7, #12
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bc80      	pop	{r7}
 800f55e:	4770      	bx	lr
 800f560:	2000007c 	.word	0x2000007c
 800f564:	2000c798 	.word	0x2000c798

0800f568 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	4603      	mov	r3, r0
 800f570:	6039      	str	r1, [r7, #0]
 800f572:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800f574:	6838      	ldr	r0, [r7, #0]
 800f576:	f7fc f901 	bl	800b77c <ip4_route>
 800f57a:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d101      	bne.n	800f586 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800f582:	88fb      	ldrh	r3, [r7, #6]
 800f584:	e010      	b.n	800f5a8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f58a:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f58c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d008      	beq.n	800f5a6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800f594:	897b      	ldrh	r3, [r7, #10]
 800f596:	3b28      	subs	r3, #40	@ 0x28
 800f598:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f59a:	893a      	ldrh	r2, [r7, #8]
 800f59c:	88fb      	ldrh	r3, [r7, #6]
 800f59e:	4293      	cmp	r3, r2
 800f5a0:	bf28      	it	cs
 800f5a2:	4613      	movcs	r3, r2
 800f5a4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800f5a6:	88fb      	ldrh	r3, [r7, #6]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3710      	adds	r7, #16
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}

0800f5b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b084      	sub	sp, #16
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f5be:	e011      	b.n	800f5e4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d108      	bne.n	800f5de <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	68db      	ldr	r3, [r3, #12]
 800f5d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f7ff f906 	bl	800e7e4 <tcp_abort>
      pcb = next;
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	60fb      	str	r3, [r7, #12]
 800f5dc:	e002      	b.n	800f5e4 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	68db      	ldr	r3, [r3, #12]
 800f5e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1ea      	bne.n	800f5c0 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800f5ea:	bf00      	nop
 800f5ec:	bf00      	nop
 800f5ee:	3710      	adds	r7, #16
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}

0800f5f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d02c      	beq.n	800f65e <tcp_netif_ip_addr_changed+0x6a>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d028      	beq.n	800f65e <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f60c:	4b16      	ldr	r3, [pc, #88]	@ (800f668 <tcp_netif_ip_addr_changed+0x74>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	4619      	mov	r1, r3
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f7ff ffcc 	bl	800f5b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f618:	4b14      	ldr	r3, [pc, #80]	@ (800f66c <tcp_netif_ip_addr_changed+0x78>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	4619      	mov	r1, r3
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7ff ffc6 	bl	800f5b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d019      	beq.n	800f65e <tcp_netif_ip_addr_changed+0x6a>
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d015      	beq.n	800f65e <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f632:	4b0f      	ldr	r3, [pc, #60]	@ (800f670 <tcp_netif_ip_addr_changed+0x7c>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	60fb      	str	r3, [r7, #12]
 800f638:	e00e      	b.n	800f658 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d103      	bne.n	800f654 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1ed      	bne.n	800f63a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f65e:	bf00      	nop
 800f660:	3710      	adds	r7, #16
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}
 800f666:	bf00      	nop
 800f668:	2000c7a4 	.word	0x2000c7a4
 800f66c:	2000c79c 	.word	0x2000c79c
 800f670:	2000c7a0 	.word	0x2000c7a0

0800f674 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f674:	b590      	push	{r4, r7, lr}
 800f676:	b08b      	sub	sp, #44	@ 0x2c
 800f678:	af02      	add	r7, sp, #8
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	4a81      	ldr	r2, [pc, #516]	@ (800f888 <tcp_input+0x214>)
 800f684:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	895b      	ldrh	r3, [r3, #10]
 800f68a:	2b13      	cmp	r3, #19
 800f68c:	f240 8396 	bls.w	800fdbc <tcp_input+0x748>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f690:	4b7e      	ldr	r3, [pc, #504]	@ (800f88c <tcp_input+0x218>)
 800f692:	695b      	ldr	r3, [r3, #20]
 800f694:	4a7d      	ldr	r2, [pc, #500]	@ (800f88c <tcp_input+0x218>)
 800f696:	6812      	ldr	r2, [r2, #0]
 800f698:	4611      	mov	r1, r2
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fc fae8 	bl	800bc70 <ip4_addr_isbroadcast_u32>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	f040 838c 	bne.w	800fdc0 <tcp_input+0x74c>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f6a8:	4b78      	ldr	r3, [pc, #480]	@ (800f88c <tcp_input+0x218>)
 800f6aa:	695b      	ldr	r3, [r3, #20]
 800f6ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f6b0:	2be0      	cmp	r3, #224	@ 0xe0
 800f6b2:	f000 8385 	beq.w	800fdc0 <tcp_input+0x74c>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800f6b6:	4b74      	ldr	r3, [pc, #464]	@ (800f888 <tcp_input+0x214>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	899b      	ldrh	r3, [r3, #12]
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fa fed0 	bl	800a464 <lwip_htons>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	0b1b      	lsrs	r3, r3, #12
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f6d0:	7cbb      	ldrb	r3, [r7, #18]
 800f6d2:	2b13      	cmp	r3, #19
 800f6d4:	f240 8376 	bls.w	800fdc4 <tcp_input+0x750>
 800f6d8:	7cbb      	ldrb	r3, [r7, #18]
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	891b      	ldrh	r3, [r3, #8]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	f200 836f 	bhi.w	800fdc4 <tcp_input+0x750>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800f6e6:	7cbb      	ldrb	r3, [r7, #18]
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	3b14      	subs	r3, #20
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	4b68      	ldr	r3, [pc, #416]	@ (800f890 <tcp_input+0x21c>)
 800f6f0:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f6f2:	4b68      	ldr	r3, [pc, #416]	@ (800f894 <tcp_input+0x220>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	895a      	ldrh	r2, [r3, #10]
 800f6fc:	7cbb      	ldrb	r3, [r7, #18]
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	429a      	cmp	r2, r3
 800f702:	d30d      	bcc.n	800f720 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f704:	4b62      	ldr	r3, [pc, #392]	@ (800f890 <tcp_input+0x21c>)
 800f706:	881a      	ldrh	r2, [r3, #0]
 800f708:	4b63      	ldr	r3, [pc, #396]	@ (800f898 <tcp_input+0x224>)
 800f70a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800f70c:	7cbb      	ldrb	r3, [r7, #18]
 800f70e:	b29b      	uxth	r3, r3
 800f710:	425b      	negs	r3, r3
 800f712:	b29b      	uxth	r3, r3
 800f714:	b21b      	sxth	r3, r3
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7fe faa7 	bl	800dc6c <pbuf_header>
 800f71e:	e055      	b.n	800f7cc <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d105      	bne.n	800f734 <tcp_input+0xc0>
 800f728:	4b5c      	ldr	r3, [pc, #368]	@ (800f89c <tcp_input+0x228>)
 800f72a:	22b2      	movs	r2, #178	@ 0xb2
 800f72c:	495c      	ldr	r1, [pc, #368]	@ (800f8a0 <tcp_input+0x22c>)
 800f72e:	485d      	ldr	r0, [pc, #372]	@ (800f8a4 <tcp_input+0x230>)
 800f730:	f005 fb3e 	bl	8014db0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800f734:	f06f 0113 	mvn.w	r1, #19
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f7fe fa97 	bl	800dc6c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	895a      	ldrh	r2, [r3, #10]
 800f742:	4b55      	ldr	r3, [pc, #340]	@ (800f898 <tcp_input+0x224>)
 800f744:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800f746:	4b52      	ldr	r3, [pc, #328]	@ (800f890 <tcp_input+0x21c>)
 800f748:	881a      	ldrh	r2, [r3, #0]
 800f74a:	4b53      	ldr	r3, [pc, #332]	@ (800f898 <tcp_input+0x224>)
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	1ad3      	subs	r3, r2, r3
 800f750:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800f752:	4b51      	ldr	r3, [pc, #324]	@ (800f898 <tcp_input+0x224>)
 800f754:	881b      	ldrh	r3, [r3, #0]
 800f756:	425b      	negs	r3, r3
 800f758:	b29b      	uxth	r3, r3
 800f75a:	b21b      	sxth	r3, r3
 800f75c:	4619      	mov	r1, r3
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7fe fa84 	bl	800dc6c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	895b      	ldrh	r3, [r3, #10]
 800f76a:	8a3a      	ldrh	r2, [r7, #16]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	f200 832b 	bhi.w	800fdc8 <tcp_input+0x754>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	4a46      	ldr	r2, [pc, #280]	@ (800f894 <tcp_input+0x220>)
 800f77a:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681a      	ldr	r2, [r3, #0]
 800f780:	8a3b      	ldrh	r3, [r7, #16]
 800f782:	425b      	negs	r3, r3
 800f784:	b29b      	uxth	r3, r3
 800f786:	b21b      	sxth	r3, r3
 800f788:	4619      	mov	r1, r3
 800f78a:	4610      	mov	r0, r2
 800f78c:	f7fe fa6e 	bl	800dc6c <pbuf_header>
    p->tot_len -= opt2len;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	891a      	ldrh	r2, [r3, #8]
 800f794:	8a3b      	ldrh	r3, [r7, #16]
 800f796:	1ad3      	subs	r3, r2, r3
 800f798:	b29a      	uxth	r2, r3
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	895b      	ldrh	r3, [r3, #10]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d005      	beq.n	800f7b2 <tcp_input+0x13e>
 800f7a6:	4b3d      	ldr	r3, [pc, #244]	@ (800f89c <tcp_input+0x228>)
 800f7a8:	22cf      	movs	r2, #207	@ 0xcf
 800f7aa:	493f      	ldr	r1, [pc, #252]	@ (800f8a8 <tcp_input+0x234>)
 800f7ac:	483d      	ldr	r0, [pc, #244]	@ (800f8a4 <tcp_input+0x230>)
 800f7ae:	f005 faff 	bl	8014db0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	891a      	ldrh	r2, [r3, #8]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	891b      	ldrh	r3, [r3, #8]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d005      	beq.n	800f7cc <tcp_input+0x158>
 800f7c0:	4b36      	ldr	r3, [pc, #216]	@ (800f89c <tcp_input+0x228>)
 800f7c2:	22d0      	movs	r2, #208	@ 0xd0
 800f7c4:	4939      	ldr	r1, [pc, #228]	@ (800f8ac <tcp_input+0x238>)
 800f7c6:	4837      	ldr	r0, [pc, #220]	@ (800f8a4 <tcp_input+0x230>)
 800f7c8:	f005 faf2 	bl	8014db0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f7cc:	4b2e      	ldr	r3, [pc, #184]	@ (800f888 <tcp_input+0x214>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	4a2c      	ldr	r2, [pc, #176]	@ (800f888 <tcp_input+0x214>)
 800f7d6:	6814      	ldr	r4, [r2, #0]
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7fa fe43 	bl	800a464 <lwip_htons>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f7e2:	4b29      	ldr	r3, [pc, #164]	@ (800f888 <tcp_input+0x214>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	885b      	ldrh	r3, [r3, #2]
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	4a27      	ldr	r2, [pc, #156]	@ (800f888 <tcp_input+0x214>)
 800f7ec:	6814      	ldr	r4, [r2, #0]
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fa fe38 	bl	800a464 <lwip_htons>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f7f8:	4b23      	ldr	r3, [pc, #140]	@ (800f888 <tcp_input+0x214>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	4a22      	ldr	r2, [pc, #136]	@ (800f888 <tcp_input+0x214>)
 800f800:	6814      	ldr	r4, [r2, #0]
 800f802:	4618      	mov	r0, r3
 800f804:	f7fa fe3b 	bl	800a47e <lwip_htonl>
 800f808:	4603      	mov	r3, r0
 800f80a:	6063      	str	r3, [r4, #4]
 800f80c:	6863      	ldr	r3, [r4, #4]
 800f80e:	4a28      	ldr	r2, [pc, #160]	@ (800f8b0 <tcp_input+0x23c>)
 800f810:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f812:	4b1d      	ldr	r3, [pc, #116]	@ (800f888 <tcp_input+0x214>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	689b      	ldr	r3, [r3, #8]
 800f818:	4a1b      	ldr	r2, [pc, #108]	@ (800f888 <tcp_input+0x214>)
 800f81a:	6814      	ldr	r4, [r2, #0]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fa fe2e 	bl	800a47e <lwip_htonl>
 800f822:	4603      	mov	r3, r0
 800f824:	60a3      	str	r3, [r4, #8]
 800f826:	68a3      	ldr	r3, [r4, #8]
 800f828:	4a22      	ldr	r2, [pc, #136]	@ (800f8b4 <tcp_input+0x240>)
 800f82a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f82c:	4b16      	ldr	r3, [pc, #88]	@ (800f888 <tcp_input+0x214>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	89db      	ldrh	r3, [r3, #14]
 800f832:	b29b      	uxth	r3, r3
 800f834:	4a14      	ldr	r2, [pc, #80]	@ (800f888 <tcp_input+0x214>)
 800f836:	6814      	ldr	r4, [r2, #0]
 800f838:	4618      	mov	r0, r3
 800f83a:	f7fa fe13 	bl	800a464 <lwip_htons>
 800f83e:	4603      	mov	r3, r0
 800f840:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f842:	4b11      	ldr	r3, [pc, #68]	@ (800f888 <tcp_input+0x214>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	899b      	ldrh	r3, [r3, #12]
 800f848:	b29b      	uxth	r3, r3
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fa fe0a 	bl	800a464 <lwip_htons>
 800f850:	4603      	mov	r3, r0
 800f852:	b2db      	uxtb	r3, r3
 800f854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f858:	b2da      	uxtb	r2, r3
 800f85a:	4b17      	ldr	r3, [pc, #92]	@ (800f8b8 <tcp_input+0x244>)
 800f85c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	891b      	ldrh	r3, [r3, #8]
 800f862:	4a15      	ldr	r2, [pc, #84]	@ (800f8b8 <tcp_input+0x244>)
 800f864:	7812      	ldrb	r2, [r2, #0]
 800f866:	f002 0203 	and.w	r2, r2, #3
 800f86a:	2a00      	cmp	r2, #0
 800f86c:	bf14      	ite	ne
 800f86e:	2201      	movne	r2, #1
 800f870:	2200      	moveq	r2, #0
 800f872:	b2d2      	uxtb	r2, r2
 800f874:	4413      	add	r3, r2
 800f876:	b29a      	uxth	r2, r3
 800f878:	4b10      	ldr	r3, [pc, #64]	@ (800f8bc <tcp_input+0x248>)
 800f87a:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f87c:	2300      	movs	r3, #0
 800f87e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f880:	4b0f      	ldr	r3, [pc, #60]	@ (800f8c0 <tcp_input+0x24c>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	61fb      	str	r3, [r7, #28]
 800f886:	e081      	b.n	800f98c <tcp_input+0x318>
 800f888:	2000c7c0 	.word	0x2000c7c0
 800f88c:	20007070 	.word	0x20007070
 800f890:	2000c7c4 	.word	0x2000c7c4
 800f894:	2000c7c8 	.word	0x2000c7c8
 800f898:	2000c7c6 	.word	0x2000c7c6
 800f89c:	080174d8 	.word	0x080174d8
 800f8a0:	08017520 	.word	0x08017520
 800f8a4:	08017530 	.word	0x08017530
 800f8a8:	08017558 	.word	0x08017558
 800f8ac:	08017564 	.word	0x08017564
 800f8b0:	2000c7d0 	.word	0x2000c7d0
 800f8b4:	2000c7d4 	.word	0x2000c7d4
 800f8b8:	2000c7dc 	.word	0x2000c7dc
 800f8bc:	2000c7da 	.word	0x2000c7da
 800f8c0:	2000c7a4 	.word	0x2000c7a4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	7d1b      	ldrb	r3, [r3, #20]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d105      	bne.n	800f8d8 <tcp_input+0x264>
 800f8cc:	4b6e      	ldr	r3, [pc, #440]	@ (800fa88 <tcp_input+0x414>)
 800f8ce:	22e2      	movs	r2, #226	@ 0xe2
 800f8d0:	496e      	ldr	r1, [pc, #440]	@ (800fa8c <tcp_input+0x418>)
 800f8d2:	486f      	ldr	r0, [pc, #444]	@ (800fa90 <tcp_input+0x41c>)
 800f8d4:	f005 fa6c 	bl	8014db0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	7d1b      	ldrb	r3, [r3, #20]
 800f8dc:	2b0a      	cmp	r3, #10
 800f8de:	d105      	bne.n	800f8ec <tcp_input+0x278>
 800f8e0:	4b69      	ldr	r3, [pc, #420]	@ (800fa88 <tcp_input+0x414>)
 800f8e2:	22e3      	movs	r2, #227	@ 0xe3
 800f8e4:	496b      	ldr	r1, [pc, #428]	@ (800fa94 <tcp_input+0x420>)
 800f8e6:	486a      	ldr	r0, [pc, #424]	@ (800fa90 <tcp_input+0x41c>)
 800f8e8:	f005 fa62 	bl	8014db0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	7d1b      	ldrb	r3, [r3, #20]
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d105      	bne.n	800f900 <tcp_input+0x28c>
 800f8f4:	4b64      	ldr	r3, [pc, #400]	@ (800fa88 <tcp_input+0x414>)
 800f8f6:	22e4      	movs	r2, #228	@ 0xe4
 800f8f8:	4967      	ldr	r1, [pc, #412]	@ (800fa98 <tcp_input+0x424>)
 800f8fa:	4865      	ldr	r0, [pc, #404]	@ (800fa90 <tcp_input+0x41c>)
 800f8fc:	f005 fa58 	bl	8014db0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	8b1a      	ldrh	r2, [r3, #24]
 800f904:	4b65      	ldr	r3, [pc, #404]	@ (800fa9c <tcp_input+0x428>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	881b      	ldrh	r3, [r3, #0]
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d138      	bne.n	800f982 <tcp_input+0x30e>
        pcb->local_port == tcphdr->dest &&
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	8ada      	ldrh	r2, [r3, #22]
 800f914:	4b61      	ldr	r3, [pc, #388]	@ (800fa9c <tcp_input+0x428>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	885b      	ldrh	r3, [r3, #2]
 800f91a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d130      	bne.n	800f982 <tcp_input+0x30e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f920:	69fb      	ldr	r3, [r7, #28]
 800f922:	685a      	ldr	r2, [r3, #4]
 800f924:	4b5e      	ldr	r3, [pc, #376]	@ (800faa0 <tcp_input+0x42c>)
 800f926:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f928:	429a      	cmp	r2, r3
 800f92a:	d12a      	bne.n	800f982 <tcp_input+0x30e>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	4b5b      	ldr	r3, [pc, #364]	@ (800faa0 <tcp_input+0x42c>)
 800f932:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f934:	429a      	cmp	r2, r3
 800f936:	d124      	bne.n	800f982 <tcp_input+0x30e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	69fa      	ldr	r2, [r7, #28]
 800f93e:	429a      	cmp	r2, r3
 800f940:	d105      	bne.n	800f94e <tcp_input+0x2da>
 800f942:	4b51      	ldr	r3, [pc, #324]	@ (800fa88 <tcp_input+0x414>)
 800f944:	22ec      	movs	r2, #236	@ 0xec
 800f946:	4957      	ldr	r1, [pc, #348]	@ (800faa4 <tcp_input+0x430>)
 800f948:	4851      	ldr	r0, [pc, #324]	@ (800fa90 <tcp_input+0x41c>)
 800f94a:	f005 fa31 	bl	8014db0 <iprintf>
      if (prev != NULL) {
 800f94e:	69bb      	ldr	r3, [r7, #24]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00a      	beq.n	800f96a <tcp_input+0x2f6>
        prev->next = pcb->next;
 800f954:	69fb      	ldr	r3, [r7, #28]
 800f956:	68da      	ldr	r2, [r3, #12]
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f95c:	4b52      	ldr	r3, [pc, #328]	@ (800faa8 <tcp_input+0x434>)
 800f95e:	681a      	ldr	r2, [r3, #0]
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f964:	4a50      	ldr	r2, [pc, #320]	@ (800faa8 <tcp_input+0x434>)
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	68db      	ldr	r3, [r3, #12]
 800f96e:	69fa      	ldr	r2, [r7, #28]
 800f970:	429a      	cmp	r2, r3
 800f972:	d10f      	bne.n	800f994 <tcp_input+0x320>
 800f974:	4b44      	ldr	r3, [pc, #272]	@ (800fa88 <tcp_input+0x414>)
 800f976:	22f4      	movs	r2, #244	@ 0xf4
 800f978:	494c      	ldr	r1, [pc, #304]	@ (800faac <tcp_input+0x438>)
 800f97a:	4845      	ldr	r0, [pc, #276]	@ (800fa90 <tcp_input+0x41c>)
 800f97c:	f005 fa18 	bl	8014db0 <iprintf>
      break;
 800f980:	e008      	b.n	800f994 <tcp_input+0x320>
    }
    prev = pcb;
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f986:	69fb      	ldr	r3, [r7, #28]
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	61fb      	str	r3, [r7, #28]
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d198      	bne.n	800f8c4 <tcp_input+0x250>
 800f992:	e000      	b.n	800f996 <tcp_input+0x322>
      break;
 800f994:	bf00      	nop
  }

  if (pcb == NULL) {
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f040 808f 	bne.w	800fabc <tcp_input+0x448>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f99e:	4b44      	ldr	r3, [pc, #272]	@ (800fab0 <tcp_input+0x43c>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	61fb      	str	r3, [r7, #28]
 800f9a4:	e02f      	b.n	800fa06 <tcp_input+0x392>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f9a6:	69fb      	ldr	r3, [r7, #28]
 800f9a8:	7d1b      	ldrb	r3, [r3, #20]
 800f9aa:	2b0a      	cmp	r3, #10
 800f9ac:	d005      	beq.n	800f9ba <tcp_input+0x346>
 800f9ae:	4b36      	ldr	r3, [pc, #216]	@ (800fa88 <tcp_input+0x414>)
 800f9b0:	22fe      	movs	r2, #254	@ 0xfe
 800f9b2:	4940      	ldr	r1, [pc, #256]	@ (800fab4 <tcp_input+0x440>)
 800f9b4:	4836      	ldr	r0, [pc, #216]	@ (800fa90 <tcp_input+0x41c>)
 800f9b6:	f005 f9fb 	bl	8014db0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	8b1a      	ldrh	r2, [r3, #24]
 800f9be:	4b37      	ldr	r3, [pc, #220]	@ (800fa9c <tcp_input+0x428>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	881b      	ldrh	r3, [r3, #0]
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d11a      	bne.n	800fa00 <tcp_input+0x38c>
          pcb->local_port == tcphdr->dest &&
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	8ada      	ldrh	r2, [r3, #22]
 800f9ce:	4b33      	ldr	r3, [pc, #204]	@ (800fa9c <tcp_input+0x428>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	885b      	ldrh	r3, [r3, #2]
 800f9d4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d112      	bne.n	800fa00 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	685a      	ldr	r2, [r3, #4]
 800f9de:	4b30      	ldr	r3, [pc, #192]	@ (800faa0 <tcp_input+0x42c>)
 800f9e0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d10c      	bne.n	800fa00 <tcp_input+0x38c>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	681a      	ldr	r2, [r3, #0]
 800f9ea:	4b2d      	ldr	r3, [pc, #180]	@ (800faa0 <tcp_input+0x42c>)
 800f9ec:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d106      	bne.n	800fa00 <tcp_input+0x38c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800f9f2:	69f8      	ldr	r0, [r7, #28]
 800f9f4:	f000 fb16 	bl	8010024 <tcp_timewait_input>
        pbuf_free(p);
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7fe f95b 	bl	800dcb4 <pbuf_free>
        return;
 800f9fe:	e1e9      	b.n	800fdd4 <tcp_input+0x760>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	61fb      	str	r3, [r7, #28]
 800fa06:	69fb      	ldr	r3, [r7, #28]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d1cc      	bne.n	800f9a6 <tcp_input+0x332>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa10:	4b29      	ldr	r3, [pc, #164]	@ (800fab8 <tcp_input+0x444>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	617b      	str	r3, [r7, #20]
 800fa16:	e019      	b.n	800fa4c <tcp_input+0x3d8>
      if (lpcb->local_port == tcphdr->dest) {
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	8ada      	ldrh	r2, [r3, #22]
 800fa1c:	4b1f      	ldr	r3, [pc, #124]	@ (800fa9c <tcp_input+0x428>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	885b      	ldrh	r3, [r3, #2]
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d10c      	bne.n	800fa42 <tcp_input+0x3ce>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	4b1c      	ldr	r3, [pc, #112]	@ (800faa0 <tcp_input+0x42c>)
 800fa2e:	695b      	ldr	r3, [r3, #20]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d00f      	beq.n	800fa54 <tcp_input+0x3e0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00d      	beq.n	800fa56 <tcp_input+0x3e2>
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d009      	beq.n	800fa56 <tcp_input+0x3e2>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	68db      	ldr	r3, [r3, #12]
 800fa4a:	617b      	str	r3, [r7, #20]
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d1e2      	bne.n	800fa18 <tcp_input+0x3a4>
 800fa52:	e000      	b.n	800fa56 <tcp_input+0x3e2>
            break;
 800fa54:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d02f      	beq.n	800fabc <tcp_input+0x448>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fa5c:	69bb      	ldr	r3, [r7, #24]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00a      	beq.n	800fa78 <tcp_input+0x404>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	68da      	ldr	r2, [r3, #12]
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fa6a:	4b13      	ldr	r3, [pc, #76]	@ (800fab8 <tcp_input+0x444>)
 800fa6c:	681a      	ldr	r2, [r3, #0]
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fa72:	4a11      	ldr	r2, [pc, #68]	@ (800fab8 <tcp_input+0x444>)
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800fa78:	6978      	ldr	r0, [r7, #20]
 800fa7a:	f000 f9f3 	bl	800fe64 <tcp_listen_input>
      pbuf_free(p);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7fe f918 	bl	800dcb4 <pbuf_free>
      return;
 800fa84:	e1a6      	b.n	800fdd4 <tcp_input+0x760>
 800fa86:	bf00      	nop
 800fa88:	080174d8 	.word	0x080174d8
 800fa8c:	08017584 	.word	0x08017584
 800fa90:	08017530 	.word	0x08017530
 800fa94:	080175ac 	.word	0x080175ac
 800fa98:	080175d8 	.word	0x080175d8
 800fa9c:	2000c7c0 	.word	0x2000c7c0
 800faa0:	20007070 	.word	0x20007070
 800faa4:	08017600 	.word	0x08017600
 800faa8:	2000c7a4 	.word	0x2000c7a4
 800faac:	0801762c 	.word	0x0801762c
 800fab0:	2000c7a8 	.word	0x2000c7a8
 800fab4:	08017658 	.word	0x08017658
 800fab8:	2000c7a0 	.word	0x2000c7a0
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f000 8156 	beq.w	800fd70 <tcp_input+0x6fc>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fac4:	4b94      	ldr	r3, [pc, #592]	@ (800fd18 <tcp_input+0x6a4>)
 800fac6:	2200      	movs	r2, #0
 800fac8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	891a      	ldrh	r2, [r3, #8]
 800face:	4b92      	ldr	r3, [pc, #584]	@ (800fd18 <tcp_input+0x6a4>)
 800fad0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fad2:	4a91      	ldr	r2, [pc, #580]	@ (800fd18 <tcp_input+0x6a4>)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fad8:	4b90      	ldr	r3, [pc, #576]	@ (800fd1c <tcp_input+0x6a8>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4a8e      	ldr	r2, [pc, #568]	@ (800fd18 <tcp_input+0x6a4>)
 800fade:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fae0:	4b8f      	ldr	r3, [pc, #572]	@ (800fd20 <tcp_input+0x6ac>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fae6:	4b8f      	ldr	r3, [pc, #572]	@ (800fd24 <tcp_input+0x6b0>)
 800fae8:	2200      	movs	r2, #0
 800faea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800faec:	4b8e      	ldr	r3, [pc, #568]	@ (800fd28 <tcp_input+0x6b4>)
 800faee:	2200      	movs	r2, #0
 800faf0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800faf2:	4b8e      	ldr	r3, [pc, #568]	@ (800fd2c <tcp_input+0x6b8>)
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	f003 0308 	and.w	r3, r3, #8
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d006      	beq.n	800fb0c <tcp_input+0x498>
      p->flags |= PBUF_FLAG_PUSH;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	7b5b      	ldrb	r3, [r3, #13]
 800fb02:	f043 0301 	orr.w	r3, r3, #1
 800fb06:	b2da      	uxtb	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d017      	beq.n	800fb44 <tcp_input+0x4d0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fb14:	69f8      	ldr	r0, [r7, #28]
 800fb16:	f7ff fa41 	bl	800ef9c <tcp_process_refused_data>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	f113 0f0d 	cmn.w	r3, #13
 800fb20:	d007      	beq.n	800fb32 <tcp_input+0x4be>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00c      	beq.n	800fb44 <tcp_input+0x4d0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fb2a:	4b81      	ldr	r3, [pc, #516]	@ (800fd30 <tcp_input+0x6bc>)
 800fb2c:	881b      	ldrh	r3, [r3, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d008      	beq.n	800fb44 <tcp_input+0x4d0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fb32:	69fb      	ldr	r3, [r7, #28]
 800fb34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	f040 80e2 	bne.w	800fd00 <tcp_input+0x68c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fb3c:	69f8      	ldr	r0, [r7, #28]
 800fb3e:	f002 f9e9 	bl	8011f14 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fb42:	e0dd      	b.n	800fd00 <tcp_input+0x68c>
      }
    }
    tcp_input_pcb = pcb;
 800fb44:	4a7b      	ldr	r2, [pc, #492]	@ (800fd34 <tcp_input+0x6c0>)
 800fb46:	69fb      	ldr	r3, [r7, #28]
 800fb48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fb4a:	69f8      	ldr	r0, [r7, #28]
 800fb4c:	f000 fad2 	bl	80100f4 <tcp_process>
 800fb50:	4603      	mov	r3, r0
 800fb52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fb54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb58:	f113 0f0d 	cmn.w	r3, #13
 800fb5c:	f000 80d2 	beq.w	800fd04 <tcp_input+0x690>
      if (recv_flags & TF_RESET) {
 800fb60:	4b70      	ldr	r3, [pc, #448]	@ (800fd24 <tcp_input+0x6b0>)
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	f003 0308 	and.w	r3, r3, #8
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d016      	beq.n	800fb9a <tcp_input+0x526>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d008      	beq.n	800fb88 <tcp_input+0x514>
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb7c:	69fa      	ldr	r2, [r7, #28]
 800fb7e:	6912      	ldr	r2, [r2, #16]
 800fb80:	f06f 010d 	mvn.w	r1, #13
 800fb84:	4610      	mov	r0, r2
 800fb86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fb88:	69f9      	ldr	r1, [r7, #28]
 800fb8a:	486b      	ldr	r0, [pc, #428]	@ (800fd38 <tcp_input+0x6c4>)
 800fb8c:	f7ff fc5a 	bl	800f444 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800fb90:	69f9      	ldr	r1, [r7, #28]
 800fb92:	2001      	movs	r0, #1
 800fb94:	f7fd fb72 	bl	800d27c <memp_free>
 800fb98:	e0d7      	b.n	800fd4a <tcp_input+0x6d6>
      } else {
        err = ERR_OK;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fb9e:	4b62      	ldr	r3, [pc, #392]	@ (800fd28 <tcp_input+0x6b4>)
 800fba0:	881b      	ldrh	r3, [r3, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d01b      	beq.n	800fbde <tcp_input+0x56a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fba6:	4b60      	ldr	r3, [pc, #384]	@ (800fd28 <tcp_input+0x6b4>)
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d009      	beq.n	800fbc8 <tcp_input+0x554>
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fbb8:	69fa      	ldr	r2, [r7, #28]
 800fbba:	6910      	ldr	r0, [r2, #16]
 800fbbc:	89fa      	ldrh	r2, [r7, #14]
 800fbbe:	69f9      	ldr	r1, [r7, #28]
 800fbc0:	4798      	blx	r3
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	74fb      	strb	r3, [r7, #19]
 800fbc6:	e001      	b.n	800fbcc <tcp_input+0x558>
 800fbc8:	2300      	movs	r3, #0
 800fbca:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fbcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbd0:	f113 0f0d 	cmn.w	r3, #13
 800fbd4:	f000 8098 	beq.w	800fd08 <tcp_input+0x694>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fbd8:	4b53      	ldr	r3, [pc, #332]	@ (800fd28 <tcp_input+0x6b4>)
 800fbda:	2200      	movs	r2, #0
 800fbdc:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fbde:	69f8      	ldr	r0, [r7, #28]
 800fbe0:	f000 f90e 	bl	800fe00 <tcp_input_delayed_close>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	f040 8090 	bne.w	800fd0c <tcp_input+0x698>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fbec:	4b4c      	ldr	r3, [pc, #304]	@ (800fd20 <tcp_input+0x6ac>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d041      	beq.n	800fc78 <tcp_input+0x604>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d006      	beq.n	800fc0a <tcp_input+0x596>
 800fbfc:	4b4f      	ldr	r3, [pc, #316]	@ (800fd3c <tcp_input+0x6c8>)
 800fbfe:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 800fc02:	494f      	ldr	r1, [pc, #316]	@ (800fd40 <tcp_input+0x6cc>)
 800fc04:	484f      	ldr	r0, [pc, #316]	@ (800fd44 <tcp_input+0x6d0>)
 800fc06:	f005 f8d3 	bl	8014db0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	7e9b      	ldrb	r3, [r3, #26]
 800fc0e:	f003 0310 	and.w	r3, r3, #16
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d008      	beq.n	800fc28 <tcp_input+0x5b4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fc16:	4b42      	ldr	r3, [pc, #264]	@ (800fd20 <tcp_input+0x6ac>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fe f84a 	bl	800dcb4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fc20:	69f8      	ldr	r0, [r7, #28]
 800fc22:	f7fe fddf 	bl	800e7e4 <tcp_abort>
            goto aborted;
 800fc26:	e090      	b.n	800fd4a <tcp_input+0x6d6>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fc28:	69fb      	ldr	r3, [r7, #28]
 800fc2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d00c      	beq.n	800fc4c <tcp_input+0x5d8>
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800fc38:	69fb      	ldr	r3, [r7, #28]
 800fc3a:	6918      	ldr	r0, [r3, #16]
 800fc3c:	4b38      	ldr	r3, [pc, #224]	@ (800fd20 <tcp_input+0x6ac>)
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	2300      	movs	r3, #0
 800fc42:	69f9      	ldr	r1, [r7, #28]
 800fc44:	47a0      	blx	r4
 800fc46:	4603      	mov	r3, r0
 800fc48:	74fb      	strb	r3, [r7, #19]
 800fc4a:	e008      	b.n	800fc5e <tcp_input+0x5ea>
 800fc4c:	4b34      	ldr	r3, [pc, #208]	@ (800fd20 <tcp_input+0x6ac>)
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	2300      	movs	r3, #0
 800fc52:	69f9      	ldr	r1, [r7, #28]
 800fc54:	2000      	movs	r0, #0
 800fc56:	f7ff fa53 	bl	800f100 <tcp_recv_null>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fc5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc62:	f113 0f0d 	cmn.w	r3, #13
 800fc66:	d053      	beq.n	800fd10 <tcp_input+0x69c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fc68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d003      	beq.n	800fc78 <tcp_input+0x604>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fc70:	4b2b      	ldr	r3, [pc, #172]	@ (800fd20 <tcp_input+0x6ac>)
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fc78:	4b2a      	ldr	r3, [pc, #168]	@ (800fd24 <tcp_input+0x6b0>)
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	f003 0320 	and.w	r3, r3, #32
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d030      	beq.n	800fce6 <tcp_input+0x672>
          if (pcb->refused_data != NULL) {
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d009      	beq.n	800fca0 <tcp_input+0x62c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fc8c:	69fb      	ldr	r3, [r7, #28]
 800fc8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc90:	7b5a      	ldrb	r2, [r3, #13]
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc96:	f042 0220 	orr.w	r2, r2, #32
 800fc9a:	b2d2      	uxtb	r2, r2
 800fc9c:	735a      	strb	r2, [r3, #13]
 800fc9e:	e022      	b.n	800fce6 <tcp_input+0x672>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fca4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fca8:	d005      	beq.n	800fcb6 <tcp_input+0x642>
              pcb->rcv_wnd++;
 800fcaa:	69fb      	ldr	r3, [r7, #28]
 800fcac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcae:	3301      	adds	r3, #1
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d00b      	beq.n	800fcd8 <tcp_input+0x664>
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	6918      	ldr	r0, [r3, #16]
 800fcca:	2300      	movs	r3, #0
 800fccc:	2200      	movs	r2, #0
 800fcce:	69f9      	ldr	r1, [r7, #28]
 800fcd0:	47a0      	blx	r4
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	74fb      	strb	r3, [r7, #19]
 800fcd6:	e001      	b.n	800fcdc <tcp_input+0x668>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fcdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fce0:	f113 0f0d 	cmn.w	r3, #13
 800fce4:	d016      	beq.n	800fd14 <tcp_input+0x6a0>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fce6:	4b13      	ldr	r3, [pc, #76]	@ (800fd34 <tcp_input+0x6c0>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fcec:	69f8      	ldr	r0, [r7, #28]
 800fcee:	f000 f887 	bl	800fe00 <tcp_input_delayed_close>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d127      	bne.n	800fd48 <tcp_input+0x6d4>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fcf8:	69f8      	ldr	r0, [r7, #28]
 800fcfa:	f002 f967 	bl	8011fcc <tcp_output>
 800fcfe:	e024      	b.n	800fd4a <tcp_input+0x6d6>
        goto aborted;
 800fd00:	bf00      	nop
 800fd02:	e022      	b.n	800fd4a <tcp_input+0x6d6>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fd04:	bf00      	nop
 800fd06:	e020      	b.n	800fd4a <tcp_input+0x6d6>
              goto aborted;
 800fd08:	bf00      	nop
 800fd0a:	e01e      	b.n	800fd4a <tcp_input+0x6d6>
          goto aborted;
 800fd0c:	bf00      	nop
 800fd0e:	e01c      	b.n	800fd4a <tcp_input+0x6d6>
            goto aborted;
 800fd10:	bf00      	nop
 800fd12:	e01a      	b.n	800fd4a <tcp_input+0x6d6>
              goto aborted;
 800fd14:	bf00      	nop
 800fd16:	e018      	b.n	800fd4a <tcp_input+0x6d6>
 800fd18:	2000c7b0 	.word	0x2000c7b0
 800fd1c:	2000c7c0 	.word	0x2000c7c0
 800fd20:	2000c7e0 	.word	0x2000c7e0
 800fd24:	2000c7dd 	.word	0x2000c7dd
 800fd28:	2000c7d8 	.word	0x2000c7d8
 800fd2c:	2000c7dc 	.word	0x2000c7dc
 800fd30:	2000c7da 	.word	0x2000c7da
 800fd34:	2000c7e4 	.word	0x2000c7e4
 800fd38:	2000c7a4 	.word	0x2000c7a4
 800fd3c:	080174d8 	.word	0x080174d8
 800fd40:	08017688 	.word	0x08017688
 800fd44:	08017530 	.word	0x08017530
          goto aborted;
 800fd48:	bf00      	nop
    tcp_input_pcb = NULL;
 800fd4a:	4b24      	ldr	r3, [pc, #144]	@ (800fddc <tcp_input+0x768>)
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fd50:	4b23      	ldr	r3, [pc, #140]	@ (800fde0 <tcp_input+0x76c>)
 800fd52:	2200      	movs	r2, #0
 800fd54:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800fd56:	4b23      	ldr	r3, [pc, #140]	@ (800fde4 <tcp_input+0x770>)
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d039      	beq.n	800fdd2 <tcp_input+0x75e>
    {
      pbuf_free(inseg.p);
 800fd5e:	4b21      	ldr	r3, [pc, #132]	@ (800fde4 <tcp_input+0x770>)
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fd ffa6 	bl	800dcb4 <pbuf_free>
      inseg.p = NULL;
 800fd68:	4b1e      	ldr	r3, [pc, #120]	@ (800fde4 <tcp_input+0x770>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fd6e:	e030      	b.n	800fdd2 <tcp_input+0x75e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fd70:	4b1d      	ldr	r3, [pc, #116]	@ (800fde8 <tcp_input+0x774>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	899b      	ldrh	r3, [r3, #12]
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7fa fb73 	bl	800a464 <lwip_htons>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	f003 0304 	and.w	r3, r3, #4
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d115      	bne.n	800fdb4 <tcp_input+0x740>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd88:	4b18      	ldr	r3, [pc, #96]	@ (800fdec <tcp_input+0x778>)
 800fd8a:	6818      	ldr	r0, [r3, #0]
 800fd8c:	4b18      	ldr	r3, [pc, #96]	@ (800fdf0 <tcp_input+0x77c>)
 800fd8e:	881b      	ldrh	r3, [r3, #0]
 800fd90:	461a      	mov	r2, r3
 800fd92:	4b18      	ldr	r3, [pc, #96]	@ (800fdf4 <tcp_input+0x780>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd98:	4b13      	ldr	r3, [pc, #76]	@ (800fde8 <tcp_input+0x774>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd9c:	885b      	ldrh	r3, [r3, #2]
 800fd9e:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fda0:	4a11      	ldr	r2, [pc, #68]	@ (800fde8 <tcp_input+0x774>)
 800fda2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda4:	8812      	ldrh	r2, [r2, #0]
 800fda6:	b292      	uxth	r2, r2
 800fda8:	9201      	str	r2, [sp, #4]
 800fdaa:	9300      	str	r3, [sp, #0]
 800fdac:	4b12      	ldr	r3, [pc, #72]	@ (800fdf8 <tcp_input+0x784>)
 800fdae:	4a13      	ldr	r2, [pc, #76]	@ (800fdfc <tcp_input+0x788>)
 800fdb0:	f002 fb90 	bl	80124d4 <tcp_rst>
    pbuf_free(p);
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7fd ff7d 	bl	800dcb4 <pbuf_free>
  return;
 800fdba:	e00a      	b.n	800fdd2 <tcp_input+0x75e>
    goto dropped;
 800fdbc:	bf00      	nop
 800fdbe:	e004      	b.n	800fdca <tcp_input+0x756>
    goto dropped;
 800fdc0:	bf00      	nop
 800fdc2:	e002      	b.n	800fdca <tcp_input+0x756>
    goto dropped;
 800fdc4:	bf00      	nop
 800fdc6:	e000      	b.n	800fdca <tcp_input+0x756>
      goto dropped;
 800fdc8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f7fd ff72 	bl	800dcb4 <pbuf_free>
 800fdd0:	e000      	b.n	800fdd4 <tcp_input+0x760>
  return;
 800fdd2:	bf00      	nop
}
 800fdd4:	3724      	adds	r7, #36	@ 0x24
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	bd90      	pop	{r4, r7, pc}
 800fdda:	bf00      	nop
 800fddc:	2000c7e4 	.word	0x2000c7e4
 800fde0:	2000c7e0 	.word	0x2000c7e0
 800fde4:	2000c7b0 	.word	0x2000c7b0
 800fde8:	2000c7c0 	.word	0x2000c7c0
 800fdec:	2000c7d4 	.word	0x2000c7d4
 800fdf0:	2000c7da 	.word	0x2000c7da
 800fdf4:	2000c7d0 	.word	0x2000c7d0
 800fdf8:	20007080 	.word	0x20007080
 800fdfc:	20007084 	.word	0x20007084

0800fe00 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b082      	sub	sp, #8
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800fe08:	4b14      	ldr	r3, [pc, #80]	@ (800fe5c <tcp_input_delayed_close+0x5c>)
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	f003 0310 	and.w	r3, r3, #16
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d01d      	beq.n	800fe50 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	7e9b      	ldrb	r3, [r3, #26]
 800fe18:	f003 0310 	and.w	r3, r3, #16
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d10d      	bne.n	800fe3c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d008      	beq.n	800fe3c <tcp_input_delayed_close+0x3c>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	6912      	ldr	r2, [r2, #16]
 800fe34:	f06f 010e 	mvn.w	r1, #14
 800fe38:	4610      	mov	r0, r2
 800fe3a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fe3c:	6879      	ldr	r1, [r7, #4]
 800fe3e:	4808      	ldr	r0, [pc, #32]	@ (800fe60 <tcp_input_delayed_close+0x60>)
 800fe40:	f7ff fb00 	bl	800f444 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800fe44:	6879      	ldr	r1, [r7, #4]
 800fe46:	2001      	movs	r0, #1
 800fe48:	f7fd fa18 	bl	800d27c <memp_free>
    return 1;
 800fe4c:	2301      	movs	r3, #1
 800fe4e:	e000      	b.n	800fe52 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800fe50:	2300      	movs	r3, #0
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	2000c7dd 	.word	0x2000c7dd
 800fe60:	2000c7a4 	.word	0x2000c7a4

0800fe64 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b088      	sub	sp, #32
 800fe68:	af02      	add	r7, sp, #8
 800fe6a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fe6c:	4b63      	ldr	r3, [pc, #396]	@ (800fffc <tcp_listen_input+0x198>)
 800fe6e:	781b      	ldrb	r3, [r3, #0]
 800fe70:	f003 0304 	and.w	r3, r3, #4
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f040 80bb 	bne.w	800fff0 <tcp_listen_input+0x18c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fe7a:	4b60      	ldr	r3, [pc, #384]	@ (800fffc <tcp_listen_input+0x198>)
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	f003 0310 	and.w	r3, r3, #16
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d016      	beq.n	800feb4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe86:	4b5e      	ldr	r3, [pc, #376]	@ (8010000 <tcp_listen_input+0x19c>)
 800fe88:	6818      	ldr	r0, [r3, #0]
 800fe8a:	4b5e      	ldr	r3, [pc, #376]	@ (8010004 <tcp_listen_input+0x1a0>)
 800fe8c:	881b      	ldrh	r3, [r3, #0]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	4b5d      	ldr	r3, [pc, #372]	@ (8010008 <tcp_listen_input+0x1a4>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe96:	4b5d      	ldr	r3, [pc, #372]	@ (801000c <tcp_listen_input+0x1a8>)
 800fe98:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe9a:	885b      	ldrh	r3, [r3, #2]
 800fe9c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe9e:	4a5b      	ldr	r2, [pc, #364]	@ (801000c <tcp_listen_input+0x1a8>)
 800fea0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fea2:	8812      	ldrh	r2, [r2, #0]
 800fea4:	b292      	uxth	r2, r2
 800fea6:	9201      	str	r2, [sp, #4]
 800fea8:	9300      	str	r3, [sp, #0]
 800feaa:	4b59      	ldr	r3, [pc, #356]	@ (8010010 <tcp_listen_input+0x1ac>)
 800feac:	4a59      	ldr	r2, [pc, #356]	@ (8010014 <tcp_listen_input+0x1b0>)
 800feae:	f002 fb11 	bl	80124d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800feb2:	e09f      	b.n	800fff4 <tcp_listen_input+0x190>
  } else if (flags & TCP_SYN) {
 800feb4:	4b51      	ldr	r3, [pc, #324]	@ (800fffc <tcp_listen_input+0x198>)
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	f003 0302 	and.w	r3, r3, #2
 800febc:	2b00      	cmp	r3, #0
 800febe:	f000 8099 	beq.w	800fff4 <tcp_listen_input+0x190>
    npcb = tcp_alloc(pcb->prio);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	7d5b      	ldrb	r3, [r3, #21]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7ff f9f8 	bl	800f2bc <tcp_alloc>
 800fecc:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d111      	bne.n	800fef8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	699b      	ldr	r3, [r3, #24]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00a      	beq.n	800fef2 <tcp_listen_input+0x8e>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	6910      	ldr	r0, [r2, #16]
 800fee4:	f04f 32ff 	mov.w	r2, #4294967295
 800fee8:	2100      	movs	r1, #0
 800feea:	4798      	blx	r3
 800feec:	4603      	mov	r3, r0
 800feee:	73bb      	strb	r3, [r7, #14]
      return;
 800fef0:	e081      	b.n	800fff6 <tcp_listen_input+0x192>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fef2:	23f0      	movs	r3, #240	@ 0xf0
 800fef4:	73bb      	strb	r3, [r7, #14]
      return;
 800fef6:	e07e      	b.n	800fff6 <tcp_listen_input+0x192>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fef8:	4b47      	ldr	r3, [pc, #284]	@ (8010018 <tcp_listen_input+0x1b4>)
 800fefa:	695a      	ldr	r2, [r3, #20]
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ff00:	4b45      	ldr	r3, [pc, #276]	@ (8010018 <tcp_listen_input+0x1b4>)
 800ff02:	691a      	ldr	r2, [r3, #16]
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	8ada      	ldrh	r2, [r3, #22]
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ff10:	4b3e      	ldr	r3, [pc, #248]	@ (801000c <tcp_listen_input+0x1a8>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ff1c:	697b      	ldr	r3, [r7, #20]
 800ff1e:	2203      	movs	r2, #3
 800ff20:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ff22:	4b39      	ldr	r3, [pc, #228]	@ (8010008 <tcp_listen_input+0x1a4>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	1c5a      	adds	r2, r3, #1
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ff34:	6978      	ldr	r0, [r7, #20]
 800ff36:	f7ff fb01 	bl	800f53c <tcp_next_iss>
 800ff3a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	693a      	ldr	r2, [r7, #16]
 800ff40:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->snd_nxt = iss;
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	693a      	ldr	r2, [r7, #16]
 800ff46:	64da      	str	r2, [r3, #76]	@ 0x4c
    npcb->lastack = iss;
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	693a      	ldr	r2, [r7, #16]
 800ff4c:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	693a      	ldr	r2, [r7, #16]
 800ff52:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ff54:	4b2c      	ldr	r3, [pc, #176]	@ (8010008 <tcp_listen_input+0x1a4>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	1e5a      	subs	r2, r3, #1
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->callback_arg = pcb->callback_arg;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	691a      	ldr	r2, [r3, #16]
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	7a1b      	ldrb	r3, [r3, #8]
 800ff70:	f003 030c 	and.w	r3, r3, #12
 800ff74:	b2da      	uxtb	r2, r3
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ff7a:	4b28      	ldr	r3, [pc, #160]	@ (801001c <tcp_listen_input+0x1b8>)
 800ff7c:	681a      	ldr	r2, [r3, #0]
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	60da      	str	r2, [r3, #12]
 800ff82:	4a26      	ldr	r2, [pc, #152]	@ (801001c <tcp_listen_input+0x1b8>)
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	6013      	str	r3, [r2, #0]
 800ff88:	f002 fcec 	bl	8012964 <tcp_timer_needed>
 800ff8c:	4b24      	ldr	r3, [pc, #144]	@ (8010020 <tcp_listen_input+0x1bc>)
 800ff8e:	2201      	movs	r2, #1
 800ff90:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff92:	6978      	ldr	r0, [r7, #20]
 800ff94:	f001 fd0c 	bl	80119b0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff98:	4b1c      	ldr	r3, [pc, #112]	@ (801000c <tcp_listen_input+0x1a8>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	89db      	ldrh	r3, [r3, #14]
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	3304      	adds	r3, #4
 800ffba:	4619      	mov	r1, r3
 800ffbc:	4610      	mov	r0, r2
 800ffbe:	f7ff fad3 	bl	800f568 <tcp_eff_send_mss_impl>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ffca:	2112      	movs	r1, #18
 800ffcc:	6978      	ldr	r0, [r7, #20]
 800ffce:	f001 fea5 	bl	8011d1c <tcp_enqueue_flags>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ffd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d004      	beq.n	800ffe8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ffde:	2100      	movs	r1, #0
 800ffe0:	6978      	ldr	r0, [r7, #20]
 800ffe2:	f7fe fb4d 	bl	800e680 <tcp_abandon>
      return;
 800ffe6:	e006      	b.n	800fff6 <tcp_listen_input+0x192>
    tcp_output(npcb);
 800ffe8:	6978      	ldr	r0, [r7, #20]
 800ffea:	f001 ffef 	bl	8011fcc <tcp_output>
  return;
 800ffee:	e001      	b.n	800fff4 <tcp_listen_input+0x190>
    return;
 800fff0:	bf00      	nop
 800fff2:	e000      	b.n	800fff6 <tcp_listen_input+0x192>
  return;
 800fff4:	bf00      	nop
}
 800fff6:	3718      	adds	r7, #24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	2000c7dc 	.word	0x2000c7dc
 8010000:	2000c7d4 	.word	0x2000c7d4
 8010004:	2000c7da 	.word	0x2000c7da
 8010008:	2000c7d0 	.word	0x2000c7d0
 801000c:	2000c7c0 	.word	0x2000c7c0
 8010010:	20007080 	.word	0x20007080
 8010014:	20007084 	.word	0x20007084
 8010018:	20007070 	.word	0x20007070
 801001c:	2000c7a4 	.word	0x2000c7a4
 8010020:	2000c7ac 	.word	0x2000c7ac

08010024 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af02      	add	r7, sp, #8
 801002a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801002c:	4b29      	ldr	r3, [pc, #164]	@ (80100d4 <tcp_timewait_input+0xb0>)
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	f003 0304 	and.w	r3, r3, #4
 8010034:	2b00      	cmp	r3, #0
 8010036:	d146      	bne.n	80100c6 <tcp_timewait_input+0xa2>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010038:	4b26      	ldr	r3, [pc, #152]	@ (80100d4 <tcp_timewait_input+0xb0>)
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	f003 0302 	and.w	r3, r3, #2
 8010040:	2b00      	cmp	r3, #0
 8010042:	d027      	beq.n	8010094 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010044:	4b24      	ldr	r3, [pc, #144]	@ (80100d8 <tcp_timewait_input+0xb4>)
 8010046:	681a      	ldr	r2, [r3, #0]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801004c:	1ad3      	subs	r3, r2, r3
 801004e:	2b00      	cmp	r3, #0
 8010050:	db2a      	blt.n	80100a8 <tcp_timewait_input+0x84>
 8010052:	4b21      	ldr	r3, [pc, #132]	@ (80100d8 <tcp_timewait_input+0xb4>)
 8010054:	681a      	ldr	r2, [r3, #0]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801005a:	6879      	ldr	r1, [r7, #4]
 801005c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801005e:	440b      	add	r3, r1
 8010060:	1ad3      	subs	r3, r2, r3
 8010062:	2b00      	cmp	r3, #0
 8010064:	dc20      	bgt.n	80100a8 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010066:	4b1d      	ldr	r3, [pc, #116]	@ (80100dc <tcp_timewait_input+0xb8>)
 8010068:	6818      	ldr	r0, [r3, #0]
 801006a:	4b1d      	ldr	r3, [pc, #116]	@ (80100e0 <tcp_timewait_input+0xbc>)
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	461a      	mov	r2, r3
 8010070:	4b19      	ldr	r3, [pc, #100]	@ (80100d8 <tcp_timewait_input+0xb4>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010076:	4b1b      	ldr	r3, [pc, #108]	@ (80100e4 <tcp_timewait_input+0xc0>)
 8010078:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801007a:	885b      	ldrh	r3, [r3, #2]
 801007c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801007e:	4a19      	ldr	r2, [pc, #100]	@ (80100e4 <tcp_timewait_input+0xc0>)
 8010080:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010082:	8812      	ldrh	r2, [r2, #0]
 8010084:	b292      	uxth	r2, r2
 8010086:	9201      	str	r2, [sp, #4]
 8010088:	9300      	str	r3, [sp, #0]
 801008a:	4b17      	ldr	r3, [pc, #92]	@ (80100e8 <tcp_timewait_input+0xc4>)
 801008c:	4a17      	ldr	r2, [pc, #92]	@ (80100ec <tcp_timewait_input+0xc8>)
 801008e:	f002 fa21 	bl	80124d4 <tcp_rst>
      return;
 8010092:	e01b      	b.n	80100cc <tcp_timewait_input+0xa8>
    }
  } else if (flags & TCP_FIN) {
 8010094:	4b0f      	ldr	r3, [pc, #60]	@ (80100d4 <tcp_timewait_input+0xb0>)
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	f003 0301 	and.w	r3, r3, #1
 801009c:	2b00      	cmp	r3, #0
 801009e:	d003      	beq.n	80100a8 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80100a0:	4b13      	ldr	r3, [pc, #76]	@ (80100f0 <tcp_timewait_input+0xcc>)
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80100a8:	4b0d      	ldr	r3, [pc, #52]	@ (80100e0 <tcp_timewait_input+0xbc>)
 80100aa:	881b      	ldrh	r3, [r3, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00c      	beq.n	80100ca <tcp_timewait_input+0xa6>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	7e9b      	ldrb	r3, [r3, #26]
 80100b4:	f043 0302 	orr.w	r3, r3, #2
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f001 ff84 	bl	8011fcc <tcp_output>
  }
  return;
 80100c4:	e001      	b.n	80100ca <tcp_timewait_input+0xa6>
    return;
 80100c6:	bf00      	nop
 80100c8:	e000      	b.n	80100cc <tcp_timewait_input+0xa8>
  return;
 80100ca:	bf00      	nop
}
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	2000c7dc 	.word	0x2000c7dc
 80100d8:	2000c7d0 	.word	0x2000c7d0
 80100dc:	2000c7d4 	.word	0x2000c7d4
 80100e0:	2000c7da 	.word	0x2000c7da
 80100e4:	2000c7c0 	.word	0x2000c7c0
 80100e8:	20007080 	.word	0x20007080
 80100ec:	20007084 	.word	0x20007084
 80100f0:	2000c798 	.word	0x2000c798

080100f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b08a      	sub	sp, #40	@ 0x28
 80100f8:	af02      	add	r7, sp, #8
 80100fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80100fc:	2300      	movs	r3, #0
 80100fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010100:	2300      	movs	r3, #0
 8010102:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010104:	4b93      	ldr	r3, [pc, #588]	@ (8010354 <tcp_process+0x260>)
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	f003 0304 	and.w	r3, r3, #4
 801010c:	2b00      	cmp	r3, #0
 801010e:	d04e      	beq.n	80101ae <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	7d1b      	ldrb	r3, [r3, #20]
 8010114:	2b02      	cmp	r3, #2
 8010116:	d108      	bne.n	801012a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801011c:	4b8e      	ldr	r3, [pc, #568]	@ (8010358 <tcp_process+0x264>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	429a      	cmp	r2, r3
 8010122:	d123      	bne.n	801016c <tcp_process+0x78>
        acceptable = 1;
 8010124:	2301      	movs	r3, #1
 8010126:	76fb      	strb	r3, [r7, #27]
 8010128:	e020      	b.n	801016c <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801012e:	4b8b      	ldr	r3, [pc, #556]	@ (801035c <tcp_process+0x268>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	429a      	cmp	r2, r3
 8010134:	d102      	bne.n	801013c <tcp_process+0x48>
        acceptable = 1;
 8010136:	2301      	movs	r3, #1
 8010138:	76fb      	strb	r3, [r7, #27]
 801013a:	e017      	b.n	801016c <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801013c:	4b87      	ldr	r3, [pc, #540]	@ (801035c <tcp_process+0x268>)
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	db10      	blt.n	801016c <tcp_process+0x78>
 801014a:	4b84      	ldr	r3, [pc, #528]	@ (801035c <tcp_process+0x268>)
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010152:	6879      	ldr	r1, [r7, #4]
 8010154:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010156:	440b      	add	r3, r1
 8010158:	1ad3      	subs	r3, r2, r3
 801015a:	2b00      	cmp	r3, #0
 801015c:	dc06      	bgt.n	801016c <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	7e9b      	ldrb	r3, [r3, #26]
 8010162:	f043 0302 	orr.w	r3, r3, #2
 8010166:	b2da      	uxtb	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801016c:	7efb      	ldrb	r3, [r7, #27]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d01b      	beq.n	80101aa <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	7d1b      	ldrb	r3, [r3, #20]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d106      	bne.n	8010188 <tcp_process+0x94>
 801017a:	4b79      	ldr	r3, [pc, #484]	@ (8010360 <tcp_process+0x26c>)
 801017c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8010180:	4978      	ldr	r1, [pc, #480]	@ (8010364 <tcp_process+0x270>)
 8010182:	4879      	ldr	r0, [pc, #484]	@ (8010368 <tcp_process+0x274>)
 8010184:	f004 fe14 	bl	8014db0 <iprintf>
      recv_flags |= TF_RESET;
 8010188:	4b78      	ldr	r3, [pc, #480]	@ (801036c <tcp_process+0x278>)
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	f043 0308 	orr.w	r3, r3, #8
 8010190:	b2da      	uxtb	r2, r3
 8010192:	4b76      	ldr	r3, [pc, #472]	@ (801036c <tcp_process+0x278>)
 8010194:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	7e9b      	ldrb	r3, [r3, #26]
 801019a:	f023 0301 	bic.w	r3, r3, #1
 801019e:	b2da      	uxtb	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80101a4:	f06f 030d 	mvn.w	r3, #13
 80101a8:	e348      	b.n	801083c <tcp_process+0x748>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80101aa:	2300      	movs	r3, #0
 80101ac:	e346      	b.n	801083c <tcp_process+0x748>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80101ae:	4b69      	ldr	r3, [pc, #420]	@ (8010354 <tcp_process+0x260>)
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	f003 0302 	and.w	r3, r3, #2
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d010      	beq.n	80101dc <tcp_process+0xe8>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	7d1b      	ldrb	r3, [r3, #20]
 80101be:	2b02      	cmp	r3, #2
 80101c0:	d00c      	beq.n	80101dc <tcp_process+0xe8>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	7d1b      	ldrb	r3, [r3, #20]
 80101c6:	2b03      	cmp	r3, #3
 80101c8:	d008      	beq.n	80101dc <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	7e9b      	ldrb	r3, [r3, #26]
 80101ce:	f043 0302 	orr.w	r3, r3, #2
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80101d8:	2300      	movs	r3, #0
 80101da:	e32f      	b.n	801083c <tcp_process+0x748>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	7e9b      	ldrb	r3, [r3, #26]
 80101e0:	f003 0310 	and.w	r3, r3, #16
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d103      	bne.n	80101f0 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80101e8:	4b61      	ldr	r3, [pc, #388]	@ (8010370 <tcp_process+0x27c>)
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2200      	movs	r2, #0
 80101f4:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f001 fbd9 	bl	80119b0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	7d1b      	ldrb	r3, [r3, #20]
 8010202:	3b02      	subs	r3, #2
 8010204:	2b07      	cmp	r3, #7
 8010206:	f200 8309 	bhi.w	801081c <tcp_process+0x728>
 801020a:	a201      	add	r2, pc, #4	@ (adr r2, 8010210 <tcp_process+0x11c>)
 801020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010210:	08010231 	.word	0x08010231
 8010214:	08010427 	.word	0x08010427
 8010218:	0801057f 	.word	0x0801057f
 801021c:	080105a9 	.word	0x080105a9
 8010220:	080106cb 	.word	0x080106cb
 8010224:	0801057f 	.word	0x0801057f
 8010228:	08010757 	.word	0x08010757
 801022c:	080107e7 	.word	0x080107e7
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010230:	4b48      	ldr	r3, [pc, #288]	@ (8010354 <tcp_process+0x260>)
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	f003 0310 	and.w	r3, r3, #16
 8010238:	2b00      	cmp	r3, #0
 801023a:	f000 80ca 	beq.w	80103d2 <tcp_process+0x2de>
 801023e:	4b45      	ldr	r3, [pc, #276]	@ (8010354 <tcp_process+0x260>)
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	f003 0302 	and.w	r3, r3, #2
 8010246:	2b00      	cmp	r3, #0
 8010248:	f000 80c3 	beq.w	80103d2 <tcp_process+0x2de>
        && (ackno == pcb->lastack + 1)) {
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010250:	1c5a      	adds	r2, r3, #1
 8010252:	4b41      	ldr	r3, [pc, #260]	@ (8010358 <tcp_process+0x264>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	429a      	cmp	r2, r3
 8010258:	f040 80bb 	bne.w	80103d2 <tcp_process+0x2de>
      pcb->rcv_nxt = seqno + 1;
 801025c:	4b3f      	ldr	r3, [pc, #252]	@ (801035c <tcp_process+0x268>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	625a      	str	r2, [r3, #36]	@ 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	62da      	str	r2, [r3, #44]	@ 0x2c
      pcb->lastack = ackno;
 801026e:	4b3a      	ldr	r3, [pc, #232]	@ (8010358 <tcp_process+0x264>)
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	645a      	str	r2, [r3, #68]	@ 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8010276:	4b3f      	ldr	r3, [pc, #252]	@ (8010374 <tcp_process+0x280>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	89db      	ldrh	r3, [r3, #14]
 801027c:	b29a      	uxth	r2, r3
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010290:	4b32      	ldr	r3, [pc, #200]	@ (801035c <tcp_process+0x268>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	1e5a      	subs	r2, r3, #1
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->state = ESTABLISHED;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2204      	movs	r2, #4
 801029e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	3304      	adds	r3, #4
 80102a8:	4619      	mov	r1, r3
 80102aa:	4610      	mov	r0, r2
 80102ac:	f7ff f95c 	bl	800f568 <tcp_eff_send_mss_impl>
 80102b0:	4603      	mov	r3, r0
 80102b2:	461a      	mov	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102bc:	005b      	lsls	r3, r3, #1
 80102be:	f241 121c 	movw	r2, #4380	@ 0x111c
 80102c2:	429a      	cmp	r2, r3
 80102c4:	bf38      	it	cc
 80102c6:	461a      	movcc	r2, r3
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	4293      	cmp	r3, r2
 80102d0:	bf28      	it	cs
 80102d2:	4613      	movcs	r3, r2
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d106      	bne.n	80102f4 <tcp_process+0x200>
 80102e6:	4b1e      	ldr	r3, [pc, #120]	@ (8010360 <tcp_process+0x26c>)
 80102e8:	f240 321a 	movw	r2, #794	@ 0x31a
 80102ec:	4922      	ldr	r1, [pc, #136]	@ (8010378 <tcp_process+0x284>)
 80102ee:	481e      	ldr	r0, [pc, #120]	@ (8010368 <tcp_process+0x274>)
 80102f0:	f004 fd5e 	bl	8014db0 <iprintf>
      --pcb->snd_queuelen;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80102fa:	3b01      	subs	r3, #1
 80102fc:	b29a      	uxth	r2, r3
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010308:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d111      	bne.n	8010334 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010314:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8010316:	69fb      	ldr	r3, [r7, #28]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d106      	bne.n	801032a <tcp_process+0x236>
 801031c:	4b10      	ldr	r3, [pc, #64]	@ (8010360 <tcp_process+0x26c>)
 801031e:	f240 3222 	movw	r2, #802	@ 0x322
 8010322:	4916      	ldr	r1, [pc, #88]	@ (801037c <tcp_process+0x288>)
 8010324:	4810      	ldr	r0, [pc, #64]	@ (8010368 <tcp_process+0x274>)
 8010326:	f004 fd43 	bl	8014db0 <iprintf>
        pcb->unsent = rseg->next;
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	669a      	str	r2, [r3, #104]	@ 0x68
 8010332:	e003      	b.n	801033c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	681a      	ldr	r2, [r3, #0]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      tcp_seg_free(rseg);
 801033c:	69f8      	ldr	r0, [r7, #28]
 801033e:	f7fe feab 	bl	800f098 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010346:	2b00      	cmp	r3, #0
 8010348:	d11a      	bne.n	8010380 <tcp_process+0x28c>
        pcb->rtime = -1;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010350:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010352:	e01c      	b.n	801038e <tcp_process+0x29a>
 8010354:	2000c7dc 	.word	0x2000c7dc
 8010358:	2000c7d4 	.word	0x2000c7d4
 801035c:	2000c7d0 	.word	0x2000c7d0
 8010360:	080174d8 	.word	0x080174d8
 8010364:	080176a4 	.word	0x080176a4
 8010368:	08017530 	.word	0x08017530
 801036c:	2000c7dd 	.word	0x2000c7dd
 8010370:	2000c798 	.word	0x2000c798
 8010374:	2000c7c0 	.word	0x2000c7c0
 8010378:	080176c4 	.word	0x080176c4
 801037c:	080176dc 	.word	0x080176dc
      } else {
        pcb->rtime = 0;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	861a      	strh	r2, [r3, #48]	@ 0x30
        pcb->nrtx = 0;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2200      	movs	r2, #0
 801038a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010394:	2b00      	cmp	r3, #0
 8010396:	d00a      	beq.n	80103ae <tcp_process+0x2ba>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801039e:	687a      	ldr	r2, [r7, #4]
 80103a0:	6910      	ldr	r0, [r2, #16]
 80103a2:	2200      	movs	r2, #0
 80103a4:	6879      	ldr	r1, [r7, #4]
 80103a6:	4798      	blx	r3
 80103a8:	4603      	mov	r3, r0
 80103aa:	76bb      	strb	r3, [r7, #26]
 80103ac:	e001      	b.n	80103b2 <tcp_process+0x2be>
 80103ae:	2300      	movs	r3, #0
 80103b0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80103b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103b6:	f113 0f0d 	cmn.w	r3, #13
 80103ba:	d102      	bne.n	80103c2 <tcp_process+0x2ce>
        return ERR_ABRT;
 80103bc:	f06f 030c 	mvn.w	r3, #12
 80103c0:	e23c      	b.n	801083c <tcp_process+0x748>
      }
      tcp_ack_now(pcb);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	7e9b      	ldrb	r3, [r3, #26]
 80103c6:	f043 0302 	orr.w	r3, r3, #2
 80103ca:	b2da      	uxtb	r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80103d0:	e226      	b.n	8010820 <tcp_process+0x72c>
    else if (flags & TCP_ACK) {
 80103d2:	4b93      	ldr	r3, [pc, #588]	@ (8010620 <tcp_process+0x52c>)
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	f003 0310 	and.w	r3, r3, #16
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 8220 	beq.w	8010820 <tcp_process+0x72c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80103e0:	4b90      	ldr	r3, [pc, #576]	@ (8010624 <tcp_process+0x530>)
 80103e2:	6818      	ldr	r0, [r3, #0]
 80103e4:	4b90      	ldr	r3, [pc, #576]	@ (8010628 <tcp_process+0x534>)
 80103e6:	881b      	ldrh	r3, [r3, #0]
 80103e8:	461a      	mov	r2, r3
 80103ea:	4b90      	ldr	r3, [pc, #576]	@ (801062c <tcp_process+0x538>)
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103f0:	4b8f      	ldr	r3, [pc, #572]	@ (8010630 <tcp_process+0x53c>)
 80103f2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80103f4:	885b      	ldrh	r3, [r3, #2]
 80103f6:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103f8:	4a8d      	ldr	r2, [pc, #564]	@ (8010630 <tcp_process+0x53c>)
 80103fa:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80103fc:	8812      	ldrh	r2, [r2, #0]
 80103fe:	b292      	uxth	r2, r2
 8010400:	9201      	str	r2, [sp, #4]
 8010402:	9300      	str	r3, [sp, #0]
 8010404:	4b8b      	ldr	r3, [pc, #556]	@ (8010634 <tcp_process+0x540>)
 8010406:	4a8c      	ldr	r2, [pc, #560]	@ (8010638 <tcp_process+0x544>)
 8010408:	f002 f864 	bl	80124d4 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010412:	2b05      	cmp	r3, #5
 8010414:	f200 8204 	bhi.w	8010820 <tcp_process+0x72c>
        pcb->rtime = 0;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2200      	movs	r2, #0
 801041c:	861a      	strh	r2, [r3, #48]	@ 0x30
        tcp_rexmit_rto(pcb);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f002 f8ce 	bl	80125c0 <tcp_rexmit_rto>
    break;
 8010424:	e1fc      	b.n	8010820 <tcp_process+0x72c>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8010426:	4b7e      	ldr	r3, [pc, #504]	@ (8010620 <tcp_process+0x52c>)
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	f003 0310 	and.w	r3, r3, #16
 801042e:	2b00      	cmp	r3, #0
 8010430:	f000 8091 	beq.w	8010556 <tcp_process+0x462>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8010434:	4b7b      	ldr	r3, [pc, #492]	@ (8010624 <tcp_process+0x530>)
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801043c:	1ad3      	subs	r3, r2, r3
 801043e:	3b01      	subs	r3, #1
 8010440:	2b00      	cmp	r3, #0
 8010442:	db71      	blt.n	8010528 <tcp_process+0x434>
 8010444:	4b77      	ldr	r3, [pc, #476]	@ (8010624 <tcp_process+0x530>)
 8010446:	681a      	ldr	r2, [r3, #0]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801044c:	1ad3      	subs	r3, r2, r3
 801044e:	2b00      	cmp	r3, #0
 8010450:	dc6a      	bgt.n	8010528 <tcp_process+0x434>
        pcb->state = ESTABLISHED;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2204      	movs	r2, #4
 8010456:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801045c:	2b00      	cmp	r3, #0
 801045e:	d00b      	beq.n	8010478 <tcp_process+0x384>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d106      	bne.n	8010478 <tcp_process+0x384>
 801046a:	4b74      	ldr	r3, [pc, #464]	@ (801063c <tcp_process+0x548>)
 801046c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8010470:	4973      	ldr	r1, [pc, #460]	@ (8010640 <tcp_process+0x54c>)
 8010472:	4874      	ldr	r0, [pc, #464]	@ (8010644 <tcp_process+0x550>)
 8010474:	f004 fc9c 	bl	8014db0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801047c:	2b00      	cmp	r3, #0
 801047e:	d102      	bne.n	8010486 <tcp_process+0x392>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8010480:	23fa      	movs	r3, #250	@ 0xfa
 8010482:	76bb      	strb	r3, [r7, #26]
 8010484:	e011      	b.n	80104aa <tcp_process+0x3b6>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801048a:	699b      	ldr	r3, [r3, #24]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d00a      	beq.n	80104a6 <tcp_process+0x3b2>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010494:	699b      	ldr	r3, [r3, #24]
 8010496:	687a      	ldr	r2, [r7, #4]
 8010498:	6910      	ldr	r0, [r2, #16]
 801049a:	2200      	movs	r2, #0
 801049c:	6879      	ldr	r1, [r7, #4]
 801049e:	4798      	blx	r3
 80104a0:	4603      	mov	r3, r0
 80104a2:	76bb      	strb	r3, [r7, #26]
 80104a4:	e001      	b.n	80104aa <tcp_process+0x3b6>
 80104a6:	23f0      	movs	r3, #240	@ 0xf0
 80104a8:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80104aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00a      	beq.n	80104c8 <tcp_process+0x3d4>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80104b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104b6:	f113 0f0d 	cmn.w	r3, #13
 80104ba:	d002      	beq.n	80104c2 <tcp_process+0x3ce>
            tcp_abort(pcb);
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f7fe f991 	bl	800e7e4 <tcp_abort>
          }
          return ERR_ABRT;
 80104c2:	f06f 030c 	mvn.w	r3, #12
 80104c6:	e1b9      	b.n	801083c <tcp_process+0x748>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f000 fa3d 	bl	8010948 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80104ce:	4b5e      	ldr	r3, [pc, #376]	@ (8010648 <tcp_process+0x554>)
 80104d0:	881b      	ldrh	r3, [r3, #0]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d005      	beq.n	80104e2 <tcp_process+0x3ee>
          recv_acked--;
 80104d6:	4b5c      	ldr	r3, [pc, #368]	@ (8010648 <tcp_process+0x554>)
 80104d8:	881b      	ldrh	r3, [r3, #0]
 80104da:	3b01      	subs	r3, #1
 80104dc:	b29a      	uxth	r2, r3
 80104de:	4b5a      	ldr	r3, [pc, #360]	@ (8010648 <tcp_process+0x554>)
 80104e0:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104e6:	005b      	lsls	r3, r3, #1
 80104e8:	f241 121c 	movw	r2, #4380	@ 0x111c
 80104ec:	429a      	cmp	r2, r3
 80104ee:	bf38      	it	cc
 80104f0:	461a      	movcc	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80104f6:	009b      	lsls	r3, r3, #2
 80104f8:	4293      	cmp	r3, r2
 80104fa:	bf28      	it	cs
 80104fc:	4613      	movcs	r3, r2
 80104fe:	b29a      	uxth	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8010506:	4b51      	ldr	r3, [pc, #324]	@ (801064c <tcp_process+0x558>)
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	f003 0320 	and.w	r3, r3, #32
 801050e:	2b00      	cmp	r3, #0
 8010510:	d034      	beq.n	801057c <tcp_process+0x488>
          tcp_ack_now(pcb);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	7e9b      	ldrb	r3, [r3, #26]
 8010516:	f043 0302 	orr.w	r3, r3, #2
 801051a:	b2da      	uxtb	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2207      	movs	r2, #7
 8010524:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8010526:	e029      	b.n	801057c <tcp_process+0x488>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010528:	4b3e      	ldr	r3, [pc, #248]	@ (8010624 <tcp_process+0x530>)
 801052a:	6818      	ldr	r0, [r3, #0]
 801052c:	4b3e      	ldr	r3, [pc, #248]	@ (8010628 <tcp_process+0x534>)
 801052e:	881b      	ldrh	r3, [r3, #0]
 8010530:	461a      	mov	r2, r3
 8010532:	4b3e      	ldr	r3, [pc, #248]	@ (801062c <tcp_process+0x538>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010538:	4b3d      	ldr	r3, [pc, #244]	@ (8010630 <tcp_process+0x53c>)
 801053a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801053c:	885b      	ldrh	r3, [r3, #2]
 801053e:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010540:	4a3b      	ldr	r2, [pc, #236]	@ (8010630 <tcp_process+0x53c>)
 8010542:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8010544:	8812      	ldrh	r2, [r2, #0]
 8010546:	b292      	uxth	r2, r2
 8010548:	9201      	str	r2, [sp, #4]
 801054a:	9300      	str	r3, [sp, #0]
 801054c:	4b39      	ldr	r3, [pc, #228]	@ (8010634 <tcp_process+0x540>)
 801054e:	4a3a      	ldr	r2, [pc, #232]	@ (8010638 <tcp_process+0x544>)
 8010550:	f001 ffc0 	bl	80124d4 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8010554:	e166      	b.n	8010824 <tcp_process+0x730>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010556:	4b32      	ldr	r3, [pc, #200]	@ (8010620 <tcp_process+0x52c>)
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	f003 0302 	and.w	r3, r3, #2
 801055e:	2b00      	cmp	r3, #0
 8010560:	f000 8160 	beq.w	8010824 <tcp_process+0x730>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010568:	1e5a      	subs	r2, r3, #1
 801056a:	4b30      	ldr	r3, [pc, #192]	@ (801062c <tcp_process+0x538>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	429a      	cmp	r2, r3
 8010570:	f040 8158 	bne.w	8010824 <tcp_process+0x730>
      tcp_rexmit(pcb);
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f002 f859 	bl	801262c <tcp_rexmit>
    break;
 801057a:	e153      	b.n	8010824 <tcp_process+0x730>
 801057c:	e152      	b.n	8010824 <tcp_process+0x730>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f9e2 	bl	8010948 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010584:	4b31      	ldr	r3, [pc, #196]	@ (801064c <tcp_process+0x558>)
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	f003 0320 	and.w	r3, r3, #32
 801058c:	2b00      	cmp	r3, #0
 801058e:	f000 814b 	beq.w	8010828 <tcp_process+0x734>
      tcp_ack_now(pcb);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	7e9b      	ldrb	r3, [r3, #26]
 8010596:	f043 0302 	orr.w	r3, r3, #2
 801059a:	b2da      	uxtb	r2, r3
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2207      	movs	r2, #7
 80105a4:	751a      	strb	r2, [r3, #20]
    }
    break;
 80105a6:	e13f      	b.n	8010828 <tcp_process+0x734>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 f9cd 	bl	8010948 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80105ae:	4b27      	ldr	r3, [pc, #156]	@ (801064c <tcp_process+0x558>)
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f003 0320 	and.w	r3, r3, #32
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d070      	beq.n	801069c <tcp_process+0x5a8>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105ba:	4b19      	ldr	r3, [pc, #100]	@ (8010620 <tcp_process+0x52c>)
 80105bc:	781b      	ldrb	r3, [r3, #0]
 80105be:	f003 0310 	and.w	r3, r3, #16
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d05f      	beq.n	8010686 <tcp_process+0x592>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80105ca:	4b16      	ldr	r3, [pc, #88]	@ (8010624 <tcp_process+0x530>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d159      	bne.n	8010686 <tcp_process+0x592>
          pcb->unsent == NULL) {
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d155      	bne.n	8010686 <tcp_process+0x592>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	7e9b      	ldrb	r3, [r3, #26]
 80105de:	f043 0302 	orr.w	r3, r3, #2
 80105e2:	b2da      	uxtb	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7fe fee9 	bl	800f3c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80105ee:	4b18      	ldr	r3, [pc, #96]	@ (8010650 <tcp_process+0x55c>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	687a      	ldr	r2, [r7, #4]
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d105      	bne.n	8010604 <tcp_process+0x510>
 80105f8:	4b15      	ldr	r3, [pc, #84]	@ (8010650 <tcp_process+0x55c>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	68db      	ldr	r3, [r3, #12]
 80105fe:	4a14      	ldr	r2, [pc, #80]	@ (8010650 <tcp_process+0x55c>)
 8010600:	6013      	str	r3, [r2, #0]
 8010602:	e02d      	b.n	8010660 <tcp_process+0x56c>
 8010604:	4b12      	ldr	r3, [pc, #72]	@ (8010650 <tcp_process+0x55c>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	617b      	str	r3, [r7, #20]
 801060a:	e026      	b.n	801065a <tcp_process+0x566>
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	429a      	cmp	r2, r3
 8010614:	d11e      	bne.n	8010654 <tcp_process+0x560>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	68da      	ldr	r2, [r3, #12]
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	60da      	str	r2, [r3, #12]
 801061e:	e01f      	b.n	8010660 <tcp_process+0x56c>
 8010620:	2000c7dc 	.word	0x2000c7dc
 8010624:	2000c7d4 	.word	0x2000c7d4
 8010628:	2000c7da 	.word	0x2000c7da
 801062c:	2000c7d0 	.word	0x2000c7d0
 8010630:	2000c7c0 	.word	0x2000c7c0
 8010634:	20007080 	.word	0x20007080
 8010638:	20007084 	.word	0x20007084
 801063c:	080174d8 	.word	0x080174d8
 8010640:	080176f0 	.word	0x080176f0
 8010644:	08017530 	.word	0x08017530
 8010648:	2000c7d8 	.word	0x2000c7d8
 801064c:	2000c7dd 	.word	0x2000c7dd
 8010650:	2000c7a4 	.word	0x2000c7a4
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	68db      	ldr	r3, [r3, #12]
 8010658:	617b      	str	r3, [r7, #20]
 801065a:	697b      	ldr	r3, [r7, #20]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1d5      	bne.n	801060c <tcp_process+0x518>
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	60da      	str	r2, [r3, #12]
 8010666:	4b77      	ldr	r3, [pc, #476]	@ (8010844 <tcp_process+0x750>)
 8010668:	2201      	movs	r2, #1
 801066a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	220a      	movs	r2, #10
 8010670:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010672:	4b75      	ldr	r3, [pc, #468]	@ (8010848 <tcp_process+0x754>)
 8010674:	681a      	ldr	r2, [r3, #0]
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	60da      	str	r2, [r3, #12]
 801067a:	4a73      	ldr	r2, [pc, #460]	@ (8010848 <tcp_process+0x754>)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6013      	str	r3, [r2, #0]
 8010680:	f002 f970 	bl	8012964 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8010684:	e0d2      	b.n	801082c <tcp_process+0x738>
        tcp_ack_now(pcb);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	7e9b      	ldrb	r3, [r3, #26]
 801068a:	f043 0302 	orr.w	r3, r3, #2
 801068e:	b2da      	uxtb	r2, r3
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2208      	movs	r2, #8
 8010698:	751a      	strb	r2, [r3, #20]
    break;
 801069a:	e0c7      	b.n	801082c <tcp_process+0x738>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801069c:	4b6b      	ldr	r3, [pc, #428]	@ (801084c <tcp_process+0x758>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	f003 0310 	and.w	r3, r3, #16
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	f000 80c1 	beq.w	801082c <tcp_process+0x738>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80106ae:	4b68      	ldr	r3, [pc, #416]	@ (8010850 <tcp_process+0x75c>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	f040 80ba 	bne.w	801082c <tcp_process+0x738>
               pcb->unsent == NULL) {
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f040 80b5 	bne.w	801082c <tcp_process+0x738>
      pcb->state = FIN_WAIT_2;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2206      	movs	r2, #6
 80106c6:	751a      	strb	r2, [r3, #20]
    break;
 80106c8:	e0b0      	b.n	801082c <tcp_process+0x738>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f000 f93c 	bl	8010948 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80106d0:	4b60      	ldr	r3, [pc, #384]	@ (8010854 <tcp_process+0x760>)
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	f003 0320 	and.w	r3, r3, #32
 80106d8:	2b00      	cmp	r3, #0
 80106da:	f000 80a9 	beq.w	8010830 <tcp_process+0x73c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	7e9b      	ldrb	r3, [r3, #26]
 80106e2:	f043 0302 	orr.w	r3, r3, #2
 80106e6:	b2da      	uxtb	r2, r3
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f7fe fe67 	bl	800f3c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80106f2:	4b59      	ldr	r3, [pc, #356]	@ (8010858 <tcp_process+0x764>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d105      	bne.n	8010708 <tcp_process+0x614>
 80106fc:	4b56      	ldr	r3, [pc, #344]	@ (8010858 <tcp_process+0x764>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	68db      	ldr	r3, [r3, #12]
 8010702:	4a55      	ldr	r2, [pc, #340]	@ (8010858 <tcp_process+0x764>)
 8010704:	6013      	str	r3, [r2, #0]
 8010706:	e013      	b.n	8010730 <tcp_process+0x63c>
 8010708:	4b53      	ldr	r3, [pc, #332]	@ (8010858 <tcp_process+0x764>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	613b      	str	r3, [r7, #16]
 801070e:	e00c      	b.n	801072a <tcp_process+0x636>
 8010710:	693b      	ldr	r3, [r7, #16]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	429a      	cmp	r2, r3
 8010718:	d104      	bne.n	8010724 <tcp_process+0x630>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	68da      	ldr	r2, [r3, #12]
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	60da      	str	r2, [r3, #12]
 8010722:	e005      	b.n	8010730 <tcp_process+0x63c>
 8010724:	693b      	ldr	r3, [r7, #16]
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	613b      	str	r3, [r7, #16]
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1ef      	bne.n	8010710 <tcp_process+0x61c>
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	60da      	str	r2, [r3, #12]
 8010736:	4b43      	ldr	r3, [pc, #268]	@ (8010844 <tcp_process+0x750>)
 8010738:	2201      	movs	r2, #1
 801073a:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	220a      	movs	r2, #10
 8010740:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010742:	4b41      	ldr	r3, [pc, #260]	@ (8010848 <tcp_process+0x754>)
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	60da      	str	r2, [r3, #12]
 801074a:	4a3f      	ldr	r2, [pc, #252]	@ (8010848 <tcp_process+0x754>)
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	6013      	str	r3, [r2, #0]
 8010750:	f002 f908 	bl	8012964 <tcp_timer_needed>
    }
    break;
 8010754:	e06c      	b.n	8010830 <tcp_process+0x73c>
  case CLOSING:
    tcp_receive(pcb);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f000 f8f6 	bl	8010948 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801075c:	4b3b      	ldr	r3, [pc, #236]	@ (801084c <tcp_process+0x758>)
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	f003 0310 	and.w	r3, r3, #16
 8010764:	2b00      	cmp	r3, #0
 8010766:	d065      	beq.n	8010834 <tcp_process+0x740>
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801076c:	4b38      	ldr	r3, [pc, #224]	@ (8010850 <tcp_process+0x75c>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	429a      	cmp	r2, r3
 8010772:	d15f      	bne.n	8010834 <tcp_process+0x740>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010778:	2b00      	cmp	r3, #0
 801077a:	d15b      	bne.n	8010834 <tcp_process+0x740>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f7fe fe1f 	bl	800f3c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010782:	4b35      	ldr	r3, [pc, #212]	@ (8010858 <tcp_process+0x764>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	429a      	cmp	r2, r3
 801078a:	d105      	bne.n	8010798 <tcp_process+0x6a4>
 801078c:	4b32      	ldr	r3, [pc, #200]	@ (8010858 <tcp_process+0x764>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	4a31      	ldr	r2, [pc, #196]	@ (8010858 <tcp_process+0x764>)
 8010794:	6013      	str	r3, [r2, #0]
 8010796:	e013      	b.n	80107c0 <tcp_process+0x6cc>
 8010798:	4b2f      	ldr	r3, [pc, #188]	@ (8010858 <tcp_process+0x764>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	60fb      	str	r3, [r7, #12]
 801079e:	e00c      	b.n	80107ba <tcp_process+0x6c6>
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	68db      	ldr	r3, [r3, #12]
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d104      	bne.n	80107b4 <tcp_process+0x6c0>
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	68da      	ldr	r2, [r3, #12]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	60da      	str	r2, [r3, #12]
 80107b2:	e005      	b.n	80107c0 <tcp_process+0x6cc>
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	60fb      	str	r3, [r7, #12]
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d1ef      	bne.n	80107a0 <tcp_process+0x6ac>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2200      	movs	r2, #0
 80107c4:	60da      	str	r2, [r3, #12]
 80107c6:	4b1f      	ldr	r3, [pc, #124]	@ (8010844 <tcp_process+0x750>)
 80107c8:	2201      	movs	r2, #1
 80107ca:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	220a      	movs	r2, #10
 80107d0:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80107d2:	4b1d      	ldr	r3, [pc, #116]	@ (8010848 <tcp_process+0x754>)
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	60da      	str	r2, [r3, #12]
 80107da:	4a1b      	ldr	r2, [pc, #108]	@ (8010848 <tcp_process+0x754>)
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6013      	str	r3, [r2, #0]
 80107e0:	f002 f8c0 	bl	8012964 <tcp_timer_needed>
    }
    break;
 80107e4:	e026      	b.n	8010834 <tcp_process+0x740>
  case LAST_ACK:
    tcp_receive(pcb);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 f8ae 	bl	8010948 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80107ec:	4b17      	ldr	r3, [pc, #92]	@ (801084c <tcp_process+0x758>)
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	f003 0310 	and.w	r3, r3, #16
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d01f      	beq.n	8010838 <tcp_process+0x744>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80107fc:	4b14      	ldr	r3, [pc, #80]	@ (8010850 <tcp_process+0x75c>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	429a      	cmp	r2, r3
 8010802:	d119      	bne.n	8010838 <tcp_process+0x744>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010808:	2b00      	cmp	r3, #0
 801080a:	d115      	bne.n	8010838 <tcp_process+0x744>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801080c:	4b11      	ldr	r3, [pc, #68]	@ (8010854 <tcp_process+0x760>)
 801080e:	781b      	ldrb	r3, [r3, #0]
 8010810:	f043 0310 	orr.w	r3, r3, #16
 8010814:	b2da      	uxtb	r2, r3
 8010816:	4b0f      	ldr	r3, [pc, #60]	@ (8010854 <tcp_process+0x760>)
 8010818:	701a      	strb	r2, [r3, #0]
    }
    break;
 801081a:	e00d      	b.n	8010838 <tcp_process+0x744>
  default:
    break;
 801081c:	bf00      	nop
 801081e:	e00c      	b.n	801083a <tcp_process+0x746>
    break;
 8010820:	bf00      	nop
 8010822:	e00a      	b.n	801083a <tcp_process+0x746>
    break;
 8010824:	bf00      	nop
 8010826:	e008      	b.n	801083a <tcp_process+0x746>
    break;
 8010828:	bf00      	nop
 801082a:	e006      	b.n	801083a <tcp_process+0x746>
    break;
 801082c:	bf00      	nop
 801082e:	e004      	b.n	801083a <tcp_process+0x746>
    break;
 8010830:	bf00      	nop
 8010832:	e002      	b.n	801083a <tcp_process+0x746>
    break;
 8010834:	bf00      	nop
 8010836:	e000      	b.n	801083a <tcp_process+0x746>
    break;
 8010838:	bf00      	nop
  }
  return ERR_OK;
 801083a:	2300      	movs	r3, #0
}
 801083c:	4618      	mov	r0, r3
 801083e:	3720      	adds	r7, #32
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}
 8010844:	2000c7ac 	.word	0x2000c7ac
 8010848:	2000c7a8 	.word	0x2000c7a8
 801084c:	2000c7dc 	.word	0x2000c7dc
 8010850:	2000c7d4 	.word	0x2000c7d4
 8010854:	2000c7dd 	.word	0x2000c7dd
 8010858:	2000c7a4 	.word	0x2000c7a4

0801085c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801085c:	b590      	push	{r4, r7, lr}
 801085e:	b085      	sub	sp, #20
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	68db      	ldr	r3, [r3, #12]
 801086a:	899b      	ldrh	r3, [r3, #12]
 801086c:	b29b      	uxth	r3, r3
 801086e:	4618      	mov	r0, r3
 8010870:	f7f9 fdf8 	bl	800a464 <lwip_htons>
 8010874:	4603      	mov	r3, r0
 8010876:	f003 0301 	and.w	r3, r3, #1
 801087a:	2b00      	cmp	r3, #0
 801087c:	d027      	beq.n	80108ce <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801087e:	6838      	ldr	r0, [r7, #0]
 8010880:	f7fe fbf5 	bl	800f06e <tcp_segs_free>
    next = NULL;
 8010884:	2300      	movs	r3, #0
 8010886:	603b      	str	r3, [r7, #0]
 8010888:	e055      	b.n	8010936 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	68db      	ldr	r3, [r3, #12]
 801088e:	899b      	ldrh	r3, [r3, #12]
 8010890:	b29b      	uxth	r3, r3
 8010892:	4618      	mov	r0, r3
 8010894:	f7f9 fde6 	bl	800a464 <lwip_htons>
 8010898:	4603      	mov	r3, r0
 801089a:	f003 0301 	and.w	r3, r3, #1
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d00d      	beq.n	80108be <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	68db      	ldr	r3, [r3, #12]
 80108a6:	899b      	ldrh	r3, [r3, #12]
 80108a8:	b29c      	uxth	r4, r3
 80108aa:	2001      	movs	r0, #1
 80108ac:	f7f9 fdda 	bl	800a464 <lwip_htons>
 80108b0:	4603      	mov	r3, r0
 80108b2:	461a      	mov	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	4322      	orrs	r2, r4
 80108ba:	b292      	uxth	r2, r2
 80108bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f7fe fbe5 	bl	800f098 <tcp_seg_free>
    while (next &&
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00e      	beq.n	80108f2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	891b      	ldrh	r3, [r3, #8]
 80108d8:	461a      	mov	r2, r3
 80108da:	4b1a      	ldr	r3, [pc, #104]	@ (8010944 <tcp_oos_insert_segment+0xe8>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	441a      	add	r2, r3
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	6839      	ldr	r1, [r7, #0]
 80108e8:	8909      	ldrh	r1, [r1, #8]
 80108ea:	440b      	add	r3, r1
 80108ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	dacb      	bge.n	801088a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d01e      	beq.n	8010936 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	891b      	ldrh	r3, [r3, #8]
 80108fc:	461a      	mov	r2, r3
 80108fe:	4b11      	ldr	r3, [pc, #68]	@ (8010944 <tcp_oos_insert_segment+0xe8>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	441a      	add	r2, r3
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801090c:	2b00      	cmp	r3, #0
 801090e:	dd12      	ble.n	8010936 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	b29a      	uxth	r2, r3
 8010918:	4b0a      	ldr	r3, [pc, #40]	@ (8010944 <tcp_oos_insert_segment+0xe8>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	b29b      	uxth	r3, r3
 801091e:	1ad3      	subs	r3, r2, r3
 8010920:	b29a      	uxth	r2, r3
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	685a      	ldr	r2, [r3, #4]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	891b      	ldrh	r3, [r3, #8]
 801092e:	4619      	mov	r1, r3
 8010930:	4610      	mov	r0, r2
 8010932:	f7fd f84b 	bl	800d9cc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	683a      	ldr	r2, [r7, #0]
 801093a:	601a      	str	r2, [r3, #0]
}
 801093c:	bf00      	nop
 801093e:	3714      	adds	r7, #20
 8010940:	46bd      	mov	sp, r7
 8010942:	bd90      	pop	{r4, r7, pc}
 8010944:	2000c7d0 	.word	0x2000c7d0

08010948 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801094a:	b08d      	sub	sp, #52	@ 0x34
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8010950:	2300      	movs	r3, #0
 8010952:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	7d1b      	ldrb	r3, [r3, #20]
 8010958:	2b03      	cmp	r3, #3
 801095a:	d806      	bhi.n	801096a <tcp_receive+0x22>
 801095c:	4b98      	ldr	r3, [pc, #608]	@ (8010bc0 <tcp_receive+0x278>)
 801095e:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 8010962:	4998      	ldr	r1, [pc, #608]	@ (8010bc4 <tcp_receive+0x27c>)
 8010964:	4898      	ldr	r0, [pc, #608]	@ (8010bc8 <tcp_receive+0x280>)
 8010966:	f004 fa23 	bl	8014db0 <iprintf>

  if (flags & TCP_ACK) {
 801096a:	4b98      	ldr	r3, [pc, #608]	@ (8010bcc <tcp_receive+0x284>)
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	f003 0310 	and.w	r3, r3, #16
 8010972:	2b00      	cmp	r3, #0
 8010974:	f000 82c1 	beq.w	8010efa <tcp_receive+0x5b2>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801097e:	461a      	mov	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010984:	4413      	add	r3, r2
 8010986:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801098c:	4b90      	ldr	r3, [pc, #576]	@ (8010bd0 <tcp_receive+0x288>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	1ad3      	subs	r3, r2, r3
 8010992:	2b00      	cmp	r3, #0
 8010994:	db1b      	blt.n	80109ce <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801099a:	4b8d      	ldr	r3, [pc, #564]	@ (8010bd0 <tcp_receive+0x288>)
 801099c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801099e:	429a      	cmp	r2, r3
 80109a0:	d106      	bne.n	80109b0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80109a6:	4b8b      	ldr	r3, [pc, #556]	@ (8010bd4 <tcp_receive+0x28c>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	1ad3      	subs	r3, r2, r3
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	db0e      	blt.n	80109ce <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80109b4:	4b87      	ldr	r3, [pc, #540]	@ (8010bd4 <tcp_receive+0x28c>)
 80109b6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d141      	bne.n	8010a40 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109bc:	4b86      	ldr	r3, [pc, #536]	@ (8010bd8 <tcp_receive+0x290>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	89db      	ldrh	r3, [r3, #14]
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80109ca:	429a      	cmp	r2, r3
 80109cc:	d938      	bls.n	8010a40 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80109ce:	4b82      	ldr	r3, [pc, #520]	@ (8010bd8 <tcp_receive+0x290>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	89db      	ldrh	r3, [r3, #14]
 80109d4:	b29a      	uxth	r2, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	f8b3 205e 	ldrh.w	r2, [r3, #94]	@ 0x5e
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d205      	bcs.n	80109f8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }
      pcb->snd_wl1 = seqno;
 80109f8:	4b75      	ldr	r3, [pc, #468]	@ (8010bd0 <tcp_receive+0x288>)
 80109fa:	681a      	ldr	r2, [r3, #0]
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	651a      	str	r2, [r3, #80]	@ 0x50
      pcb->snd_wl2 = ackno;
 8010a00:	4b74      	ldr	r3, [pc, #464]	@ (8010bd4 <tcp_receive+0x28c>)
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	655a      	str	r2, [r3, #84]	@ 0x54
      if (pcb->snd_wnd == 0) {
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d10d      	bne.n	8010a2e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d111      	bne.n	8010a40 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          pcb->persist_backoff = 1;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2201      	movs	r2, #1
 8010a28:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 8010a2c:	e008      	b.n	8010a40 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d003      	beq.n	8010a40 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010a40:	4b64      	ldr	r3, [pc, #400]	@ (8010bd4 <tcp_receive+0x28c>)
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	dc53      	bgt.n	8010af6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8010a4e:	4b63      	ldr	r3, [pc, #396]	@ (8010bdc <tcp_receive+0x294>)
 8010a50:	881b      	ldrh	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d146      	bne.n	8010ae4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010a60:	4413      	add	r3, r2
 8010a62:	697a      	ldr	r2, [r7, #20]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d13d      	bne.n	8010ae4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	db38      	blt.n	8010ae4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010a76:	4b57      	ldr	r3, [pc, #348]	@ (8010bd4 <tcp_receive+0x28c>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d132      	bne.n	8010ae4 <tcp_receive+0x19c>
              found_dupack = 1;
 8010a7e:	2301      	movs	r3, #1
 8010a80:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a88:	2bff      	cmp	r3, #255	@ 0xff
 8010a8a:	d007      	beq.n	8010a9c <tcp_receive+0x154>
                ++pcb->dupacks;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010a92:	3301      	adds	r3, #1
 8010a94:	b2da      	uxtb	r2, r3
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010aa2:	2b03      	cmp	r3, #3
 8010aa4:	d916      	bls.n	8010ad4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ab0:	4413      	add	r3, r2
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d912      	bls.n	8010ae4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010ac8:	4413      	add	r3, r2
 8010aca:	b29a      	uxth	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010ad2:	e007      	b.n	8010ae4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010ada:	2b03      	cmp	r3, #3
 8010adc:	d102      	bne.n	8010ae4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f001 fdf4 	bl	80126cc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	f040 816a 	bne.w	8010dc0 <tcp_receive+0x478>
        pcb->dupacks = 0;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010af4:	e164      	b.n	8010dc0 <tcp_receive+0x478>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8010af6:	4b37      	ldr	r3, [pc, #220]	@ (8010bd4 <tcp_receive+0x28c>)
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010afe:	1ad3      	subs	r3, r2, r3
 8010b00:	3b01      	subs	r3, #1
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	f2c0 8108 	blt.w	8010d18 <tcp_receive+0x3d0>
 8010b08:	4b32      	ldr	r3, [pc, #200]	@ (8010bd4 <tcp_receive+0x28c>)
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b10:	1ad3      	subs	r3, r2, r3
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	f300 8100 	bgt.w	8010d18 <tcp_receive+0x3d0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	7e9b      	ldrb	r3, [r3, #26]
 8010b1c:	f003 0304 	and.w	r3, r3, #4
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d00c      	beq.n	8010b3e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	7e9b      	ldrb	r3, [r3, #26]
 8010b28:	f023 0304 	bic.w	r3, r3, #4
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2200      	movs	r2, #0
 8010b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010b4c:	10db      	asrs	r3, r3, #3
 8010b4e:	b21b      	sxth	r3, r3
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010b58:	b29b      	uxth	r3, r3
 8010b5a:	4413      	add	r3, r2
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	b21a      	sxth	r2, r3
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010b6e:	4b19      	ldr	r3, [pc, #100]	@ (8010bd4 <tcp_receive+0x28c>)
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7d1b      	ldrb	r3, [r3, #20]
 8010b7a:	2b03      	cmp	r3, #3
 8010b7c:	f240 8095 	bls.w	8010caa <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d227      	bcs.n	8010be0 <tcp_receive+0x298>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010b9a:	4413      	add	r3, r2
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	f240 8080 	bls.w	8010caa <tcp_receive+0x362>
            pcb->cwnd += pcb->mss;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bb4:	4413      	add	r3, r2
 8010bb6:	b29a      	uxth	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010bbe:	e074      	b.n	8010caa <tcp_receive+0x362>
 8010bc0:	080174d8 	.word	0x080174d8
 8010bc4:	08017710 	.word	0x08017710
 8010bc8:	08017530 	.word	0x08017530
 8010bcc:	2000c7dc 	.word	0x2000c7dc
 8010bd0:	2000c7d0 	.word	0x2000c7d0
 8010bd4:	2000c7d4 	.word	0x2000c7d4
 8010bd8:	2000c7c0 	.word	0x2000c7c0
 8010bdc:	2000c7da 	.word	0x2000c7da
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bea:	4619      	mov	r1, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bf0:	fb01 f303 	mul.w	r3, r1, r3
 8010bf4:	6879      	ldr	r1, [r7, #4]
 8010bf6:	f8b1 1048 	ldrh.w	r1, [r1, #72]	@ 0x48
 8010bfa:	fb93 f3f1 	sdiv	r3, r3, r1
 8010bfe:	b29b      	uxth	r3, r3
 8010c00:	4413      	add	r3, r2
 8010c02:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010c0a:	8a7a      	ldrh	r2, [r7, #18]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d94c      	bls.n	8010caa <tcp_receive+0x362>
            pcb->cwnd = new_cwnd;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	8a7a      	ldrh	r2, [r7, #18]
 8010c14:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8010c18:	e047      	b.n	8010caa <tcp_receive+0x362>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pcb->unacked = pcb->unacked->next;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	66da      	str	r2, [r3, #108]	@ 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8010c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c32:	685b      	ldr	r3, [r3, #4]
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7fd f8d1 	bl	800dddc <pbuf_clen>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	429c      	cmp	r4, r3
 8010c3e:	d206      	bcs.n	8010c4e <tcp_receive+0x306>
 8010c40:	4b70      	ldr	r3, [pc, #448]	@ (8010e04 <tcp_receive+0x4bc>)
 8010c42:	f240 429e 	movw	r2, #1182	@ 0x49e
 8010c46:	4970      	ldr	r1, [pc, #448]	@ (8010e08 <tcp_receive+0x4c0>)
 8010c48:	4870      	ldr	r0, [pc, #448]	@ (8010e0c <tcp_receive+0x4c4>)
 8010c4a:	f004 f8b1 	bl	8014db0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8010c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c50:	685b      	ldr	r3, [r3, #4]
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7fd f8c2 	bl	800dddc <pbuf_clen>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c62:	1a9b      	subs	r3, r3, r2
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        recv_acked += next->len;
 8010c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c6e:	891a      	ldrh	r2, [r3, #8]
 8010c70:	4b67      	ldr	r3, [pc, #412]	@ (8010e10 <tcp_receive+0x4c8>)
 8010c72:	881b      	ldrh	r3, [r3, #0]
 8010c74:	4413      	add	r3, r2
 8010c76:	b29a      	uxth	r2, r3
 8010c78:	4b65      	ldr	r3, [pc, #404]	@ (8010e10 <tcp_receive+0x4c8>)
 8010c7a:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8010c7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010c7e:	f7fe fa0b 	bl	800f098 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d00e      	beq.n	8010caa <tcp_receive+0x362>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d10a      	bne.n	8010caa <tcp_receive+0x362>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d106      	bne.n	8010caa <tcp_receive+0x362>
 8010c9c:	4b59      	ldr	r3, [pc, #356]	@ (8010e04 <tcp_receive+0x4bc>)
 8010c9e:	f240 42a6 	movw	r2, #1190	@ 0x4a6
 8010ca2:	495c      	ldr	r1, [pc, #368]	@ (8010e14 <tcp_receive+0x4cc>)
 8010ca4:	4859      	ldr	r0, [pc, #356]	@ (8010e0c <tcp_receive+0x4c4>)
 8010ca6:	f004 f883 	bl	8014db0 <iprintf>
      while (pcb->unacked != NULL &&
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d022      	beq.n	8010cf8 <tcp_receive+0x3b0>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7f9 fbdf 	bl	800a47e <lwip_htonl>
 8010cc0:	4604      	mov	r4, r0
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cc6:	891b      	ldrh	r3, [r3, #8]
 8010cc8:	461d      	mov	r5, r3
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	899b      	ldrh	r3, [r3, #12]
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7f9 fbc5 	bl	800a464 <lwip_htons>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	f003 0303 	and.w	r3, r3, #3
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d001      	beq.n	8010ce8 <tcp_receive+0x3a0>
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	e000      	b.n	8010cea <tcp_receive+0x3a2>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	442b      	add	r3, r5
 8010cec:	18e2      	adds	r2, r4, r3
 8010cee:	4b4a      	ldr	r3, [pc, #296]	@ (8010e18 <tcp_receive+0x4d0>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	dd90      	ble.n	8010c1a <tcp_receive+0x2d2>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d104      	bne.n	8010d0a <tcp_receive+0x3c2>
        pcb->rtime = -1;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d06:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010d08:	e002      	b.n	8010d10 <tcp_receive+0x3c8>
      } else {
        pcb->rtime = 0;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2200      	movs	r2, #0
 8010d14:	76da      	strb	r2, [r3, #27]
 8010d16:	e002      	b.n	8010d1e <tcp_receive+0x3d6>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f001 f8fb 	bl	8011f14 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8010d1e:	e04f      	b.n	8010dc0 <tcp_receive+0x478>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pcb->unsent = pcb->unsent->next;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d2a:	681a      	ldr	r2, [r3, #0]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	669a      	str	r2, [r3, #104]	@ 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d103      	bne.n	8010d40 <tcp_receive+0x3f8>
        pcb->unsent_oversize = 0;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	f8b3 4062 	ldrh.w	r4, [r3, #98]	@ 0x62
 8010d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fd f846 	bl	800dddc <pbuf_clen>
 8010d50:	4603      	mov	r3, r0
 8010d52:	429c      	cmp	r4, r3
 8010d54:	d206      	bcs.n	8010d64 <tcp_receive+0x41c>
 8010d56:	4b2b      	ldr	r3, [pc, #172]	@ (8010e04 <tcp_receive+0x4bc>)
 8010d58:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8010d5c:	492a      	ldr	r1, [pc, #168]	@ (8010e08 <tcp_receive+0x4c0>)
 8010d5e:	482b      	ldr	r0, [pc, #172]	@ (8010e0c <tcp_receive+0x4c4>)
 8010d60:	f004 f826 	bl	8014db0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7fd f837 	bl	800dddc <pbuf_clen>
 8010d6e:	4603      	mov	r3, r0
 8010d70:	461a      	mov	r2, r3
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d78:	1a9b      	subs	r3, r3, r2
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      recv_acked += next->len;
 8010d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d84:	891a      	ldrh	r2, [r3, #8]
 8010d86:	4b22      	ldr	r3, [pc, #136]	@ (8010e10 <tcp_receive+0x4c8>)
 8010d88:	881b      	ldrh	r3, [r3, #0]
 8010d8a:	4413      	add	r3, r2
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	4b20      	ldr	r3, [pc, #128]	@ (8010e10 <tcp_receive+0x4c8>)
 8010d90:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8010d92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d94:	f7fe f980 	bl	800f098 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d00e      	beq.n	8010dc0 <tcp_receive+0x478>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d10a      	bne.n	8010dc0 <tcp_receive+0x478>
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d106      	bne.n	8010dc0 <tcp_receive+0x478>
 8010db2:	4b14      	ldr	r3, [pc, #80]	@ (8010e04 <tcp_receive+0x4bc>)
 8010db4:	f240 42dc 	movw	r2, #1244	@ 0x4dc
 8010db8:	4916      	ldr	r1, [pc, #88]	@ (8010e14 <tcp_receive+0x4cc>)
 8010dba:	4814      	ldr	r0, [pc, #80]	@ (8010e0c <tcp_receive+0x4c4>)
 8010dbc:	f003 fff8 	bl	8014db0 <iprintf>
    while (pcb->unsent != NULL &&
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d037      	beq.n	8010e38 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010dc8:	4b13      	ldr	r3, [pc, #76]	@ (8010e18 <tcp_receive+0x4d0>)
 8010dca:	681c      	ldr	r4, [r3, #0]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010dd0:	68db      	ldr	r3, [r3, #12]
 8010dd2:	685b      	ldr	r3, [r3, #4]
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7f9 fb52 	bl	800a47e <lwip_htonl>
 8010dda:	4605      	mov	r5, r0
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010de0:	891b      	ldrh	r3, [r3, #8]
 8010de2:	461e      	mov	r6, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	899b      	ldrh	r3, [r3, #12]
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7f9 fb38 	bl	800a464 <lwip_htons>
 8010df4:	4603      	mov	r3, r0
 8010df6:	f003 0303 	and.w	r3, r3, #3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d00e      	beq.n	8010e1c <tcp_receive+0x4d4>
 8010dfe:	2301      	movs	r3, #1
 8010e00:	e00d      	b.n	8010e1e <tcp_receive+0x4d6>
 8010e02:	bf00      	nop
 8010e04:	080174d8 	.word	0x080174d8
 8010e08:	0801772c 	.word	0x0801772c
 8010e0c:	08017530 	.word	0x08017530
 8010e10:	2000c7d8 	.word	0x2000c7d8
 8010e14:	08017754 	.word	0x08017754
 8010e18:	2000c7d4 	.word	0x2000c7d4
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	4433      	add	r3, r6
 8010e20:	442b      	add	r3, r5
 8010e22:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	db07      	blt.n	8010e38 <tcp_receive+0x4f0>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010e28:	4b8d      	ldr	r3, [pc, #564]	@ (8011060 <tcp_receive+0x718>)
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e30:	1ad3      	subs	r3, r2, r3
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	f77f af74 	ble.w	8010d20 <tcp_receive+0x3d8>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010e3e:	4b89      	ldr	r3, [pc, #548]	@ (8011064 <tcp_receive+0x71c>)
 8010e40:	881b      	ldrh	r3, [r3, #0]
 8010e42:	4413      	add	r3, r2
 8010e44:	b29a      	uxth	r2, r3
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d052      	beq.n	8010efa <tcp_receive+0x5b2>
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e58:	4b81      	ldr	r3, [pc, #516]	@ (8011060 <tcp_receive+0x718>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	1ad3      	subs	r3, r2, r3
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	da4b      	bge.n	8010efa <tcp_receive+0x5b2>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010e62:	4b81      	ldr	r3, [pc, #516]	@ (8011068 <tcp_receive+0x720>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	1ad3      	subs	r3, r2, r3
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	847b      	strh	r3, [r7, #34]	@ 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8010e74:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010e7c:	10db      	asrs	r3, r3, #3
 8010e7e:	b21b      	sxth	r3, r3
 8010e80:	b29b      	uxth	r3, r3
 8010e82:	1ad3      	subs	r3, r2, r3
 8010e84:	b29b      	uxth	r3, r3
 8010e86:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sa += m;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010e8e:	b29a      	uxth	r2, r3
 8010e90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010e92:	4413      	add	r3, r2
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	b21a      	sxth	r2, r3
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8010e9c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	da03      	bge.n	8010eac <tcp_receive+0x564>
        m = -m;
 8010ea4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ea6:	425b      	negs	r3, r3
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	847b      	strh	r3, [r7, #34]	@ 0x22
      }
      m = m - (pcb->sv >> 2);
 8010eac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010eb4:	109b      	asrs	r3, r3, #2
 8010eb6:	b21b      	sxth	r3, r3
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	1ad3      	subs	r3, r2, r3
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	847b      	strh	r3, [r7, #34]	@ 0x22
      pcb->sv += m;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010eca:	4413      	add	r3, r2
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	b21a      	sxth	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010eda:	10db      	asrs	r3, r3, #3
 8010edc:	b21b      	sxth	r3, r3
 8010ede:	b29a      	uxth	r2, r3
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	4413      	add	r3, r2
 8010eea:	b29b      	uxth	r3, r3
 8010eec:	b21a      	sxth	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010efa:	4b5c      	ldr	r3, [pc, #368]	@ (801106c <tcp_receive+0x724>)
 8010efc:	881b      	ldrh	r3, [r3, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f000 84f1 	beq.w	80118e6 <tcp_receive+0xf9e>
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	7d1b      	ldrb	r3, [r3, #20]
 8010f08:	2b06      	cmp	r3, #6
 8010f0a:	f200 84ec 	bhi.w	80118e6 <tcp_receive+0xf9e>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010f12:	4b57      	ldr	r3, [pc, #348]	@ (8011070 <tcp_receive+0x728>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	1ad3      	subs	r3, r2, r3
 8010f18:	3b01      	subs	r3, #1
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f2c0 80b8 	blt.w	8011090 <tcp_receive+0x748>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010f24:	4b51      	ldr	r3, [pc, #324]	@ (801106c <tcp_receive+0x724>)
 8010f26:	881b      	ldrh	r3, [r3, #0]
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4b51      	ldr	r3, [pc, #324]	@ (8011070 <tcp_receive+0x728>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	440b      	add	r3, r1
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	3301      	adds	r3, #1
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	f300 80ab 	bgt.w	8011090 <tcp_receive+0x748>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8011074 <tcp_receive+0x72c>)
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010f44:	4b4a      	ldr	r3, [pc, #296]	@ (8011070 <tcp_receive+0x728>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	627b      	str	r3, [r7, #36]	@ 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010f4c:	4b49      	ldr	r3, [pc, #292]	@ (8011074 <tcp_receive+0x72c>)
 8010f4e:	685b      	ldr	r3, [r3, #4]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d106      	bne.n	8010f62 <tcp_receive+0x61a>
 8010f54:	4b48      	ldr	r3, [pc, #288]	@ (8011078 <tcp_receive+0x730>)
 8010f56:	f240 523c 	movw	r2, #1340	@ 0x53c
 8010f5a:	4948      	ldr	r1, [pc, #288]	@ (801107c <tcp_receive+0x734>)
 8010f5c:	4848      	ldr	r0, [pc, #288]	@ (8011080 <tcp_receive+0x738>)
 8010f5e:	f003 ff27 	bl	8014db0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8010f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f64:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010f68:	4293      	cmp	r3, r2
 8010f6a:	dd06      	ble.n	8010f7a <tcp_receive+0x632>
 8010f6c:	4b42      	ldr	r3, [pc, #264]	@ (8011078 <tcp_receive+0x730>)
 8010f6e:	f240 523d 	movw	r2, #1341	@ 0x53d
 8010f72:	4944      	ldr	r1, [pc, #272]	@ (8011084 <tcp_receive+0x73c>)
 8010f74:	4842      	ldr	r0, [pc, #264]	@ (8011080 <tcp_receive+0x738>)
 8010f76:	f003 ff1b 	bl	8014db0 <iprintf>
      if (inseg.p->len < off) {
 8010f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8011074 <tcp_receive+0x72c>)
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	895b      	ldrh	r3, [r3, #10]
 8010f80:	461a      	mov	r2, r3
 8010f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f84:	4293      	cmp	r3, r2
 8010f86:	dd3e      	ble.n	8011006 <tcp_receive+0x6be>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010f88:	4b3a      	ldr	r3, [pc, #232]	@ (8011074 <tcp_receive+0x72c>)
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	891b      	ldrh	r3, [r3, #8]
 8010f8e:	461a      	mov	r2, r3
 8010f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f92:	4293      	cmp	r3, r2
 8010f94:	dd06      	ble.n	8010fa4 <tcp_receive+0x65c>
 8010f96:	4b38      	ldr	r3, [pc, #224]	@ (8011078 <tcp_receive+0x730>)
 8010f98:	f240 523f 	movw	r2, #1343	@ 0x53f
 8010f9c:	493a      	ldr	r1, [pc, #232]	@ (8011088 <tcp_receive+0x740>)
 8010f9e:	4838      	ldr	r0, [pc, #224]	@ (8011080 <tcp_receive+0x738>)
 8010fa0:	f003 ff06 	bl	8014db0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010fa4:	4b33      	ldr	r3, [pc, #204]	@ (8011074 <tcp_receive+0x72c>)
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	891a      	ldrh	r2, [r3, #8]
 8010faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	1ad3      	subs	r3, r2, r3
 8010fb0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8010fb2:	e00e      	b.n	8010fd2 <tcp_receive+0x68a>
          off -= p->len;
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	895b      	ldrh	r3, [r3, #10]
 8010fb8:	461a      	mov	r2, r3
 8010fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fbc:	1a9b      	subs	r3, r3, r2
 8010fbe:	627b      	str	r3, [r7, #36]	@ 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8010fc0:	69bb      	ldr	r3, [r7, #24]
 8010fc2:	8a3a      	ldrh	r2, [r7, #16]
 8010fc4:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8010fc6:	69bb      	ldr	r3, [r7, #24]
 8010fc8:	2200      	movs	r2, #0
 8010fca:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8010fcc:	69bb      	ldr	r3, [r7, #24]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	895b      	ldrh	r3, [r3, #10]
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	dcea      	bgt.n	8010fb4 <tcp_receive+0x66c>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8010fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	425b      	negs	r3, r3
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	b21b      	sxth	r3, r3
 8010fe8:	4619      	mov	r1, r3
 8010fea:	69b8      	ldr	r0, [r7, #24]
 8010fec:	f7fc fe3e 	bl	800dc6c <pbuf_header>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d01c      	beq.n	8011030 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010ff6:	4b20      	ldr	r3, [pc, #128]	@ (8011078 <tcp_receive+0x730>)
 8010ff8:	f240 524c 	movw	r2, #1356	@ 0x54c
 8010ffc:	4923      	ldr	r1, [pc, #140]	@ (801108c <tcp_receive+0x744>)
 8010ffe:	4820      	ldr	r0, [pc, #128]	@ (8011080 <tcp_receive+0x738>)
 8011000:	f003 fed6 	bl	8014db0 <iprintf>
 8011004:	e014      	b.n	8011030 <tcp_receive+0x6e8>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8011006:	4b1b      	ldr	r3, [pc, #108]	@ (8011074 <tcp_receive+0x72c>)
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801100c:	b292      	uxth	r2, r2
 801100e:	4252      	negs	r2, r2
 8011010:	b292      	uxth	r2, r2
 8011012:	b212      	sxth	r2, r2
 8011014:	4611      	mov	r1, r2
 8011016:	4618      	mov	r0, r3
 8011018:	f7fc fe28 	bl	800dc6c <pbuf_header>
 801101c:	4603      	mov	r3, r0
 801101e:	2b00      	cmp	r3, #0
 8011020:	d006      	beq.n	8011030 <tcp_receive+0x6e8>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8011022:	4b15      	ldr	r3, [pc, #84]	@ (8011078 <tcp_receive+0x730>)
 8011024:	f240 5251 	movw	r2, #1361	@ 0x551
 8011028:	4918      	ldr	r1, [pc, #96]	@ (801108c <tcp_receive+0x744>)
 801102a:	4815      	ldr	r0, [pc, #84]	@ (8011080 <tcp_receive+0x738>)
 801102c:	f003 fec0 	bl	8014db0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8011030:	4b10      	ldr	r3, [pc, #64]	@ (8011074 <tcp_receive+0x72c>)
 8011032:	891a      	ldrh	r2, [r3, #8]
 8011034:	4b0e      	ldr	r3, [pc, #56]	@ (8011070 <tcp_receive+0x728>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	b299      	uxth	r1, r3
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801103e:	b29b      	uxth	r3, r3
 8011040:	1acb      	subs	r3, r1, r3
 8011042:	b29b      	uxth	r3, r3
 8011044:	4413      	add	r3, r2
 8011046:	b29a      	uxth	r2, r3
 8011048:	4b0a      	ldr	r3, [pc, #40]	@ (8011074 <tcp_receive+0x72c>)
 801104a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011050:	4a07      	ldr	r2, [pc, #28]	@ (8011070 <tcp_receive+0x728>)
 8011052:	6013      	str	r3, [r2, #0]
 8011054:	4b07      	ldr	r3, [pc, #28]	@ (8011074 <tcp_receive+0x72c>)
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	4a05      	ldr	r2, [pc, #20]	@ (8011070 <tcp_receive+0x728>)
 801105a:	6812      	ldr	r2, [r2, #0]
 801105c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801105e:	e025      	b.n	80110ac <tcp_receive+0x764>
 8011060:	2000c7d4 	.word	0x2000c7d4
 8011064:	2000c7d8 	.word	0x2000c7d8
 8011068:	2000c798 	.word	0x2000c798
 801106c:	2000c7da 	.word	0x2000c7da
 8011070:	2000c7d0 	.word	0x2000c7d0
 8011074:	2000c7b0 	.word	0x2000c7b0
 8011078:	080174d8 	.word	0x080174d8
 801107c:	08017774 	.word	0x08017774
 8011080:	08017530 	.word	0x08017530
 8011084:	08017784 	.word	0x08017784
 8011088:	08017794 	.word	0x08017794
 801108c:	080177a4 	.word	0x080177a4
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011090:	4b87      	ldr	r3, [pc, #540]	@ (80112b0 <tcp_receive+0x968>)
 8011092:	681a      	ldr	r2, [r3, #0]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	2b00      	cmp	r3, #0
 801109c:	da06      	bge.n	80110ac <tcp_receive+0x764>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	7e9b      	ldrb	r3, [r3, #26]
 80110a2:	f043 0302 	orr.w	r3, r3, #2
 80110a6:	b2da      	uxtb	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110ac:	4b80      	ldr	r3, [pc, #512]	@ (80112b0 <tcp_receive+0x968>)
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110b4:	1ad3      	subs	r3, r2, r3
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f2c0 8410 	blt.w	80118dc <tcp_receive+0xf94>
 80110bc:	4b7c      	ldr	r3, [pc, #496]	@ (80112b0 <tcp_receive+0x968>)
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110c4:	6879      	ldr	r1, [r7, #4]
 80110c6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80110c8:	440b      	add	r3, r1
 80110ca:	1ad3      	subs	r3, r2, r3
 80110cc:	3301      	adds	r3, #1
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f300 8404 	bgt.w	80118dc <tcp_receive+0xf94>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80110d8:	4b75      	ldr	r3, [pc, #468]	@ (80112b0 <tcp_receive+0x968>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	429a      	cmp	r2, r3
 80110de:	f040 8287 	bne.w	80115f0 <tcp_receive+0xca8>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80110e2:	4b74      	ldr	r3, [pc, #464]	@ (80112b4 <tcp_receive+0x96c>)
 80110e4:	891c      	ldrh	r4, [r3, #8]
 80110e6:	4b73      	ldr	r3, [pc, #460]	@ (80112b4 <tcp_receive+0x96c>)
 80110e8:	68db      	ldr	r3, [r3, #12]
 80110ea:	899b      	ldrh	r3, [r3, #12]
 80110ec:	b29b      	uxth	r3, r3
 80110ee:	4618      	mov	r0, r3
 80110f0:	f7f9 f9b8 	bl	800a464 <lwip_htons>
 80110f4:	4603      	mov	r3, r0
 80110f6:	f003 0303 	and.w	r3, r3, #3
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d001      	beq.n	8011102 <tcp_receive+0x7ba>
 80110fe:	2301      	movs	r3, #1
 8011100:	e000      	b.n	8011104 <tcp_receive+0x7bc>
 8011102:	2300      	movs	r3, #0
 8011104:	4423      	add	r3, r4
 8011106:	b29a      	uxth	r2, r3
 8011108:	4b6b      	ldr	r3, [pc, #428]	@ (80112b8 <tcp_receive+0x970>)
 801110a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011110:	4b69      	ldr	r3, [pc, #420]	@ (80112b8 <tcp_receive+0x970>)
 8011112:	881b      	ldrh	r3, [r3, #0]
 8011114:	429a      	cmp	r2, r3
 8011116:	d26e      	bcs.n	80111f6 <tcp_receive+0x8ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011118:	4b66      	ldr	r3, [pc, #408]	@ (80112b4 <tcp_receive+0x96c>)
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	899b      	ldrh	r3, [r3, #12]
 801111e:	b29b      	uxth	r3, r3
 8011120:	4618      	mov	r0, r3
 8011122:	f7f9 f99f 	bl	800a464 <lwip_htons>
 8011126:	4603      	mov	r3, r0
 8011128:	f003 0301 	and.w	r3, r3, #1
 801112c:	2b00      	cmp	r3, #0
 801112e:	d01b      	beq.n	8011168 <tcp_receive+0x820>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011130:	4b60      	ldr	r3, [pc, #384]	@ (80112b4 <tcp_receive+0x96c>)
 8011132:	68db      	ldr	r3, [r3, #12]
 8011134:	899b      	ldrh	r3, [r3, #12]
 8011136:	b29b      	uxth	r3, r3
 8011138:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801113c:	b29c      	uxth	r4, r3
 801113e:	4b5d      	ldr	r3, [pc, #372]	@ (80112b4 <tcp_receive+0x96c>)
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	899b      	ldrh	r3, [r3, #12]
 8011144:	b29b      	uxth	r3, r3
 8011146:	4618      	mov	r0, r3
 8011148:	f7f9 f98c 	bl	800a464 <lwip_htons>
 801114c:	4603      	mov	r3, r0
 801114e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011152:	b29b      	uxth	r3, r3
 8011154:	4618      	mov	r0, r3
 8011156:	f7f9 f985 	bl	800a464 <lwip_htons>
 801115a:	4603      	mov	r3, r0
 801115c:	461a      	mov	r2, r3
 801115e:	4b55      	ldr	r3, [pc, #340]	@ (80112b4 <tcp_receive+0x96c>)
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	4322      	orrs	r2, r4
 8011164:	b292      	uxth	r2, r2
 8011166:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801116c:	4b51      	ldr	r3, [pc, #324]	@ (80112b4 <tcp_receive+0x96c>)
 801116e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011170:	4b50      	ldr	r3, [pc, #320]	@ (80112b4 <tcp_receive+0x96c>)
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	899b      	ldrh	r3, [r3, #12]
 8011176:	b29b      	uxth	r3, r3
 8011178:	4618      	mov	r0, r3
 801117a:	f7f9 f973 	bl	800a464 <lwip_htons>
 801117e:	4603      	mov	r3, r0
 8011180:	f003 0302 	and.w	r3, r3, #2
 8011184:	2b00      	cmp	r3, #0
 8011186:	d005      	beq.n	8011194 <tcp_receive+0x84c>
            inseg.len -= 1;
 8011188:	4b4a      	ldr	r3, [pc, #296]	@ (80112b4 <tcp_receive+0x96c>)
 801118a:	891b      	ldrh	r3, [r3, #8]
 801118c:	3b01      	subs	r3, #1
 801118e:	b29a      	uxth	r2, r3
 8011190:	4b48      	ldr	r3, [pc, #288]	@ (80112b4 <tcp_receive+0x96c>)
 8011192:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011194:	4b47      	ldr	r3, [pc, #284]	@ (80112b4 <tcp_receive+0x96c>)
 8011196:	685b      	ldr	r3, [r3, #4]
 8011198:	4a46      	ldr	r2, [pc, #280]	@ (80112b4 <tcp_receive+0x96c>)
 801119a:	8912      	ldrh	r2, [r2, #8]
 801119c:	4611      	mov	r1, r2
 801119e:	4618      	mov	r0, r3
 80111a0:	f7fc fc14 	bl	800d9cc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80111a4:	4b43      	ldr	r3, [pc, #268]	@ (80112b4 <tcp_receive+0x96c>)
 80111a6:	891c      	ldrh	r4, [r3, #8]
 80111a8:	4b42      	ldr	r3, [pc, #264]	@ (80112b4 <tcp_receive+0x96c>)
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	899b      	ldrh	r3, [r3, #12]
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7f9 f957 	bl	800a464 <lwip_htons>
 80111b6:	4603      	mov	r3, r0
 80111b8:	f003 0303 	and.w	r3, r3, #3
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d001      	beq.n	80111c4 <tcp_receive+0x87c>
 80111c0:	2301      	movs	r3, #1
 80111c2:	e000      	b.n	80111c6 <tcp_receive+0x87e>
 80111c4:	2300      	movs	r3, #0
 80111c6:	4423      	add	r3, r4
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	4b3b      	ldr	r3, [pc, #236]	@ (80112b8 <tcp_receive+0x970>)
 80111cc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80111ce:	4b3a      	ldr	r3, [pc, #232]	@ (80112b8 <tcp_receive+0x970>)
 80111d0:	881b      	ldrh	r3, [r3, #0]
 80111d2:	461a      	mov	r2, r3
 80111d4:	4b36      	ldr	r3, [pc, #216]	@ (80112b0 <tcp_receive+0x968>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	441a      	add	r2, r3
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111de:	6879      	ldr	r1, [r7, #4]
 80111e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80111e2:	440b      	add	r3, r1
 80111e4:	429a      	cmp	r2, r3
 80111e6:	d006      	beq.n	80111f6 <tcp_receive+0x8ae>
 80111e8:	4b34      	ldr	r3, [pc, #208]	@ (80112bc <tcp_receive+0x974>)
 80111ea:	f240 527e 	movw	r2, #1406	@ 0x57e
 80111ee:	4934      	ldr	r1, [pc, #208]	@ (80112c0 <tcp_receive+0x978>)
 80111f0:	4834      	ldr	r0, [pc, #208]	@ (80112c4 <tcp_receive+0x97c>)
 80111f2:	f003 fddd 	bl	8014db0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	f000 80e1 	beq.w	80113c2 <tcp_receive+0xa7a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011200:	4b2c      	ldr	r3, [pc, #176]	@ (80112b4 <tcp_receive+0x96c>)
 8011202:	68db      	ldr	r3, [r3, #12]
 8011204:	899b      	ldrh	r3, [r3, #12]
 8011206:	b29b      	uxth	r3, r3
 8011208:	4618      	mov	r0, r3
 801120a:	f7f9 f92b 	bl	800a464 <lwip_htons>
 801120e:	4603      	mov	r3, r0
 8011210:	f003 0301 	and.w	r3, r3, #1
 8011214:	2b00      	cmp	r3, #0
 8011216:	d010      	beq.n	801123a <tcp_receive+0x8f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011218:	e00a      	b.n	8011230 <tcp_receive+0x8e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801121e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	671a      	str	r2, [r3, #112]	@ 0x70
              tcp_seg_free(old_ooseq);
 801122a:	68b8      	ldr	r0, [r7, #8]
 801122c:	f7fd ff34 	bl	800f098 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011234:	2b00      	cmp	r3, #0
 8011236:	d1f0      	bne.n	801121a <tcp_receive+0x8d2>
 8011238:	e0c3      	b.n	80113c2 <tcp_receive+0xa7a>
            }
          } else {
            next = pcb->ooseq;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011240:	e04f      	b.n	80112e2 <tcp_receive+0x99a>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	899b      	ldrh	r3, [r3, #12]
 8011248:	b29b      	uxth	r3, r3
 801124a:	4618      	mov	r0, r3
 801124c:	f7f9 f90a 	bl	800a464 <lwip_htons>
 8011250:	4603      	mov	r3, r0
 8011252:	f003 0301 	and.w	r3, r3, #1
 8011256:	2b00      	cmp	r3, #0
 8011258:	d03b      	beq.n	80112d2 <tcp_receive+0x98a>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801125a:	4b16      	ldr	r3, [pc, #88]	@ (80112b4 <tcp_receive+0x96c>)
 801125c:	68db      	ldr	r3, [r3, #12]
 801125e:	899b      	ldrh	r3, [r3, #12]
 8011260:	b29b      	uxth	r3, r3
 8011262:	4618      	mov	r0, r3
 8011264:	f7f9 f8fe 	bl	800a464 <lwip_htons>
 8011268:	4603      	mov	r3, r0
 801126a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801126e:	2b00      	cmp	r3, #0
 8011270:	d12f      	bne.n	80112d2 <tcp_receive+0x98a>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011272:	4b10      	ldr	r3, [pc, #64]	@ (80112b4 <tcp_receive+0x96c>)
 8011274:	68db      	ldr	r3, [r3, #12]
 8011276:	899b      	ldrh	r3, [r3, #12]
 8011278:	b29c      	uxth	r4, r3
 801127a:	2001      	movs	r0, #1
 801127c:	f7f9 f8f2 	bl	800a464 <lwip_htons>
 8011280:	4603      	mov	r3, r0
 8011282:	461a      	mov	r2, r3
 8011284:	4b0b      	ldr	r3, [pc, #44]	@ (80112b4 <tcp_receive+0x96c>)
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	4322      	orrs	r2, r4
 801128a:	b292      	uxth	r2, r2
 801128c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801128e:	4b09      	ldr	r3, [pc, #36]	@ (80112b4 <tcp_receive+0x96c>)
 8011290:	891c      	ldrh	r4, [r3, #8]
 8011292:	4b08      	ldr	r3, [pc, #32]	@ (80112b4 <tcp_receive+0x96c>)
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	899b      	ldrh	r3, [r3, #12]
 8011298:	b29b      	uxth	r3, r3
 801129a:	4618      	mov	r0, r3
 801129c:	f7f9 f8e2 	bl	800a464 <lwip_htons>
 80112a0:	4603      	mov	r3, r0
 80112a2:	f003 0303 	and.w	r3, r3, #3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00e      	beq.n	80112c8 <tcp_receive+0x980>
 80112aa:	2301      	movs	r3, #1
 80112ac:	e00d      	b.n	80112ca <tcp_receive+0x982>
 80112ae:	bf00      	nop
 80112b0:	2000c7d0 	.word	0x2000c7d0
 80112b4:	2000c7b0 	.word	0x2000c7b0
 80112b8:	2000c7da 	.word	0x2000c7da
 80112bc:	080174d8 	.word	0x080174d8
 80112c0:	080177b8 	.word	0x080177b8
 80112c4:	08017530 	.word	0x08017530
 80112c8:	2300      	movs	r3, #0
 80112ca:	4423      	add	r3, r4
 80112cc:	b29a      	uxth	r2, r3
 80112ce:	4b95      	ldr	r3, [pc, #596]	@ (8011524 <tcp_receive+0xbdc>)
 80112d0:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80112d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112d4:	62bb      	str	r3, [r7, #40]	@ 0x28
              next = next->next;
 80112d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	62fb      	str	r3, [r7, #44]	@ 0x2c
              tcp_seg_free(prev);
 80112dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80112de:	f7fd fedb 	bl	800f098 <tcp_seg_free>
            while (next &&
 80112e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d00e      	beq.n	8011306 <tcp_receive+0x9be>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80112e8:	4b8e      	ldr	r3, [pc, #568]	@ (8011524 <tcp_receive+0xbdc>)
 80112ea:	881b      	ldrh	r3, [r3, #0]
 80112ec:	461a      	mov	r2, r3
 80112ee:	4b8e      	ldr	r3, [pc, #568]	@ (8011528 <tcp_receive+0xbe0>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	441a      	add	r2, r3
 80112f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80112fc:	8909      	ldrh	r1, [r1, #8]
 80112fe:	440b      	add	r3, r1
 8011300:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011302:	2b00      	cmp	r3, #0
 8011304:	da9d      	bge.n	8011242 <tcp_receive+0x8fa>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011308:	2b00      	cmp	r3, #0
 801130a:	d057      	beq.n	80113bc <tcp_receive+0xa74>
                TCP_SEQ_GT(seqno + tcplen,
 801130c:	4b85      	ldr	r3, [pc, #532]	@ (8011524 <tcp_receive+0xbdc>)
 801130e:	881b      	ldrh	r3, [r3, #0]
 8011310:	461a      	mov	r2, r3
 8011312:	4b85      	ldr	r3, [pc, #532]	@ (8011528 <tcp_receive+0xbe0>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	441a      	add	r2, r3
 8011318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801131a:	68db      	ldr	r3, [r3, #12]
 801131c:	685b      	ldr	r3, [r3, #4]
 801131e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011320:	2b00      	cmp	r3, #0
 8011322:	dd4b      	ble.n	80113bc <tcp_receive+0xa74>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	b29a      	uxth	r2, r3
 801132c:	4b7e      	ldr	r3, [pc, #504]	@ (8011528 <tcp_receive+0xbe0>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	b29b      	uxth	r3, r3
 8011332:	1ad3      	subs	r3, r2, r3
 8011334:	b29a      	uxth	r2, r3
 8011336:	4b7d      	ldr	r3, [pc, #500]	@ (801152c <tcp_receive+0xbe4>)
 8011338:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801133a:	4b7c      	ldr	r3, [pc, #496]	@ (801152c <tcp_receive+0xbe4>)
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	899b      	ldrh	r3, [r3, #12]
 8011340:	b29b      	uxth	r3, r3
 8011342:	4618      	mov	r0, r3
 8011344:	f7f9 f88e 	bl	800a464 <lwip_htons>
 8011348:	4603      	mov	r3, r0
 801134a:	f003 0302 	and.w	r3, r3, #2
 801134e:	2b00      	cmp	r3, #0
 8011350:	d005      	beq.n	801135e <tcp_receive+0xa16>
                inseg.len -= 1;
 8011352:	4b76      	ldr	r3, [pc, #472]	@ (801152c <tcp_receive+0xbe4>)
 8011354:	891b      	ldrh	r3, [r3, #8]
 8011356:	3b01      	subs	r3, #1
 8011358:	b29a      	uxth	r2, r3
 801135a:	4b74      	ldr	r3, [pc, #464]	@ (801152c <tcp_receive+0xbe4>)
 801135c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801135e:	4b73      	ldr	r3, [pc, #460]	@ (801152c <tcp_receive+0xbe4>)
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	4a72      	ldr	r2, [pc, #456]	@ (801152c <tcp_receive+0xbe4>)
 8011364:	8912      	ldrh	r2, [r2, #8]
 8011366:	4611      	mov	r1, r2
 8011368:	4618      	mov	r0, r3
 801136a:	f7fc fb2f 	bl	800d9cc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801136e:	4b6f      	ldr	r3, [pc, #444]	@ (801152c <tcp_receive+0xbe4>)
 8011370:	891c      	ldrh	r4, [r3, #8]
 8011372:	4b6e      	ldr	r3, [pc, #440]	@ (801152c <tcp_receive+0xbe4>)
 8011374:	68db      	ldr	r3, [r3, #12]
 8011376:	899b      	ldrh	r3, [r3, #12]
 8011378:	b29b      	uxth	r3, r3
 801137a:	4618      	mov	r0, r3
 801137c:	f7f9 f872 	bl	800a464 <lwip_htons>
 8011380:	4603      	mov	r3, r0
 8011382:	f003 0303 	and.w	r3, r3, #3
 8011386:	2b00      	cmp	r3, #0
 8011388:	d001      	beq.n	801138e <tcp_receive+0xa46>
 801138a:	2301      	movs	r3, #1
 801138c:	e000      	b.n	8011390 <tcp_receive+0xa48>
 801138e:	2300      	movs	r3, #0
 8011390:	4423      	add	r3, r4
 8011392:	b29a      	uxth	r2, r3
 8011394:	4b63      	ldr	r3, [pc, #396]	@ (8011524 <tcp_receive+0xbdc>)
 8011396:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011398:	4b62      	ldr	r3, [pc, #392]	@ (8011524 <tcp_receive+0xbdc>)
 801139a:	881b      	ldrh	r3, [r3, #0]
 801139c:	461a      	mov	r2, r3
 801139e:	4b62      	ldr	r3, [pc, #392]	@ (8011528 <tcp_receive+0xbe0>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	441a      	add	r2, r3
 80113a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a6:	68db      	ldr	r3, [r3, #12]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	429a      	cmp	r2, r3
 80113ac:	d006      	beq.n	80113bc <tcp_receive+0xa74>
 80113ae:	4b60      	ldr	r3, [pc, #384]	@ (8011530 <tcp_receive+0xbe8>)
 80113b0:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80113b4:	495f      	ldr	r1, [pc, #380]	@ (8011534 <tcp_receive+0xbec>)
 80113b6:	4860      	ldr	r0, [pc, #384]	@ (8011538 <tcp_receive+0xbf0>)
 80113b8:	f003 fcfa 	bl	8014db0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113c0:	671a      	str	r2, [r3, #112]	@ 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80113c2:	4b58      	ldr	r3, [pc, #352]	@ (8011524 <tcp_receive+0xbdc>)
 80113c4:	881b      	ldrh	r3, [r3, #0]
 80113c6:	461a      	mov	r2, r3
 80113c8:	4b57      	ldr	r3, [pc, #348]	@ (8011528 <tcp_receive+0xbe0>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	441a      	add	r2, r3
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80113d6:	4b53      	ldr	r3, [pc, #332]	@ (8011524 <tcp_receive+0xbdc>)
 80113d8:	881b      	ldrh	r3, [r3, #0]
 80113da:	429a      	cmp	r2, r3
 80113dc:	d206      	bcs.n	80113ec <tcp_receive+0xaa4>
 80113de:	4b54      	ldr	r3, [pc, #336]	@ (8011530 <tcp_receive+0xbe8>)
 80113e0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80113e4:	4955      	ldr	r1, [pc, #340]	@ (801153c <tcp_receive+0xbf4>)
 80113e6:	4854      	ldr	r0, [pc, #336]	@ (8011538 <tcp_receive+0xbf0>)
 80113e8:	f003 fce2 	bl	8014db0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80113f0:	4b4c      	ldr	r3, [pc, #304]	@ (8011524 <tcp_receive+0xbdc>)
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f7fd f9fd 	bl	800e7fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011402:	4b4a      	ldr	r3, [pc, #296]	@ (801152c <tcp_receive+0xbe4>)
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	891b      	ldrh	r3, [r3, #8]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d006      	beq.n	801141a <tcp_receive+0xad2>
          recv_data = inseg.p;
 801140c:	4b47      	ldr	r3, [pc, #284]	@ (801152c <tcp_receive+0xbe4>)
 801140e:	685b      	ldr	r3, [r3, #4]
 8011410:	4a4b      	ldr	r2, [pc, #300]	@ (8011540 <tcp_receive+0xbf8>)
 8011412:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011414:	4b45      	ldr	r3, [pc, #276]	@ (801152c <tcp_receive+0xbe4>)
 8011416:	2200      	movs	r2, #0
 8011418:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801141a:	4b44      	ldr	r3, [pc, #272]	@ (801152c <tcp_receive+0xbe4>)
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	899b      	ldrh	r3, [r3, #12]
 8011420:	b29b      	uxth	r3, r3
 8011422:	4618      	mov	r0, r3
 8011424:	f7f9 f81e 	bl	800a464 <lwip_htons>
 8011428:	4603      	mov	r3, r0
 801142a:	f003 0301 	and.w	r3, r3, #1
 801142e:	2b00      	cmp	r3, #0
 8011430:	f000 80b4 	beq.w	801159c <tcp_receive+0xc54>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011434:	4b43      	ldr	r3, [pc, #268]	@ (8011544 <tcp_receive+0xbfc>)
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	f043 0320 	orr.w	r3, r3, #32
 801143c:	b2da      	uxtb	r2, r3
 801143e:	4b41      	ldr	r3, [pc, #260]	@ (8011544 <tcp_receive+0xbfc>)
 8011440:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011442:	e0ab      	b.n	801159c <tcp_receive+0xc54>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011448:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	4a35      	ldr	r2, [pc, #212]	@ (8011528 <tcp_receive+0xbe0>)
 8011454:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	891b      	ldrh	r3, [r3, #8]
 801145a:	461c      	mov	r4, r3
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	68db      	ldr	r3, [r3, #12]
 8011460:	899b      	ldrh	r3, [r3, #12]
 8011462:	b29b      	uxth	r3, r3
 8011464:	4618      	mov	r0, r3
 8011466:	f7f8 fffd 	bl	800a464 <lwip_htons>
 801146a:	4603      	mov	r3, r0
 801146c:	f003 0303 	and.w	r3, r3, #3
 8011470:	2b00      	cmp	r3, #0
 8011472:	d001      	beq.n	8011478 <tcp_receive+0xb30>
 8011474:	2301      	movs	r3, #1
 8011476:	e000      	b.n	801147a <tcp_receive+0xb32>
 8011478:	2300      	movs	r3, #0
 801147a:	191a      	adds	r2, r3, r4
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011480:	441a      	add	r2, r3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801148a:	461c      	mov	r4, r3
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	891b      	ldrh	r3, [r3, #8]
 8011490:	461d      	mov	r5, r3
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	68db      	ldr	r3, [r3, #12]
 8011496:	899b      	ldrh	r3, [r3, #12]
 8011498:	b29b      	uxth	r3, r3
 801149a:	4618      	mov	r0, r3
 801149c:	f7f8 ffe2 	bl	800a464 <lwip_htons>
 80114a0:	4603      	mov	r3, r0
 80114a2:	f003 0303 	and.w	r3, r3, #3
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d001      	beq.n	80114ae <tcp_receive+0xb66>
 80114aa:	2301      	movs	r3, #1
 80114ac:	e000      	b.n	80114b0 <tcp_receive+0xb68>
 80114ae:	2300      	movs	r3, #0
 80114b0:	442b      	add	r3, r5
 80114b2:	429c      	cmp	r4, r3
 80114b4:	d206      	bcs.n	80114c4 <tcp_receive+0xb7c>
 80114b6:	4b1e      	ldr	r3, [pc, #120]	@ (8011530 <tcp_receive+0xbe8>)
 80114b8:	f240 52dd 	movw	r2, #1501	@ 0x5dd
 80114bc:	4922      	ldr	r1, [pc, #136]	@ (8011548 <tcp_receive+0xc00>)
 80114be:	481e      	ldr	r0, [pc, #120]	@ (8011538 <tcp_receive+0xbf0>)
 80114c0:	f003 fc76 	bl	8014db0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	891b      	ldrh	r3, [r3, #8]
 80114c8:	461c      	mov	r4, r3
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	899b      	ldrh	r3, [r3, #12]
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7f8 ffc6 	bl	800a464 <lwip_htons>
 80114d8:	4603      	mov	r3, r0
 80114da:	f003 0303 	and.w	r3, r3, #3
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d001      	beq.n	80114e6 <tcp_receive+0xb9e>
 80114e2:	2301      	movs	r3, #1
 80114e4:	e000      	b.n	80114e8 <tcp_receive+0xba0>
 80114e6:	2300      	movs	r3, #0
 80114e8:	1919      	adds	r1, r3, r4
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80114ee:	b28b      	uxth	r3, r1
 80114f0:	1ad3      	subs	r3, r2, r3
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f7fd f97f 	bl	800e7fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	891b      	ldrh	r3, [r3, #8]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d028      	beq.n	801155a <tcp_receive+0xc12>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011508:	4b0d      	ldr	r3, [pc, #52]	@ (8011540 <tcp_receive+0xbf8>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d01d      	beq.n	801154c <tcp_receive+0xc04>
              pbuf_cat(recv_data, cseg->p);
 8011510:	4b0b      	ldr	r3, [pc, #44]	@ (8011540 <tcp_receive+0xbf8>)
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	4619      	mov	r1, r3
 801151a:	4610      	mov	r0, r2
 801151c:	f7fc fc96 	bl	800de4c <pbuf_cat>
 8011520:	e018      	b.n	8011554 <tcp_receive+0xc0c>
 8011522:	bf00      	nop
 8011524:	2000c7da 	.word	0x2000c7da
 8011528:	2000c7d0 	.word	0x2000c7d0
 801152c:	2000c7b0 	.word	0x2000c7b0
 8011530:	080174d8 	.word	0x080174d8
 8011534:	080177f0 	.word	0x080177f0
 8011538:	08017530 	.word	0x08017530
 801153c:	0801782c 	.word	0x0801782c
 8011540:	2000c7e0 	.word	0x2000c7e0
 8011544:	2000c7dd 	.word	0x2000c7dd
 8011548:	0801784c 	.word	0x0801784c
            } else {
              recv_data = cseg->p;
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	4a71      	ldr	r2, [pc, #452]	@ (8011718 <tcp_receive+0xdd0>)
 8011552:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	2200      	movs	r2, #0
 8011558:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	899b      	ldrh	r3, [r3, #12]
 8011560:	b29b      	uxth	r3, r3
 8011562:	4618      	mov	r0, r3
 8011564:	f7f8 ff7e 	bl	800a464 <lwip_htons>
 8011568:	4603      	mov	r3, r0
 801156a:	f003 0301 	and.w	r3, r3, #1
 801156e:	2b00      	cmp	r3, #0
 8011570:	d00d      	beq.n	801158e <tcp_receive+0xc46>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011572:	4b6a      	ldr	r3, [pc, #424]	@ (801171c <tcp_receive+0xdd4>)
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	f043 0320 	orr.w	r3, r3, #32
 801157a:	b2da      	uxtb	r2, r3
 801157c:	4b67      	ldr	r3, [pc, #412]	@ (801171c <tcp_receive+0xdd4>)
 801157e:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	7d1b      	ldrb	r3, [r3, #20]
 8011584:	2b04      	cmp	r3, #4
 8011586:	d102      	bne.n	801158e <tcp_receive+0xc46>
              pcb->state = CLOSE_WAIT;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2207      	movs	r2, #7
 801158c:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	681a      	ldr	r2, [r3, #0]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	671a      	str	r2, [r3, #112]	@ 0x70
          tcp_seg_free(cseg);
 8011596:	68f8      	ldr	r0, [r7, #12]
 8011598:	f7fd fd7e 	bl	800f098 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d008      	beq.n	80115b6 <tcp_receive+0xc6e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	685a      	ldr	r2, [r3, #4]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80115b0:	429a      	cmp	r2, r3
 80115b2:	f43f af47 	beq.w	8011444 <tcp_receive+0xafc>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	7e9b      	ldrb	r3, [r3, #26]
 80115ba:	f003 0301 	and.w	r3, r3, #1
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d00e      	beq.n	80115e0 <tcp_receive+0xc98>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	7e9b      	ldrb	r3, [r3, #26]
 80115c6:	f023 0301 	bic.w	r3, r3, #1
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	769a      	strb	r2, [r3, #26]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	7e9b      	ldrb	r3, [r3, #26]
 80115d4:	f043 0302 	orr.w	r3, r3, #2
 80115d8:	b2da      	uxtb	r2, r3
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80115de:	e181      	b.n	80118e4 <tcp_receive+0xf9c>
        tcp_ack(pcb);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	7e9b      	ldrb	r3, [r3, #26]
 80115e4:	f043 0301 	orr.w	r3, r3, #1
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80115ee:	e179      	b.n	80118e4 <tcp_receive+0xf9c>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 80115f0:	6878      	ldr	r0, [r7, #4]
 80115f2:	f000 fc8f 	bl	8011f14 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d106      	bne.n	801160c <tcp_receive+0xcc4>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80115fe:	4848      	ldr	r0, [pc, #288]	@ (8011720 <tcp_receive+0xdd8>)
 8011600:	f7fd fd62 	bl	800f0c8 <tcp_seg_copy>
 8011604:	4602      	mov	r2, r0
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	671a      	str	r2, [r3, #112]	@ 0x70
      if (pcb->rcv_nxt == seqno) {
 801160a:	e16b      	b.n	80118e4 <tcp_receive+0xf9c>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801160c:	2300      	movs	r3, #0
 801160e:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011616:	e150      	b.n	80118ba <tcp_receive+0xf72>
            if (seqno == next->tcphdr->seqno) {
 8011618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161a:	68db      	ldr	r3, [r3, #12]
 801161c:	685a      	ldr	r2, [r3, #4]
 801161e:	4b41      	ldr	r3, [pc, #260]	@ (8011724 <tcp_receive+0xddc>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	429a      	cmp	r2, r3
 8011624:	d11d      	bne.n	8011662 <tcp_receive+0xd1a>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011626:	4b3e      	ldr	r3, [pc, #248]	@ (8011720 <tcp_receive+0xdd8>)
 8011628:	891a      	ldrh	r2, [r3, #8]
 801162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801162c:	891b      	ldrh	r3, [r3, #8]
 801162e:	429a      	cmp	r2, r3
 8011630:	f240 8148 	bls.w	80118c4 <tcp_receive+0xf7c>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8011634:	483a      	ldr	r0, [pc, #232]	@ (8011720 <tcp_receive+0xdd8>)
 8011636:	f7fd fd47 	bl	800f0c8 <tcp_seg_copy>
 801163a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2b00      	cmp	r3, #0
 8011640:	f000 8142 	beq.w	80118c8 <tcp_receive+0xf80>
                  if (prev != NULL) {
 8011644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011646:	2b00      	cmp	r3, #0
 8011648:	d003      	beq.n	8011652 <tcp_receive+0xd0a>
                    prev->next = cseg;
 801164a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801164c:	68fa      	ldr	r2, [r7, #12]
 801164e:	601a      	str	r2, [r3, #0]
 8011650:	e002      	b.n	8011658 <tcp_receive+0xd10>
                  } else {
                    pcb->ooseq = cseg;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	68fa      	ldr	r2, [r7, #12]
 8011656:	671a      	str	r2, [r3, #112]	@ 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f7ff f8fe 	bl	801085c <tcp_oos_insert_segment>
                }
                break;
 8011660:	e132      	b.n	80118c8 <tcp_receive+0xf80>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011664:	2b00      	cmp	r3, #0
 8011666:	d117      	bne.n	8011698 <tcp_receive+0xd50>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011668:	4b2e      	ldr	r3, [pc, #184]	@ (8011724 <tcp_receive+0xddc>)
 801166a:	681a      	ldr	r2, [r3, #0]
 801166c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	1ad3      	subs	r3, r2, r3
 8011674:	2b00      	cmp	r3, #0
 8011676:	da57      	bge.n	8011728 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8011678:	4829      	ldr	r0, [pc, #164]	@ (8011720 <tcp_receive+0xdd8>)
 801167a:	f7fd fd25 	bl	800f0c8 <tcp_seg_copy>
 801167e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	2b00      	cmp	r3, #0
 8011684:	f000 8122 	beq.w	80118cc <tcp_receive+0xf84>
                    pcb->ooseq = cseg;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	68fa      	ldr	r2, [r7, #12]
 801168c:	671a      	str	r2, [r3, #112]	@ 0x70
                    tcp_oos_insert_segment(cseg, next);
 801168e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011690:	68f8      	ldr	r0, [r7, #12]
 8011692:	f7ff f8e3 	bl	801085c <tcp_oos_insert_segment>
                  }
                  break;
 8011696:	e119      	b.n	80118cc <tcp_receive+0xf84>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8011698:	4b22      	ldr	r3, [pc, #136]	@ (8011724 <tcp_receive+0xddc>)
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	3b01      	subs	r3, #1
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	db3e      	blt.n	8011728 <tcp_receive+0xde0>
 80116aa:	4b1e      	ldr	r3, [pc, #120]	@ (8011724 <tcp_receive+0xddc>)
 80116ac:	681a      	ldr	r2, [r3, #0]
 80116ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	1ad3      	subs	r3, r2, r3
 80116b6:	3301      	adds	r3, #1
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	dc35      	bgt.n	8011728 <tcp_receive+0xde0>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80116bc:	4818      	ldr	r0, [pc, #96]	@ (8011720 <tcp_receive+0xdd8>)
 80116be:	f7fd fd03 	bl	800f0c8 <tcp_seg_copy>
 80116c2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f000 8102 	beq.w	80118d0 <tcp_receive+0xf88>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80116cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116d4:	8912      	ldrh	r2, [r2, #8]
 80116d6:	441a      	add	r2, r3
 80116d8:	4b12      	ldr	r3, [pc, #72]	@ (8011724 <tcp_receive+0xddc>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	1ad3      	subs	r3, r2, r3
 80116de:	2b00      	cmp	r3, #0
 80116e0:	dd12      	ble.n	8011708 <tcp_receive+0xdc0>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80116e2:	4b10      	ldr	r3, [pc, #64]	@ (8011724 <tcp_receive+0xddc>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80116f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116fa:	685a      	ldr	r2, [r3, #4]
 80116fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116fe:	891b      	ldrh	r3, [r3, #8]
 8011700:	4619      	mov	r1, r3
 8011702:	4610      	mov	r0, r2
 8011704:	f7fc f962 	bl	800d9cc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801170a:	68fa      	ldr	r2, [r7, #12]
 801170c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801170e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011710:	68f8      	ldr	r0, [r7, #12]
 8011712:	f7ff f8a3 	bl	801085c <tcp_oos_insert_segment>
                  }
                  break;
 8011716:	e0db      	b.n	80118d0 <tcp_receive+0xf88>
 8011718:	2000c7e0 	.word	0x2000c7e0
 801171c:	2000c7dd 	.word	0x2000c7dd
 8011720:	2000c7b0 	.word	0x2000c7b0
 8011724:	2000c7d0 	.word	0x2000c7d0
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	f040 80bf 	bne.w	80118b0 <tcp_receive+0xf68>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011732:	4b7c      	ldr	r3, [pc, #496]	@ (8011924 <tcp_receive+0xfdc>)
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801173e:	2b00      	cmp	r3, #0
 8011740:	f340 80b6 	ble.w	80118b0 <tcp_receive+0xf68>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	899b      	ldrh	r3, [r3, #12]
 801174a:	b29b      	uxth	r3, r3
 801174c:	4618      	mov	r0, r3
 801174e:	f7f8 fe89 	bl	800a464 <lwip_htons>
 8011752:	4603      	mov	r3, r0
 8011754:	f003 0301 	and.w	r3, r3, #1
 8011758:	2b00      	cmp	r3, #0
 801175a:	f040 80bb 	bne.w	80118d4 <tcp_receive+0xf8c>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801175e:	4872      	ldr	r0, [pc, #456]	@ (8011928 <tcp_receive+0xfe0>)
 8011760:	f7fd fcb2 	bl	800f0c8 <tcp_seg_copy>
 8011764:	4602      	mov	r2, r0
 8011766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011768:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801176a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	2b00      	cmp	r3, #0
 8011770:	f000 80b2 	beq.w	80118d8 <tcp_receive+0xf90>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801177c:	8912      	ldrh	r2, [r2, #8]
 801177e:	441a      	add	r2, r3
 8011780:	4b68      	ldr	r3, [pc, #416]	@ (8011924 <tcp_receive+0xfdc>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	2b00      	cmp	r3, #0
 8011788:	dd12      	ble.n	80117b0 <tcp_receive+0xe68>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801178a:	4b66      	ldr	r3, [pc, #408]	@ (8011924 <tcp_receive+0xfdc>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	b29a      	uxth	r2, r3
 8011790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	b29b      	uxth	r3, r3
 8011798:	1ad3      	subs	r3, r2, r3
 801179a:	b29a      	uxth	r2, r3
 801179c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801179e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80117a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117a2:	685a      	ldr	r2, [r3, #4]
 80117a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117a6:	891b      	ldrh	r3, [r3, #8]
 80117a8:	4619      	mov	r1, r3
 80117aa:	4610      	mov	r0, r2
 80117ac:	f7fc f90e 	bl	800d9cc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80117b0:	4b5e      	ldr	r3, [pc, #376]	@ (801192c <tcp_receive+0xfe4>)
 80117b2:	881b      	ldrh	r3, [r3, #0]
 80117b4:	461a      	mov	r2, r3
 80117b6:	4b5b      	ldr	r3, [pc, #364]	@ (8011924 <tcp_receive+0xfdc>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	441a      	add	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117c0:	6879      	ldr	r1, [r7, #4]
 80117c2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80117c4:	440b      	add	r3, r1
 80117c6:	1ad3      	subs	r3, r2, r3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	f340 8085 	ble.w	80118d8 <tcp_receive+0xf90>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80117ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	68db      	ldr	r3, [r3, #12]
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4618      	mov	r0, r3
 80117da:	f7f8 fe43 	bl	800a464 <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	f003 0301 	and.w	r3, r3, #1
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d01e      	beq.n	8011826 <tcp_receive+0xede>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80117e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	899b      	ldrh	r3, [r3, #12]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80117f6:	b29c      	uxth	r4, r3
 80117f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	68db      	ldr	r3, [r3, #12]
 80117fe:	899b      	ldrh	r3, [r3, #12]
 8011800:	b29b      	uxth	r3, r3
 8011802:	4618      	mov	r0, r3
 8011804:	f7f8 fe2e 	bl	800a464 <lwip_htons>
 8011808:	4603      	mov	r3, r0
 801180a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801180e:	b29b      	uxth	r3, r3
 8011810:	4618      	mov	r0, r3
 8011812:	f7f8 fe27 	bl	800a464 <lwip_htons>
 8011816:	4603      	mov	r3, r0
 8011818:	461a      	mov	r2, r3
 801181a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	4322      	orrs	r2, r4
 8011822:	b292      	uxth	r2, r2
 8011824:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801182a:	b29a      	uxth	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011830:	4413      	add	r3, r2
 8011832:	b299      	uxth	r1, r3
 8011834:	4b3b      	ldr	r3, [pc, #236]	@ (8011924 <tcp_receive+0xfdc>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	b29a      	uxth	r2, r3
 801183a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	1a8a      	subs	r2, r1, r2
 8011840:	b292      	uxth	r2, r2
 8011842:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	685a      	ldr	r2, [r3, #4]
 801184a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	891b      	ldrh	r3, [r3, #8]
 8011850:	4619      	mov	r1, r3
 8011852:	4610      	mov	r0, r2
 8011854:	f7fc f8ba 	bl	800d9cc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	891c      	ldrh	r4, [r3, #8]
 801185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	68db      	ldr	r3, [r3, #12]
 8011864:	899b      	ldrh	r3, [r3, #12]
 8011866:	b29b      	uxth	r3, r3
 8011868:	4618      	mov	r0, r3
 801186a:	f7f8 fdfb 	bl	800a464 <lwip_htons>
 801186e:	4603      	mov	r3, r0
 8011870:	f003 0303 	and.w	r3, r3, #3
 8011874:	2b00      	cmp	r3, #0
 8011876:	d001      	beq.n	801187c <tcp_receive+0xf34>
 8011878:	2301      	movs	r3, #1
 801187a:	e000      	b.n	801187e <tcp_receive+0xf36>
 801187c:	2300      	movs	r3, #0
 801187e:	4423      	add	r3, r4
 8011880:	b29a      	uxth	r2, r3
 8011882:	4b2a      	ldr	r3, [pc, #168]	@ (801192c <tcp_receive+0xfe4>)
 8011884:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011886:	4b29      	ldr	r3, [pc, #164]	@ (801192c <tcp_receive+0xfe4>)
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	461a      	mov	r2, r3
 801188c:	4b25      	ldr	r3, [pc, #148]	@ (8011924 <tcp_receive+0xfdc>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	441a      	add	r2, r3
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011896:	6879      	ldr	r1, [r7, #4]
 8011898:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801189a:	440b      	add	r3, r1
 801189c:	429a      	cmp	r2, r3
 801189e:	d01b      	beq.n	80118d8 <tcp_receive+0xf90>
 80118a0:	4b23      	ldr	r3, [pc, #140]	@ (8011930 <tcp_receive+0xfe8>)
 80118a2:	f240 627a 	movw	r2, #1658	@ 0x67a
 80118a6:	4923      	ldr	r1, [pc, #140]	@ (8011934 <tcp_receive+0xfec>)
 80118a8:	4823      	ldr	r0, [pc, #140]	@ (8011938 <tcp_receive+0xff0>)
 80118aa:	f003 fa81 	bl	8014db0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80118ae:	e013      	b.n	80118d8 <tcp_receive+0xf90>
              }
            }
            prev = next;
 80118b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118b2:	62bb      	str	r3, [r7, #40]	@ 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80118b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80118ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118bc:	2b00      	cmp	r3, #0
 80118be:	f47f aeab 	bne.w	8011618 <tcp_receive+0xcd0>
      if (pcb->rcv_nxt == seqno) {
 80118c2:	e00f      	b.n	80118e4 <tcp_receive+0xf9c>
                break;
 80118c4:	bf00      	nop
 80118c6:	e00d      	b.n	80118e4 <tcp_receive+0xf9c>
                break;
 80118c8:	bf00      	nop
 80118ca:	e00b      	b.n	80118e4 <tcp_receive+0xf9c>
                  break;
 80118cc:	bf00      	nop
 80118ce:	e009      	b.n	80118e4 <tcp_receive+0xf9c>
                  break;
 80118d0:	bf00      	nop
 80118d2:	e007      	b.n	80118e4 <tcp_receive+0xf9c>
                  break;
 80118d4:	bf00      	nop
 80118d6:	e005      	b.n	80118e4 <tcp_receive+0xf9c>
                break;
 80118d8:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80118da:	e003      	b.n	80118e4 <tcp_receive+0xf9c>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f000 fb19 	bl	8011f14 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80118e2:	e01a      	b.n	801191a <tcp_receive+0xfd2>
 80118e4:	e019      	b.n	801191a <tcp_receive+0xfd2>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80118e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011924 <tcp_receive+0xfdc>)
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	db0a      	blt.n	801190a <tcp_receive+0xfc2>
 80118f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011924 <tcp_receive+0xfdc>)
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118fc:	6879      	ldr	r1, [r7, #4]
 80118fe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011900:	440b      	add	r3, r1
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	3301      	adds	r3, #1
 8011906:	2b00      	cmp	r3, #0
 8011908:	dd07      	ble.n	801191a <tcp_receive+0xfd2>
      tcp_ack_now(pcb);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	7e9b      	ldrb	r3, [r3, #26]
 801190e:	f043 0302 	orr.w	r3, r3, #2
 8011912:	b2da      	uxtb	r2, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8011918:	e7ff      	b.n	801191a <tcp_receive+0xfd2>
 801191a:	bf00      	nop
 801191c:	3734      	adds	r7, #52	@ 0x34
 801191e:	46bd      	mov	sp, r7
 8011920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011922:	bf00      	nop
 8011924:	2000c7d0 	.word	0x2000c7d0
 8011928:	2000c7b0 	.word	0x2000c7b0
 801192c:	2000c7da 	.word	0x2000c7da
 8011930:	080174d8 	.word	0x080174d8
 8011934:	080177b8 	.word	0x080177b8
 8011938:	08017530 	.word	0x08017530

0801193c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8011942:	4b17      	ldr	r3, [pc, #92]	@ (80119a0 <tcp_getoptbyte+0x64>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d005      	beq.n	8011956 <tcp_getoptbyte+0x1a>
 801194a:	4b16      	ldr	r3, [pc, #88]	@ (80119a4 <tcp_getoptbyte+0x68>)
 801194c:	881a      	ldrh	r2, [r3, #0]
 801194e:	4b16      	ldr	r3, [pc, #88]	@ (80119a8 <tcp_getoptbyte+0x6c>)
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	429a      	cmp	r2, r3
 8011954:	d20e      	bcs.n	8011974 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8011956:	4b15      	ldr	r3, [pc, #84]	@ (80119ac <tcp_getoptbyte+0x70>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	3314      	adds	r3, #20
 801195c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801195e:	4b11      	ldr	r3, [pc, #68]	@ (80119a4 <tcp_getoptbyte+0x68>)
 8011960:	881b      	ldrh	r3, [r3, #0]
 8011962:	1c5a      	adds	r2, r3, #1
 8011964:	b291      	uxth	r1, r2
 8011966:	4a0f      	ldr	r2, [pc, #60]	@ (80119a4 <tcp_getoptbyte+0x68>)
 8011968:	8011      	strh	r1, [r2, #0]
 801196a:	461a      	mov	r2, r3
 801196c:	683b      	ldr	r3, [r7, #0]
 801196e:	4413      	add	r3, r2
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	e010      	b.n	8011996 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8011974:	4b0b      	ldr	r3, [pc, #44]	@ (80119a4 <tcp_getoptbyte+0x68>)
 8011976:	881b      	ldrh	r3, [r3, #0]
 8011978:	1c5a      	adds	r2, r3, #1
 801197a:	b291      	uxth	r1, r2
 801197c:	4a09      	ldr	r2, [pc, #36]	@ (80119a4 <tcp_getoptbyte+0x68>)
 801197e:	8011      	strh	r1, [r2, #0]
 8011980:	b2da      	uxtb	r2, r3
 8011982:	4b09      	ldr	r3, [pc, #36]	@ (80119a8 <tcp_getoptbyte+0x6c>)
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	b2db      	uxtb	r3, r3
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 801198c:	4b04      	ldr	r3, [pc, #16]	@ (80119a0 <tcp_getoptbyte+0x64>)
 801198e:	681a      	ldr	r2, [r3, #0]
 8011990:	79fb      	ldrb	r3, [r7, #7]
 8011992:	4413      	add	r3, r2
 8011994:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011996:	4618      	mov	r0, r3
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	bc80      	pop	{r7}
 801199e:	4770      	bx	lr
 80119a0:	2000c7c8 	.word	0x2000c7c8
 80119a4:	2000c7cc 	.word	0x2000c7cc
 80119a8:	2000c7c6 	.word	0x2000c7c6
 80119ac:	2000c7c0 	.word	0x2000c7c0

080119b0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b084      	sub	sp, #16
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80119b8:	4b2e      	ldr	r3, [pc, #184]	@ (8011a74 <tcp_parseopt+0xc4>)
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d056      	beq.n	8011a6e <tcp_parseopt+0xbe>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80119c0:	4b2d      	ldr	r3, [pc, #180]	@ (8011a78 <tcp_parseopt+0xc8>)
 80119c2:	2200      	movs	r2, #0
 80119c4:	801a      	strh	r2, [r3, #0]
 80119c6:	e046      	b.n	8011a56 <tcp_parseopt+0xa6>
      u8_t opt = tcp_getoptbyte();
 80119c8:	f7ff ffb8 	bl	801193c <tcp_getoptbyte>
 80119cc:	4603      	mov	r3, r0
 80119ce:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80119d0:	7bfb      	ldrb	r3, [r7, #15]
 80119d2:	2b02      	cmp	r3, #2
 80119d4:	d006      	beq.n	80119e4 <tcp_parseopt+0x34>
 80119d6:	2b02      	cmp	r3, #2
 80119d8:	dc2a      	bgt.n	8011a30 <tcp_parseopt+0x80>
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d042      	beq.n	8011a64 <tcp_parseopt+0xb4>
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d038      	beq.n	8011a54 <tcp_parseopt+0xa4>
 80119e2:	e025      	b.n	8011a30 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80119e4:	f7ff ffaa 	bl	801193c <tcp_getoptbyte>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b04      	cmp	r3, #4
 80119ec:	d13c      	bne.n	8011a68 <tcp_parseopt+0xb8>
 80119ee:	4b22      	ldr	r3, [pc, #136]	@ (8011a78 <tcp_parseopt+0xc8>)
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	3301      	adds	r3, #1
 80119f4:	4a1f      	ldr	r2, [pc, #124]	@ (8011a74 <tcp_parseopt+0xc4>)
 80119f6:	8812      	ldrh	r2, [r2, #0]
 80119f8:	4293      	cmp	r3, r2
 80119fa:	da35      	bge.n	8011a68 <tcp_parseopt+0xb8>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80119fc:	f7ff ff9e 	bl	801193c <tcp_getoptbyte>
 8011a00:	4603      	mov	r3, r0
 8011a02:	021b      	lsls	r3, r3, #8
 8011a04:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8011a06:	f7ff ff99 	bl	801193c <tcp_getoptbyte>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	461a      	mov	r2, r3
 8011a0e:	89bb      	ldrh	r3, [r7, #12]
 8011a10:	4313      	orrs	r3, r2
 8011a12:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011a14:	89bb      	ldrh	r3, [r7, #12]
 8011a16:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011a1a:	d804      	bhi.n	8011a26 <tcp_parseopt+0x76>
 8011a1c:	89bb      	ldrh	r3, [r7, #12]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <tcp_parseopt+0x76>
 8011a22:	89ba      	ldrh	r2, [r7, #12]
 8011a24:	e001      	b.n	8011a2a <tcp_parseopt+0x7a>
 8011a26:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	865a      	strh	r2, [r3, #50]	@ 0x32
        break;
 8011a2e:	e012      	b.n	8011a56 <tcp_parseopt+0xa6>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8011a30:	f7ff ff84 	bl	801193c <tcp_getoptbyte>
 8011a34:	4603      	mov	r3, r0
 8011a36:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8011a38:	7afb      	ldrb	r3, [r7, #11]
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d916      	bls.n	8011a6c <tcp_parseopt+0xbc>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8011a3e:	7afb      	ldrb	r3, [r7, #11]
 8011a40:	b29a      	uxth	r2, r3
 8011a42:	4b0d      	ldr	r3, [pc, #52]	@ (8011a78 <tcp_parseopt+0xc8>)
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	4413      	add	r3, r2
 8011a48:	b29b      	uxth	r3, r3
 8011a4a:	3b02      	subs	r3, #2
 8011a4c:	b29a      	uxth	r2, r3
 8011a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8011a78 <tcp_parseopt+0xc8>)
 8011a50:	801a      	strh	r2, [r3, #0]
 8011a52:	e000      	b.n	8011a56 <tcp_parseopt+0xa6>
        break;
 8011a54:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a56:	4b08      	ldr	r3, [pc, #32]	@ (8011a78 <tcp_parseopt+0xc8>)
 8011a58:	881a      	ldrh	r2, [r3, #0]
 8011a5a:	4b06      	ldr	r3, [pc, #24]	@ (8011a74 <tcp_parseopt+0xc4>)
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d3b2      	bcc.n	80119c8 <tcp_parseopt+0x18>
 8011a62:	e004      	b.n	8011a6e <tcp_parseopt+0xbe>
        return;
 8011a64:	bf00      	nop
 8011a66:	e002      	b.n	8011a6e <tcp_parseopt+0xbe>
          return;
 8011a68:	bf00      	nop
 8011a6a:	e000      	b.n	8011a6e <tcp_parseopt+0xbe>
          return;
 8011a6c:	bf00      	nop
      }
    }
  }
}
 8011a6e:	3710      	adds	r7, #16
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	2000c7c4 	.word	0x2000c7c4
 8011a78:	2000c7cc 	.word	0x2000c7cc

08011a7c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011a80:	4b05      	ldr	r3, [pc, #20]	@ (8011a98 <tcp_trigger_input_pcb_close+0x1c>)
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	f043 0310 	orr.w	r3, r3, #16
 8011a88:	b2da      	uxtb	r2, r3
 8011a8a:	4b03      	ldr	r3, [pc, #12]	@ (8011a98 <tcp_trigger_input_pcb_close+0x1c>)
 8011a8c:	701a      	strb	r2, [r3, #0]
}
 8011a8e:	bf00      	nop
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bc80      	pop	{r7}
 8011a94:	4770      	bx	lr
 8011a96:	bf00      	nop
 8011a98:	2000c7dd 	.word	0x2000c7dd

08011a9c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b086      	sub	sp, #24
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	607b      	str	r3, [r7, #4]
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	817b      	strh	r3, [r7, #10]
 8011aaa:	4613      	mov	r3, r2
 8011aac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011aae:	897a      	ldrh	r2, [r7, #10]
 8011ab0:	893b      	ldrh	r3, [r7, #8]
 8011ab2:	4413      	add	r3, r2
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	3314      	adds	r3, #20
 8011ab8:	b29b      	uxth	r3, r3
 8011aba:	2200      	movs	r2, #0
 8011abc:	4619      	mov	r1, r3
 8011abe:	2001      	movs	r0, #1
 8011ac0:	f7fb fd80 	bl	800d5c4 <pbuf_alloc>
 8011ac4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d056      	beq.n	8011b7a <tcp_output_alloc_header+0xde>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011acc:	897b      	ldrh	r3, [r7, #10]
 8011ace:	3313      	adds	r3, #19
 8011ad0:	697a      	ldr	r2, [r7, #20]
 8011ad2:	8952      	ldrh	r2, [r2, #10]
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	db05      	blt.n	8011ae4 <tcp_output_alloc_header+0x48>
 8011ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8011b84 <tcp_output_alloc_header+0xe8>)
 8011ada:	2272      	movs	r2, #114	@ 0x72
 8011adc:	492a      	ldr	r1, [pc, #168]	@ (8011b88 <tcp_output_alloc_header+0xec>)
 8011ade:	482b      	ldr	r0, [pc, #172]	@ (8011b8c <tcp_output_alloc_header+0xf0>)
 8011ae0:	f003 f966 	bl	8014db0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	685b      	ldr	r3, [r3, #4]
 8011ae8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	8adb      	ldrh	r3, [r3, #22]
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7f8 fcb8 	bl	800a464 <lwip_htons>
 8011af4:	4603      	mov	r3, r0
 8011af6:	461a      	mov	r2, r3
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	8b1b      	ldrh	r3, [r3, #24]
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7f8 fcaf 	bl	800a464 <lwip_htons>
 8011b06:	4603      	mov	r3, r0
 8011b08:	461a      	mov	r2, r3
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7f8 fcb0 	bl	800a47e <lwip_htonl>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8011b24:	897b      	ldrh	r3, [r7, #10]
 8011b26:	089b      	lsrs	r3, r3, #2
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	3305      	adds	r3, #5
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	031b      	lsls	r3, r3, #12
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	f043 0310 	orr.w	r3, r3, #16
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7f8 fc93 	bl	800a464 <lwip_htons>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	461a      	mov	r2, r3
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7f8 fc8a 	bl	800a464 <lwip_htons>
 8011b50:	4603      	mov	r3, r0
 8011b52:	461a      	mov	r2, r3
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	741a      	strb	r2, [r3, #16]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	2200      	movs	r2, #0
 8011b66:	749a      	strb	r2, [r3, #18]
 8011b68:	2200      	movs	r2, #0
 8011b6a:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b70:	68fa      	ldr	r2, [r7, #12]
 8011b72:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011b74:	441a      	add	r2, r3
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8011b7a:	697b      	ldr	r3, [r7, #20]
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3718      	adds	r7, #24
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	08017874 	.word	0x08017874
 8011b88:	080178c0 	.word	0x080178c0
 8011b8c:	080178f0 	.word	0x080178f0

08011b90 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011b90:	b590      	push	{r4, r7, lr}
 8011b92:	b085      	sub	sp, #20
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d02d      	beq.n	8011bfc <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011ba4:	60fb      	str	r3, [r7, #12]
 8011ba6:	e002      	b.n	8011bae <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d1f8      	bne.n	8011ba8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	899b      	ldrh	r3, [r3, #12]
 8011bbc:	b29b      	uxth	r3, r3
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7f8 fc50 	bl	800a464 <lwip_htons>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	f003 0307 	and.w	r3, r3, #7
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d116      	bne.n	8011bfc <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	68db      	ldr	r3, [r3, #12]
 8011bd2:	899b      	ldrh	r3, [r3, #12]
 8011bd4:	b29c      	uxth	r4, r3
 8011bd6:	2001      	movs	r0, #1
 8011bd8:	f7f8 fc44 	bl	800a464 <lwip_htons>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	461a      	mov	r2, r3
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	4322      	orrs	r2, r4
 8011be6:	b292      	uxth	r2, r2
 8011be8:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	7e9b      	ldrb	r3, [r3, #26]
 8011bee:	f043 0320 	orr.w	r3, r3, #32
 8011bf2:	b2da      	uxtb	r2, r3
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	e004      	b.n	8011c06 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011bfc:	2101      	movs	r1, #1
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 f88c 	bl	8011d1c <tcp_enqueue_flags>
 8011c04:	4603      	mov	r3, r0
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3714      	adds	r7, #20
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd90      	pop	{r4, r7, pc}
	...

08011c10 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8011c10:	b590      	push	{r4, r7, lr}
 8011c12:	b087      	sub	sp, #28
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	603b      	str	r3, [r7, #0]
 8011c1c:	4613      	mov	r3, r2
 8011c1e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011c20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	b2db      	uxtb	r3, r3
 8011c28:	f003 0304 	and.w	r3, r3, #4
 8011c2c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011c2e:	2003      	movs	r0, #3
 8011c30:	f7fb fad8 	bl	800d1e4 <memp_malloc>
 8011c34:	6138      	str	r0, [r7, #16]
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d104      	bne.n	8011c46 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011c3c:	68b8      	ldr	r0, [r7, #8]
 8011c3e:	f7fc f839 	bl	800dcb4 <pbuf_free>
    return NULL;
 8011c42:	2300      	movs	r3, #0
 8011c44:	e060      	b.n	8011d08 <tcp_create_segment+0xf8>
  }
  seg->flags = optflags;
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011c4c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	2200      	movs	r2, #0
 8011c52:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	68ba      	ldr	r2, [r7, #8]
 8011c58:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	891a      	ldrh	r2, [r3, #8]
 8011c5e:	7dfb      	ldrb	r3, [r7, #23]
 8011c60:	b29b      	uxth	r3, r3
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d205      	bcs.n	8011c72 <tcp_create_segment+0x62>
 8011c66:	4b2a      	ldr	r3, [pc, #168]	@ (8011d10 <tcp_create_segment+0x100>)
 8011c68:	22ba      	movs	r2, #186	@ 0xba
 8011c6a:	492a      	ldr	r1, [pc, #168]	@ (8011d14 <tcp_create_segment+0x104>)
 8011c6c:	482a      	ldr	r0, [pc, #168]	@ (8011d18 <tcp_create_segment+0x108>)
 8011c6e:	f003 f89f 	bl	8014db0 <iprintf>
  seg->len = p->tot_len - optlen;
 8011c72:	68bb      	ldr	r3, [r7, #8]
 8011c74:	891a      	ldrh	r2, [r3, #8]
 8011c76:	7dfb      	ldrb	r3, [r7, #23]
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	1ad3      	subs	r3, r2, r3
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8011c82:	2114      	movs	r1, #20
 8011c84:	68b8      	ldr	r0, [r7, #8]
 8011c86:	f7fb fff1 	bl	800dc6c <pbuf_header>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d004      	beq.n	8011c9a <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c90:	6938      	ldr	r0, [r7, #16]
 8011c92:	f7fd fa01 	bl	800f098 <tcp_seg_free>
    return NULL;
 8011c96:	2300      	movs	r3, #0
 8011c98:	e036      	b.n	8011d08 <tcp_create_segment+0xf8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	685a      	ldr	r2, [r3, #4]
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	8ada      	ldrh	r2, [r3, #22]
 8011ca8:	693b      	ldr	r3, [r7, #16]
 8011caa:	68dc      	ldr	r4, [r3, #12]
 8011cac:	4610      	mov	r0, r2
 8011cae:	f7f8 fbd9 	bl	800a464 <lwip_htons>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	8b1a      	ldrh	r2, [r3, #24]
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	68dc      	ldr	r4, [r3, #12]
 8011cbe:	4610      	mov	r0, r2
 8011cc0:	f7f8 fbd0 	bl	800a464 <lwip_htons>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011cc8:	693b      	ldr	r3, [r7, #16]
 8011cca:	68dc      	ldr	r4, [r3, #12]
 8011ccc:	6838      	ldr	r0, [r7, #0]
 8011cce:	f7f8 fbd6 	bl	800a47e <lwip_htonl>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8011cd6:	7dfb      	ldrb	r3, [r7, #23]
 8011cd8:	089b      	lsrs	r3, r3, #2
 8011cda:	b2db      	uxtb	r3, r3
 8011cdc:	3305      	adds	r3, #5
 8011cde:	b29b      	uxth	r3, r3
 8011ce0:	031b      	lsls	r3, r3, #12
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	79fb      	ldrb	r3, [r7, #7]
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	4313      	orrs	r3, r2
 8011cea:	b29a      	uxth	r2, r3
 8011cec:	693b      	ldr	r3, [r7, #16]
 8011cee:	68dc      	ldr	r4, [r3, #12]
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	f7f8 fbb7 	bl	800a464 <lwip_htons>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	68db      	ldr	r3, [r3, #12]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	749a      	strb	r2, [r3, #18]
 8011d02:	2200      	movs	r2, #0
 8011d04:	74da      	strb	r2, [r3, #19]
  return seg;
 8011d06:	693b      	ldr	r3, [r7, #16]
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	371c      	adds	r7, #28
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd90      	pop	{r4, r7, pc}
 8011d10:	08017874 	.word	0x08017874
 8011d14:	08017918 	.word	0x08017918
 8011d18:	080178f0 	.word	0x080178f0

08011d1c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b08a      	sub	sp, #40	@ 0x28
 8011d20:	af02      	add	r7, sp, #8
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	460b      	mov	r3, r1
 8011d26:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011d30:	78fb      	ldrb	r3, [r7, #3]
 8011d32:	f003 0303 	and.w	r3, r3, #3
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d106      	bne.n	8011d48 <tcp_enqueue_flags+0x2c>
 8011d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8011ef8 <tcp_enqueue_flags+0x1dc>)
 8011d3c:	f240 321a 	movw	r2, #794	@ 0x31a
 8011d40:	496e      	ldr	r1, [pc, #440]	@ (8011efc <tcp_enqueue_flags+0x1e0>)
 8011d42:	486f      	ldr	r0, [pc, #444]	@ (8011f00 <tcp_enqueue_flags+0x1e4>)
 8011d44:	f003 f834 	bl	8014db0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011d4e:	2b08      	cmp	r3, #8
 8011d50:	d806      	bhi.n	8011d60 <tcp_enqueue_flags+0x44>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011d58:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8011d5c:	4293      	cmp	r3, r2
 8011d5e:	d90e      	bls.n	8011d7e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011d60:	78fb      	ldrb	r3, [r7, #3]
 8011d62:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d109      	bne.n	8011d7e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	7e9b      	ldrb	r3, [r3, #26]
 8011d6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011d72:	b2da      	uxtb	r2, r3
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011d78:	f04f 33ff 	mov.w	r3, #4294967295
 8011d7c:	e0b7      	b.n	8011eee <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8011d7e:	78fb      	ldrb	r3, [r7, #3]
 8011d80:	f003 0302 	and.w	r3, r3, #2
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d001      	beq.n	8011d8c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8011d88:	2301      	movs	r3, #1
 8011d8a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011d8c:	7ffb      	ldrb	r3, [r7, #31]
 8011d8e:	009b      	lsls	r3, r3, #2
 8011d90:	b2db      	uxtb	r3, r3
 8011d92:	f003 0304 	and.w	r3, r3, #4
 8011d96:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011d98:	7dfb      	ldrb	r3, [r7, #23]
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	4619      	mov	r1, r3
 8011da0:	2000      	movs	r0, #0
 8011da2:	f7fb fc0f 	bl	800d5c4 <pbuf_alloc>
 8011da6:	6138      	str	r0, [r7, #16]
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d109      	bne.n	8011dc2 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	7e9b      	ldrb	r3, [r3, #26]
 8011db2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011db6:	b2da      	uxtb	r2, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8011dc0:	e095      	b.n	8011eee <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	895a      	ldrh	r2, [r3, #10]
 8011dc6:	7dfb      	ldrb	r3, [r7, #23]
 8011dc8:	b29b      	uxth	r3, r3
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d206      	bcs.n	8011ddc <tcp_enqueue_flags+0xc0>
 8011dce:	4b4a      	ldr	r3, [pc, #296]	@ (8011ef8 <tcp_enqueue_flags+0x1dc>)
 8011dd0:	f44f 7250 	mov.w	r2, #832	@ 0x340
 8011dd4:	494b      	ldr	r1, [pc, #300]	@ (8011f04 <tcp_enqueue_flags+0x1e8>)
 8011dd6:	484a      	ldr	r0, [pc, #296]	@ (8011f00 <tcp_enqueue_flags+0x1e4>)
 8011dd8:	f002 ffea 	bl	8014db0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8011de0:	78fa      	ldrb	r2, [r7, #3]
 8011de2:	7ffb      	ldrb	r3, [r7, #31]
 8011de4:	9300      	str	r3, [sp, #0]
 8011de6:	460b      	mov	r3, r1
 8011de8:	6939      	ldr	r1, [r7, #16]
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f7ff ff10 	bl	8011c10 <tcp_create_segment>
 8011df0:	60f8      	str	r0, [r7, #12]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d109      	bne.n	8011e0c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	7e9b      	ldrb	r3, [r3, #26]
 8011dfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011e00:	b2da      	uxtb	r2, r3
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011e06:	f04f 33ff 	mov.w	r3, #4294967295
 8011e0a:	e070      	b.n	8011eee <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	68db      	ldr	r3, [r3, #12]
 8011e10:	f003 0303 	and.w	r3, r3, #3
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d006      	beq.n	8011e26 <tcp_enqueue_flags+0x10a>
 8011e18:	4b37      	ldr	r3, [pc, #220]	@ (8011ef8 <tcp_enqueue_flags+0x1dc>)
 8011e1a:	f240 3249 	movw	r2, #841	@ 0x349
 8011e1e:	493a      	ldr	r1, [pc, #232]	@ (8011f08 <tcp_enqueue_flags+0x1ec>)
 8011e20:	4837      	ldr	r0, [pc, #220]	@ (8011f00 <tcp_enqueue_flags+0x1e4>)
 8011e22:	f002 ffc5 	bl	8014db0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	891b      	ldrh	r3, [r3, #8]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d006      	beq.n	8011e3c <tcp_enqueue_flags+0x120>
 8011e2e:	4b32      	ldr	r3, [pc, #200]	@ (8011ef8 <tcp_enqueue_flags+0x1dc>)
 8011e30:	f240 324a 	movw	r2, #842	@ 0x34a
 8011e34:	4935      	ldr	r1, [pc, #212]	@ (8011f0c <tcp_enqueue_flags+0x1f0>)
 8011e36:	4832      	ldr	r0, [pc, #200]	@ (8011f00 <tcp_enqueue_flags+0x1e4>)
 8011e38:	f002 ffba 	bl	8014db0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d103      	bne.n	8011e4c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	68fa      	ldr	r2, [r7, #12]
 8011e48:	669a      	str	r2, [r3, #104]	@ 0x68
 8011e4a:	e00d      	b.n	8011e68 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011e50:	61bb      	str	r3, [r7, #24]
 8011e52:	e002      	b.n	8011e5a <tcp_enqueue_flags+0x13e>
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	61bb      	str	r3, [r7, #24]
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d1f8      	bne.n	8011e54 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011e70:	78fb      	ldrb	r3, [r7, #3]
 8011e72:	f003 0302 	and.w	r3, r3, #2
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d104      	bne.n	8011e84 <tcp_enqueue_flags+0x168>
 8011e7a:	78fb      	ldrb	r3, [r7, #3]
 8011e7c:	f003 0301 	and.w	r3, r3, #1
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d004      	beq.n	8011e8e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011e88:	1c5a      	adds	r2, r3, #1
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011e8e:	78fb      	ldrb	r3, [r7, #3]
 8011e90:	f003 0301 	and.w	r3, r3, #1
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d006      	beq.n	8011ea6 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	7e9b      	ldrb	r3, [r3, #26]
 8011e9c:	f043 0320 	orr.w	r3, r3, #32
 8011ea0:	b2da      	uxtb	r2, r3
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7fb ff96 	bl	800dddc <pbuf_clen>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011eba:	4413      	add	r3, r2
 8011ebc:	b29a      	uxth	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d00e      	beq.n	8011eec <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d10a      	bne.n	8011eec <tcp_enqueue_flags+0x1d0>
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d106      	bne.n	8011eec <tcp_enqueue_flags+0x1d0>
 8011ede:	4b06      	ldr	r3, [pc, #24]	@ (8011ef8 <tcp_enqueue_flags+0x1dc>)
 8011ee0:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8011ee4:	490a      	ldr	r1, [pc, #40]	@ (8011f10 <tcp_enqueue_flags+0x1f4>)
 8011ee6:	4806      	ldr	r0, [pc, #24]	@ (8011f00 <tcp_enqueue_flags+0x1e4>)
 8011ee8:	f002 ff62 	bl	8014db0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011eec:	2300      	movs	r3, #0
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3720      	adds	r7, #32
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd80      	pop	{r7, pc}
 8011ef6:	bf00      	nop
 8011ef8:	08017874 	.word	0x08017874
 8011efc:	08017b90 	.word	0x08017b90
 8011f00:	080178f0 	.word	0x080178f0
 8011f04:	08017be8 	.word	0x08017be8
 8011f08:	08017c24 	.word	0x08017c24
 8011f0c:	08017c3c 	.word	0x08017c3c
 8011f10:	08017c68 	.word	0x08017c68

08011f14 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011f14:	b590      	push	{r4, r7, lr}
 8011f16:	b08b      	sub	sp, #44	@ 0x2c
 8011f18:	af04      	add	r7, sp, #16
 8011f1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011f20:	7dbb      	ldrb	r3, [r7, #22]
 8011f22:	b29c      	uxth	r4, r3
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f7f8 faa8 	bl	800a47e <lwip_htonl>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2200      	movs	r2, #0
 8011f32:	4621      	mov	r1, r4
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7ff fdb1 	bl	8011a9c <tcp_output_alloc_header>
 8011f3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d109      	bne.n	8011f56 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	7e9b      	ldrb	r3, [r3, #26]
 8011f46:	f043 0303 	orr.w	r3, r3, #3
 8011f4a:	b2da      	uxtb	r2, r3
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011f50:	f06f 0301 	mvn.w	r3, #1
 8011f54:	e036      	b.n	8011fc4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	3304      	adds	r3, #4
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7f9 fc0e 	bl	800b77c <ip4_route>
 8011f60:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d102      	bne.n	8011f6e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8011f68:	23fc      	movs	r3, #252	@ 0xfc
 8011f6a:	75fb      	strb	r3, [r7, #23]
 8011f6c:	e012      	b.n	8011f94 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8011f6e:	6879      	ldr	r1, [r7, #4]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	1d18      	adds	r0, r3, #4
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	7a9c      	ldrb	r4, [r3, #10]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	7a5b      	ldrb	r3, [r3, #9]
 8011f7c:	68fa      	ldr	r2, [r7, #12]
 8011f7e:	9202      	str	r2, [sp, #8]
 8011f80:	2206      	movs	r2, #6
 8011f82:	9201      	str	r2, [sp, #4]
 8011f84:	9300      	str	r3, [sp, #0]
 8011f86:	4623      	mov	r3, r4
 8011f88:	4602      	mov	r2, r0
 8011f8a:	6938      	ldr	r0, [r7, #16]
 8011f8c:	f7f9 fd9e 	bl	800bacc <ip4_output_if>
 8011f90:	4603      	mov	r3, r0
 8011f92:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011f94:	6938      	ldr	r0, [r7, #16]
 8011f96:	f7fb fe8d 	bl	800dcb4 <pbuf_free>

  if (err != ERR_OK) {
 8011f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d007      	beq.n	8011fb2 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	7e9b      	ldrb	r3, [r3, #26]
 8011fa6:	f043 0303 	orr.w	r3, r3, #3
 8011faa:	b2da      	uxtb	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	769a      	strb	r2, [r3, #26]
 8011fb0:	e006      	b.n	8011fc0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	7e9b      	ldrb	r3, [r3, #26]
 8011fb6:	f023 0303 	bic.w	r3, r3, #3
 8011fba:	b2da      	uxtb	r2, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8011fc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	371c      	adds	r7, #28
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd90      	pop	{r4, r7, pc}

08011fcc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011fcc:	b5b0      	push	{r4, r5, r7, lr}
 8011fce:	b08a      	sub	sp, #40	@ 0x28
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	7d1b      	ldrb	r3, [r3, #20]
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d106      	bne.n	8011fea <tcp_output+0x1e>
 8011fdc:	4b99      	ldr	r3, [pc, #612]	@ (8012244 <tcp_output+0x278>)
 8011fde:	f44f 727b 	mov.w	r2, #1004	@ 0x3ec
 8011fe2:	4999      	ldr	r1, [pc, #612]	@ (8012248 <tcp_output+0x27c>)
 8011fe4:	4899      	ldr	r0, [pc, #612]	@ (801224c <tcp_output+0x280>)
 8011fe6:	f002 fee3 	bl	8014db0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011fea:	4b99      	ldr	r3, [pc, #612]	@ (8012250 <tcp_output+0x284>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d101      	bne.n	8011ff8 <tcp_output+0x2c>
    return ERR_OK;
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	e1cb      	b.n	8012390 <tcp_output+0x3c4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012004:	4293      	cmp	r3, r2
 8012006:	bf28      	it	cs
 8012008:	4613      	movcs	r3, r2
 801200a:	b29b      	uxth	r3, r3
 801200c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012012:	627b      	str	r3, [r7, #36]	@ 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	7e9b      	ldrb	r3, [r3, #26]
 8012018:	f003 0302 	and.w	r3, r3, #2
 801201c:	2b00      	cmp	r3, #0
 801201e:	d017      	beq.n	8012050 <tcp_output+0x84>
 8012020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012022:	2b00      	cmp	r3, #0
 8012024:	d00f      	beq.n	8012046 <tcp_output+0x7a>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8012026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	4618      	mov	r0, r3
 801202e:	f7f8 fa26 	bl	800a47e <lwip_htonl>
 8012032:	4602      	mov	r2, r0
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012038:	1ad3      	subs	r3, r2, r3
 801203a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801203c:	8912      	ldrh	r2, [r2, #8]
 801203e:	4413      	add	r3, r2
     (seg == NULL ||
 8012040:	69ba      	ldr	r2, [r7, #24]
 8012042:	429a      	cmp	r2, r3
 8012044:	d204      	bcs.n	8012050 <tcp_output+0x84>
     return tcp_send_empty_ack(pcb);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f7ff ff64 	bl	8011f14 <tcp_send_empty_ack>
 801204c:	4603      	mov	r3, r0
 801204e:	e19f      	b.n	8012390 <tcp_output+0x3c4>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012054:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012056:	6a3b      	ldr	r3, [r7, #32]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d007      	beq.n	801206c <tcp_output+0xa0>
    for (; useg->next != NULL; useg = useg->next);
 801205c:	e002      	b.n	8012064 <tcp_output+0x98>
 801205e:	6a3b      	ldr	r3, [r7, #32]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	623b      	str	r3, [r7, #32]
 8012064:	6a3b      	ldr	r3, [r7, #32]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d1f8      	bne.n	801205e <tcp_output+0x92>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	3304      	adds	r3, #4
 8012070:	4618      	mov	r0, r3
 8012072:	f7f9 fb83 	bl	800b77c <ip4_route>
 8012076:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d102      	bne.n	8012084 <tcp_output+0xb8>
    return ERR_RTE;
 801207e:	f06f 0303 	mvn.w	r3, #3
 8012082:	e185      	b.n	8012390 <tcp_output+0x3c4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d003      	beq.n	8012092 <tcp_output+0xc6>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d111      	bne.n	80120b6 <tcp_output+0xea>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d002      	beq.n	801209e <tcp_output+0xd2>
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	3304      	adds	r3, #4
 801209c:	e000      	b.n	80120a0 <tcp_output+0xd4>
 801209e:	2300      	movs	r3, #0
 80120a0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d102      	bne.n	80120ae <tcp_output+0xe2>
      return ERR_RTE;
 80120a8:	f06f 0303 	mvn.w	r3, #3
 80120ac:	e170      	b.n	8012390 <tcp_output+0x3c4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	681a      	ldr	r2, [r3, #0]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 80120b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	f000 813f 	beq.w	801233c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80120be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120c0:	68db      	ldr	r3, [r3, #12]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7f8 f9da 	bl	800a47e <lwip_htonl>
 80120ca:	4602      	mov	r2, r0
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120d0:	1ad3      	subs	r3, r2, r3
 80120d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120d4:	8912      	ldrh	r2, [r2, #8]
 80120d6:	4413      	add	r3, r2
  if (seg != NULL &&
 80120d8:	69ba      	ldr	r2, [r7, #24]
 80120da:	429a      	cmp	r2, r3
 80120dc:	f080 812e 	bcs.w	801233c <tcp_output+0x370>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	f000 812a 	beq.w	801233c <tcp_output+0x370>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80120ee:	461a      	mov	r2, r3
 80120f0:	69bb      	ldr	r3, [r7, #24]
 80120f2:	4293      	cmp	r3, r2
 80120f4:	f040 8122 	bne.w	801233c <tcp_output+0x370>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	f040 811d 	bne.w	801233c <tcp_output+0x370>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8012108:	2b00      	cmp	r3, #0
 801210a:	f040 812c 	bne.w	8012366 <tcp_output+0x39a>
      pcb->persist_cnt = 0;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2200      	movs	r2, #0
 8012112:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2201      	movs	r2, #1
 801211a:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
    }
    goto output_done;
 801211e:	e122      	b.n	8012366 <tcp_output+0x39a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012122:	68db      	ldr	r3, [r3, #12]
 8012124:	899b      	ldrh	r3, [r3, #12]
 8012126:	b29b      	uxth	r3, r3
 8012128:	4618      	mov	r0, r3
 801212a:	f7f8 f99b 	bl	800a464 <lwip_htons>
 801212e:	4603      	mov	r3, r0
 8012130:	f003 0304 	and.w	r3, r3, #4
 8012134:	2b00      	cmp	r3, #0
 8012136:	d006      	beq.n	8012146 <tcp_output+0x17a>
 8012138:	4b42      	ldr	r3, [pc, #264]	@ (8012244 <tcp_output+0x278>)
 801213a:	f240 4245 	movw	r2, #1093	@ 0x445
 801213e:	4945      	ldr	r1, [pc, #276]	@ (8012254 <tcp_output+0x288>)
 8012140:	4842      	ldr	r0, [pc, #264]	@ (801224c <tcp_output+0x280>)
 8012142:	f002 fe35 	bl	8014db0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801214a:	2b00      	cmp	r3, #0
 801214c:	d01f      	beq.n	801218e <tcp_output+0x1c2>
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	7e9b      	ldrb	r3, [r3, #26]
 8012152:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012156:	2b00      	cmp	r3, #0
 8012158:	d119      	bne.n	801218e <tcp_output+0x1c2>
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801215e:	2b00      	cmp	r3, #0
 8012160:	d00b      	beq.n	801217a <tcp_output+0x1ae>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d110      	bne.n	801218e <tcp_output+0x1c2>
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012170:	891a      	ldrh	r2, [r3, #8]
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012176:	429a      	cmp	r2, r3
 8012178:	d209      	bcs.n	801218e <tcp_output+0x1c2>
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012180:	2b00      	cmp	r3, #0
 8012182:	d004      	beq.n	801218e <tcp_output+0x1c2>
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801218a:	2b08      	cmp	r3, #8
 801218c:	d901      	bls.n	8012192 <tcp_output+0x1c6>
 801218e:	2301      	movs	r3, #1
 8012190:	e000      	b.n	8012194 <tcp_output+0x1c8>
 8012192:	2300      	movs	r3, #0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d106      	bne.n	80121a6 <tcp_output+0x1da>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	7e9b      	ldrb	r3, [r3, #26]
 801219c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	f000 80e2 	beq.w	801236a <tcp_output+0x39e>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	7d1b      	ldrb	r3, [r3, #20]
 80121aa:	2b02      	cmp	r3, #2
 80121ac:	d00d      	beq.n	80121ca <tcp_output+0x1fe>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80121ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b0:	68db      	ldr	r3, [r3, #12]
 80121b2:	899b      	ldrh	r3, [r3, #12]
 80121b4:	b29c      	uxth	r4, r3
 80121b6:	2010      	movs	r0, #16
 80121b8:	f7f8 f954 	bl	800a464 <lwip_htons>
 80121bc:	4603      	mov	r3, r0
 80121be:	461a      	mov	r2, r3
 80121c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c2:	68db      	ldr	r3, [r3, #12]
 80121c4:	4322      	orrs	r2, r4
 80121c6:	b292      	uxth	r2, r2
 80121c8:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80121ca:	697a      	ldr	r2, [r7, #20]
 80121cc:	6879      	ldr	r1, [r7, #4]
 80121ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121d0:	f000 f8e2 	bl	8012398 <tcp_output_segment>
 80121d4:	4603      	mov	r3, r0
 80121d6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80121d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d009      	beq.n	80121f4 <tcp_output+0x228>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	7e9b      	ldrb	r3, [r3, #26]
 80121e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80121e8:	b2da      	uxtb	r2, r3
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	769a      	strb	r2, [r3, #26]
      return err;
 80121ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121f2:	e0cd      	b.n	8012390 <tcp_output+0x3c4>
    }
    pcb->unsent = seg->next;
 80121f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	669a      	str	r2, [r3, #104]	@ 0x68
    if (pcb->state != SYN_SENT) {
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	7d1b      	ldrb	r3, [r3, #20]
 8012200:	2b02      	cmp	r3, #2
 8012202:	d006      	beq.n	8012212 <tcp_output+0x246>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	7e9b      	ldrb	r3, [r3, #26]
 8012208:	f023 0303 	bic.w	r3, r3, #3
 801220c:	b2da      	uxtb	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012214:	68db      	ldr	r3, [r3, #12]
 8012216:	685b      	ldr	r3, [r3, #4]
 8012218:	4618      	mov	r0, r3
 801221a:	f7f8 f930 	bl	800a47e <lwip_htonl>
 801221e:	4604      	mov	r4, r0
 8012220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012222:	891b      	ldrh	r3, [r3, #8]
 8012224:	461d      	mov	r5, r3
 8012226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	899b      	ldrh	r3, [r3, #12]
 801222c:	b29b      	uxth	r3, r3
 801222e:	4618      	mov	r0, r3
 8012230:	f7f8 f918 	bl	800a464 <lwip_htons>
 8012234:	4603      	mov	r3, r0
 8012236:	f003 0303 	and.w	r3, r3, #3
 801223a:	2b00      	cmp	r3, #0
 801223c:	d00c      	beq.n	8012258 <tcp_output+0x28c>
 801223e:	2301      	movs	r3, #1
 8012240:	e00b      	b.n	801225a <tcp_output+0x28e>
 8012242:	bf00      	nop
 8012244:	08017874 	.word	0x08017874
 8012248:	08017c90 	.word	0x08017c90
 801224c:	080178f0 	.word	0x080178f0
 8012250:	2000c7e4 	.word	0x2000c7e4
 8012254:	08017cb8 	.word	0x08017cb8
 8012258:	2300      	movs	r3, #0
 801225a:	442b      	add	r3, r5
 801225c:	4423      	add	r3, r4
 801225e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	1ad3      	subs	r3, r2, r3
 8012268:	2b00      	cmp	r3, #0
 801226a:	da02      	bge.n	8012272 <tcp_output+0x2a6>
      pcb->snd_nxt = snd_nxt;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	68ba      	ldr	r2, [r7, #8]
 8012270:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012274:	891b      	ldrh	r3, [r3, #8]
 8012276:	461c      	mov	r4, r3
 8012278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	899b      	ldrh	r3, [r3, #12]
 801227e:	b29b      	uxth	r3, r3
 8012280:	4618      	mov	r0, r3
 8012282:	f7f8 f8ef 	bl	800a464 <lwip_htons>
 8012286:	4603      	mov	r3, r0
 8012288:	f003 0303 	and.w	r3, r3, #3
 801228c:	2b00      	cmp	r3, #0
 801228e:	d001      	beq.n	8012294 <tcp_output+0x2c8>
 8012290:	2301      	movs	r3, #1
 8012292:	e000      	b.n	8012296 <tcp_output+0x2ca>
 8012294:	2300      	movs	r3, #0
 8012296:	4423      	add	r3, r4
 8012298:	2b00      	cmp	r3, #0
 801229a:	d049      	beq.n	8012330 <tcp_output+0x364>
      seg->next = NULL;
 801229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801229e:	2200      	movs	r2, #0
 80122a0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d105      	bne.n	80122b6 <tcp_output+0x2ea>
        pcb->unacked = seg;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122ae:	66da      	str	r2, [r3, #108]	@ 0x6c
        useg = seg;
 80122b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b2:	623b      	str	r3, [r7, #32]
 80122b4:	e03f      	b.n	8012336 <tcp_output+0x36a>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80122b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122b8:	68db      	ldr	r3, [r3, #12]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	4618      	mov	r0, r3
 80122be:	f7f8 f8de 	bl	800a47e <lwip_htonl>
 80122c2:	4604      	mov	r4, r0
 80122c4:	6a3b      	ldr	r3, [r7, #32]
 80122c6:	68db      	ldr	r3, [r3, #12]
 80122c8:	685b      	ldr	r3, [r3, #4]
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7f8 f8d7 	bl	800a47e <lwip_htonl>
 80122d0:	4603      	mov	r3, r0
 80122d2:	1ae3      	subs	r3, r4, r3
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	da24      	bge.n	8012322 <tcp_output+0x356>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	336c      	adds	r3, #108	@ 0x6c
 80122dc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80122de:	e002      	b.n	80122e6 <tcp_output+0x31a>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 80122e0:	69fb      	ldr	r3, [r7, #28]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80122e6:	69fb      	ldr	r3, [r7, #28]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d011      	beq.n	8012312 <tcp_output+0x346>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	68db      	ldr	r3, [r3, #12]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7f8 f8c1 	bl	800a47e <lwip_htonl>
 80122fc:	4604      	mov	r4, r0
 80122fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012300:	68db      	ldr	r3, [r3, #12]
 8012302:	685b      	ldr	r3, [r3, #4]
 8012304:	4618      	mov	r0, r3
 8012306:	f7f8 f8ba 	bl	800a47e <lwip_htonl>
 801230a:	4603      	mov	r3, r0
 801230c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801230e:	2b00      	cmp	r3, #0
 8012310:	dbe6      	blt.n	80122e0 <tcp_output+0x314>
          }
          seg->next = (*cur_seg);
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012318:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801231e:	601a      	str	r2, [r3, #0]
 8012320:	e009      	b.n	8012336 <tcp_output+0x36a>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012322:	6a3b      	ldr	r3, [r7, #32]
 8012324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012326:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012328:	6a3b      	ldr	r3, [r7, #32]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	623b      	str	r3, [r7, #32]
 801232e:	e002      	b.n	8012336 <tcp_output+0x36a>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012330:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012332:	f7fc feb1 	bl	800f098 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801233a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233e:	2b00      	cmp	r3, #0
 8012340:	d015      	beq.n	801236e <tcp_output+0x3a2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	4618      	mov	r0, r3
 801234a:	f7f8 f898 	bl	800a47e <lwip_htonl>
 801234e:	4602      	mov	r2, r0
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012354:	1ad3      	subs	r3, r2, r3
 8012356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012358:	8912      	ldrh	r2, [r2, #8]
 801235a:	4413      	add	r3, r2
  while (seg != NULL &&
 801235c:	69ba      	ldr	r2, [r7, #24]
 801235e:	429a      	cmp	r2, r3
 8012360:	f4bf aede 	bcs.w	8012120 <tcp_output+0x154>
  }
output_done:
 8012364:	e003      	b.n	801236e <tcp_output+0x3a2>
    goto output_done;
 8012366:	bf00      	nop
 8012368:	e002      	b.n	8012370 <tcp_output+0x3a4>
      break;
 801236a:	bf00      	nop
 801236c:	e000      	b.n	8012370 <tcp_output+0x3a4>
output_done:
 801236e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012374:	2b00      	cmp	r3, #0
 8012376:	d103      	bne.n	8012380 <tcp_output+0x3b4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2200      	movs	r2, #0
 801237c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	7e9b      	ldrb	r3, [r3, #26]
 8012384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012388:	b2da      	uxtb	r2, r3
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801238e:	2300      	movs	r3, #0
}
 8012390:	4618      	mov	r0, r3
 8012392:	3728      	adds	r7, #40	@ 0x28
 8012394:	46bd      	mov	sp, r7
 8012396:	bdb0      	pop	{r4, r5, r7, pc}

08012398 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012398:	b5b0      	push	{r4, r5, r7, lr}
 801239a:	b08c      	sub	sp, #48	@ 0x30
 801239c:	af04      	add	r7, sp, #16
 801239e:	60f8      	str	r0, [r7, #12]
 80123a0:	60b9      	str	r1, [r7, #8]
 80123a2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	89db      	ldrh	r3, [r3, #14]
 80123aa:	2b01      	cmp	r3, #1
 80123ac:	d001      	beq.n	80123b2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80123ae:	2300      	movs	r3, #0
 80123b0:	e08a      	b.n	80124c8 <tcp_output_segment+0x130>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	68dc      	ldr	r4, [r3, #12]
 80123ba:	4610      	mov	r0, r2
 80123bc:	f7f8 f85f 	bl	800a47e <lwip_htonl>
 80123c0:	4603      	mov	r3, r0
 80123c2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	68dc      	ldr	r4, [r3, #12]
 80123cc:	4610      	mov	r0, r2
 80123ce:	f7f8 f849 	bl	800a464 <lwip_htons>
 80123d2:	4603      	mov	r3, r0
 80123d4:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80123da:	68ba      	ldr	r2, [r7, #8]
 80123dc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80123de:	441a      	add	r2, r3
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	68db      	ldr	r3, [r3, #12]
 80123e8:	3314      	adds	r3, #20
 80123ea:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	7a9b      	ldrb	r3, [r3, #10]
 80123f0:	f003 0301 	and.w	r3, r3, #1
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d014      	beq.n	8012422 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	3304      	adds	r3, #4
 80123fc:	4619      	mov	r1, r3
 80123fe:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012402:	f7fd f8b1 	bl	800f568 <tcp_eff_send_mss_impl>
 8012406:	4603      	mov	r3, r0
 8012408:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801240a:	8b7b      	ldrh	r3, [r7, #26]
 801240c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012410:	4618      	mov	r0, r3
 8012412:	f7f8 f834 	bl	800a47e <lwip_htonl>
 8012416:	4602      	mov	r2, r0
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801241c:	69fb      	ldr	r3, [r7, #28]
 801241e:	3304      	adds	r3, #4
 8012420:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012428:	2b00      	cmp	r3, #0
 801242a:	da02      	bge.n	8012432 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	2200      	movs	r2, #0
 8012430:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012436:	2b00      	cmp	r3, #0
 8012438:	d10c      	bne.n	8012454 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 801243a:	4b25      	ldr	r3, [pc, #148]	@ (80124d0 <tcp_output_segment+0x138>)
 801243c:	681a      	ldr	r2, [r3, #0]
 801243e:	68bb      	ldr	r3, [r7, #8]
 8012440:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	4618      	mov	r0, r3
 801244a:	f7f8 f818 	bl	800a47e <lwip_htonl>
 801244e:	4602      	mov	r2, r0
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	68da      	ldr	r2, [r3, #12]
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	1ad3      	subs	r3, r2, r3
 8012460:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	8959      	ldrh	r1, [r3, #10]
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	8b3a      	ldrh	r2, [r7, #24]
 801246e:	1a8a      	subs	r2, r1, r2
 8012470:	b292      	uxth	r2, r2
 8012472:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	8919      	ldrh	r1, [r3, #8]
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	8b3a      	ldrh	r2, [r7, #24]
 8012480:	1a8a      	subs	r2, r1, r2
 8012482:	b292      	uxth	r2, r2
 8012484:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	68fa      	ldr	r2, [r7, #12]
 801248c:	68d2      	ldr	r2, [r2, #12]
 801248e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	2200      	movs	r2, #0
 8012496:	741a      	strb	r2, [r3, #16]
 8012498:	2200      	movs	r2, #0
 801249a:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6858      	ldr	r0, [r3, #4]
 80124a0:	68b9      	ldr	r1, [r7, #8]
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	1d1c      	adds	r4, r3, #4
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	7a9d      	ldrb	r5, [r3, #10]
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	7a5b      	ldrb	r3, [r3, #9]
 80124ae:	687a      	ldr	r2, [r7, #4]
 80124b0:	9202      	str	r2, [sp, #8]
 80124b2:	2206      	movs	r2, #6
 80124b4:	9201      	str	r2, [sp, #4]
 80124b6:	9300      	str	r3, [sp, #0]
 80124b8:	462b      	mov	r3, r5
 80124ba:	4622      	mov	r2, r4
 80124bc:	f7f9 fb06 	bl	800bacc <ip4_output_if>
 80124c0:	4603      	mov	r3, r0
 80124c2:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80124c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3720      	adds	r7, #32
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bdb0      	pop	{r4, r5, r7, pc}
 80124d0:	2000c798 	.word	0x2000c798

080124d4 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b08c      	sub	sp, #48	@ 0x30
 80124d8:	af04      	add	r7, sp, #16
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	60b9      	str	r1, [r7, #8]
 80124de:	607a      	str	r2, [r7, #4]
 80124e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 80124e2:	2200      	movs	r2, #0
 80124e4:	2114      	movs	r1, #20
 80124e6:	2001      	movs	r0, #1
 80124e8:	f7fb f86c 	bl	800d5c4 <pbuf_alloc>
 80124ec:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d05b      	beq.n	80125ac <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80124f4:	69fb      	ldr	r3, [r7, #28]
 80124f6:	895b      	ldrh	r3, [r3, #10]
 80124f8:	2b13      	cmp	r3, #19
 80124fa:	d806      	bhi.n	801250a <tcp_rst+0x36>
 80124fc:	4b2d      	ldr	r3, [pc, #180]	@ (80125b4 <tcp_rst+0xe0>)
 80124fe:	f240 524c 	movw	r2, #1356	@ 0x54c
 8012502:	492d      	ldr	r1, [pc, #180]	@ (80125b8 <tcp_rst+0xe4>)
 8012504:	482d      	ldr	r0, [pc, #180]	@ (80125bc <tcp_rst+0xe8>)
 8012506:	f002 fc53 	bl	8014db0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801250a:	69fb      	ldr	r3, [r7, #28]
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8012510:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012512:	4618      	mov	r0, r3
 8012514:	f7f7 ffa6 	bl	800a464 <lwip_htons>
 8012518:	4603      	mov	r3, r0
 801251a:	461a      	mov	r2, r3
 801251c:	69bb      	ldr	r3, [r7, #24]
 801251e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8012520:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012522:	4618      	mov	r0, r3
 8012524:	f7f7 ff9e 	bl	800a464 <lwip_htons>
 8012528:	4603      	mov	r3, r0
 801252a:	461a      	mov	r2, r3
 801252c:	69bb      	ldr	r3, [r7, #24]
 801252e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f7f7 ffa4 	bl	800a47e <lwip_htonl>
 8012536:	4602      	mov	r2, r0
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801253c:	68b8      	ldr	r0, [r7, #8]
 801253e:	f7f7 ff9e 	bl	800a47e <lwip_htonl>
 8012542:	4602      	mov	r2, r0
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8012548:	f245 0014 	movw	r0, #20500	@ 0x5014
 801254c:	f7f7 ff8a 	bl	800a464 <lwip_htons>
 8012550:	4603      	mov	r3, r0
 8012552:	461a      	mov	r2, r3
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8012558:	69bb      	ldr	r3, [r7, #24]
 801255a:	2200      	movs	r2, #0
 801255c:	f042 0208 	orr.w	r2, r2, #8
 8012560:	739a      	strb	r2, [r3, #14]
 8012562:	2200      	movs	r2, #0
 8012564:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8012568:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801256a:	69bb      	ldr	r3, [r7, #24]
 801256c:	2200      	movs	r2, #0
 801256e:	741a      	strb	r2, [r3, #16]
 8012570:	2200      	movs	r2, #0
 8012572:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8012574:	69bb      	ldr	r3, [r7, #24]
 8012576:	2200      	movs	r2, #0
 8012578:	749a      	strb	r2, [r3, #18]
 801257a:	2200      	movs	r2, #0
 801257c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 801257e:	6838      	ldr	r0, [r7, #0]
 8012580:	f7f9 f8fc 	bl	800b77c <ip4_route>
 8012584:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d00b      	beq.n	80125a4 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	9302      	str	r3, [sp, #8]
 8012590:	2306      	movs	r3, #6
 8012592:	9301      	str	r3, [sp, #4]
 8012594:	2300      	movs	r3, #0
 8012596:	9300      	str	r3, [sp, #0]
 8012598:	23ff      	movs	r3, #255	@ 0xff
 801259a:	683a      	ldr	r2, [r7, #0]
 801259c:	6879      	ldr	r1, [r7, #4]
 801259e:	69f8      	ldr	r0, [r7, #28]
 80125a0:	f7f9 fa94 	bl	800bacc <ip4_output_if>
  }
  pbuf_free(p);
 80125a4:	69f8      	ldr	r0, [r7, #28]
 80125a6:	f7fb fb85 	bl	800dcb4 <pbuf_free>
 80125aa:	e000      	b.n	80125ae <tcp_rst+0xda>
    return;
 80125ac:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80125ae:	3720      	adds	r7, #32
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	08017874 	.word	0x08017874
 80125b8:	080178c0 	.word	0x080178c0
 80125bc:	080178f0 	.word	0x080178f0

080125c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b084      	sub	sp, #16
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d029      	beq.n	8012624 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125d4:	60fb      	str	r3, [r7, #12]
 80125d6:	e002      	b.n	80125de <tcp_rexmit_rto+0x1e>
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	60fb      	str	r3, [r7, #12]
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d1f8      	bne.n	80125d8 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	669a      	str	r2, [r3, #104]	@ 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2200      	movs	r2, #0
 80125fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012602:	2bff      	cmp	r3, #255	@ 0xff
 8012604:	d007      	beq.n	8012616 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801260c:	3301      	adds	r3, #1
 801260e:	b2da      	uxtb	r2, r3
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2200      	movs	r2, #0
 801261a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f7ff fcd5 	bl	8011fcc <tcp_output>
 8012622:	e000      	b.n	8012626 <tcp_rexmit_rto+0x66>
    return;
 8012624:	bf00      	nop
}
 8012626:	3710      	adds	r7, #16
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}

0801262c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 801262c:	b590      	push	{r4, r7, lr}
 801262e:	b085      	sub	sp, #20
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012638:	2b00      	cmp	r3, #0
 801263a:	d043      	beq.n	80126c4 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012640:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8012642:	68bb      	ldr	r3, [r7, #8]
 8012644:	681a      	ldr	r2, [r3, #0]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	66da      	str	r2, [r3, #108]	@ 0x6c

  cur_seg = &(pcb->unsent);
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	3368      	adds	r3, #104	@ 0x68
 801264e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012650:	e002      	b.n	8012658 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d011      	beq.n	8012684 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	68db      	ldr	r3, [r3, #12]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	4618      	mov	r0, r3
 801266a:	f7f7 ff08 	bl	800a47e <lwip_htonl>
 801266e:	4604      	mov	r4, r0
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	68db      	ldr	r3, [r3, #12]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	4618      	mov	r0, r3
 8012678:	f7f7 ff01 	bl	800a47e <lwip_htonl>
 801267c:	4603      	mov	r3, r0
 801267e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012680:	2b00      	cmp	r3, #0
 8012682:	dbe6      	blt.n	8012652 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	68ba      	ldr	r2, [r7, #8]
 8012690:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d103      	bne.n	80126a2 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2200      	movs	r2, #0
 801269e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126a8:	2bff      	cmp	r3, #255	@ 0xff
 80126aa:	d007      	beq.n	80126bc <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126b2:	3301      	adds	r3, #1
 80126b4:	b2da      	uxtb	r2, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2200      	movs	r2, #0
 80126c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80126c2:	e000      	b.n	80126c6 <tcp_rexmit+0x9a>
    return;
 80126c4:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	bd90      	pop	{r4, r7, pc}

080126cc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d041      	beq.n	8012760 <tcp_rexmit_fast+0x94>
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	7e9b      	ldrb	r3, [r3, #26]
 80126e0:	f003 0304 	and.w	r3, r3, #4
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d13b      	bne.n	8012760 <tcp_rexmit_fast+0x94>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f7ff ff9f 	bl	801262c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80126fa:	4293      	cmp	r3, r2
 80126fc:	bf28      	it	cs
 80126fe:	4613      	movcs	r3, r2
 8012700:	b29b      	uxth	r3, r3
 8012702:	0fda      	lsrs	r2, r3, #31
 8012704:	4413      	add	r3, r2
 8012706:	105b      	asrs	r3, r3, #1
 8012708:	b29a      	uxth	r2, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012716:	461a      	mov	r2, r3
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801271c:	005b      	lsls	r3, r3, #1
 801271e:	429a      	cmp	r2, r3
 8012720:	d206      	bcs.n	8012730 <tcp_rexmit_fast+0x64>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012726:	005b      	lsls	r3, r3, #1
 8012728:	b29a      	uxth	r2, r3
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801273a:	4619      	mov	r1, r3
 801273c:	0049      	lsls	r1, r1, #1
 801273e:	440b      	add	r3, r1
 8012740:	b29b      	uxth	r3, r3
 8012742:	4413      	add	r3, r2
 8012744:	b29a      	uxth	r2, r3
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->flags |= TF_INFR;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	7e9b      	ldrb	r3, [r3, #26]
 8012750:	f043 0304 	orr.w	r3, r3, #4
 8012754:	b2da      	uxtb	r2, r3
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	2200      	movs	r2, #0
 801275e:	861a      	strh	r2, [r3, #48]	@ 0x30
  }
}
 8012760:	bf00      	nop
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b08a      	sub	sp, #40	@ 0x28
 801276c:	af04      	add	r7, sp, #16
 801276e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012774:	3b01      	subs	r3, #1
 8012776:	4618      	mov	r0, r3
 8012778:	f7f7 fe81 	bl	800a47e <lwip_htonl>
 801277c:	4603      	mov	r3, r0
 801277e:	2200      	movs	r2, #0
 8012780:	2100      	movs	r1, #0
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	f7ff f98a 	bl	8011a9c <tcp_output_alloc_header>
 8012788:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d102      	bne.n	8012796 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012790:	f04f 33ff 	mov.w	r3, #4294967295
 8012794:	e021      	b.n	80127da <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	3304      	adds	r3, #4
 801279a:	4618      	mov	r0, r3
 801279c:	f7f8 ffee 	bl	800b77c <ip4_route>
 80127a0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d102      	bne.n	80127ae <tcp_keepalive+0x46>
    err = ERR_RTE;
 80127a8:	23fc      	movs	r3, #252	@ 0xfc
 80127aa:	75fb      	strb	r3, [r7, #23]
 80127ac:	e010      	b.n	80127d0 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80127ae:	6879      	ldr	r1, [r7, #4]
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	1d1a      	adds	r2, r3, #4
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	7a98      	ldrb	r0, [r3, #10]
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	9302      	str	r3, [sp, #8]
 80127bc:	2306      	movs	r3, #6
 80127be:	9301      	str	r3, [sp, #4]
 80127c0:	2300      	movs	r3, #0
 80127c2:	9300      	str	r3, [sp, #0]
 80127c4:	4603      	mov	r3, r0
 80127c6:	6938      	ldr	r0, [r7, #16]
 80127c8:	f7f9 f980 	bl	800bacc <ip4_output_if>
 80127cc:	4603      	mov	r3, r0
 80127ce:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80127d0:	6938      	ldr	r0, [r7, #16]
 80127d2:	f7fb fa6f 	bl	800dcb4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80127d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3718      	adds	r7, #24
 80127de:	46bd      	mov	sp, r7
 80127e0:	bd80      	pop	{r7, pc}

080127e2 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80127e2:	b590      	push	{r4, r7, lr}
 80127e4:	b08f      	sub	sp, #60	@ 0x3c
 80127e6:	af04      	add	r7, sp, #16
 80127e8:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127ee:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80127f0:	6a3b      	ldr	r3, [r7, #32]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d102      	bne.n	80127fc <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80127fa:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80127fc:	6a3b      	ldr	r3, [r7, #32]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d101      	bne.n	8012806 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8012802:	2300      	movs	r3, #0
 8012804:	e085      	b.n	8012912 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012806:	6a3b      	ldr	r3, [r7, #32]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	899b      	ldrh	r3, [r3, #12]
 801280c:	b29b      	uxth	r3, r3
 801280e:	4618      	mov	r0, r3
 8012810:	f7f7 fe28 	bl	800a464 <lwip_htons>
 8012814:	4603      	mov	r3, r0
 8012816:	f003 0301 	and.w	r3, r3, #1
 801281a:	2b00      	cmp	r3, #0
 801281c:	d005      	beq.n	801282a <tcp_zero_window_probe+0x48>
 801281e:	6a3b      	ldr	r3, [r7, #32]
 8012820:	891b      	ldrh	r3, [r3, #8]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d101      	bne.n	801282a <tcp_zero_window_probe+0x48>
 8012826:	2301      	movs	r3, #1
 8012828:	e000      	b.n	801282c <tcp_zero_window_probe+0x4a>
 801282a:	2300      	movs	r3, #0
 801282c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801282e:	7ffb      	ldrb	r3, [r7, #31]
 8012830:	2b00      	cmp	r3, #0
 8012832:	bf0c      	ite	eq
 8012834:	2301      	moveq	r3, #1
 8012836:	2300      	movne	r3, #0
 8012838:	b2db      	uxtb	r3, r3
 801283a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801283c:	6a3b      	ldr	r3, [r7, #32]
 801283e:	68db      	ldr	r3, [r3, #12]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	8bba      	ldrh	r2, [r7, #28]
 8012844:	2100      	movs	r1, #0
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7ff f928 	bl	8011a9c <tcp_output_alloc_header>
 801284c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d102      	bne.n	801285a <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012854:	f04f 33ff 	mov.w	r3, #4294967295
 8012858:	e05b      	b.n	8012912 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801285a:	69bb      	ldr	r3, [r7, #24]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012860:	7ffb      	ldrb	r3, [r7, #31]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d00e      	beq.n	8012884 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	899b      	ldrh	r3, [r3, #12]
 801286a:	b29b      	uxth	r3, r3
 801286c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012870:	b29c      	uxth	r4, r3
 8012872:	2011      	movs	r0, #17
 8012874:	f7f7 fdf6 	bl	800a464 <lwip_htons>
 8012878:	4603      	mov	r3, r0
 801287a:	4323      	orrs	r3, r4
 801287c:	b29a      	uxth	r2, r3
 801287e:	697b      	ldr	r3, [r7, #20]
 8012880:	819a      	strh	r2, [r3, #12]
 8012882:	e010      	b.n	80128a6 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012884:	69bb      	ldr	r3, [r7, #24]
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	3314      	adds	r3, #20
 801288a:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801288c:	6a3b      	ldr	r3, [r7, #32]
 801288e:	6858      	ldr	r0, [r3, #4]
 8012890:	6a3b      	ldr	r3, [r7, #32]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	891a      	ldrh	r2, [r3, #8]
 8012896:	6a3b      	ldr	r3, [r7, #32]
 8012898:	891b      	ldrh	r3, [r3, #8]
 801289a:	1ad3      	subs	r3, r2, r3
 801289c:	b29b      	uxth	r3, r3
 801289e:	2201      	movs	r2, #1
 80128a0:	6939      	ldr	r1, [r7, #16]
 80128a2:	f7fb fc05 	bl	800e0b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80128a6:	6a3b      	ldr	r3, [r7, #32]
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7f7 fde6 	bl	800a47e <lwip_htonl>
 80128b2:	4603      	mov	r3, r0
 80128b4:	3301      	adds	r3, #1
 80128b6:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	1ad3      	subs	r3, r2, r3
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	da02      	bge.n	80128ca <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	3304      	adds	r3, #4
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7f8 ff54 	bl	800b77c <ip4_route>
 80128d4:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80128d6:	68bb      	ldr	r3, [r7, #8]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d103      	bne.n	80128e4 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80128dc:	23fc      	movs	r3, #252	@ 0xfc
 80128de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80128e2:	e011      	b.n	8012908 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80128e4:	6879      	ldr	r1, [r7, #4]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	1d1a      	adds	r2, r3, #4
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	7a98      	ldrb	r0, [r3, #10]
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	9302      	str	r3, [sp, #8]
 80128f2:	2306      	movs	r3, #6
 80128f4:	9301      	str	r3, [sp, #4]
 80128f6:	2300      	movs	r3, #0
 80128f8:	9300      	str	r3, [sp, #0]
 80128fa:	4603      	mov	r3, r0
 80128fc:	69b8      	ldr	r0, [r7, #24]
 80128fe:	f7f9 f8e5 	bl	800bacc <ip4_output_if>
 8012902:	4603      	mov	r3, r0
 8012904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8012908:	69b8      	ldr	r0, [r7, #24]
 801290a:	f7fb f9d3 	bl	800dcb4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801290e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8012912:	4618      	mov	r0, r3
 8012914:	372c      	adds	r7, #44	@ 0x2c
 8012916:	46bd      	mov	sp, r7
 8012918:	bd90      	pop	{r4, r7, pc}
	...

0801291c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b082      	sub	sp, #8
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012924:	f7fb fcd6 	bl	800e2d4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012928:	4b0a      	ldr	r3, [pc, #40]	@ (8012954 <tcpip_tcp_timer+0x38>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d103      	bne.n	8012938 <tcpip_tcp_timer+0x1c>
 8012930:	4b09      	ldr	r3, [pc, #36]	@ (8012958 <tcpip_tcp_timer+0x3c>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d005      	beq.n	8012944 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012938:	2200      	movs	r2, #0
 801293a:	4908      	ldr	r1, [pc, #32]	@ (801295c <tcpip_tcp_timer+0x40>)
 801293c:	20fa      	movs	r0, #250	@ 0xfa
 801293e:	f000 f86f 	bl	8012a20 <sys_timeout>
 8012942:	e003      	b.n	801294c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012944:	4b06      	ldr	r3, [pc, #24]	@ (8012960 <tcpip_tcp_timer+0x44>)
 8012946:	2200      	movs	r2, #0
 8012948:	601a      	str	r2, [r3, #0]
  }
}
 801294a:	bf00      	nop
 801294c:	bf00      	nop
 801294e:	3708      	adds	r7, #8
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}
 8012954:	2000c7a4 	.word	0x2000c7a4
 8012958:	2000c7a8 	.word	0x2000c7a8
 801295c:	0801291d 	.word	0x0801291d
 8012960:	2000c7f0 	.word	0x2000c7f0

08012964 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012968:	4b0a      	ldr	r3, [pc, #40]	@ (8012994 <tcp_timer_needed+0x30>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d10f      	bne.n	8012990 <tcp_timer_needed+0x2c>
 8012970:	4b09      	ldr	r3, [pc, #36]	@ (8012998 <tcp_timer_needed+0x34>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d103      	bne.n	8012980 <tcp_timer_needed+0x1c>
 8012978:	4b08      	ldr	r3, [pc, #32]	@ (801299c <tcp_timer_needed+0x38>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d007      	beq.n	8012990 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012980:	4b04      	ldr	r3, [pc, #16]	@ (8012994 <tcp_timer_needed+0x30>)
 8012982:	2201      	movs	r2, #1
 8012984:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012986:	2200      	movs	r2, #0
 8012988:	4905      	ldr	r1, [pc, #20]	@ (80129a0 <tcp_timer_needed+0x3c>)
 801298a:	20fa      	movs	r0, #250	@ 0xfa
 801298c:	f000 f848 	bl	8012a20 <sys_timeout>
  }
}
 8012990:	bf00      	nop
 8012992:	bd80      	pop	{r7, pc}
 8012994:	2000c7f0 	.word	0x2000c7f0
 8012998:	2000c7a4 	.word	0x2000c7a4
 801299c:	2000c7a8 	.word	0x2000c7a8
 80129a0:	0801291d 	.word	0x0801291d

080129a4 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b084      	sub	sp, #16
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	685b      	ldr	r3, [r3, #4]
 80129b4:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	687a      	ldr	r2, [r7, #4]
 80129bc:	4903      	ldr	r1, [pc, #12]	@ (80129cc <cyclic_timer+0x28>)
 80129be:	4618      	mov	r0, r3
 80129c0:	f000 f82e 	bl	8012a20 <sys_timeout>
}
 80129c4:	bf00      	nop
 80129c6:	3710      	adds	r7, #16
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	080129a5 	.word	0x080129a5

080129d0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129d6:	2301      	movs	r3, #1
 80129d8:	607b      	str	r3, [r7, #4]
 80129da:	e00e      	b.n	80129fa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80129dc:	4a0d      	ldr	r2, [pc, #52]	@ (8012a14 <sys_timeouts_init+0x44>)
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	00db      	lsls	r3, r3, #3
 80129e8:	4a0a      	ldr	r2, [pc, #40]	@ (8012a14 <sys_timeouts_init+0x44>)
 80129ea:	4413      	add	r3, r2
 80129ec:	461a      	mov	r2, r3
 80129ee:	490a      	ldr	r1, [pc, #40]	@ (8012a18 <sys_timeouts_init+0x48>)
 80129f0:	f000 f816 	bl	8012a20 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	3301      	adds	r3, #1
 80129f8:	607b      	str	r3, [r7, #4]
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d9ed      	bls.n	80129dc <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8012a00:	f7f0 fbae 	bl	8003160 <sys_now>
 8012a04:	4603      	mov	r3, r0
 8012a06:	4a05      	ldr	r2, [pc, #20]	@ (8012a1c <sys_timeouts_init+0x4c>)
 8012a08:	6013      	str	r3, [r2, #0]
}
 8012a0a:	bf00      	nop
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	08017f24 	.word	0x08017f24
 8012a18:	080129a5 	.word	0x080129a5
 8012a1c:	2000c7ec 	.word	0x2000c7ec

08012a20 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b088      	sub	sp, #32
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	60f8      	str	r0, [r7, #12]
 8012a28:	60b9      	str	r1, [r7, #8]
 8012a2a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012a2c:	2006      	movs	r0, #6
 8012a2e:	f7fa fbd9 	bl	800d1e4 <memp_malloc>
 8012a32:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d10a      	bne.n	8012a50 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	f040 8084 	bne.w	8012b4a <sys_timeout+0x12a>
 8012a42:	4b44      	ldr	r3, [pc, #272]	@ (8012b54 <sys_timeout+0x134>)
 8012a44:	22d4      	movs	r2, #212	@ 0xd4
 8012a46:	4944      	ldr	r1, [pc, #272]	@ (8012b58 <sys_timeout+0x138>)
 8012a48:	4844      	ldr	r0, [pc, #272]	@ (8012b5c <sys_timeout+0x13c>)
 8012a4a:	f002 f9b1 	bl	8014db0 <iprintf>
    return;
 8012a4e:	e07c      	b.n	8012b4a <sys_timeout+0x12a>
  }

  now = sys_now();
 8012a50:	f7f0 fb86 	bl	8003160 <sys_now>
 8012a54:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8012a56:	4b42      	ldr	r3, [pc, #264]	@ (8012b60 <sys_timeout+0x140>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d105      	bne.n	8012a6a <sys_timeout+0x4a>
    diff = 0;
 8012a5e:	2300      	movs	r3, #0
 8012a60:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8012a62:	4a40      	ldr	r2, [pc, #256]	@ (8012b64 <sys_timeout+0x144>)
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	6013      	str	r3, [r2, #0]
 8012a68:	e004      	b.n	8012a74 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8012a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8012b64 <sys_timeout+0x144>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	693a      	ldr	r2, [r7, #16]
 8012a70:	1ad3      	subs	r3, r2, r3
 8012a72:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	2200      	movs	r2, #0
 8012a78:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	68ba      	ldr	r2, [r7, #8]
 8012a7e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8012a86:	68fa      	ldr	r2, [r7, #12]
 8012a88:	69bb      	ldr	r3, [r7, #24]
 8012a8a:	441a      	add	r2, r3
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012a90:	4b33      	ldr	r3, [pc, #204]	@ (8012b60 <sys_timeout+0x140>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d103      	bne.n	8012aa0 <sys_timeout+0x80>
    next_timeout = timeout;
 8012a98:	4a31      	ldr	r2, [pc, #196]	@ (8012b60 <sys_timeout+0x140>)
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	6013      	str	r3, [r2, #0]
    return;
 8012a9e:	e055      	b.n	8012b4c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8012aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8012b60 <sys_timeout+0x140>)
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	68fa      	ldr	r2, [r7, #12]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d20f      	bcs.n	8012acc <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8012aac:	4b2c      	ldr	r3, [pc, #176]	@ (8012b60 <sys_timeout+0x140>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	6859      	ldr	r1, [r3, #4]
 8012ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8012b60 <sys_timeout+0x140>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	68fa      	ldr	r2, [r7, #12]
 8012ab8:	1a8a      	subs	r2, r1, r2
 8012aba:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8012abc:	4b28      	ldr	r3, [pc, #160]	@ (8012b60 <sys_timeout+0x140>)
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012ac4:	4a26      	ldr	r2, [pc, #152]	@ (8012b60 <sys_timeout+0x140>)
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	6013      	str	r3, [r2, #0]
 8012aca:	e03f      	b.n	8012b4c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012acc:	4b24      	ldr	r3, [pc, #144]	@ (8012b60 <sys_timeout+0x140>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	61fb      	str	r3, [r7, #28]
 8012ad2:	e036      	b.n	8012b42 <sys_timeout+0x122>
      timeout->time -= t->time;
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	685a      	ldr	r2, [r3, #4]
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	1ad2      	subs	r2, r2, r3
 8012ade:	697b      	ldr	r3, [r7, #20]
 8012ae0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8012ae2:	69fb      	ldr	r3, [r7, #28]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d006      	beq.n	8012af8 <sys_timeout+0xd8>
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	685a      	ldr	r2, [r3, #4]
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d921      	bls.n	8012b3c <sys_timeout+0x11c>
        if (t->next != NULL) {
 8012af8:	69fb      	ldr	r3, [r7, #28]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d009      	beq.n	8012b14 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8012b00:	69fb      	ldr	r3, [r7, #28]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	6859      	ldr	r1, [r3, #4]
 8012b06:	697b      	ldr	r3, [r7, #20]
 8012b08:	685a      	ldr	r2, [r3, #4]
 8012b0a:	69fb      	ldr	r3, [r7, #28]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	1a8a      	subs	r2, r1, r2
 8012b10:	605a      	str	r2, [r3, #4]
 8012b12:	e00b      	b.n	8012b2c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	685b      	ldr	r3, [r3, #4]
 8012b18:	68fa      	ldr	r2, [r7, #12]
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d206      	bcs.n	8012b2c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8012b1e:	4b10      	ldr	r3, [pc, #64]	@ (8012b60 <sys_timeout+0x140>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	685a      	ldr	r2, [r3, #4]
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	441a      	add	r2, r3
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8012b2c:	69fb      	ldr	r3, [r7, #28]
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	697a      	ldr	r2, [r7, #20]
 8012b38:	601a      	str	r2, [r3, #0]
        break;
 8012b3a:	e007      	b.n	8012b4c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012b3c:	69fb      	ldr	r3, [r7, #28]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	61fb      	str	r3, [r7, #28]
 8012b42:	69fb      	ldr	r3, [r7, #28]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d1c5      	bne.n	8012ad4 <sys_timeout+0xb4>
 8012b48:	e000      	b.n	8012b4c <sys_timeout+0x12c>
    return;
 8012b4a:	bf00      	nop
      }
    }
  }
}
 8012b4c:	3720      	adds	r7, #32
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}
 8012b52:	bf00      	nop
 8012b54:	08017cd0 	.word	0x08017cd0
 8012b58:	08017d1c 	.word	0x08017d1c
 8012b5c:	08017d5c 	.word	0x08017d5c
 8012b60:	2000c7e8 	.word	0x2000c7e8
 8012b64:	2000c7ec 	.word	0x2000c7ec

08012b68 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b086      	sub	sp, #24
 8012b6c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8012b6e:	4b24      	ldr	r3, [pc, #144]	@ (8012c00 <sys_check_timeouts+0x98>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d040      	beq.n	8012bf8 <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8012b76:	f7f0 faf3 	bl	8003160 <sys_now>
 8012b7a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8012b7c:	4b21      	ldr	r3, [pc, #132]	@ (8012c04 <sys_check_timeouts+0x9c>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	68fa      	ldr	r2, [r7, #12]
 8012b82:	1ad3      	subs	r3, r2, r3
 8012b84:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 8012b86:	4b20      	ldr	r3, [pc, #128]	@ (8012c08 <sys_check_timeouts+0xa0>)
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	b2db      	uxtb	r3, r3
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d001      	beq.n	8012b94 <sys_check_timeouts+0x2c>
 8012b90:	f7fa fce8 	bl	800d564 <pbuf_free_ooseq>
      had_one = 0;
 8012b94:	2300      	movs	r3, #0
 8012b96:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8012b98:	4b19      	ldr	r3, [pc, #100]	@ (8012c00 <sys_check_timeouts+0x98>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d026      	beq.n	8012bf2 <sys_check_timeouts+0x8a>
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	685b      	ldr	r3, [r3, #4]
 8012ba8:	697a      	ldr	r2, [r7, #20]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d321      	bcc.n	8012bf2 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 8012bae:	2301      	movs	r3, #1
 8012bb0:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	685a      	ldr	r2, [r3, #4]
 8012bb6:	4b13      	ldr	r3, [pc, #76]	@ (8012c04 <sys_check_timeouts+0x9c>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	4413      	add	r3, r2
 8012bbc:	4a11      	ldr	r2, [pc, #68]	@ (8012c04 <sys_check_timeouts+0x9c>)
 8012bbe:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	697a      	ldr	r2, [r7, #20]
 8012bc6:	1ad3      	subs	r3, r2, r3
 8012bc8:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	4a0c      	ldr	r2, [pc, #48]	@ (8012c00 <sys_check_timeouts+0x98>)
 8012bd0:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	689b      	ldr	r3, [r3, #8]
 8012bd6:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	68db      	ldr	r3, [r3, #12]
 8012bdc:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012bde:	68b9      	ldr	r1, [r7, #8]
 8012be0:	2006      	movs	r0, #6
 8012be2:	f7fa fb4b 	bl	800d27c <memp_free>
        if (handler != NULL) {
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d002      	beq.n	8012bf2 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6838      	ldr	r0, [r7, #0]
 8012bf0:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8012bf2:	7cfb      	ldrb	r3, [r7, #19]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d1c6      	bne.n	8012b86 <sys_check_timeouts+0x1e>
  }
}
 8012bf8:	bf00      	nop
 8012bfa:	3718      	adds	r7, #24
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	2000c7e8 	.word	0x2000c7e8
 8012c04:	2000c7ec 	.word	0x2000c7ec
 8012c08:	2000c795 	.word	0x2000c795

08012c0c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8012c10:	bf00      	nop
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bc80      	pop	{r7}
 8012c16:	4770      	bx	lr

08012c18 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	b083      	sub	sp, #12
 8012c1c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012c22:	4b17      	ldr	r3, [pc, #92]	@ (8012c80 <udp_new_port+0x68>)
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	1c5a      	adds	r2, r3, #1
 8012c28:	b291      	uxth	r1, r2
 8012c2a:	4a15      	ldr	r2, [pc, #84]	@ (8012c80 <udp_new_port+0x68>)
 8012c2c:	8011      	strh	r1, [r2, #0]
 8012c2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d103      	bne.n	8012c3e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012c36:	4b12      	ldr	r3, [pc, #72]	@ (8012c80 <udp_new_port+0x68>)
 8012c38:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012c3c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c3e:	4b11      	ldr	r3, [pc, #68]	@ (8012c84 <udp_new_port+0x6c>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	603b      	str	r3, [r7, #0]
 8012c44:	e011      	b.n	8012c6a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	8a5a      	ldrh	r2, [r3, #18]
 8012c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012c80 <udp_new_port+0x68>)
 8012c4c:	881b      	ldrh	r3, [r3, #0]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d108      	bne.n	8012c64 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012c52:	88fb      	ldrh	r3, [r7, #6]
 8012c54:	3301      	adds	r3, #1
 8012c56:	80fb      	strh	r3, [r7, #6]
 8012c58:	88fb      	ldrh	r3, [r7, #6]
 8012c5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012c5e:	d3e0      	bcc.n	8012c22 <udp_new_port+0xa>
        return 0;
 8012c60:	2300      	movs	r3, #0
 8012c62:	e007      	b.n	8012c74 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	68db      	ldr	r3, [r3, #12]
 8012c68:	603b      	str	r3, [r7, #0]
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d1ea      	bne.n	8012c46 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012c70:	4b03      	ldr	r3, [pc, #12]	@ (8012c80 <udp_new_port+0x68>)
 8012c72:	881b      	ldrh	r3, [r3, #0]
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	370c      	adds	r7, #12
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bc80      	pop	{r7}
 8012c7c:	4770      	bx	lr
 8012c7e:	bf00      	nop
 8012c80:	20000080 	.word	0x20000080
 8012c84:	2000c7f4 	.word	0x2000c7f4

08012c88 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b085      	sub	sp, #20
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	60f8      	str	r0, [r7, #12]
 8012c90:	60b9      	str	r1, [r7, #8]
 8012c92:	4613      	mov	r3, r2
 8012c94:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012c96:	79fb      	ldrb	r3, [r7, #7]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d018      	beq.n	8012cce <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d013      	beq.n	8012cca <udp_input_local_match+0x42>
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00f      	beq.n	8012cca <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012caa:	4b13      	ldr	r3, [pc, #76]	@ (8012cf8 <udp_input_local_match+0x70>)
 8012cac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cb2:	d00a      	beq.n	8012cca <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8012cf8 <udp_input_local_match+0x70>)
 8012cba:	695b      	ldr	r3, [r3, #20]
 8012cbc:	405a      	eors	r2, r3
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	3308      	adds	r3, #8
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d110      	bne.n	8012cec <udp_input_local_match+0x64>
          return 1;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	e00f      	b.n	8012cee <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d009      	beq.n	8012ce8 <udp_input_local_match+0x60>
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d005      	beq.n	8012ce8 <udp_input_local_match+0x60>
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	4b05      	ldr	r3, [pc, #20]	@ (8012cf8 <udp_input_local_match+0x70>)
 8012ce2:	695b      	ldr	r3, [r3, #20]
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d101      	bne.n	8012cec <udp_input_local_match+0x64>
      return 1;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	e000      	b.n	8012cee <udp_input_local_match+0x66>
    }
  }

  return 0;
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3714      	adds	r7, #20
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bc80      	pop	{r7}
 8012cf6:	4770      	bx	lr
 8012cf8:	20007070 	.word	0x20007070

08012cfc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012cfc:	b590      	push	{r4, r7, lr}
 8012cfe:	b08d      	sub	sp, #52	@ 0x34
 8012d00:	af02      	add	r7, sp, #8
 8012d02:	6078      	str	r0, [r7, #4]
 8012d04:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012d06:	2300      	movs	r3, #0
 8012d08:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	895b      	ldrh	r3, [r3, #10]
 8012d0e:	2b07      	cmp	r3, #7
 8012d10:	d803      	bhi.n	8012d1a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f7fa ffce 	bl	800dcb4 <pbuf_free>
    goto end;
 8012d18:	e0c6      	b.n	8012ea8 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012d20:	4b63      	ldr	r3, [pc, #396]	@ (8012eb0 <udp_input+0x1b4>)
 8012d22:	695b      	ldr	r3, [r3, #20]
 8012d24:	4a62      	ldr	r2, [pc, #392]	@ (8012eb0 <udp_input+0x1b4>)
 8012d26:	6812      	ldr	r2, [r2, #0]
 8012d28:	4611      	mov	r1, r2
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f7f8 ffa0 	bl	800bc70 <ip4_addr_isbroadcast_u32>
 8012d30:	4603      	mov	r3, r0
 8012d32:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012d34:	697b      	ldr	r3, [r7, #20]
 8012d36:	881b      	ldrh	r3, [r3, #0]
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7f7 fb92 	bl	800a464 <lwip_htons>
 8012d40:	4603      	mov	r3, r0
 8012d42:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	885b      	ldrh	r3, [r3, #2]
 8012d48:	b29b      	uxth	r3, r3
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7f7 fb8a 	bl	800a464 <lwip_htons>
 8012d50:	4603      	mov	r3, r0
 8012d52:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012d54:	2300      	movs	r3, #0
 8012d56:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8012d58:	2300      	movs	r3, #0
 8012d5a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d60:	4b54      	ldr	r3, [pc, #336]	@ (8012eb4 <udp_input+0x1b8>)
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8012d66:	e03b      	b.n	8012de0 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d6a:	8a5b      	ldrh	r3, [r3, #18]
 8012d6c:	89fa      	ldrh	r2, [r7, #14]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d131      	bne.n	8012dd6 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012d72:	7cfb      	ldrb	r3, [r7, #19]
 8012d74:	461a      	mov	r2, r3
 8012d76:	6839      	ldr	r1, [r7, #0]
 8012d78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012d7a:	f7ff ff85 	bl	8012c88 <udp_input_local_match>
 8012d7e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d028      	beq.n	8012dd6 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8012d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d86:	7c1b      	ldrb	r3, [r3, #16]
 8012d88:	f003 0304 	and.w	r3, r3, #4
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d104      	bne.n	8012d9a <udp_input+0x9e>
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d101      	bne.n	8012d9a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8012d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d98:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d9c:	8a9b      	ldrh	r3, [r3, #20]
 8012d9e:	8a3a      	ldrh	r2, [r7, #16]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d118      	bne.n	8012dd6 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d005      	beq.n	8012db8 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dae:	685a      	ldr	r2, [r3, #4]
 8012db0:	4b3f      	ldr	r3, [pc, #252]	@ (8012eb0 <udp_input+0x1b4>)
 8012db2:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d10e      	bne.n	8012dd6 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012db8:	6a3b      	ldr	r3, [r7, #32]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d014      	beq.n	8012de8 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dc0:	68da      	ldr	r2, [r3, #12]
 8012dc2:	6a3b      	ldr	r3, [r7, #32]
 8012dc4:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8012eb4 <udp_input+0x1b8>)
 8012dc8:	681a      	ldr	r2, [r3, #0]
 8012dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dcc:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012dce:	4a39      	ldr	r2, [pc, #228]	@ (8012eb4 <udp_input+0x1b8>)
 8012dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dd2:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012dd4:	e008      	b.n	8012de8 <udp_input+0xec>
      }
    }

    prev = pcb;
 8012dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dd8:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8012de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d1c0      	bne.n	8012d68 <udp_input+0x6c>
 8012de6:	e000      	b.n	8012dea <udp_input+0xee>
        break;
 8012de8:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d101      	bne.n	8012df4 <udp_input+0xf8>
    pcb = uncon_pcb;
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d002      	beq.n	8012e00 <udp_input+0x104>
    for_us = 1;
 8012dfa:	2301      	movs	r3, #1
 8012dfc:	76fb      	strb	r3, [r7, #27]
 8012dfe:	e00a      	b.n	8012e16 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012e00:	683b      	ldr	r3, [r7, #0]
 8012e02:	3304      	adds	r3, #4
 8012e04:	681a      	ldr	r2, [r3, #0]
 8012e06:	4b2a      	ldr	r3, [pc, #168]	@ (8012eb0 <udp_input+0x1b4>)
 8012e08:	695b      	ldr	r3, [r3, #20]
 8012e0a:	429a      	cmp	r2, r3
 8012e0c:	bf0c      	ite	eq
 8012e0e:	2301      	moveq	r3, #1
 8012e10:	2300      	movne	r3, #0
 8012e12:	b2db      	uxtb	r3, r3
 8012e14:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012e16:	7efb      	ldrb	r3, [r7, #27]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d042      	beq.n	8012ea2 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8012e1c:	f06f 0107 	mvn.w	r1, #7
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f7fa ff23 	bl	800dc6c <pbuf_header>
 8012e26:	4603      	mov	r3, r0
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d00a      	beq.n	8012e42 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8012e2c:	4b22      	ldr	r3, [pc, #136]	@ (8012eb8 <udp_input+0x1bc>)
 8012e2e:	f240 1255 	movw	r2, #341	@ 0x155
 8012e32:	4922      	ldr	r1, [pc, #136]	@ (8012ebc <udp_input+0x1c0>)
 8012e34:	4822      	ldr	r0, [pc, #136]	@ (8012ec0 <udp_input+0x1c4>)
 8012e36:	f001 ffbb 	bl	8014db0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f7fa ff3a 	bl	800dcb4 <pbuf_free>
      goto end;
 8012e40:	e032      	b.n	8012ea8 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8012e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d012      	beq.n	8012e6e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4a:	699b      	ldr	r3, [r3, #24]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d00a      	beq.n	8012e66 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e52:	699c      	ldr	r4, [r3, #24]
 8012e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e56:	69d8      	ldr	r0, [r3, #28]
 8012e58:	8a3b      	ldrh	r3, [r7, #16]
 8012e5a:	9300      	str	r3, [sp, #0]
 8012e5c:	4b19      	ldr	r3, [pc, #100]	@ (8012ec4 <udp_input+0x1c8>)
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012e62:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012e64:	e021      	b.n	8012eaa <udp_input+0x1ae>
        pbuf_free(p);
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f7fa ff24 	bl	800dcb4 <pbuf_free>
        goto end;
 8012e6c:	e01c      	b.n	8012ea8 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012e6e:	7cfb      	ldrb	r3, [r7, #19]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d112      	bne.n	8012e9a <udp_input+0x19e>
 8012e74:	4b0e      	ldr	r3, [pc, #56]	@ (8012eb0 <udp_input+0x1b4>)
 8012e76:	695b      	ldr	r3, [r3, #20]
 8012e78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012e7c:	2be0      	cmp	r3, #224	@ 0xe0
 8012e7e:	d00c      	beq.n	8012e9a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012e80:	4b0b      	ldr	r3, [pc, #44]	@ (8012eb0 <udp_input+0x1b4>)
 8012e82:	899b      	ldrh	r3, [r3, #12]
 8012e84:	3308      	adds	r3, #8
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	b21b      	sxth	r3, r3
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f7fa feff 	bl	800dc90 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012e92:	2103      	movs	r1, #3
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7f8 fbd3 	bl	800b640 <icmp_dest_unreach>
      pbuf_free(p);
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f7fa ff0a 	bl	800dcb4 <pbuf_free>
  return;
 8012ea0:	e003      	b.n	8012eaa <udp_input+0x1ae>
    pbuf_free(p);
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f7fa ff06 	bl	800dcb4 <pbuf_free>
  return;
 8012ea8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012eaa:	372c      	adds	r7, #44	@ 0x2c
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd90      	pop	{r4, r7, pc}
 8012eb0:	20007070 	.word	0x20007070
 8012eb4:	2000c7f4 	.word	0x2000c7f4
 8012eb8:	08017d84 	.word	0x08017d84
 8012ebc:	08017dcc 	.word	0x08017dcc
 8012ec0:	08017de0 	.word	0x08017de0
 8012ec4:	20007080 	.word	0x20007080

08012ec8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b088      	sub	sp, #32
 8012ecc:	af02      	add	r7, sp, #8
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	607a      	str	r2, [r7, #4]
 8012ed4:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d002      	beq.n	8012ee6 <udp_sendto+0x1e>
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d102      	bne.n	8012eec <udp_sendto+0x24>
    return ERR_VAL;
 8012ee6:	f06f 0305 	mvn.w	r3, #5
 8012eea:	e013      	b.n	8012f14 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 8012eec:	6978      	ldr	r0, [r7, #20]
 8012eee:	f7f8 fc45 	bl	800b77c <ip4_route>
 8012ef2:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d102      	bne.n	8012f00 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012efa:	f06f 0303 	mvn.w	r3, #3
 8012efe:	e009      	b.n	8012f14 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012f00:	887a      	ldrh	r2, [r7, #2]
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	9300      	str	r3, [sp, #0]
 8012f06:	4613      	mov	r3, r2
 8012f08:	687a      	ldr	r2, [r7, #4]
 8012f0a:	68b9      	ldr	r1, [r7, #8]
 8012f0c:	68f8      	ldr	r0, [r7, #12]
 8012f0e:	f000 f805 	bl	8012f1c <udp_sendto_if>
 8012f12:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3718      	adds	r7, #24
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b088      	sub	sp, #32
 8012f20:	af02      	add	r7, sp, #8
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	607a      	str	r2, [r7, #4]
 8012f28:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d002      	beq.n	8012f36 <udp_sendto_if+0x1a>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d102      	bne.n	8012f3c <udp_sendto_if+0x20>
    return ERR_VAL;
 8012f36:	f06f 0305 	mvn.w	r3, #5
 8012f3a:	e028      	b.n	8012f8e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d009      	beq.n	8012f56 <udp_sendto_if+0x3a>
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d005      	beq.n	8012f56 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f52:	2be0      	cmp	r3, #224	@ 0xe0
 8012f54:	d103      	bne.n	8012f5e <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8012f56:	6a3b      	ldr	r3, [r7, #32]
 8012f58:	3304      	adds	r3, #4
 8012f5a:	617b      	str	r3, [r7, #20]
 8012f5c:	e00b      	b.n	8012f76 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	681a      	ldr	r2, [r3, #0]
 8012f62:	6a3b      	ldr	r3, [r7, #32]
 8012f64:	3304      	adds	r3, #4
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d002      	beq.n	8012f72 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012f6c:	f06f 0303 	mvn.w	r3, #3
 8012f70:	e00d      	b.n	8012f8e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012f76:	887a      	ldrh	r2, [r7, #2]
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	9301      	str	r3, [sp, #4]
 8012f7c:	6a3b      	ldr	r3, [r7, #32]
 8012f7e:	9300      	str	r3, [sp, #0]
 8012f80:	4613      	mov	r3, r2
 8012f82:	687a      	ldr	r2, [r7, #4]
 8012f84:	68b9      	ldr	r1, [r7, #8]
 8012f86:	68f8      	ldr	r0, [r7, #12]
 8012f88:	f000 f806 	bl	8012f98 <udp_sendto_if_src>
 8012f8c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3718      	adds	r7, #24
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}
	...

08012f98 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b08c      	sub	sp, #48	@ 0x30
 8012f9c:	af04      	add	r7, sp, #16
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	607a      	str	r2, [r7, #4]
 8012fa4:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d002      	beq.n	8012fb2 <udp_sendto_if_src+0x1a>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d102      	bne.n	8012fb8 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8012fb2:	f06f 0305 	mvn.w	r3, #5
 8012fb6:	e07e      	b.n	80130b6 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	8a5b      	ldrh	r3, [r3, #18]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10f      	bne.n	8012fe0 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012fc0:	68f9      	ldr	r1, [r7, #12]
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	8a5b      	ldrh	r3, [r3, #18]
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	68f8      	ldr	r0, [r7, #12]
 8012fca:	f000 f87f 	bl	80130cc <udp_bind>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012fd2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d002      	beq.n	8012fe0 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012fda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012fde:	e06a      	b.n	80130b6 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8012fe0:	2108      	movs	r1, #8
 8012fe2:	68b8      	ldr	r0, [r7, #8]
 8012fe4:	f7fa fe42 	bl	800dc6c <pbuf_header>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d014      	beq.n	8013018 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012fee:	2200      	movs	r2, #0
 8012ff0:	2108      	movs	r1, #8
 8012ff2:	2001      	movs	r0, #1
 8012ff4:	f7fa fae6 	bl	800d5c4 <pbuf_alloc>
 8012ff8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012ffa:	69fb      	ldr	r3, [r7, #28]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d102      	bne.n	8013006 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013000:	f04f 33ff 	mov.w	r3, #4294967295
 8013004:	e057      	b.n	80130b6 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	891b      	ldrh	r3, [r3, #8]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d006      	beq.n	801301c <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801300e:	68b9      	ldr	r1, [r7, #8]
 8013010:	69f8      	ldr	r0, [r7, #28]
 8013012:	f7fa ff71 	bl	800def8 <pbuf_chain>
 8013016:	e001      	b.n	801301c <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013018:	68bb      	ldr	r3, [r7, #8]
 801301a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	895b      	ldrh	r3, [r3, #10]
 8013020:	2b07      	cmp	r3, #7
 8013022:	d806      	bhi.n	8013032 <udp_sendto_if_src+0x9a>
 8013024:	4b26      	ldr	r3, [pc, #152]	@ (80130c0 <udp_sendto_if_src+0x128>)
 8013026:	f240 22db 	movw	r2, #731	@ 0x2db
 801302a:	4926      	ldr	r1, [pc, #152]	@ (80130c4 <udp_sendto_if_src+0x12c>)
 801302c:	4826      	ldr	r0, [pc, #152]	@ (80130c8 <udp_sendto_if_src+0x130>)
 801302e:	f001 febf 	bl	8014db0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	8a5b      	ldrh	r3, [r3, #18]
 801303c:	4618      	mov	r0, r3
 801303e:	f7f7 fa11 	bl	800a464 <lwip_htons>
 8013042:	4603      	mov	r3, r0
 8013044:	461a      	mov	r2, r3
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801304a:	887b      	ldrh	r3, [r7, #2]
 801304c:	4618      	mov	r0, r3
 801304e:	f7f7 fa09 	bl	800a464 <lwip_htons>
 8013052:	4603      	mov	r3, r0
 8013054:	461a      	mov	r2, r3
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801305a:	697b      	ldr	r3, [r7, #20]
 801305c:	2200      	movs	r2, #0
 801305e:	719a      	strb	r2, [r3, #6]
 8013060:	2200      	movs	r2, #0
 8013062:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	891b      	ldrh	r3, [r3, #8]
 8013068:	4618      	mov	r0, r3
 801306a:	f7f7 f9fb 	bl	800a464 <lwip_htons>
 801306e:	4603      	mov	r3, r0
 8013070:	461a      	mov	r2, r3
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013076:	2311      	movs	r3, #17
 8013078:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	7a9b      	ldrb	r3, [r3, #10]
 801307e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	7a5b      	ldrb	r3, [r3, #9]
 8013084:	7cb9      	ldrb	r1, [r7, #18]
 8013086:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013088:	9202      	str	r2, [sp, #8]
 801308a:	7cfa      	ldrb	r2, [r7, #19]
 801308c:	9201      	str	r2, [sp, #4]
 801308e:	9300      	str	r3, [sp, #0]
 8013090:	460b      	mov	r3, r1
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013096:	69f8      	ldr	r0, [r7, #28]
 8013098:	f7f8 fd42 	bl	800bb20 <ip4_output_if_src>
 801309c:	4603      	mov	r3, r0
 801309e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80130a0:	69fa      	ldr	r2, [r7, #28]
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d004      	beq.n	80130b2 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 80130a8:	69f8      	ldr	r0, [r7, #28]
 80130aa:	f7fa fe03 	bl	800dcb4 <pbuf_free>
    q = NULL;
 80130ae:	2300      	movs	r3, #0
 80130b0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80130b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3720      	adds	r7, #32
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	08017d84 	.word	0x08017d84
 80130c4:	08017e08 	.word	0x08017e08
 80130c8:	08017de0 	.word	0x08017de0

080130cc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b086      	sub	sp, #24
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	4613      	mov	r3, r2
 80130d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d101      	bne.n	80130e4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80130e0:	4b30      	ldr	r3, [pc, #192]	@ (80131a4 <udp_bind+0xd8>)
 80130e2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d002      	beq.n	80130f0 <udp_bind+0x24>
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d102      	bne.n	80130f6 <udp_bind+0x2a>
    return ERR_VAL;
 80130f0:	f06f 0305 	mvn.w	r3, #5
 80130f4:	e052      	b.n	801319c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80130f6:	2300      	movs	r3, #0
 80130f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80130fa:	4b2b      	ldr	r3, [pc, #172]	@ (80131a8 <udp_bind+0xdc>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	617b      	str	r3, [r7, #20]
 8013100:	e009      	b.n	8013116 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013102:	68fa      	ldr	r2, [r7, #12]
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	429a      	cmp	r2, r3
 8013108:	d102      	bne.n	8013110 <udp_bind+0x44>
      rebind = 1;
 801310a:	2301      	movs	r3, #1
 801310c:	74fb      	strb	r3, [r7, #19]
      break;
 801310e:	e005      	b.n	801311c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	68db      	ldr	r3, [r3, #12]
 8013114:	617b      	str	r3, [r7, #20]
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d1f2      	bne.n	8013102 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 801311c:	88fb      	ldrh	r3, [r7, #6]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d109      	bne.n	8013136 <udp_bind+0x6a>
    port = udp_new_port();
 8013122:	f7ff fd79 	bl	8012c18 <udp_new_port>
 8013126:	4603      	mov	r3, r0
 8013128:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801312a:	88fb      	ldrh	r3, [r7, #6]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d11e      	bne.n	801316e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013130:	f06f 0307 	mvn.w	r3, #7
 8013134:	e032      	b.n	801319c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013136:	4b1c      	ldr	r3, [pc, #112]	@ (80131a8 <udp_bind+0xdc>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	617b      	str	r3, [r7, #20]
 801313c:	e014      	b.n	8013168 <udp_bind+0x9c>
      if (pcb != ipcb) {
 801313e:	68fa      	ldr	r2, [r7, #12]
 8013140:	697b      	ldr	r3, [r7, #20]
 8013142:	429a      	cmp	r2, r3
 8013144:	d00d      	beq.n	8013162 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	8a5b      	ldrh	r3, [r3, #18]
 801314a:	88fa      	ldrh	r2, [r7, #6]
 801314c:	429a      	cmp	r2, r3
 801314e:	d108      	bne.n	8013162 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	68bb      	ldr	r3, [r7, #8]
 8013156:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013158:	429a      	cmp	r2, r3
 801315a:	d102      	bne.n	8013162 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801315c:	f06f 0307 	mvn.w	r3, #7
 8013160:	e01c      	b.n	801319c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	617b      	str	r3, [r7, #20]
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d1e7      	bne.n	801313e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d002      	beq.n	801317a <udp_bind+0xae>
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	e000      	b.n	801317c <udp_bind+0xb0>
 801317a:	2300      	movs	r3, #0
 801317c:	68fa      	ldr	r2, [r7, #12]
 801317e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	88fa      	ldrh	r2, [r7, #6]
 8013184:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013186:	7cfb      	ldrb	r3, [r7, #19]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d106      	bne.n	801319a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801318c:	4b06      	ldr	r3, [pc, #24]	@ (80131a8 <udp_bind+0xdc>)
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013194:	4a04      	ldr	r2, [pc, #16]	@ (80131a8 <udp_bind+0xdc>)
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801319a:	2300      	movs	r3, #0
}
 801319c:	4618      	mov	r0, r3
 801319e:	3718      	adds	r7, #24
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	08017e68 	.word	0x08017e68
 80131a8:	2000c7f4 	.word	0x2000c7f4

080131ac <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b085      	sub	sp, #20
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	60f8      	str	r0, [r7, #12]
 80131b4:	60b9      	str	r1, [r7, #8]
 80131b6:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	68ba      	ldr	r2, [r7, #8]
 80131bc:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	687a      	ldr	r2, [r7, #4]
 80131c2:	61da      	str	r2, [r3, #28]
}
 80131c4:	bf00      	nop
 80131c6:	3714      	adds	r7, #20
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bc80      	pop	{r7}
 80131cc:	4770      	bx	lr

080131ce <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80131ce:	b580      	push	{r7, lr}
 80131d0:	b082      	sub	sp, #8
 80131d2:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80131d4:	2000      	movs	r0, #0
 80131d6:	f7fa f805 	bl	800d1e4 <memp_malloc>
 80131da:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d007      	beq.n	80131f2 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80131e2:	2220      	movs	r2, #32
 80131e4:	2100      	movs	r1, #0
 80131e6:	6878      	ldr	r0, [r7, #4]
 80131e8:	f001 fe67 	bl	8014eba <memset>
    pcb->ttl = UDP_TTL;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	22ff      	movs	r2, #255	@ 0xff
 80131f0:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80131f2:	687b      	ldr	r3, [r7, #4]
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	3708      	adds	r7, #8
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80131fc:	b480      	push	{r7}
 80131fe:	b085      	sub	sp, #20
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d01e      	beq.n	801324a <udp_netif_ip_addr_changed+0x4e>
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d01a      	beq.n	801324a <udp_netif_ip_addr_changed+0x4e>
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d017      	beq.n	801324a <udp_netif_ip_addr_changed+0x4e>
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d013      	beq.n	801324a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013222:	4b0c      	ldr	r3, [pc, #48]	@ (8013254 <udp_netif_ip_addr_changed+0x58>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	60fb      	str	r3, [r7, #12]
 8013228:	e00c      	b.n	8013244 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	681a      	ldr	r2, [r3, #0]
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	429a      	cmp	r2, r3
 8013234:	d103      	bne.n	801323e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	681a      	ldr	r2, [r3, #0]
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	68db      	ldr	r3, [r3, #12]
 8013242:	60fb      	str	r3, [r7, #12]
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d1ef      	bne.n	801322a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801324a:	bf00      	nop
 801324c:	3714      	adds	r7, #20
 801324e:	46bd      	mov	sp, r7
 8013250:	bc80      	pop	{r7}
 8013252:	4770      	bx	lr
 8013254:	2000c7f4 	.word	0x2000c7f4

08013258 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b084      	sub	sp, #16
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	460b      	mov	r3, r1
 8013262:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8013264:	2300      	movs	r3, #0
 8013266:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	7c1b      	ldrb	r3, [r3, #16]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d115      	bne.n	801329c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013270:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013274:	2202      	movs	r2, #2
 8013276:	2181      	movs	r1, #129	@ 0x81
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7f0 fbc6 	bl	8003a0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2201      	movs	r2, #1
 8013282:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013288:	2202      	movs	r2, #2
 801328a:	2101      	movs	r1, #1
 801328c:	6878      	ldr	r0, [r7, #4]
 801328e:	f7f0 fbbc 	bl	8003a0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2201      	movs	r2, #1
 8013296:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 801329a:	e012      	b.n	80132c2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801329c:	2340      	movs	r3, #64	@ 0x40
 801329e:	2202      	movs	r2, #2
 80132a0:	2181      	movs	r1, #129	@ 0x81
 80132a2:	6878      	ldr	r0, [r7, #4]
 80132a4:	f7f0 fbb1 	bl	8003a0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2201      	movs	r2, #1
 80132ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80132ae:	2340      	movs	r3, #64	@ 0x40
 80132b0:	2202      	movs	r2, #2
 80132b2:	2101      	movs	r1, #1
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f7f0 fba8 	bl	8003a0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2201      	movs	r2, #1
 80132be:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80132c2:	2308      	movs	r3, #8
 80132c4:	2203      	movs	r2, #3
 80132c6:	2182      	movs	r1, #130	@ 0x82
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f7f0 fb9e 	bl	8003a0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	2201      	movs	r2, #1
 80132d2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80132d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80132d8:	f001 fb66 	bl	80149a8 <malloc>
 80132dc:	4603      	mov	r3, r0
 80132de:	461a      	mov	r2, r3
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d102      	bne.n	80132f6 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80132f0:	2301      	movs	r3, #1
 80132f2:	73fb      	strb	r3, [r7, #15]
 80132f4:	e026      	b.n	8013344 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80132fc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	2200      	movs	r2, #0
 801330c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	2200      	movs	r2, #0
 8013314:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	7c1b      	ldrb	r3, [r3, #16]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d109      	bne.n	8013334 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013326:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801332a:	2101      	movs	r1, #1
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f7f0 fc5c 	bl	8003bea <USBD_LL_PrepareReceive>
 8013332:	e007      	b.n	8013344 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801333a:	2340      	movs	r3, #64	@ 0x40
 801333c:	2101      	movs	r1, #1
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f7f0 fc53 	bl	8003bea <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8013344:	7bfb      	ldrb	r3, [r7, #15]
}
 8013346:	4618      	mov	r0, r3
 8013348:	3710      	adds	r7, #16
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}

0801334e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801334e:	b580      	push	{r7, lr}
 8013350:	b084      	sub	sp, #16
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
 8013356:	460b      	mov	r3, r1
 8013358:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801335a:	2300      	movs	r3, #0
 801335c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801335e:	2181      	movs	r1, #129	@ 0x81
 8013360:	6878      	ldr	r0, [r7, #4]
 8013362:	f7f0 fb78 	bl	8003a56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2200      	movs	r2, #0
 801336a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801336c:	2101      	movs	r1, #1
 801336e:	6878      	ldr	r0, [r7, #4]
 8013370:	f7f0 fb71 	bl	8003a56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	2200      	movs	r2, #0
 8013378:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801337c:	2182      	movs	r1, #130	@ 0x82
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7f0 fb69 	bl	8003a56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2200      	movs	r2, #0
 8013388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013390:	2b00      	cmp	r3, #0
 8013392:	d00e      	beq.n	80133b2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801339a:	685b      	ldr	r3, [r3, #4]
 801339c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80133a4:	4618      	mov	r0, r3
 80133a6:	f001 fb07 	bl	80149b8 <free>
    pdev->pClassData = NULL;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	2200      	movs	r2, #0
 80133ae:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80133b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3710      	adds	r7, #16
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}

080133bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b086      	sub	sp, #24
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80133cc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80133ce:	2300      	movs	r3, #0
 80133d0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80133d2:	2300      	movs	r3, #0
 80133d4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80133d6:	2300      	movs	r3, #0
 80133d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	781b      	ldrb	r3, [r3, #0]
 80133de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d039      	beq.n	801345a <USBD_CDC_Setup+0x9e>
 80133e6:	2b20      	cmp	r3, #32
 80133e8:	d17f      	bne.n	80134ea <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	88db      	ldrh	r3, [r3, #6]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d029      	beq.n	8013446 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	b25b      	sxtb	r3, r3
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	da11      	bge.n	8013420 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8013402:	689b      	ldr	r3, [r3, #8]
 8013404:	683a      	ldr	r2, [r7, #0]
 8013406:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8013408:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801340a:	683a      	ldr	r2, [r7, #0]
 801340c:	88d2      	ldrh	r2, [r2, #6]
 801340e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013410:	6939      	ldr	r1, [r7, #16]
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	88db      	ldrh	r3, [r3, #6]
 8013416:	461a      	mov	r2, r3
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f001 fa3d 	bl	8014898 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801341e:	e06b      	b.n	80134f8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	785a      	ldrb	r2, [r3, #1]
 8013424:	693b      	ldr	r3, [r7, #16]
 8013426:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	88db      	ldrh	r3, [r3, #6]
 801342e:	b2da      	uxtb	r2, r3
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013436:	6939      	ldr	r1, [r7, #16]
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	88db      	ldrh	r3, [r3, #6]
 801343c:	461a      	mov	r2, r3
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f001 fa58 	bl	80148f4 <USBD_CtlPrepareRx>
      break;
 8013444:	e058      	b.n	80134f8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801344c:	689b      	ldr	r3, [r3, #8]
 801344e:	683a      	ldr	r2, [r7, #0]
 8013450:	7850      	ldrb	r0, [r2, #1]
 8013452:	2200      	movs	r2, #0
 8013454:	6839      	ldr	r1, [r7, #0]
 8013456:	4798      	blx	r3
      break;
 8013458:	e04e      	b.n	80134f8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	785b      	ldrb	r3, [r3, #1]
 801345e:	2b0b      	cmp	r3, #11
 8013460:	d02e      	beq.n	80134c0 <USBD_CDC_Setup+0x104>
 8013462:	2b0b      	cmp	r3, #11
 8013464:	dc38      	bgt.n	80134d8 <USBD_CDC_Setup+0x11c>
 8013466:	2b00      	cmp	r3, #0
 8013468:	d002      	beq.n	8013470 <USBD_CDC_Setup+0xb4>
 801346a:	2b0a      	cmp	r3, #10
 801346c:	d014      	beq.n	8013498 <USBD_CDC_Setup+0xdc>
 801346e:	e033      	b.n	80134d8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013476:	2b03      	cmp	r3, #3
 8013478:	d107      	bne.n	801348a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801347a:	f107 030c 	add.w	r3, r7, #12
 801347e:	2202      	movs	r2, #2
 8013480:	4619      	mov	r1, r3
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f001 fa08 	bl	8014898 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013488:	e02e      	b.n	80134e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 801348a:	6839      	ldr	r1, [r7, #0]
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f001 f999 	bl	80147c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8013492:	2302      	movs	r3, #2
 8013494:	75fb      	strb	r3, [r7, #23]
          break;
 8013496:	e027      	b.n	80134e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801349e:	2b03      	cmp	r3, #3
 80134a0:	d107      	bne.n	80134b2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80134a2:	f107 030f 	add.w	r3, r7, #15
 80134a6:	2201      	movs	r2, #1
 80134a8:	4619      	mov	r1, r3
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f001 f9f4 	bl	8014898 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80134b0:	e01a      	b.n	80134e8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80134b2:	6839      	ldr	r1, [r7, #0]
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f001 f985 	bl	80147c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80134ba:	2302      	movs	r3, #2
 80134bc:	75fb      	strb	r3, [r7, #23]
          break;
 80134be:	e013      	b.n	80134e8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134c6:	2b03      	cmp	r3, #3
 80134c8:	d00d      	beq.n	80134e6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80134ca:	6839      	ldr	r1, [r7, #0]
 80134cc:	6878      	ldr	r0, [r7, #4]
 80134ce:	f001 f979 	bl	80147c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80134d2:	2302      	movs	r3, #2
 80134d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80134d6:	e006      	b.n	80134e6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80134d8:	6839      	ldr	r1, [r7, #0]
 80134da:	6878      	ldr	r0, [r7, #4]
 80134dc:	f001 f972 	bl	80147c4 <USBD_CtlError>
          ret = USBD_FAIL;
 80134e0:	2302      	movs	r3, #2
 80134e2:	75fb      	strb	r3, [r7, #23]
          break;
 80134e4:	e000      	b.n	80134e8 <USBD_CDC_Setup+0x12c>
          break;
 80134e6:	bf00      	nop
      }
      break;
 80134e8:	e006      	b.n	80134f8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80134ea:	6839      	ldr	r1, [r7, #0]
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f001 f969 	bl	80147c4 <USBD_CtlError>
      ret = USBD_FAIL;
 80134f2:	2302      	movs	r3, #2
 80134f4:	75fb      	strb	r3, [r7, #23]
      break;
 80134f6:	bf00      	nop
  }

  return ret;
 80134f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80134fa:	4618      	mov	r0, r3
 80134fc:	3718      	adds	r7, #24
 80134fe:	46bd      	mov	sp, r7
 8013500:	bd80      	pop	{r7, pc}

08013502 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013502:	b580      	push	{r7, lr}
 8013504:	b084      	sub	sp, #16
 8013506:	af00      	add	r7, sp, #0
 8013508:	6078      	str	r0, [r7, #4]
 801350a:	460b      	mov	r3, r1
 801350c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013514:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801351c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013524:	2b00      	cmp	r3, #0
 8013526:	d03a      	beq.n	801359e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013528:	78fa      	ldrb	r2, [r7, #3]
 801352a:	6879      	ldr	r1, [r7, #4]
 801352c:	4613      	mov	r3, r2
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	4413      	add	r3, r2
 8013532:	009b      	lsls	r3, r3, #2
 8013534:	440b      	add	r3, r1
 8013536:	331c      	adds	r3, #28
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d029      	beq.n	8013592 <USBD_CDC_DataIn+0x90>
 801353e:	78fa      	ldrb	r2, [r7, #3]
 8013540:	6879      	ldr	r1, [r7, #4]
 8013542:	4613      	mov	r3, r2
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	4413      	add	r3, r2
 8013548:	009b      	lsls	r3, r3, #2
 801354a:	440b      	add	r3, r1
 801354c:	331c      	adds	r3, #28
 801354e:	681a      	ldr	r2, [r3, #0]
 8013550:	78f9      	ldrb	r1, [r7, #3]
 8013552:	68b8      	ldr	r0, [r7, #8]
 8013554:	460b      	mov	r3, r1
 8013556:	00db      	lsls	r3, r3, #3
 8013558:	440b      	add	r3, r1
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	4403      	add	r3, r0
 801355e:	3344      	adds	r3, #68	@ 0x44
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	fbb2 f1f3 	udiv	r1, r2, r3
 8013566:	fb01 f303 	mul.w	r3, r1, r3
 801356a:	1ad3      	subs	r3, r2, r3
 801356c:	2b00      	cmp	r3, #0
 801356e:	d110      	bne.n	8013592 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8013570:	78fa      	ldrb	r2, [r7, #3]
 8013572:	6879      	ldr	r1, [r7, #4]
 8013574:	4613      	mov	r3, r2
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	4413      	add	r3, r2
 801357a:	009b      	lsls	r3, r3, #2
 801357c:	440b      	add	r3, r1
 801357e:	331c      	adds	r3, #28
 8013580:	2200      	movs	r2, #0
 8013582:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013584:	78f9      	ldrb	r1, [r7, #3]
 8013586:	2300      	movs	r3, #0
 8013588:	2200      	movs	r2, #0
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f7f0 fb0a 	bl	8003ba4 <USBD_LL_Transmit>
 8013590:	e003      	b.n	801359a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	2200      	movs	r2, #0
 8013596:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 801359a:	2300      	movs	r3, #0
 801359c:	e000      	b.n	80135a0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801359e:	2302      	movs	r3, #2
  }
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3710      	adds	r7, #16
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}

080135a8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b084      	sub	sp, #16
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
 80135b0:	460b      	mov	r3, r1
 80135b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135ba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80135bc:	78fb      	ldrb	r3, [r7, #3]
 80135be:	4619      	mov	r1, r3
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f7f0 fb35 	bl	8003c30 <USBD_LL_GetRxDataSize>
 80135c6:	4602      	mov	r2, r0
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d00d      	beq.n	80135f4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80135de:	68db      	ldr	r3, [r3, #12]
 80135e0:	68fa      	ldr	r2, [r7, #12]
 80135e2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80135e6:	68fa      	ldr	r2, [r7, #12]
 80135e8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80135ec:	4611      	mov	r1, r2
 80135ee:	4798      	blx	r3

    return USBD_OK;
 80135f0:	2300      	movs	r3, #0
 80135f2:	e000      	b.n	80135f6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80135f4:	2302      	movs	r3, #2
  }
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3710      	adds	r7, #16
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}

080135fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80135fe:	b580      	push	{r7, lr}
 8013600:	b084      	sub	sp, #16
 8013602:	af00      	add	r7, sp, #0
 8013604:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801360c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8013614:	2b00      	cmp	r3, #0
 8013616:	d014      	beq.n	8013642 <USBD_CDC_EP0_RxReady+0x44>
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801361e:	2bff      	cmp	r3, #255	@ 0xff
 8013620:	d00f      	beq.n	8013642 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	68fa      	ldr	r2, [r7, #12]
 801362c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8013630:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013632:	68fa      	ldr	r2, [r7, #12]
 8013634:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013638:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	22ff      	movs	r2, #255	@ 0xff
 801363e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8013642:	2300      	movs	r3, #0
}
 8013644:	4618      	mov	r0, r3
 8013646:	3710      	adds	r7, #16
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}

0801364c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801364c:	b480      	push	{r7}
 801364e:	b083      	sub	sp, #12
 8013650:	af00      	add	r7, sp, #0
 8013652:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	2243      	movs	r2, #67	@ 0x43
 8013658:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801365a:	4b03      	ldr	r3, [pc, #12]	@ (8013668 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801365c:	4618      	mov	r0, r3
 801365e:	370c      	adds	r7, #12
 8013660:	46bd      	mov	sp, r7
 8013662:	bc80      	pop	{r7}
 8013664:	4770      	bx	lr
 8013666:	bf00      	nop
 8013668:	2000010c 	.word	0x2000010c

0801366c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801366c:	b480      	push	{r7}
 801366e:	b083      	sub	sp, #12
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2243      	movs	r2, #67	@ 0x43
 8013678:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801367a:	4b03      	ldr	r3, [pc, #12]	@ (8013688 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801367c:	4618      	mov	r0, r3
 801367e:	370c      	adds	r7, #12
 8013680:	46bd      	mov	sp, r7
 8013682:	bc80      	pop	{r7}
 8013684:	4770      	bx	lr
 8013686:	bf00      	nop
 8013688:	200000c8 	.word	0x200000c8

0801368c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801368c:	b480      	push	{r7}
 801368e:	b083      	sub	sp, #12
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2243      	movs	r2, #67	@ 0x43
 8013698:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801369a:	4b03      	ldr	r3, [pc, #12]	@ (80136a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801369c:	4618      	mov	r0, r3
 801369e:	370c      	adds	r7, #12
 80136a0:	46bd      	mov	sp, r7
 80136a2:	bc80      	pop	{r7}
 80136a4:	4770      	bx	lr
 80136a6:	bf00      	nop
 80136a8:	20000150 	.word	0x20000150

080136ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b083      	sub	sp, #12
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	220a      	movs	r2, #10
 80136b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80136ba:	4b03      	ldr	r3, [pc, #12]	@ (80136c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80136bc:	4618      	mov	r0, r3
 80136be:	370c      	adds	r7, #12
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bc80      	pop	{r7}
 80136c4:	4770      	bx	lr
 80136c6:	bf00      	nop
 80136c8:	20000084 	.word	0x20000084

080136cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80136cc:	b480      	push	{r7}
 80136ce:	b085      	sub	sp, #20
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
 80136d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80136d6:	2302      	movs	r3, #2
 80136d8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d005      	beq.n	80136ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	683a      	ldr	r2, [r7, #0]
 80136e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80136e8:	2300      	movs	r3, #0
 80136ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80136ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3714      	adds	r7, #20
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bc80      	pop	{r7}
 80136f6:	4770      	bx	lr

080136f8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80136f8:	b480      	push	{r7}
 80136fa:	b087      	sub	sp, #28
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	60f8      	str	r0, [r7, #12]
 8013700:	60b9      	str	r1, [r7, #8]
 8013702:	4613      	mov	r3, r2
 8013704:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801370c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	68ba      	ldr	r2, [r7, #8]
 8013712:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8013716:	88fa      	ldrh	r2, [r7, #6]
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 801371e:	2300      	movs	r3, #0
}
 8013720:	4618      	mov	r0, r3
 8013722:	371c      	adds	r7, #28
 8013724:	46bd      	mov	sp, r7
 8013726:	bc80      	pop	{r7}
 8013728:	4770      	bx	lr

0801372a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801372a:	b480      	push	{r7}
 801372c:	b085      	sub	sp, #20
 801372e:	af00      	add	r7, sp, #0
 8013730:	6078      	str	r0, [r7, #4]
 8013732:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801373a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	683a      	ldr	r2, [r7, #0]
 8013740:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8013744:	2300      	movs	r3, #0
}
 8013746:	4618      	mov	r0, r3
 8013748:	3714      	adds	r7, #20
 801374a:	46bd      	mov	sp, r7
 801374c:	bc80      	pop	{r7}
 801374e:	4770      	bx	lr

08013750 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b084      	sub	sp, #16
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801375e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013766:	2b00      	cmp	r3, #0
 8013768:	d01c      	beq.n	80137a4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013770:	2b00      	cmp	r3, #0
 8013772:	d115      	bne.n	80137a0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	2201      	movs	r2, #1
 8013778:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8013792:	b29b      	uxth	r3, r3
 8013794:	2181      	movs	r1, #129	@ 0x81
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7f0 fa04 	bl	8003ba4 <USBD_LL_Transmit>

      return USBD_OK;
 801379c:	2300      	movs	r3, #0
 801379e:	e002      	b.n	80137a6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80137a0:	2301      	movs	r3, #1
 80137a2:	e000      	b.n	80137a6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80137a4:	2302      	movs	r3, #2
  }
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	3710      	adds	r7, #16
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd80      	pop	{r7, pc}

080137ae <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80137ae:	b580      	push	{r7, lr}
 80137b0:	b084      	sub	sp, #16
 80137b2:	af00      	add	r7, sp, #0
 80137b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80137bc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d017      	beq.n	80137f8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	7c1b      	ldrb	r3, [r3, #16]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d109      	bne.n	80137e4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80137d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80137da:	2101      	movs	r1, #1
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f7f0 fa04 	bl	8003bea <USBD_LL_PrepareReceive>
 80137e2:	e007      	b.n	80137f4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80137ea:	2340      	movs	r3, #64	@ 0x40
 80137ec:	2101      	movs	r1, #1
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f7f0 f9fb 	bl	8003bea <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80137f4:	2300      	movs	r3, #0
 80137f6:	e000      	b.n	80137fa <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80137f8:	2302      	movs	r3, #2
  }
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3710      	adds	r7, #16
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}

08013802 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013802:	b580      	push	{r7, lr}
 8013804:	b084      	sub	sp, #16
 8013806:	af00      	add	r7, sp, #0
 8013808:	60f8      	str	r0, [r7, #12]
 801380a:	60b9      	str	r1, [r7, #8]
 801380c:	4613      	mov	r3, r2
 801380e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d101      	bne.n	801381a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013816:	2302      	movs	r3, #2
 8013818:	e01a      	b.n	8013850 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013820:	2b00      	cmp	r3, #0
 8013822:	d003      	beq.n	801382c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2200      	movs	r2, #0
 8013828:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d003      	beq.n	801383a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	68ba      	ldr	r2, [r7, #8]
 8013836:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2201      	movs	r2, #1
 801383e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	79fa      	ldrb	r2, [r7, #7]
 8013846:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013848:	68f8      	ldr	r0, [r7, #12]
 801384a:	f7f0 f879 	bl	8003940 <USBD_LL_Init>

  return USBD_OK;
 801384e:	2300      	movs	r3, #0
}
 8013850:	4618      	mov	r0, r3
 8013852:	3710      	adds	r7, #16
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013858:	b480      	push	{r7}
 801385a:	b085      	sub	sp, #20
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013862:	2300      	movs	r3, #0
 8013864:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8013866:	683b      	ldr	r3, [r7, #0]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d006      	beq.n	801387a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	683a      	ldr	r2, [r7, #0]
 8013870:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8013874:	2300      	movs	r3, #0
 8013876:	73fb      	strb	r3, [r7, #15]
 8013878:	e001      	b.n	801387e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801387a:	2302      	movs	r3, #2
 801387c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013880:	4618      	mov	r0, r3
 8013882:	3714      	adds	r7, #20
 8013884:	46bd      	mov	sp, r7
 8013886:	bc80      	pop	{r7}
 8013888:	4770      	bx	lr

0801388a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801388a:	b580      	push	{r7, lr}
 801388c:	b082      	sub	sp, #8
 801388e:	af00      	add	r7, sp, #0
 8013890:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7f0 f89e 	bl	80039d4 <USBD_LL_Start>

  return USBD_OK;
 8013898:	2300      	movs	r3, #0
}
 801389a:	4618      	mov	r0, r3
 801389c:	3708      	adds	r7, #8
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}

080138a2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80138a2:	b480      	push	{r7}
 80138a4:	b083      	sub	sp, #12
 80138a6:	af00      	add	r7, sp, #0
 80138a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80138aa:	2300      	movs	r3, #0
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	370c      	adds	r7, #12
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bc80      	pop	{r7}
 80138b4:	4770      	bx	lr

080138b6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80138b6:	b580      	push	{r7, lr}
 80138b8:	b084      	sub	sp, #16
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	6078      	str	r0, [r7, #4]
 80138be:	460b      	mov	r3, r1
 80138c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80138c2:	2302      	movs	r3, #2
 80138c4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d00c      	beq.n	80138ea <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	78fa      	ldrb	r2, [r7, #3]
 80138da:	4611      	mov	r1, r2
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	4798      	blx	r3
 80138e0:	4603      	mov	r3, r0
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d101      	bne.n	80138ea <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80138e6:	2300      	movs	r3, #0
 80138e8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80138ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3710      	adds	r7, #16
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}

080138f4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b082      	sub	sp, #8
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	460b      	mov	r3, r1
 80138fe:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	78fa      	ldrb	r2, [r7, #3]
 801390a:	4611      	mov	r1, r2
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	4798      	blx	r3

  return USBD_OK;
 8013910:	2300      	movs	r3, #0
}
 8013912:	4618      	mov	r0, r3
 8013914:	3708      	adds	r7, #8
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}

0801391a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801391a:	b580      	push	{r7, lr}
 801391c:	b082      	sub	sp, #8
 801391e:	af00      	add	r7, sp, #0
 8013920:	6078      	str	r0, [r7, #4]
 8013922:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 801392a:	6839      	ldr	r1, [r7, #0]
 801392c:	4618      	mov	r0, r3
 801392e:	f000 ff10 	bl	8014752 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	2201      	movs	r2, #1
 8013936:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013940:	461a      	mov	r2, r3
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 801394e:	f003 031f 	and.w	r3, r3, #31
 8013952:	2b02      	cmp	r3, #2
 8013954:	d016      	beq.n	8013984 <USBD_LL_SetupStage+0x6a>
 8013956:	2b02      	cmp	r3, #2
 8013958:	d81c      	bhi.n	8013994 <USBD_LL_SetupStage+0x7a>
 801395a:	2b00      	cmp	r3, #0
 801395c:	d002      	beq.n	8013964 <USBD_LL_SetupStage+0x4a>
 801395e:	2b01      	cmp	r3, #1
 8013960:	d008      	beq.n	8013974 <USBD_LL_SetupStage+0x5a>
 8013962:	e017      	b.n	8013994 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 801396a:	4619      	mov	r1, r3
 801396c:	6878      	ldr	r0, [r7, #4]
 801396e:	f000 fa03 	bl	8013d78 <USBD_StdDevReq>
      break;
 8013972:	e01a      	b.n	80139aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 801397a:	4619      	mov	r1, r3
 801397c:	6878      	ldr	r0, [r7, #4]
 801397e:	f000 fa65 	bl	8013e4c <USBD_StdItfReq>
      break;
 8013982:	e012      	b.n	80139aa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 801398a:	4619      	mov	r1, r3
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f000 faa5 	bl	8013edc <USBD_StdEPReq>
      break;
 8013992:	e00a      	b.n	80139aa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 801399a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	4619      	mov	r1, r3
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f7f0 f876 	bl	8003a94 <USBD_LL_StallEP>
      break;
 80139a8:	bf00      	nop
  }

  return USBD_OK;
 80139aa:	2300      	movs	r3, #0
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3708      	adds	r7, #8
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b086      	sub	sp, #24
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	460b      	mov	r3, r1
 80139be:	607a      	str	r2, [r7, #4]
 80139c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80139c2:	7afb      	ldrb	r3, [r7, #11]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d14b      	bne.n	8013a60 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80139ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80139d6:	2b03      	cmp	r3, #3
 80139d8:	d134      	bne.n	8013a44 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80139da:	697b      	ldr	r3, [r7, #20]
 80139dc:	68da      	ldr	r2, [r3, #12]
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	691b      	ldr	r3, [r3, #16]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d919      	bls.n	8013a1a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80139e6:	697b      	ldr	r3, [r7, #20]
 80139e8:	68da      	ldr	r2, [r3, #12]
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	691b      	ldr	r3, [r3, #16]
 80139ee:	1ad2      	subs	r2, r2, r3
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	68da      	ldr	r2, [r3, #12]
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d203      	bcs.n	8013a08 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013a00:	697b      	ldr	r3, [r7, #20]
 8013a02:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	e002      	b.n	8013a0e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8013a08:	697b      	ldr	r3, [r7, #20]
 8013a0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	461a      	mov	r2, r3
 8013a10:	6879      	ldr	r1, [r7, #4]
 8013a12:	68f8      	ldr	r0, [r7, #12]
 8013a14:	f000 ff8c 	bl	8014930 <USBD_CtlContinueRx>
 8013a18:	e038      	b.n	8013a8c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a20:	691b      	ldr	r3, [r3, #16]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d00a      	beq.n	8013a3c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8013a2c:	2b03      	cmp	r3, #3
 8013a2e:	d105      	bne.n	8013a3c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a36:	691b      	ldr	r3, [r3, #16]
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8013a3c:	68f8      	ldr	r0, [r7, #12]
 8013a3e:	f000 ff89 	bl	8014954 <USBD_CtlSendStatus>
 8013a42:	e023      	b.n	8013a8c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013a4a:	2b05      	cmp	r3, #5
 8013a4c:	d11e      	bne.n	8013a8c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2200      	movs	r2, #0
 8013a52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8013a56:	2100      	movs	r1, #0
 8013a58:	68f8      	ldr	r0, [r7, #12]
 8013a5a:	f7f0 f81b 	bl	8003a94 <USBD_LL_StallEP>
 8013a5e:	e015      	b.n	8013a8c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a66:	699b      	ldr	r3, [r3, #24]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d00d      	beq.n	8013a88 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8013a72:	2b03      	cmp	r3, #3
 8013a74:	d108      	bne.n	8013a88 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013a7c:	699b      	ldr	r3, [r3, #24]
 8013a7e:	7afa      	ldrb	r2, [r7, #11]
 8013a80:	4611      	mov	r1, r2
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	4798      	blx	r3
 8013a86:	e001      	b.n	8013a8c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013a88:	2302      	movs	r3, #2
 8013a8a:	e000      	b.n	8013a8e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8013a8c:	2300      	movs	r3, #0
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3718      	adds	r7, #24
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}

08013a96 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013a96:	b580      	push	{r7, lr}
 8013a98:	b086      	sub	sp, #24
 8013a9a:	af00      	add	r7, sp, #0
 8013a9c:	60f8      	str	r0, [r7, #12]
 8013a9e:	460b      	mov	r3, r1
 8013aa0:	607a      	str	r2, [r7, #4]
 8013aa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013aa4:	7afb      	ldrb	r3, [r7, #11]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d17f      	bne.n	8013baa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	3314      	adds	r3, #20
 8013aae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013ab6:	2b02      	cmp	r3, #2
 8013ab8:	d15c      	bne.n	8013b74 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	68da      	ldr	r2, [r3, #12]
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	691b      	ldr	r3, [r3, #16]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d915      	bls.n	8013af2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	68da      	ldr	r2, [r3, #12]
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	691b      	ldr	r3, [r3, #16]
 8013ace:	1ad2      	subs	r2, r2, r3
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	68db      	ldr	r3, [r3, #12]
 8013ad8:	b29b      	uxth	r3, r3
 8013ada:	461a      	mov	r2, r3
 8013adc:	6879      	ldr	r1, [r7, #4]
 8013ade:	68f8      	ldr	r0, [r7, #12]
 8013ae0:	f000 fef6 	bl	80148d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	2100      	movs	r1, #0
 8013aea:	68f8      	ldr	r0, [r7, #12]
 8013aec:	f7f0 f87d 	bl	8003bea <USBD_LL_PrepareReceive>
 8013af0:	e04e      	b.n	8013b90 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	689b      	ldr	r3, [r3, #8]
 8013af6:	697a      	ldr	r2, [r7, #20]
 8013af8:	6912      	ldr	r2, [r2, #16]
 8013afa:	fbb3 f1f2 	udiv	r1, r3, r2
 8013afe:	fb01 f202 	mul.w	r2, r1, r2
 8013b02:	1a9b      	subs	r3, r3, r2
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d11c      	bne.n	8013b42 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	689a      	ldr	r2, [r3, #8]
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d316      	bcc.n	8013b42 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	689a      	ldr	r2, [r3, #8]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d20f      	bcs.n	8013b42 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013b22:	2200      	movs	r2, #0
 8013b24:	2100      	movs	r1, #0
 8013b26:	68f8      	ldr	r0, [r7, #12]
 8013b28:	f000 fed2 	bl	80148d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2200      	movs	r2, #0
 8013b30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b34:	2300      	movs	r3, #0
 8013b36:	2200      	movs	r2, #0
 8013b38:	2100      	movs	r1, #0
 8013b3a:	68f8      	ldr	r0, [r7, #12]
 8013b3c:	f7f0 f855 	bl	8003bea <USBD_LL_PrepareReceive>
 8013b40:	e026      	b.n	8013b90 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d00a      	beq.n	8013b64 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8013b54:	2b03      	cmp	r3, #3
 8013b56:	d105      	bne.n	8013b64 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013b5e:	68db      	ldr	r3, [r3, #12]
 8013b60:	68f8      	ldr	r0, [r7, #12]
 8013b62:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8013b64:	2180      	movs	r1, #128	@ 0x80
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	f7ef ff94 	bl	8003a94 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8013b6c:	68f8      	ldr	r0, [r7, #12]
 8013b6e:	f000 ff04 	bl	801497a <USBD_CtlReceiveStatus>
 8013b72:	e00d      	b.n	8013b90 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013b7a:	2b04      	cmp	r3, #4
 8013b7c:	d004      	beq.n	8013b88 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d103      	bne.n	8013b90 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8013b88:	2180      	movs	r1, #128	@ 0x80
 8013b8a:	68f8      	ldr	r0, [r7, #12]
 8013b8c:	f7ef ff82 	bl	8003a94 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013b96:	2b01      	cmp	r3, #1
 8013b98:	d11d      	bne.n	8013bd6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8013b9a:	68f8      	ldr	r0, [r7, #12]
 8013b9c:	f7ff fe81 	bl	80138a2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013ba8:	e015      	b.n	8013bd6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013bb0:	695b      	ldr	r3, [r3, #20]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d00d      	beq.n	8013bd2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8013bbc:	2b03      	cmp	r3, #3
 8013bbe:	d108      	bne.n	8013bd2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013bc6:	695b      	ldr	r3, [r3, #20]
 8013bc8:	7afa      	ldrb	r2, [r7, #11]
 8013bca:	4611      	mov	r1, r2
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	4798      	blx	r3
 8013bd0:	e001      	b.n	8013bd6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8013bd2:	2302      	movs	r3, #2
 8013bd4:	e000      	b.n	8013bd8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8013bd6:	2300      	movs	r3, #0
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3718      	adds	r7, #24
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013be8:	2340      	movs	r3, #64	@ 0x40
 8013bea:	2200      	movs	r2, #0
 8013bec:	2100      	movs	r1, #0
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7ef ff0b 	bl	8003a0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2240      	movs	r2, #64	@ 0x40
 8013c00:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c04:	2340      	movs	r3, #64	@ 0x40
 8013c06:	2200      	movs	r2, #0
 8013c08:	2180      	movs	r1, #128	@ 0x80
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f7ef fefd 	bl	8003a0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2201      	movs	r2, #1
 8013c14:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2240      	movs	r2, #64	@ 0x40
 8013c1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	2201      	movs	r2, #1
 8013c20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2200      	movs	r2, #0
 8013c28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	2200      	movs	r2, #0
 8013c36:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d009      	beq.n	8013c58 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013c4a:	685b      	ldr	r3, [r3, #4]
 8013c4c:	687a      	ldr	r2, [r7, #4]
 8013c4e:	6852      	ldr	r2, [r2, #4]
 8013c50:	b2d2      	uxtb	r2, r2
 8013c52:	4611      	mov	r1, r2
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	4798      	blx	r3
  }

  return USBD_OK;
 8013c58:	2300      	movs	r3, #0
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3708      	adds	r7, #8
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}

08013c62 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013c62:	b480      	push	{r7}
 8013c64:	b083      	sub	sp, #12
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
 8013c6a:	460b      	mov	r3, r1
 8013c6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	78fa      	ldrb	r2, [r7, #3]
 8013c72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013c74:	2300      	movs	r3, #0
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	370c      	adds	r7, #12
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bc80      	pop	{r7}
 8013c7e:	4770      	bx	lr

08013c80 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013c80:	b480      	push	{r7}
 8013c82:	b083      	sub	sp, #12
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	2204      	movs	r2, #4
 8013c98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013c9c:	2300      	movs	r3, #0
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	370c      	adds	r7, #12
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bc80      	pop	{r7}
 8013ca6:	4770      	bx	lr

08013ca8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cb6:	2b04      	cmp	r3, #4
 8013cb8:	d105      	bne.n	8013cc6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013cc6:	2300      	movs	r3, #0
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	370c      	adds	r7, #12
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bc80      	pop	{r7}
 8013cd0:	4770      	bx	lr

08013cd2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013cd2:	b580      	push	{r7, lr}
 8013cd4:	b082      	sub	sp, #8
 8013cd6:	af00      	add	r7, sp, #0
 8013cd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ce0:	2b03      	cmp	r3, #3
 8013ce2:	d10b      	bne.n	8013cfc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013cea:	69db      	ldr	r3, [r3, #28]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d005      	beq.n	8013cfc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013cf6:	69db      	ldr	r3, [r3, #28]
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013cfc:	2300      	movs	r3, #0
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3708      	adds	r7, #8
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bd80      	pop	{r7, pc}

08013d06 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013d06:	b480      	push	{r7}
 8013d08:	b083      	sub	sp, #12
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	6078      	str	r0, [r7, #4]
 8013d0e:	460b      	mov	r3, r1
 8013d10:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8013d12:	2300      	movs	r3, #0
}
 8013d14:	4618      	mov	r0, r3
 8013d16:	370c      	adds	r7, #12
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bc80      	pop	{r7}
 8013d1c:	4770      	bx	lr

08013d1e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013d1e:	b480      	push	{r7}
 8013d20:	b083      	sub	sp, #12
 8013d22:	af00      	add	r7, sp, #0
 8013d24:	6078      	str	r0, [r7, #4]
 8013d26:	460b      	mov	r3, r1
 8013d28:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8013d2a:	2300      	movs	r3, #0
}
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	370c      	adds	r7, #12
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bc80      	pop	{r7}
 8013d34:	4770      	bx	lr

08013d36 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013d36:	b480      	push	{r7}
 8013d38:	b083      	sub	sp, #12
 8013d3a:	af00      	add	r7, sp, #0
 8013d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013d3e:	2300      	movs	r3, #0
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	370c      	adds	r7, #12
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bc80      	pop	{r7}
 8013d48:	4770      	bx	lr

08013d4a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013d4a:	b580      	push	{r7, lr}
 8013d4c:	b082      	sub	sp, #8
 8013d4e:	af00      	add	r7, sp, #0
 8013d50:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	2201      	movs	r2, #1
 8013d56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	6852      	ldr	r2, [r2, #4]
 8013d66:	b2d2      	uxtb	r2, r2
 8013d68:	4611      	mov	r1, r2
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	4798      	blx	r3

  return USBD_OK;
 8013d6e:	2300      	movs	r3, #0
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3708      	adds	r7, #8
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}

08013d78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b084      	sub	sp, #16
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d82:	2300      	movs	r3, #0
 8013d84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	781b      	ldrb	r3, [r3, #0]
 8013d8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013d8e:	2b40      	cmp	r3, #64	@ 0x40
 8013d90:	d005      	beq.n	8013d9e <USBD_StdDevReq+0x26>
 8013d92:	2b40      	cmp	r3, #64	@ 0x40
 8013d94:	d84f      	bhi.n	8013e36 <USBD_StdDevReq+0xbe>
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d009      	beq.n	8013dae <USBD_StdDevReq+0x36>
 8013d9a:	2b20      	cmp	r3, #32
 8013d9c:	d14b      	bne.n	8013e36 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013da4:	689b      	ldr	r3, [r3, #8]
 8013da6:	6839      	ldr	r1, [r7, #0]
 8013da8:	6878      	ldr	r0, [r7, #4]
 8013daa:	4798      	blx	r3
      break;
 8013dac:	e048      	b.n	8013e40 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013dae:	683b      	ldr	r3, [r7, #0]
 8013db0:	785b      	ldrb	r3, [r3, #1]
 8013db2:	2b09      	cmp	r3, #9
 8013db4:	d839      	bhi.n	8013e2a <USBD_StdDevReq+0xb2>
 8013db6:	a201      	add	r2, pc, #4	@ (adr r2, 8013dbc <USBD_StdDevReq+0x44>)
 8013db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dbc:	08013e0d 	.word	0x08013e0d
 8013dc0:	08013e21 	.word	0x08013e21
 8013dc4:	08013e2b 	.word	0x08013e2b
 8013dc8:	08013e17 	.word	0x08013e17
 8013dcc:	08013e2b 	.word	0x08013e2b
 8013dd0:	08013def 	.word	0x08013def
 8013dd4:	08013de5 	.word	0x08013de5
 8013dd8:	08013e2b 	.word	0x08013e2b
 8013ddc:	08013e03 	.word	0x08013e03
 8013de0:	08013df9 	.word	0x08013df9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013de4:	6839      	ldr	r1, [r7, #0]
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f000 f9dc 	bl	80141a4 <USBD_GetDescriptor>
          break;
 8013dec:	e022      	b.n	8013e34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013dee:	6839      	ldr	r1, [r7, #0]
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f000 fb3f 	bl	8014474 <USBD_SetAddress>
          break;
 8013df6:	e01d      	b.n	8013e34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8013df8:	6839      	ldr	r1, [r7, #0]
 8013dfa:	6878      	ldr	r0, [r7, #4]
 8013dfc:	f000 fb7e 	bl	80144fc <USBD_SetConfig>
          break;
 8013e00:	e018      	b.n	8013e34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013e02:	6839      	ldr	r1, [r7, #0]
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	f000 fc07 	bl	8014618 <USBD_GetConfig>
          break;
 8013e0a:	e013      	b.n	8013e34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013e0c:	6839      	ldr	r1, [r7, #0]
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f000 fc37 	bl	8014682 <USBD_GetStatus>
          break;
 8013e14:	e00e      	b.n	8013e34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013e16:	6839      	ldr	r1, [r7, #0]
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f000 fc65 	bl	80146e8 <USBD_SetFeature>
          break;
 8013e1e:	e009      	b.n	8013e34 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013e20:	6839      	ldr	r1, [r7, #0]
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f000 fc74 	bl	8014710 <USBD_ClrFeature>
          break;
 8013e28:	e004      	b.n	8013e34 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8013e2a:	6839      	ldr	r1, [r7, #0]
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f000 fcc9 	bl	80147c4 <USBD_CtlError>
          break;
 8013e32:	bf00      	nop
      }
      break;
 8013e34:	e004      	b.n	8013e40 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8013e36:	6839      	ldr	r1, [r7, #0]
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f000 fcc3 	bl	80147c4 <USBD_CtlError>
      break;
 8013e3e:	bf00      	nop
  }

  return ret;
 8013e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3710      	adds	r7, #16
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop

08013e4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e56:	2300      	movs	r3, #0
 8013e58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013e62:	2b40      	cmp	r3, #64	@ 0x40
 8013e64:	d005      	beq.n	8013e72 <USBD_StdItfReq+0x26>
 8013e66:	2b40      	cmp	r3, #64	@ 0x40
 8013e68:	d82e      	bhi.n	8013ec8 <USBD_StdItfReq+0x7c>
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d001      	beq.n	8013e72 <USBD_StdItfReq+0x26>
 8013e6e:	2b20      	cmp	r3, #32
 8013e70:	d12a      	bne.n	8013ec8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e78:	3b01      	subs	r3, #1
 8013e7a:	2b02      	cmp	r3, #2
 8013e7c:	d81d      	bhi.n	8013eba <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	889b      	ldrh	r3, [r3, #4]
 8013e82:	b2db      	uxtb	r3, r3
 8013e84:	2b01      	cmp	r3, #1
 8013e86:	d813      	bhi.n	8013eb0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e8e:	689b      	ldr	r3, [r3, #8]
 8013e90:	6839      	ldr	r1, [r7, #0]
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	4798      	blx	r3
 8013e96:	4603      	mov	r3, r0
 8013e98:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	88db      	ldrh	r3, [r3, #6]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d110      	bne.n	8013ec4 <USBD_StdItfReq+0x78>
 8013ea2:	7bfb      	ldrb	r3, [r7, #15]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d10d      	bne.n	8013ec4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8013ea8:	6878      	ldr	r0, [r7, #4]
 8013eaa:	f000 fd53 	bl	8014954 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013eae:	e009      	b.n	8013ec4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8013eb0:	6839      	ldr	r1, [r7, #0]
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f000 fc86 	bl	80147c4 <USBD_CtlError>
          break;
 8013eb8:	e004      	b.n	8013ec4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8013eba:	6839      	ldr	r1, [r7, #0]
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f000 fc81 	bl	80147c4 <USBD_CtlError>
          break;
 8013ec2:	e000      	b.n	8013ec6 <USBD_StdItfReq+0x7a>
          break;
 8013ec4:	bf00      	nop
      }
      break;
 8013ec6:	e004      	b.n	8013ed2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8013ec8:	6839      	ldr	r1, [r7, #0]
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 fc7a 	bl	80147c4 <USBD_CtlError>
      break;
 8013ed0:	bf00      	nop
  }

  return USBD_OK;
 8013ed2:	2300      	movs	r3, #0
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3710      	adds	r7, #16
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}

08013edc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b084      	sub	sp, #16
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
 8013ee4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	889b      	ldrh	r3, [r3, #4]
 8013eee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013ef8:	2b40      	cmp	r3, #64	@ 0x40
 8013efa:	d007      	beq.n	8013f0c <USBD_StdEPReq+0x30>
 8013efc:	2b40      	cmp	r3, #64	@ 0x40
 8013efe:	f200 8146 	bhi.w	801418e <USBD_StdEPReq+0x2b2>
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00a      	beq.n	8013f1c <USBD_StdEPReq+0x40>
 8013f06:	2b20      	cmp	r3, #32
 8013f08:	f040 8141 	bne.w	801418e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f12:	689b      	ldr	r3, [r3, #8]
 8013f14:	6839      	ldr	r1, [r7, #0]
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	4798      	blx	r3
      break;
 8013f1a:	e13d      	b.n	8014198 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013f24:	2b20      	cmp	r3, #32
 8013f26:	d10a      	bne.n	8013f3e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f2e:	689b      	ldr	r3, [r3, #8]
 8013f30:	6839      	ldr	r1, [r7, #0]
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	4798      	blx	r3
 8013f36:	4603      	mov	r3, r0
 8013f38:	73fb      	strb	r3, [r7, #15]

        return ret;
 8013f3a:	7bfb      	ldrb	r3, [r7, #15]
 8013f3c:	e12d      	b.n	801419a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	785b      	ldrb	r3, [r3, #1]
 8013f42:	2b03      	cmp	r3, #3
 8013f44:	d007      	beq.n	8013f56 <USBD_StdEPReq+0x7a>
 8013f46:	2b03      	cmp	r3, #3
 8013f48:	f300 811b 	bgt.w	8014182 <USBD_StdEPReq+0x2a6>
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d072      	beq.n	8014036 <USBD_StdEPReq+0x15a>
 8013f50:	2b01      	cmp	r3, #1
 8013f52:	d03a      	beq.n	8013fca <USBD_StdEPReq+0xee>
 8013f54:	e115      	b.n	8014182 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f5c:	2b02      	cmp	r3, #2
 8013f5e:	d002      	beq.n	8013f66 <USBD_StdEPReq+0x8a>
 8013f60:	2b03      	cmp	r3, #3
 8013f62:	d015      	beq.n	8013f90 <USBD_StdEPReq+0xb4>
 8013f64:	e02b      	b.n	8013fbe <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013f66:	7bbb      	ldrb	r3, [r7, #14]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d00c      	beq.n	8013f86 <USBD_StdEPReq+0xaa>
 8013f6c:	7bbb      	ldrb	r3, [r7, #14]
 8013f6e:	2b80      	cmp	r3, #128	@ 0x80
 8013f70:	d009      	beq.n	8013f86 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8013f72:	7bbb      	ldrb	r3, [r7, #14]
 8013f74:	4619      	mov	r1, r3
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f7ef fd8c 	bl	8003a94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013f7c:	2180      	movs	r1, #128	@ 0x80
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7ef fd88 	bl	8003a94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013f84:	e020      	b.n	8013fc8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8013f86:	6839      	ldr	r1, [r7, #0]
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f000 fc1b 	bl	80147c4 <USBD_CtlError>
              break;
 8013f8e:	e01b      	b.n	8013fc8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	885b      	ldrh	r3, [r3, #2]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d10e      	bne.n	8013fb6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8013f98:	7bbb      	ldrb	r3, [r7, #14]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d00b      	beq.n	8013fb6 <USBD_StdEPReq+0xda>
 8013f9e:	7bbb      	ldrb	r3, [r7, #14]
 8013fa0:	2b80      	cmp	r3, #128	@ 0x80
 8013fa2:	d008      	beq.n	8013fb6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	88db      	ldrh	r3, [r3, #6]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d104      	bne.n	8013fb6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8013fac:	7bbb      	ldrb	r3, [r7, #14]
 8013fae:	4619      	mov	r1, r3
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f7ef fd6f 	bl	8003a94 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f000 fccc 	bl	8014954 <USBD_CtlSendStatus>

              break;
 8013fbc:	e004      	b.n	8013fc8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8013fbe:	6839      	ldr	r1, [r7, #0]
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f000 fbff 	bl	80147c4 <USBD_CtlError>
              break;
 8013fc6:	bf00      	nop
          }
          break;
 8013fc8:	e0e0      	b.n	801418c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013fd0:	2b02      	cmp	r3, #2
 8013fd2:	d002      	beq.n	8013fda <USBD_StdEPReq+0xfe>
 8013fd4:	2b03      	cmp	r3, #3
 8013fd6:	d015      	beq.n	8014004 <USBD_StdEPReq+0x128>
 8013fd8:	e026      	b.n	8014028 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013fda:	7bbb      	ldrb	r3, [r7, #14]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d00c      	beq.n	8013ffa <USBD_StdEPReq+0x11e>
 8013fe0:	7bbb      	ldrb	r3, [r7, #14]
 8013fe2:	2b80      	cmp	r3, #128	@ 0x80
 8013fe4:	d009      	beq.n	8013ffa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8013fe6:	7bbb      	ldrb	r3, [r7, #14]
 8013fe8:	4619      	mov	r1, r3
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f7ef fd52 	bl	8003a94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8013ff0:	2180      	movs	r1, #128	@ 0x80
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f7ef fd4e 	bl	8003a94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013ff8:	e01c      	b.n	8014034 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8013ffa:	6839      	ldr	r1, [r7, #0]
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f000 fbe1 	bl	80147c4 <USBD_CtlError>
              break;
 8014002:	e017      	b.n	8014034 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	885b      	ldrh	r3, [r3, #2]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d112      	bne.n	8014032 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801400c:	7bbb      	ldrb	r3, [r7, #14]
 801400e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014012:	2b00      	cmp	r3, #0
 8014014:	d004      	beq.n	8014020 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8014016:	7bbb      	ldrb	r3, [r7, #14]
 8014018:	4619      	mov	r1, r3
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f7ef fd59 	bl	8003ad2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f000 fc97 	bl	8014954 <USBD_CtlSendStatus>
              }
              break;
 8014026:	e004      	b.n	8014032 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8014028:	6839      	ldr	r1, [r7, #0]
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f000 fbca 	bl	80147c4 <USBD_CtlError>
              break;
 8014030:	e000      	b.n	8014034 <USBD_StdEPReq+0x158>
              break;
 8014032:	bf00      	nop
          }
          break;
 8014034:	e0aa      	b.n	801418c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801403c:	2b02      	cmp	r3, #2
 801403e:	d002      	beq.n	8014046 <USBD_StdEPReq+0x16a>
 8014040:	2b03      	cmp	r3, #3
 8014042:	d032      	beq.n	80140aa <USBD_StdEPReq+0x1ce>
 8014044:	e097      	b.n	8014176 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014046:	7bbb      	ldrb	r3, [r7, #14]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d007      	beq.n	801405c <USBD_StdEPReq+0x180>
 801404c:	7bbb      	ldrb	r3, [r7, #14]
 801404e:	2b80      	cmp	r3, #128	@ 0x80
 8014050:	d004      	beq.n	801405c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8014052:	6839      	ldr	r1, [r7, #0]
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f000 fbb5 	bl	80147c4 <USBD_CtlError>
                break;
 801405a:	e091      	b.n	8014180 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801405c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014060:	2b00      	cmp	r3, #0
 8014062:	da0b      	bge.n	801407c <USBD_StdEPReq+0x1a0>
 8014064:	7bbb      	ldrb	r3, [r7, #14]
 8014066:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801406a:	4613      	mov	r3, r2
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	4413      	add	r3, r2
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	3310      	adds	r3, #16
 8014074:	687a      	ldr	r2, [r7, #4]
 8014076:	4413      	add	r3, r2
 8014078:	3304      	adds	r3, #4
 801407a:	e00b      	b.n	8014094 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801407c:	7bbb      	ldrb	r3, [r7, #14]
 801407e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014082:	4613      	mov	r3, r2
 8014084:	009b      	lsls	r3, r3, #2
 8014086:	4413      	add	r3, r2
 8014088:	009b      	lsls	r3, r3, #2
 801408a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	4413      	add	r3, r2
 8014092:	3304      	adds	r3, #4
 8014094:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	2200      	movs	r2, #0
 801409a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	2202      	movs	r2, #2
 80140a0:	4619      	mov	r1, r3
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f000 fbf8 	bl	8014898 <USBD_CtlSendData>
              break;
 80140a8:	e06a      	b.n	8014180 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80140aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	da11      	bge.n	80140d6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80140b2:	7bbb      	ldrb	r3, [r7, #14]
 80140b4:	f003 020f 	and.w	r2, r3, #15
 80140b8:	6879      	ldr	r1, [r7, #4]
 80140ba:	4613      	mov	r3, r2
 80140bc:	009b      	lsls	r3, r3, #2
 80140be:	4413      	add	r3, r2
 80140c0:	009b      	lsls	r3, r3, #2
 80140c2:	440b      	add	r3, r1
 80140c4:	3318      	adds	r3, #24
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d117      	bne.n	80140fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80140cc:	6839      	ldr	r1, [r7, #0]
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f000 fb78 	bl	80147c4 <USBD_CtlError>
                  break;
 80140d4:	e054      	b.n	8014180 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80140d6:	7bbb      	ldrb	r3, [r7, #14]
 80140d8:	f003 020f 	and.w	r2, r3, #15
 80140dc:	6879      	ldr	r1, [r7, #4]
 80140de:	4613      	mov	r3, r2
 80140e0:	009b      	lsls	r3, r3, #2
 80140e2:	4413      	add	r3, r2
 80140e4:	009b      	lsls	r3, r3, #2
 80140e6:	440b      	add	r3, r1
 80140e8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d104      	bne.n	80140fc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80140f2:	6839      	ldr	r1, [r7, #0]
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f000 fb65 	bl	80147c4 <USBD_CtlError>
                  break;
 80140fa:	e041      	b.n	8014180 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80140fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014100:	2b00      	cmp	r3, #0
 8014102:	da0b      	bge.n	801411c <USBD_StdEPReq+0x240>
 8014104:	7bbb      	ldrb	r3, [r7, #14]
 8014106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801410a:	4613      	mov	r3, r2
 801410c:	009b      	lsls	r3, r3, #2
 801410e:	4413      	add	r3, r2
 8014110:	009b      	lsls	r3, r3, #2
 8014112:	3310      	adds	r3, #16
 8014114:	687a      	ldr	r2, [r7, #4]
 8014116:	4413      	add	r3, r2
 8014118:	3304      	adds	r3, #4
 801411a:	e00b      	b.n	8014134 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801411c:	7bbb      	ldrb	r3, [r7, #14]
 801411e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014122:	4613      	mov	r3, r2
 8014124:	009b      	lsls	r3, r3, #2
 8014126:	4413      	add	r3, r2
 8014128:	009b      	lsls	r3, r3, #2
 801412a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	4413      	add	r3, r2
 8014132:	3304      	adds	r3, #4
 8014134:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014136:	7bbb      	ldrb	r3, [r7, #14]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d002      	beq.n	8014142 <USBD_StdEPReq+0x266>
 801413c:	7bbb      	ldrb	r3, [r7, #14]
 801413e:	2b80      	cmp	r3, #128	@ 0x80
 8014140:	d103      	bne.n	801414a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	2200      	movs	r2, #0
 8014146:	601a      	str	r2, [r3, #0]
 8014148:	e00e      	b.n	8014168 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801414a:	7bbb      	ldrb	r3, [r7, #14]
 801414c:	4619      	mov	r1, r3
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f7ef fcde 	bl	8003b10 <USBD_LL_IsStallEP>
 8014154:	4603      	mov	r3, r0
 8014156:	2b00      	cmp	r3, #0
 8014158:	d003      	beq.n	8014162 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 801415a:	68bb      	ldr	r3, [r7, #8]
 801415c:	2201      	movs	r2, #1
 801415e:	601a      	str	r2, [r3, #0]
 8014160:	e002      	b.n	8014168 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8014162:	68bb      	ldr	r3, [r7, #8]
 8014164:	2200      	movs	r2, #0
 8014166:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	2202      	movs	r2, #2
 801416c:	4619      	mov	r1, r3
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f000 fb92 	bl	8014898 <USBD_CtlSendData>
              break;
 8014174:	e004      	b.n	8014180 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8014176:	6839      	ldr	r1, [r7, #0]
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f000 fb23 	bl	80147c4 <USBD_CtlError>
              break;
 801417e:	bf00      	nop
          }
          break;
 8014180:	e004      	b.n	801418c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8014182:	6839      	ldr	r1, [r7, #0]
 8014184:	6878      	ldr	r0, [r7, #4]
 8014186:	f000 fb1d 	bl	80147c4 <USBD_CtlError>
          break;
 801418a:	bf00      	nop
      }
      break;
 801418c:	e004      	b.n	8014198 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 801418e:	6839      	ldr	r1, [r7, #0]
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f000 fb17 	bl	80147c4 <USBD_CtlError>
      break;
 8014196:	bf00      	nop
  }

  return ret;
 8014198:	7bfb      	ldrb	r3, [r7, #15]
}
 801419a:	4618      	mov	r0, r3
 801419c:	3710      	adds	r7, #16
 801419e:	46bd      	mov	sp, r7
 80141a0:	bd80      	pop	{r7, pc}
	...

080141a4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
 80141ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80141ae:	2300      	movs	r3, #0
 80141b0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80141b2:	2300      	movs	r3, #0
 80141b4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80141b6:	2300      	movs	r3, #0
 80141b8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	885b      	ldrh	r3, [r3, #2]
 80141be:	0a1b      	lsrs	r3, r3, #8
 80141c0:	b29b      	uxth	r3, r3
 80141c2:	3b01      	subs	r3, #1
 80141c4:	2b06      	cmp	r3, #6
 80141c6:	f200 8128 	bhi.w	801441a <USBD_GetDescriptor+0x276>
 80141ca:	a201      	add	r2, pc, #4	@ (adr r2, 80141d0 <USBD_GetDescriptor+0x2c>)
 80141cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141d0:	080141ed 	.word	0x080141ed
 80141d4:	08014205 	.word	0x08014205
 80141d8:	08014245 	.word	0x08014245
 80141dc:	0801441b 	.word	0x0801441b
 80141e0:	0801441b 	.word	0x0801441b
 80141e4:	080143bb 	.word	0x080143bb
 80141e8:	080143e7 	.word	0x080143e7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	687a      	ldr	r2, [r7, #4]
 80141f6:	7c12      	ldrb	r2, [r2, #16]
 80141f8:	f107 0108 	add.w	r1, r7, #8
 80141fc:	4610      	mov	r0, r2
 80141fe:	4798      	blx	r3
 8014200:	60f8      	str	r0, [r7, #12]
      break;
 8014202:	e112      	b.n	801442a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	7c1b      	ldrb	r3, [r3, #16]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d10d      	bne.n	8014228 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014214:	f107 0208 	add.w	r2, r7, #8
 8014218:	4610      	mov	r0, r2
 801421a:	4798      	blx	r3
 801421c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	3301      	adds	r3, #1
 8014222:	2202      	movs	r2, #2
 8014224:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014226:	e100      	b.n	801442a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014230:	f107 0208 	add.w	r2, r7, #8
 8014234:	4610      	mov	r0, r2
 8014236:	4798      	blx	r3
 8014238:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	3301      	adds	r3, #1
 801423e:	2202      	movs	r2, #2
 8014240:	701a      	strb	r2, [r3, #0]
      break;
 8014242:	e0f2      	b.n	801442a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	885b      	ldrh	r3, [r3, #2]
 8014248:	b2db      	uxtb	r3, r3
 801424a:	2b05      	cmp	r3, #5
 801424c:	f200 80ac 	bhi.w	80143a8 <USBD_GetDescriptor+0x204>
 8014250:	a201      	add	r2, pc, #4	@ (adr r2, 8014258 <USBD_GetDescriptor+0xb4>)
 8014252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014256:	bf00      	nop
 8014258:	08014271 	.word	0x08014271
 801425c:	080142a5 	.word	0x080142a5
 8014260:	080142d9 	.word	0x080142d9
 8014264:	0801430d 	.word	0x0801430d
 8014268:	08014341 	.word	0x08014341
 801426c:	08014375 	.word	0x08014375
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8014276:	685b      	ldr	r3, [r3, #4]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d00b      	beq.n	8014294 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	687a      	ldr	r2, [r7, #4]
 8014286:	7c12      	ldrb	r2, [r2, #16]
 8014288:	f107 0108 	add.w	r1, r7, #8
 801428c:	4610      	mov	r0, r2
 801428e:	4798      	blx	r3
 8014290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014292:	e091      	b.n	80143b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014294:	6839      	ldr	r1, [r7, #0]
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f000 fa94 	bl	80147c4 <USBD_CtlError>
            err++;
 801429c:	7afb      	ldrb	r3, [r7, #11]
 801429e:	3301      	adds	r3, #1
 80142a0:	72fb      	strb	r3, [r7, #11]
          break;
 80142a2:	e089      	b.n	80143b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80142aa:	689b      	ldr	r3, [r3, #8]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d00b      	beq.n	80142c8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80142b6:	689b      	ldr	r3, [r3, #8]
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	7c12      	ldrb	r2, [r2, #16]
 80142bc:	f107 0108 	add.w	r1, r7, #8
 80142c0:	4610      	mov	r0, r2
 80142c2:	4798      	blx	r3
 80142c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80142c6:	e077      	b.n	80143b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80142c8:	6839      	ldr	r1, [r7, #0]
 80142ca:	6878      	ldr	r0, [r7, #4]
 80142cc:	f000 fa7a 	bl	80147c4 <USBD_CtlError>
            err++;
 80142d0:	7afb      	ldrb	r3, [r7, #11]
 80142d2:	3301      	adds	r3, #1
 80142d4:	72fb      	strb	r3, [r7, #11]
          break;
 80142d6:	e06f      	b.n	80143b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d00b      	beq.n	80142fc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80142ea:	68db      	ldr	r3, [r3, #12]
 80142ec:	687a      	ldr	r2, [r7, #4]
 80142ee:	7c12      	ldrb	r2, [r2, #16]
 80142f0:	f107 0108 	add.w	r1, r7, #8
 80142f4:	4610      	mov	r0, r2
 80142f6:	4798      	blx	r3
 80142f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80142fa:	e05d      	b.n	80143b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80142fc:	6839      	ldr	r1, [r7, #0]
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f000 fa60 	bl	80147c4 <USBD_CtlError>
            err++;
 8014304:	7afb      	ldrb	r3, [r7, #11]
 8014306:	3301      	adds	r3, #1
 8014308:	72fb      	strb	r3, [r7, #11]
          break;
 801430a:	e055      	b.n	80143b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8014312:	691b      	ldr	r3, [r3, #16]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d00b      	beq.n	8014330 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 801431e:	691b      	ldr	r3, [r3, #16]
 8014320:	687a      	ldr	r2, [r7, #4]
 8014322:	7c12      	ldrb	r2, [r2, #16]
 8014324:	f107 0108 	add.w	r1, r7, #8
 8014328:	4610      	mov	r0, r2
 801432a:	4798      	blx	r3
 801432c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801432e:	e043      	b.n	80143b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014330:	6839      	ldr	r1, [r7, #0]
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f000 fa46 	bl	80147c4 <USBD_CtlError>
            err++;
 8014338:	7afb      	ldrb	r3, [r7, #11]
 801433a:	3301      	adds	r3, #1
 801433c:	72fb      	strb	r3, [r7, #11]
          break;
 801433e:	e03b      	b.n	80143b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8014346:	695b      	ldr	r3, [r3, #20]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d00b      	beq.n	8014364 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8014352:	695b      	ldr	r3, [r3, #20]
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	7c12      	ldrb	r2, [r2, #16]
 8014358:	f107 0108 	add.w	r1, r7, #8
 801435c:	4610      	mov	r0, r2
 801435e:	4798      	blx	r3
 8014360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014362:	e029      	b.n	80143b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014364:	6839      	ldr	r1, [r7, #0]
 8014366:	6878      	ldr	r0, [r7, #4]
 8014368:	f000 fa2c 	bl	80147c4 <USBD_CtlError>
            err++;
 801436c:	7afb      	ldrb	r3, [r7, #11]
 801436e:	3301      	adds	r3, #1
 8014370:	72fb      	strb	r3, [r7, #11]
          break;
 8014372:	e021      	b.n	80143b8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 801437a:	699b      	ldr	r3, [r3, #24]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d00b      	beq.n	8014398 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8014386:	699b      	ldr	r3, [r3, #24]
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	7c12      	ldrb	r2, [r2, #16]
 801438c:	f107 0108 	add.w	r1, r7, #8
 8014390:	4610      	mov	r0, r2
 8014392:	4798      	blx	r3
 8014394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014396:	e00f      	b.n	80143b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014398:	6839      	ldr	r1, [r7, #0]
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f000 fa12 	bl	80147c4 <USBD_CtlError>
            err++;
 80143a0:	7afb      	ldrb	r3, [r7, #11]
 80143a2:	3301      	adds	r3, #1
 80143a4:	72fb      	strb	r3, [r7, #11]
          break;
 80143a6:	e007      	b.n	80143b8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80143a8:	6839      	ldr	r1, [r7, #0]
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f000 fa0a 	bl	80147c4 <USBD_CtlError>
          err++;
 80143b0:	7afb      	ldrb	r3, [r7, #11]
 80143b2:	3301      	adds	r3, #1
 80143b4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80143b6:	e038      	b.n	801442a <USBD_GetDescriptor+0x286>
 80143b8:	e037      	b.n	801442a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	7c1b      	ldrb	r3, [r3, #16]
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d109      	bne.n	80143d6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80143ca:	f107 0208 	add.w	r2, r7, #8
 80143ce:	4610      	mov	r0, r2
 80143d0:	4798      	blx	r3
 80143d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80143d4:	e029      	b.n	801442a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80143d6:	6839      	ldr	r1, [r7, #0]
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f000 f9f3 	bl	80147c4 <USBD_CtlError>
        err++;
 80143de:	7afb      	ldrb	r3, [r7, #11]
 80143e0:	3301      	adds	r3, #1
 80143e2:	72fb      	strb	r3, [r7, #11]
      break;
 80143e4:	e021      	b.n	801442a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	7c1b      	ldrb	r3, [r3, #16]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d10d      	bne.n	801440a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80143f6:	f107 0208 	add.w	r2, r7, #8
 80143fa:	4610      	mov	r0, r2
 80143fc:	4798      	blx	r3
 80143fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	3301      	adds	r3, #1
 8014404:	2207      	movs	r2, #7
 8014406:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014408:	e00f      	b.n	801442a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801440a:	6839      	ldr	r1, [r7, #0]
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f000 f9d9 	bl	80147c4 <USBD_CtlError>
        err++;
 8014412:	7afb      	ldrb	r3, [r7, #11]
 8014414:	3301      	adds	r3, #1
 8014416:	72fb      	strb	r3, [r7, #11]
      break;
 8014418:	e007      	b.n	801442a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801441a:	6839      	ldr	r1, [r7, #0]
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f000 f9d1 	bl	80147c4 <USBD_CtlError>
      err++;
 8014422:	7afb      	ldrb	r3, [r7, #11]
 8014424:	3301      	adds	r3, #1
 8014426:	72fb      	strb	r3, [r7, #11]
      break;
 8014428:	bf00      	nop
  }

  if (err != 0U)
 801442a:	7afb      	ldrb	r3, [r7, #11]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d11c      	bne.n	801446a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014430:	893b      	ldrh	r3, [r7, #8]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d011      	beq.n	801445a <USBD_GetDescriptor+0x2b6>
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	88db      	ldrh	r3, [r3, #6]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d00d      	beq.n	801445a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	88da      	ldrh	r2, [r3, #6]
 8014442:	893b      	ldrh	r3, [r7, #8]
 8014444:	4293      	cmp	r3, r2
 8014446:	bf28      	it	cs
 8014448:	4613      	movcs	r3, r2
 801444a:	b29b      	uxth	r3, r3
 801444c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801444e:	893b      	ldrh	r3, [r7, #8]
 8014450:	461a      	mov	r2, r3
 8014452:	68f9      	ldr	r1, [r7, #12]
 8014454:	6878      	ldr	r0, [r7, #4]
 8014456:	f000 fa1f 	bl	8014898 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	88db      	ldrh	r3, [r3, #6]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d104      	bne.n	801446c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	f000 fa76 	bl	8014954 <USBD_CtlSendStatus>
 8014468:	e000      	b.n	801446c <USBD_GetDescriptor+0x2c8>
    return;
 801446a:	bf00      	nop
    }
  }
}
 801446c:	3710      	adds	r7, #16
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}
 8014472:	bf00      	nop

08014474 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b084      	sub	sp, #16
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	889b      	ldrh	r3, [r3, #4]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d130      	bne.n	80144e8 <USBD_SetAddress+0x74>
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	88db      	ldrh	r3, [r3, #6]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d12c      	bne.n	80144e8 <USBD_SetAddress+0x74>
 801448e:	683b      	ldr	r3, [r7, #0]
 8014490:	885b      	ldrh	r3, [r3, #2]
 8014492:	2b7f      	cmp	r3, #127	@ 0x7f
 8014494:	d828      	bhi.n	80144e8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	885b      	ldrh	r3, [r3, #2]
 801449a:	b2db      	uxtb	r3, r3
 801449c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80144a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80144a8:	2b03      	cmp	r3, #3
 80144aa:	d104      	bne.n	80144b6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80144ac:	6839      	ldr	r1, [r7, #0]
 80144ae:	6878      	ldr	r0, [r7, #4]
 80144b0:	f000 f988 	bl	80147c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144b4:	e01d      	b.n	80144f2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	7bfa      	ldrb	r2, [r7, #15]
 80144ba:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80144be:	7bfb      	ldrb	r3, [r7, #15]
 80144c0:	4619      	mov	r1, r3
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7ef fb4f 	bl	8003b66 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f000 fa43 	bl	8014954 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80144ce:	7bfb      	ldrb	r3, [r7, #15]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d004      	beq.n	80144de <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	2202      	movs	r2, #2
 80144d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144dc:	e009      	b.n	80144f2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2201      	movs	r2, #1
 80144e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144e6:	e004      	b.n	80144f2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80144e8:	6839      	ldr	r1, [r7, #0]
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 f96a 	bl	80147c4 <USBD_CtlError>
  }
}
 80144f0:	bf00      	nop
 80144f2:	bf00      	nop
 80144f4:	3710      	adds	r7, #16
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bd80      	pop	{r7, pc}
	...

080144fc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014506:	683b      	ldr	r3, [r7, #0]
 8014508:	885b      	ldrh	r3, [r3, #2]
 801450a:	b2da      	uxtb	r2, r3
 801450c:	4b41      	ldr	r3, [pc, #260]	@ (8014614 <USBD_SetConfig+0x118>)
 801450e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014510:	4b40      	ldr	r3, [pc, #256]	@ (8014614 <USBD_SetConfig+0x118>)
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	2b01      	cmp	r3, #1
 8014516:	d904      	bls.n	8014522 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8014518:	6839      	ldr	r1, [r7, #0]
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f000 f952 	bl	80147c4 <USBD_CtlError>
 8014520:	e075      	b.n	801460e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014528:	2b02      	cmp	r3, #2
 801452a:	d002      	beq.n	8014532 <USBD_SetConfig+0x36>
 801452c:	2b03      	cmp	r3, #3
 801452e:	d023      	beq.n	8014578 <USBD_SetConfig+0x7c>
 8014530:	e062      	b.n	80145f8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8014532:	4b38      	ldr	r3, [pc, #224]	@ (8014614 <USBD_SetConfig+0x118>)
 8014534:	781b      	ldrb	r3, [r3, #0]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d01a      	beq.n	8014570 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801453a:	4b36      	ldr	r3, [pc, #216]	@ (8014614 <USBD_SetConfig+0x118>)
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	461a      	mov	r2, r3
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2203      	movs	r2, #3
 8014548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801454c:	4b31      	ldr	r3, [pc, #196]	@ (8014614 <USBD_SetConfig+0x118>)
 801454e:	781b      	ldrb	r3, [r3, #0]
 8014550:	4619      	mov	r1, r3
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f7ff f9af 	bl	80138b6 <USBD_SetClassConfig>
 8014558:	4603      	mov	r3, r0
 801455a:	2b02      	cmp	r3, #2
 801455c:	d104      	bne.n	8014568 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801455e:	6839      	ldr	r1, [r7, #0]
 8014560:	6878      	ldr	r0, [r7, #4]
 8014562:	f000 f92f 	bl	80147c4 <USBD_CtlError>
            return;
 8014566:	e052      	b.n	801460e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f000 f9f3 	bl	8014954 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801456e:	e04e      	b.n	801460e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8014570:	6878      	ldr	r0, [r7, #4]
 8014572:	f000 f9ef 	bl	8014954 <USBD_CtlSendStatus>
        break;
 8014576:	e04a      	b.n	801460e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014578:	4b26      	ldr	r3, [pc, #152]	@ (8014614 <USBD_SetConfig+0x118>)
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d112      	bne.n	80145a6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2202      	movs	r2, #2
 8014584:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8014588:	4b22      	ldr	r3, [pc, #136]	@ (8014614 <USBD_SetConfig+0x118>)
 801458a:	781b      	ldrb	r3, [r3, #0]
 801458c:	461a      	mov	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014592:	4b20      	ldr	r3, [pc, #128]	@ (8014614 <USBD_SetConfig+0x118>)
 8014594:	781b      	ldrb	r3, [r3, #0]
 8014596:	4619      	mov	r1, r3
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f7ff f9ab 	bl	80138f4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 f9d8 	bl	8014954 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80145a4:	e033      	b.n	801460e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80145a6:	4b1b      	ldr	r3, [pc, #108]	@ (8014614 <USBD_SetConfig+0x118>)
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	461a      	mov	r2, r3
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	685b      	ldr	r3, [r3, #4]
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d01d      	beq.n	80145f0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	685b      	ldr	r3, [r3, #4]
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	4619      	mov	r1, r3
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f7ff f999 	bl	80138f4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80145c2:	4b14      	ldr	r3, [pc, #80]	@ (8014614 <USBD_SetConfig+0x118>)
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	461a      	mov	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80145cc:	4b11      	ldr	r3, [pc, #68]	@ (8014614 <USBD_SetConfig+0x118>)
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	4619      	mov	r1, r3
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f7ff f96f 	bl	80138b6 <USBD_SetClassConfig>
 80145d8:	4603      	mov	r3, r0
 80145da:	2b02      	cmp	r3, #2
 80145dc:	d104      	bne.n	80145e8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80145de:	6839      	ldr	r1, [r7, #0]
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f000 f8ef 	bl	80147c4 <USBD_CtlError>
            return;
 80145e6:	e012      	b.n	801460e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f000 f9b3 	bl	8014954 <USBD_CtlSendStatus>
        break;
 80145ee:	e00e      	b.n	801460e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f000 f9af 	bl	8014954 <USBD_CtlSendStatus>
        break;
 80145f6:	e00a      	b.n	801460e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80145f8:	6839      	ldr	r1, [r7, #0]
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f000 f8e2 	bl	80147c4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014600:	4b04      	ldr	r3, [pc, #16]	@ (8014614 <USBD_SetConfig+0x118>)
 8014602:	781b      	ldrb	r3, [r3, #0]
 8014604:	4619      	mov	r1, r3
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f7ff f974 	bl	80138f4 <USBD_ClrClassConfig>
        break;
 801460c:	bf00      	nop
    }
  }
}
 801460e:	3708      	adds	r7, #8
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}
 8014614:	2000c7f8 	.word	0x2000c7f8

08014618 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b082      	sub	sp, #8
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	88db      	ldrh	r3, [r3, #6]
 8014626:	2b01      	cmp	r3, #1
 8014628:	d004      	beq.n	8014634 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801462a:	6839      	ldr	r1, [r7, #0]
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f000 f8c9 	bl	80147c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014632:	e022      	b.n	801467a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801463a:	2b02      	cmp	r3, #2
 801463c:	dc02      	bgt.n	8014644 <USBD_GetConfig+0x2c>
 801463e:	2b00      	cmp	r3, #0
 8014640:	dc03      	bgt.n	801464a <USBD_GetConfig+0x32>
 8014642:	e015      	b.n	8014670 <USBD_GetConfig+0x58>
 8014644:	2b03      	cmp	r3, #3
 8014646:	d00b      	beq.n	8014660 <USBD_GetConfig+0x48>
 8014648:	e012      	b.n	8014670 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	2200      	movs	r2, #0
 801464e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	3308      	adds	r3, #8
 8014654:	2201      	movs	r2, #1
 8014656:	4619      	mov	r1, r3
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f000 f91d 	bl	8014898 <USBD_CtlSendData>
        break;
 801465e:	e00c      	b.n	801467a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	3304      	adds	r3, #4
 8014664:	2201      	movs	r2, #1
 8014666:	4619      	mov	r1, r3
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f000 f915 	bl	8014898 <USBD_CtlSendData>
        break;
 801466e:	e004      	b.n	801467a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8014670:	6839      	ldr	r1, [r7, #0]
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f000 f8a6 	bl	80147c4 <USBD_CtlError>
        break;
 8014678:	bf00      	nop
}
 801467a:	bf00      	nop
 801467c:	3708      	adds	r7, #8
 801467e:	46bd      	mov	sp, r7
 8014680:	bd80      	pop	{r7, pc}

08014682 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014682:	b580      	push	{r7, lr}
 8014684:	b082      	sub	sp, #8
 8014686:	af00      	add	r7, sp, #0
 8014688:	6078      	str	r0, [r7, #4]
 801468a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014692:	3b01      	subs	r3, #1
 8014694:	2b02      	cmp	r3, #2
 8014696:	d81e      	bhi.n	80146d6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014698:	683b      	ldr	r3, [r7, #0]
 801469a:	88db      	ldrh	r3, [r3, #6]
 801469c:	2b02      	cmp	r3, #2
 801469e:	d004      	beq.n	80146aa <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80146a0:	6839      	ldr	r1, [r7, #0]
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f000 f88e 	bl	80147c4 <USBD_CtlError>
        break;
 80146a8:	e01a      	b.n	80146e0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2201      	movs	r2, #1
 80146ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d005      	beq.n	80146c6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	68db      	ldr	r3, [r3, #12]
 80146be:	f043 0202 	orr.w	r2, r3, #2
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	330c      	adds	r3, #12
 80146ca:	2202      	movs	r2, #2
 80146cc:	4619      	mov	r1, r3
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 f8e2 	bl	8014898 <USBD_CtlSendData>
      break;
 80146d4:	e004      	b.n	80146e0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80146d6:	6839      	ldr	r1, [r7, #0]
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f000 f873 	bl	80147c4 <USBD_CtlError>
      break;
 80146de:	bf00      	nop
  }
}
 80146e0:	bf00      	nop
 80146e2:	3708      	adds	r7, #8
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}

080146e8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80146f2:	683b      	ldr	r3, [r7, #0]
 80146f4:	885b      	ldrh	r3, [r3, #2]
 80146f6:	2b01      	cmp	r3, #1
 80146f8:	d106      	bne.n	8014708 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	2201      	movs	r2, #1
 80146fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f000 f926 	bl	8014954 <USBD_CtlSendStatus>
  }
}
 8014708:	bf00      	nop
 801470a:	3708      	adds	r7, #8
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}

08014710 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b082      	sub	sp, #8
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014720:	3b01      	subs	r3, #1
 8014722:	2b02      	cmp	r3, #2
 8014724:	d80b      	bhi.n	801473e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	885b      	ldrh	r3, [r3, #2]
 801472a:	2b01      	cmp	r3, #1
 801472c:	d10c      	bne.n	8014748 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2200      	movs	r2, #0
 8014732:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f000 f90c 	bl	8014954 <USBD_CtlSendStatus>
      }
      break;
 801473c:	e004      	b.n	8014748 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801473e:	6839      	ldr	r1, [r7, #0]
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f000 f83f 	bl	80147c4 <USBD_CtlError>
      break;
 8014746:	e000      	b.n	801474a <USBD_ClrFeature+0x3a>
      break;
 8014748:	bf00      	nop
  }
}
 801474a:	bf00      	nop
 801474c:	3708      	adds	r7, #8
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}

08014752 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014752:	b480      	push	{r7}
 8014754:	b083      	sub	sp, #12
 8014756:	af00      	add	r7, sp, #0
 8014758:	6078      	str	r0, [r7, #4]
 801475a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	781a      	ldrb	r2, [r3, #0]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	785a      	ldrb	r2, [r3, #1]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	3302      	adds	r3, #2
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	461a      	mov	r2, r3
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	3303      	adds	r3, #3
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	021b      	lsls	r3, r3, #8
 801477c:	b29b      	uxth	r3, r3
 801477e:	4413      	add	r3, r2
 8014780:	b29a      	uxth	r2, r3
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	3304      	adds	r3, #4
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	461a      	mov	r2, r3
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	3305      	adds	r3, #5
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	021b      	lsls	r3, r3, #8
 8014796:	b29b      	uxth	r3, r3
 8014798:	4413      	add	r3, r2
 801479a:	b29a      	uxth	r2, r3
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	3306      	adds	r3, #6
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	461a      	mov	r2, r3
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	3307      	adds	r3, #7
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	021b      	lsls	r3, r3, #8
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	4413      	add	r3, r2
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	80da      	strh	r2, [r3, #6]

}
 80147ba:	bf00      	nop
 80147bc:	370c      	adds	r7, #12
 80147be:	46bd      	mov	sp, r7
 80147c0:	bc80      	pop	{r7}
 80147c2:	4770      	bx	lr

080147c4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b082      	sub	sp, #8
 80147c8:	af00      	add	r7, sp, #0
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80147ce:	2180      	movs	r1, #128	@ 0x80
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7ef f95f 	bl	8003a94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80147d6:	2100      	movs	r1, #0
 80147d8:	6878      	ldr	r0, [r7, #4]
 80147da:	f7ef f95b 	bl	8003a94 <USBD_LL_StallEP>
}
 80147de:	bf00      	nop
 80147e0:	3708      	adds	r7, #8
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}

080147e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80147e6:	b580      	push	{r7, lr}
 80147e8:	b086      	sub	sp, #24
 80147ea:	af00      	add	r7, sp, #0
 80147ec:	60f8      	str	r0, [r7, #12]
 80147ee:	60b9      	str	r1, [r7, #8]
 80147f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80147f2:	2300      	movs	r3, #0
 80147f4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d032      	beq.n	8014862 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80147fc:	68f8      	ldr	r0, [r7, #12]
 80147fe:	f000 f834 	bl	801486a <USBD_GetLen>
 8014802:	4603      	mov	r3, r0
 8014804:	3301      	adds	r3, #1
 8014806:	b29b      	uxth	r3, r3
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	b29a      	uxth	r2, r3
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8014810:	7dfb      	ldrb	r3, [r7, #23]
 8014812:	1c5a      	adds	r2, r3, #1
 8014814:	75fa      	strb	r2, [r7, #23]
 8014816:	461a      	mov	r2, r3
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	4413      	add	r3, r2
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	7812      	ldrb	r2, [r2, #0]
 8014820:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8014822:	7dfb      	ldrb	r3, [r7, #23]
 8014824:	1c5a      	adds	r2, r3, #1
 8014826:	75fa      	strb	r2, [r7, #23]
 8014828:	461a      	mov	r2, r3
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	4413      	add	r3, r2
 801482e:	2203      	movs	r2, #3
 8014830:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8014832:	e012      	b.n	801485a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	1c5a      	adds	r2, r3, #1
 8014838:	60fa      	str	r2, [r7, #12]
 801483a:	7dfa      	ldrb	r2, [r7, #23]
 801483c:	1c51      	adds	r1, r2, #1
 801483e:	75f9      	strb	r1, [r7, #23]
 8014840:	4611      	mov	r1, r2
 8014842:	68ba      	ldr	r2, [r7, #8]
 8014844:	440a      	add	r2, r1
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801484a:	7dfb      	ldrb	r3, [r7, #23]
 801484c:	1c5a      	adds	r2, r3, #1
 801484e:	75fa      	strb	r2, [r7, #23]
 8014850:	461a      	mov	r2, r3
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	4413      	add	r3, r2
 8014856:	2200      	movs	r2, #0
 8014858:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d1e8      	bne.n	8014834 <USBD_GetString+0x4e>
    }
  }
}
 8014862:	bf00      	nop
 8014864:	3718      	adds	r7, #24
 8014866:	46bd      	mov	sp, r7
 8014868:	bd80      	pop	{r7, pc}

0801486a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801486a:	b480      	push	{r7}
 801486c:	b085      	sub	sp, #20
 801486e:	af00      	add	r7, sp, #0
 8014870:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014872:	2300      	movs	r3, #0
 8014874:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8014876:	e005      	b.n	8014884 <USBD_GetLen+0x1a>
  {
    len++;
 8014878:	7bfb      	ldrb	r3, [r7, #15]
 801487a:	3301      	adds	r3, #1
 801487c:	73fb      	strb	r3, [r7, #15]
    buf++;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	3301      	adds	r3, #1
 8014882:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d1f5      	bne.n	8014878 <USBD_GetLen+0xe>
  }

  return len;
 801488c:	7bfb      	ldrb	r3, [r7, #15]
}
 801488e:	4618      	mov	r0, r3
 8014890:	3714      	adds	r7, #20
 8014892:	46bd      	mov	sp, r7
 8014894:	bc80      	pop	{r7}
 8014896:	4770      	bx	lr

08014898 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b084      	sub	sp, #16
 801489c:	af00      	add	r7, sp, #0
 801489e:	60f8      	str	r0, [r7, #12]
 80148a0:	60b9      	str	r1, [r7, #8]
 80148a2:	4613      	mov	r3, r2
 80148a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	2202      	movs	r2, #2
 80148aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80148ae:	88fa      	ldrh	r2, [r7, #6]
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80148b4:	88fa      	ldrh	r2, [r7, #6]
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80148ba:	88fb      	ldrh	r3, [r7, #6]
 80148bc:	68ba      	ldr	r2, [r7, #8]
 80148be:	2100      	movs	r1, #0
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f7ef f96f 	bl	8003ba4 <USBD_LL_Transmit>

  return USBD_OK;
 80148c6:	2300      	movs	r3, #0
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3710      	adds	r7, #16
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}

080148d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	60f8      	str	r0, [r7, #12]
 80148d8:	60b9      	str	r1, [r7, #8]
 80148da:	4613      	mov	r3, r2
 80148dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80148de:	88fb      	ldrh	r3, [r7, #6]
 80148e0:	68ba      	ldr	r2, [r7, #8]
 80148e2:	2100      	movs	r1, #0
 80148e4:	68f8      	ldr	r0, [r7, #12]
 80148e6:	f7ef f95d 	bl	8003ba4 <USBD_LL_Transmit>

  return USBD_OK;
 80148ea:	2300      	movs	r3, #0
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3710      	adds	r7, #16
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	b084      	sub	sp, #16
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	60b9      	str	r1, [r7, #8]
 80148fe:	4613      	mov	r3, r2
 8014900:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	2203      	movs	r2, #3
 8014906:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801490a:	88fa      	ldrh	r2, [r7, #6]
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8014912:	88fa      	ldrh	r2, [r7, #6]
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801491a:	88fb      	ldrh	r3, [r7, #6]
 801491c:	68ba      	ldr	r2, [r7, #8]
 801491e:	2100      	movs	r1, #0
 8014920:	68f8      	ldr	r0, [r7, #12]
 8014922:	f7ef f962 	bl	8003bea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014926:	2300      	movs	r3, #0
}
 8014928:	4618      	mov	r0, r3
 801492a:	3710      	adds	r7, #16
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b084      	sub	sp, #16
 8014934:	af00      	add	r7, sp, #0
 8014936:	60f8      	str	r0, [r7, #12]
 8014938:	60b9      	str	r1, [r7, #8]
 801493a:	4613      	mov	r3, r2
 801493c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801493e:	88fb      	ldrh	r3, [r7, #6]
 8014940:	68ba      	ldr	r2, [r7, #8]
 8014942:	2100      	movs	r1, #0
 8014944:	68f8      	ldr	r0, [r7, #12]
 8014946:	f7ef f950 	bl	8003bea <USBD_LL_PrepareReceive>

  return USBD_OK;
 801494a:	2300      	movs	r3, #0
}
 801494c:	4618      	mov	r0, r3
 801494e:	3710      	adds	r7, #16
 8014950:	46bd      	mov	sp, r7
 8014952:	bd80      	pop	{r7, pc}

08014954 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014954:	b580      	push	{r7, lr}
 8014956:	b082      	sub	sp, #8
 8014958:	af00      	add	r7, sp, #0
 801495a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2204      	movs	r2, #4
 8014960:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014964:	2300      	movs	r3, #0
 8014966:	2200      	movs	r2, #0
 8014968:	2100      	movs	r1, #0
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f7ef f91a 	bl	8003ba4 <USBD_LL_Transmit>

  return USBD_OK;
 8014970:	2300      	movs	r3, #0
}
 8014972:	4618      	mov	r0, r3
 8014974:	3708      	adds	r7, #8
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}

0801497a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801497a:	b580      	push	{r7, lr}
 801497c:	b082      	sub	sp, #8
 801497e:	af00      	add	r7, sp, #0
 8014980:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	2205      	movs	r2, #5
 8014986:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801498a:	2300      	movs	r3, #0
 801498c:	2200      	movs	r2, #0
 801498e:	2100      	movs	r1, #0
 8014990:	6878      	ldr	r0, [r7, #4]
 8014992:	f7ef f92a 	bl	8003bea <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014996:	2300      	movs	r3, #0
}
 8014998:	4618      	mov	r0, r3
 801499a:	3708      	adds	r7, #8
 801499c:	46bd      	mov	sp, r7
 801499e:	bd80      	pop	{r7, pc}

080149a0 <atoi>:
 80149a0:	220a      	movs	r2, #10
 80149a2:	2100      	movs	r1, #0
 80149a4:	f000 b938 	b.w	8014c18 <strtol>

080149a8 <malloc>:
 80149a8:	4b02      	ldr	r3, [pc, #8]	@ (80149b4 <malloc+0xc>)
 80149aa:	4601      	mov	r1, r0
 80149ac:	6818      	ldr	r0, [r3, #0]
 80149ae:	f000 b82d 	b.w	8014a0c <_malloc_r>
 80149b2:	bf00      	nop
 80149b4:	200001a0 	.word	0x200001a0

080149b8 <free>:
 80149b8:	4b02      	ldr	r3, [pc, #8]	@ (80149c4 <free+0xc>)
 80149ba:	4601      	mov	r1, r0
 80149bc:	6818      	ldr	r0, [r3, #0]
 80149be:	f000 bba3 	b.w	8015108 <_free_r>
 80149c2:	bf00      	nop
 80149c4:	200001a0 	.word	0x200001a0

080149c8 <sbrk_aligned>:
 80149c8:	b570      	push	{r4, r5, r6, lr}
 80149ca:	4e0f      	ldr	r6, [pc, #60]	@ (8014a08 <sbrk_aligned+0x40>)
 80149cc:	460c      	mov	r4, r1
 80149ce:	6831      	ldr	r1, [r6, #0]
 80149d0:	4605      	mov	r5, r0
 80149d2:	b911      	cbnz	r1, 80149da <sbrk_aligned+0x12>
 80149d4:	f000 fb1c 	bl	8015010 <_sbrk_r>
 80149d8:	6030      	str	r0, [r6, #0]
 80149da:	4621      	mov	r1, r4
 80149dc:	4628      	mov	r0, r5
 80149de:	f000 fb17 	bl	8015010 <_sbrk_r>
 80149e2:	1c43      	adds	r3, r0, #1
 80149e4:	d103      	bne.n	80149ee <sbrk_aligned+0x26>
 80149e6:	f04f 34ff 	mov.w	r4, #4294967295
 80149ea:	4620      	mov	r0, r4
 80149ec:	bd70      	pop	{r4, r5, r6, pc}
 80149ee:	1cc4      	adds	r4, r0, #3
 80149f0:	f024 0403 	bic.w	r4, r4, #3
 80149f4:	42a0      	cmp	r0, r4
 80149f6:	d0f8      	beq.n	80149ea <sbrk_aligned+0x22>
 80149f8:	1a21      	subs	r1, r4, r0
 80149fa:	4628      	mov	r0, r5
 80149fc:	f000 fb08 	bl	8015010 <_sbrk_r>
 8014a00:	3001      	adds	r0, #1
 8014a02:	d1f2      	bne.n	80149ea <sbrk_aligned+0x22>
 8014a04:	e7ef      	b.n	80149e6 <sbrk_aligned+0x1e>
 8014a06:	bf00      	nop
 8014a08:	2000c7fc 	.word	0x2000c7fc

08014a0c <_malloc_r>:
 8014a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a10:	1ccd      	adds	r5, r1, #3
 8014a12:	f025 0503 	bic.w	r5, r5, #3
 8014a16:	3508      	adds	r5, #8
 8014a18:	2d0c      	cmp	r5, #12
 8014a1a:	bf38      	it	cc
 8014a1c:	250c      	movcc	r5, #12
 8014a1e:	2d00      	cmp	r5, #0
 8014a20:	4606      	mov	r6, r0
 8014a22:	db01      	blt.n	8014a28 <_malloc_r+0x1c>
 8014a24:	42a9      	cmp	r1, r5
 8014a26:	d904      	bls.n	8014a32 <_malloc_r+0x26>
 8014a28:	230c      	movs	r3, #12
 8014a2a:	6033      	str	r3, [r6, #0]
 8014a2c:	2000      	movs	r0, #0
 8014a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014b08 <_malloc_r+0xfc>
 8014a36:	f000 f869 	bl	8014b0c <__malloc_lock>
 8014a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8014a3e:	461c      	mov	r4, r3
 8014a40:	bb44      	cbnz	r4, 8014a94 <_malloc_r+0x88>
 8014a42:	4629      	mov	r1, r5
 8014a44:	4630      	mov	r0, r6
 8014a46:	f7ff ffbf 	bl	80149c8 <sbrk_aligned>
 8014a4a:	1c43      	adds	r3, r0, #1
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	d158      	bne.n	8014b02 <_malloc_r+0xf6>
 8014a50:	f8d8 4000 	ldr.w	r4, [r8]
 8014a54:	4627      	mov	r7, r4
 8014a56:	2f00      	cmp	r7, #0
 8014a58:	d143      	bne.n	8014ae2 <_malloc_r+0xd6>
 8014a5a:	2c00      	cmp	r4, #0
 8014a5c:	d04b      	beq.n	8014af6 <_malloc_r+0xea>
 8014a5e:	6823      	ldr	r3, [r4, #0]
 8014a60:	4639      	mov	r1, r7
 8014a62:	4630      	mov	r0, r6
 8014a64:	eb04 0903 	add.w	r9, r4, r3
 8014a68:	f000 fad2 	bl	8015010 <_sbrk_r>
 8014a6c:	4581      	cmp	r9, r0
 8014a6e:	d142      	bne.n	8014af6 <_malloc_r+0xea>
 8014a70:	6821      	ldr	r1, [r4, #0]
 8014a72:	4630      	mov	r0, r6
 8014a74:	1a6d      	subs	r5, r5, r1
 8014a76:	4629      	mov	r1, r5
 8014a78:	f7ff ffa6 	bl	80149c8 <sbrk_aligned>
 8014a7c:	3001      	adds	r0, #1
 8014a7e:	d03a      	beq.n	8014af6 <_malloc_r+0xea>
 8014a80:	6823      	ldr	r3, [r4, #0]
 8014a82:	442b      	add	r3, r5
 8014a84:	6023      	str	r3, [r4, #0]
 8014a86:	f8d8 3000 	ldr.w	r3, [r8]
 8014a8a:	685a      	ldr	r2, [r3, #4]
 8014a8c:	bb62      	cbnz	r2, 8014ae8 <_malloc_r+0xdc>
 8014a8e:	f8c8 7000 	str.w	r7, [r8]
 8014a92:	e00f      	b.n	8014ab4 <_malloc_r+0xa8>
 8014a94:	6822      	ldr	r2, [r4, #0]
 8014a96:	1b52      	subs	r2, r2, r5
 8014a98:	d420      	bmi.n	8014adc <_malloc_r+0xd0>
 8014a9a:	2a0b      	cmp	r2, #11
 8014a9c:	d917      	bls.n	8014ace <_malloc_r+0xc2>
 8014a9e:	1961      	adds	r1, r4, r5
 8014aa0:	42a3      	cmp	r3, r4
 8014aa2:	6025      	str	r5, [r4, #0]
 8014aa4:	bf18      	it	ne
 8014aa6:	6059      	strne	r1, [r3, #4]
 8014aa8:	6863      	ldr	r3, [r4, #4]
 8014aaa:	bf08      	it	eq
 8014aac:	f8c8 1000 	streq.w	r1, [r8]
 8014ab0:	5162      	str	r2, [r4, r5]
 8014ab2:	604b      	str	r3, [r1, #4]
 8014ab4:	4630      	mov	r0, r6
 8014ab6:	f000 f82f 	bl	8014b18 <__malloc_unlock>
 8014aba:	f104 000b 	add.w	r0, r4, #11
 8014abe:	1d23      	adds	r3, r4, #4
 8014ac0:	f020 0007 	bic.w	r0, r0, #7
 8014ac4:	1ac2      	subs	r2, r0, r3
 8014ac6:	bf1c      	itt	ne
 8014ac8:	1a1b      	subne	r3, r3, r0
 8014aca:	50a3      	strne	r3, [r4, r2]
 8014acc:	e7af      	b.n	8014a2e <_malloc_r+0x22>
 8014ace:	6862      	ldr	r2, [r4, #4]
 8014ad0:	42a3      	cmp	r3, r4
 8014ad2:	bf0c      	ite	eq
 8014ad4:	f8c8 2000 	streq.w	r2, [r8]
 8014ad8:	605a      	strne	r2, [r3, #4]
 8014ada:	e7eb      	b.n	8014ab4 <_malloc_r+0xa8>
 8014adc:	4623      	mov	r3, r4
 8014ade:	6864      	ldr	r4, [r4, #4]
 8014ae0:	e7ae      	b.n	8014a40 <_malloc_r+0x34>
 8014ae2:	463c      	mov	r4, r7
 8014ae4:	687f      	ldr	r7, [r7, #4]
 8014ae6:	e7b6      	b.n	8014a56 <_malloc_r+0x4a>
 8014ae8:	461a      	mov	r2, r3
 8014aea:	685b      	ldr	r3, [r3, #4]
 8014aec:	42a3      	cmp	r3, r4
 8014aee:	d1fb      	bne.n	8014ae8 <_malloc_r+0xdc>
 8014af0:	2300      	movs	r3, #0
 8014af2:	6053      	str	r3, [r2, #4]
 8014af4:	e7de      	b.n	8014ab4 <_malloc_r+0xa8>
 8014af6:	230c      	movs	r3, #12
 8014af8:	4630      	mov	r0, r6
 8014afa:	6033      	str	r3, [r6, #0]
 8014afc:	f000 f80c 	bl	8014b18 <__malloc_unlock>
 8014b00:	e794      	b.n	8014a2c <_malloc_r+0x20>
 8014b02:	6005      	str	r5, [r0, #0]
 8014b04:	e7d6      	b.n	8014ab4 <_malloc_r+0xa8>
 8014b06:	bf00      	nop
 8014b08:	2000c800 	.word	0x2000c800

08014b0c <__malloc_lock>:
 8014b0c:	4801      	ldr	r0, [pc, #4]	@ (8014b14 <__malloc_lock+0x8>)
 8014b0e:	f000 bacc 	b.w	80150aa <__retarget_lock_acquire_recursive>
 8014b12:	bf00      	nop
 8014b14:	2000c944 	.word	0x2000c944

08014b18 <__malloc_unlock>:
 8014b18:	4801      	ldr	r0, [pc, #4]	@ (8014b20 <__malloc_unlock+0x8>)
 8014b1a:	f000 bac7 	b.w	80150ac <__retarget_lock_release_recursive>
 8014b1e:	bf00      	nop
 8014b20:	2000c944 	.word	0x2000c944

08014b24 <_strtol_l.constprop.0>:
 8014b24:	2b24      	cmp	r3, #36	@ 0x24
 8014b26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b2a:	4686      	mov	lr, r0
 8014b2c:	4690      	mov	r8, r2
 8014b2e:	d801      	bhi.n	8014b34 <_strtol_l.constprop.0+0x10>
 8014b30:	2b01      	cmp	r3, #1
 8014b32:	d106      	bne.n	8014b42 <_strtol_l.constprop.0+0x1e>
 8014b34:	f000 fa8e 	bl	8015054 <__errno>
 8014b38:	2316      	movs	r3, #22
 8014b3a:	6003      	str	r3, [r0, #0]
 8014b3c:	2000      	movs	r0, #0
 8014b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b42:	460d      	mov	r5, r1
 8014b44:	4833      	ldr	r0, [pc, #204]	@ (8014c14 <_strtol_l.constprop.0+0xf0>)
 8014b46:	462a      	mov	r2, r5
 8014b48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014b4c:	5d06      	ldrb	r6, [r0, r4]
 8014b4e:	f016 0608 	ands.w	r6, r6, #8
 8014b52:	d1f8      	bne.n	8014b46 <_strtol_l.constprop.0+0x22>
 8014b54:	2c2d      	cmp	r4, #45	@ 0x2d
 8014b56:	d12d      	bne.n	8014bb4 <_strtol_l.constprop.0+0x90>
 8014b58:	2601      	movs	r6, #1
 8014b5a:	782c      	ldrb	r4, [r5, #0]
 8014b5c:	1c95      	adds	r5, r2, #2
 8014b5e:	f033 0210 	bics.w	r2, r3, #16
 8014b62:	d109      	bne.n	8014b78 <_strtol_l.constprop.0+0x54>
 8014b64:	2c30      	cmp	r4, #48	@ 0x30
 8014b66:	d12a      	bne.n	8014bbe <_strtol_l.constprop.0+0x9a>
 8014b68:	782a      	ldrb	r2, [r5, #0]
 8014b6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014b6e:	2a58      	cmp	r2, #88	@ 0x58
 8014b70:	d125      	bne.n	8014bbe <_strtol_l.constprop.0+0x9a>
 8014b72:	2310      	movs	r3, #16
 8014b74:	786c      	ldrb	r4, [r5, #1]
 8014b76:	3502      	adds	r5, #2
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014b7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014b82:	fbbc f9f3 	udiv	r9, ip, r3
 8014b86:	4610      	mov	r0, r2
 8014b88:	fb03 ca19 	mls	sl, r3, r9, ip
 8014b8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014b90:	2f09      	cmp	r7, #9
 8014b92:	d81b      	bhi.n	8014bcc <_strtol_l.constprop.0+0xa8>
 8014b94:	463c      	mov	r4, r7
 8014b96:	42a3      	cmp	r3, r4
 8014b98:	dd27      	ble.n	8014bea <_strtol_l.constprop.0+0xc6>
 8014b9a:	1c57      	adds	r7, r2, #1
 8014b9c:	d007      	beq.n	8014bae <_strtol_l.constprop.0+0x8a>
 8014b9e:	4581      	cmp	r9, r0
 8014ba0:	d320      	bcc.n	8014be4 <_strtol_l.constprop.0+0xc0>
 8014ba2:	d101      	bne.n	8014ba8 <_strtol_l.constprop.0+0x84>
 8014ba4:	45a2      	cmp	sl, r4
 8014ba6:	db1d      	blt.n	8014be4 <_strtol_l.constprop.0+0xc0>
 8014ba8:	2201      	movs	r2, #1
 8014baa:	fb00 4003 	mla	r0, r0, r3, r4
 8014bae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014bb2:	e7eb      	b.n	8014b8c <_strtol_l.constprop.0+0x68>
 8014bb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8014bb6:	bf04      	itt	eq
 8014bb8:	782c      	ldrbeq	r4, [r5, #0]
 8014bba:	1c95      	addeq	r5, r2, #2
 8014bbc:	e7cf      	b.n	8014b5e <_strtol_l.constprop.0+0x3a>
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d1da      	bne.n	8014b78 <_strtol_l.constprop.0+0x54>
 8014bc2:	2c30      	cmp	r4, #48	@ 0x30
 8014bc4:	bf0c      	ite	eq
 8014bc6:	2308      	moveq	r3, #8
 8014bc8:	230a      	movne	r3, #10
 8014bca:	e7d5      	b.n	8014b78 <_strtol_l.constprop.0+0x54>
 8014bcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014bd0:	2f19      	cmp	r7, #25
 8014bd2:	d801      	bhi.n	8014bd8 <_strtol_l.constprop.0+0xb4>
 8014bd4:	3c37      	subs	r4, #55	@ 0x37
 8014bd6:	e7de      	b.n	8014b96 <_strtol_l.constprop.0+0x72>
 8014bd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014bdc:	2f19      	cmp	r7, #25
 8014bde:	d804      	bhi.n	8014bea <_strtol_l.constprop.0+0xc6>
 8014be0:	3c57      	subs	r4, #87	@ 0x57
 8014be2:	e7d8      	b.n	8014b96 <_strtol_l.constprop.0+0x72>
 8014be4:	f04f 32ff 	mov.w	r2, #4294967295
 8014be8:	e7e1      	b.n	8014bae <_strtol_l.constprop.0+0x8a>
 8014bea:	1c53      	adds	r3, r2, #1
 8014bec:	d108      	bne.n	8014c00 <_strtol_l.constprop.0+0xdc>
 8014bee:	2322      	movs	r3, #34	@ 0x22
 8014bf0:	4660      	mov	r0, ip
 8014bf2:	f8ce 3000 	str.w	r3, [lr]
 8014bf6:	f1b8 0f00 	cmp.w	r8, #0
 8014bfa:	d0a0      	beq.n	8014b3e <_strtol_l.constprop.0+0x1a>
 8014bfc:	1e69      	subs	r1, r5, #1
 8014bfe:	e006      	b.n	8014c0e <_strtol_l.constprop.0+0xea>
 8014c00:	b106      	cbz	r6, 8014c04 <_strtol_l.constprop.0+0xe0>
 8014c02:	4240      	negs	r0, r0
 8014c04:	f1b8 0f00 	cmp.w	r8, #0
 8014c08:	d099      	beq.n	8014b3e <_strtol_l.constprop.0+0x1a>
 8014c0a:	2a00      	cmp	r2, #0
 8014c0c:	d1f6      	bne.n	8014bfc <_strtol_l.constprop.0+0xd8>
 8014c0e:	f8c8 1000 	str.w	r1, [r8]
 8014c12:	e794      	b.n	8014b3e <_strtol_l.constprop.0+0x1a>
 8014c14:	08017f3d 	.word	0x08017f3d

08014c18 <strtol>:
 8014c18:	4613      	mov	r3, r2
 8014c1a:	460a      	mov	r2, r1
 8014c1c:	4601      	mov	r1, r0
 8014c1e:	4802      	ldr	r0, [pc, #8]	@ (8014c28 <strtol+0x10>)
 8014c20:	6800      	ldr	r0, [r0, #0]
 8014c22:	f7ff bf7f 	b.w	8014b24 <_strtol_l.constprop.0>
 8014c26:	bf00      	nop
 8014c28:	200001a0 	.word	0x200001a0

08014c2c <std>:
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	b510      	push	{r4, lr}
 8014c30:	4604      	mov	r4, r0
 8014c32:	e9c0 3300 	strd	r3, r3, [r0]
 8014c36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014c3a:	6083      	str	r3, [r0, #8]
 8014c3c:	8181      	strh	r1, [r0, #12]
 8014c3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8014c40:	81c2      	strh	r2, [r0, #14]
 8014c42:	6183      	str	r3, [r0, #24]
 8014c44:	4619      	mov	r1, r3
 8014c46:	2208      	movs	r2, #8
 8014c48:	305c      	adds	r0, #92	@ 0x5c
 8014c4a:	f000 f936 	bl	8014eba <memset>
 8014c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8014c84 <std+0x58>)
 8014c50:	6224      	str	r4, [r4, #32]
 8014c52:	6263      	str	r3, [r4, #36]	@ 0x24
 8014c54:	4b0c      	ldr	r3, [pc, #48]	@ (8014c88 <std+0x5c>)
 8014c56:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014c58:	4b0c      	ldr	r3, [pc, #48]	@ (8014c8c <std+0x60>)
 8014c5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8014c90 <std+0x64>)
 8014c5e:	6323      	str	r3, [r4, #48]	@ 0x30
 8014c60:	4b0c      	ldr	r3, [pc, #48]	@ (8014c94 <std+0x68>)
 8014c62:	429c      	cmp	r4, r3
 8014c64:	d006      	beq.n	8014c74 <std+0x48>
 8014c66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8014c6a:	4294      	cmp	r4, r2
 8014c6c:	d002      	beq.n	8014c74 <std+0x48>
 8014c6e:	33d0      	adds	r3, #208	@ 0xd0
 8014c70:	429c      	cmp	r4, r3
 8014c72:	d105      	bne.n	8014c80 <std+0x54>
 8014c74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014c7c:	f000 ba14 	b.w	80150a8 <__retarget_lock_init_recursive>
 8014c80:	bd10      	pop	{r4, pc}
 8014c82:	bf00      	nop
 8014c84:	08014e15 	.word	0x08014e15
 8014c88:	08014e37 	.word	0x08014e37
 8014c8c:	08014e6f 	.word	0x08014e6f
 8014c90:	08014e93 	.word	0x08014e93
 8014c94:	2000c804 	.word	0x2000c804

08014c98 <stdio_exit_handler>:
 8014c98:	4a02      	ldr	r2, [pc, #8]	@ (8014ca4 <stdio_exit_handler+0xc>)
 8014c9a:	4903      	ldr	r1, [pc, #12]	@ (8014ca8 <stdio_exit_handler+0x10>)
 8014c9c:	4803      	ldr	r0, [pc, #12]	@ (8014cac <stdio_exit_handler+0x14>)
 8014c9e:	f000 b869 	b.w	8014d74 <_fwalk_sglue>
 8014ca2:	bf00      	nop
 8014ca4:	20000194 	.word	0x20000194
 8014ca8:	08015aed 	.word	0x08015aed
 8014cac:	200001a4 	.word	0x200001a4

08014cb0 <cleanup_stdio>:
 8014cb0:	6841      	ldr	r1, [r0, #4]
 8014cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8014ce4 <cleanup_stdio+0x34>)
 8014cb4:	b510      	push	{r4, lr}
 8014cb6:	4299      	cmp	r1, r3
 8014cb8:	4604      	mov	r4, r0
 8014cba:	d001      	beq.n	8014cc0 <cleanup_stdio+0x10>
 8014cbc:	f000 ff16 	bl	8015aec <_fflush_r>
 8014cc0:	68a1      	ldr	r1, [r4, #8]
 8014cc2:	4b09      	ldr	r3, [pc, #36]	@ (8014ce8 <cleanup_stdio+0x38>)
 8014cc4:	4299      	cmp	r1, r3
 8014cc6:	d002      	beq.n	8014cce <cleanup_stdio+0x1e>
 8014cc8:	4620      	mov	r0, r4
 8014cca:	f000 ff0f 	bl	8015aec <_fflush_r>
 8014cce:	68e1      	ldr	r1, [r4, #12]
 8014cd0:	4b06      	ldr	r3, [pc, #24]	@ (8014cec <cleanup_stdio+0x3c>)
 8014cd2:	4299      	cmp	r1, r3
 8014cd4:	d004      	beq.n	8014ce0 <cleanup_stdio+0x30>
 8014cd6:	4620      	mov	r0, r4
 8014cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014cdc:	f000 bf06 	b.w	8015aec <_fflush_r>
 8014ce0:	bd10      	pop	{r4, pc}
 8014ce2:	bf00      	nop
 8014ce4:	2000c804 	.word	0x2000c804
 8014ce8:	2000c86c 	.word	0x2000c86c
 8014cec:	2000c8d4 	.word	0x2000c8d4

08014cf0 <global_stdio_init.part.0>:
 8014cf0:	b510      	push	{r4, lr}
 8014cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8014d20 <global_stdio_init.part.0+0x30>)
 8014cf4:	4c0b      	ldr	r4, [pc, #44]	@ (8014d24 <global_stdio_init.part.0+0x34>)
 8014cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8014d28 <global_stdio_init.part.0+0x38>)
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	601a      	str	r2, [r3, #0]
 8014cfc:	2104      	movs	r1, #4
 8014cfe:	2200      	movs	r2, #0
 8014d00:	f7ff ff94 	bl	8014c2c <std>
 8014d04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014d08:	2201      	movs	r2, #1
 8014d0a:	2109      	movs	r1, #9
 8014d0c:	f7ff ff8e 	bl	8014c2c <std>
 8014d10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014d14:	2202      	movs	r2, #2
 8014d16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d1a:	2112      	movs	r1, #18
 8014d1c:	f7ff bf86 	b.w	8014c2c <std>
 8014d20:	2000c93c 	.word	0x2000c93c
 8014d24:	2000c804 	.word	0x2000c804
 8014d28:	08014c99 	.word	0x08014c99

08014d2c <__sfp_lock_acquire>:
 8014d2c:	4801      	ldr	r0, [pc, #4]	@ (8014d34 <__sfp_lock_acquire+0x8>)
 8014d2e:	f000 b9bc 	b.w	80150aa <__retarget_lock_acquire_recursive>
 8014d32:	bf00      	nop
 8014d34:	2000c945 	.word	0x2000c945

08014d38 <__sfp_lock_release>:
 8014d38:	4801      	ldr	r0, [pc, #4]	@ (8014d40 <__sfp_lock_release+0x8>)
 8014d3a:	f000 b9b7 	b.w	80150ac <__retarget_lock_release_recursive>
 8014d3e:	bf00      	nop
 8014d40:	2000c945 	.word	0x2000c945

08014d44 <__sinit>:
 8014d44:	b510      	push	{r4, lr}
 8014d46:	4604      	mov	r4, r0
 8014d48:	f7ff fff0 	bl	8014d2c <__sfp_lock_acquire>
 8014d4c:	6a23      	ldr	r3, [r4, #32]
 8014d4e:	b11b      	cbz	r3, 8014d58 <__sinit+0x14>
 8014d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014d54:	f7ff bff0 	b.w	8014d38 <__sfp_lock_release>
 8014d58:	4b04      	ldr	r3, [pc, #16]	@ (8014d6c <__sinit+0x28>)
 8014d5a:	6223      	str	r3, [r4, #32]
 8014d5c:	4b04      	ldr	r3, [pc, #16]	@ (8014d70 <__sinit+0x2c>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d1f5      	bne.n	8014d50 <__sinit+0xc>
 8014d64:	f7ff ffc4 	bl	8014cf0 <global_stdio_init.part.0>
 8014d68:	e7f2      	b.n	8014d50 <__sinit+0xc>
 8014d6a:	bf00      	nop
 8014d6c:	08014cb1 	.word	0x08014cb1
 8014d70:	2000c93c 	.word	0x2000c93c

08014d74 <_fwalk_sglue>:
 8014d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d78:	4607      	mov	r7, r0
 8014d7a:	4688      	mov	r8, r1
 8014d7c:	4614      	mov	r4, r2
 8014d7e:	2600      	movs	r6, #0
 8014d80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014d84:	f1b9 0901 	subs.w	r9, r9, #1
 8014d88:	d505      	bpl.n	8014d96 <_fwalk_sglue+0x22>
 8014d8a:	6824      	ldr	r4, [r4, #0]
 8014d8c:	2c00      	cmp	r4, #0
 8014d8e:	d1f7      	bne.n	8014d80 <_fwalk_sglue+0xc>
 8014d90:	4630      	mov	r0, r6
 8014d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d96:	89ab      	ldrh	r3, [r5, #12]
 8014d98:	2b01      	cmp	r3, #1
 8014d9a:	d907      	bls.n	8014dac <_fwalk_sglue+0x38>
 8014d9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014da0:	3301      	adds	r3, #1
 8014da2:	d003      	beq.n	8014dac <_fwalk_sglue+0x38>
 8014da4:	4629      	mov	r1, r5
 8014da6:	4638      	mov	r0, r7
 8014da8:	47c0      	blx	r8
 8014daa:	4306      	orrs	r6, r0
 8014dac:	3568      	adds	r5, #104	@ 0x68
 8014dae:	e7e9      	b.n	8014d84 <_fwalk_sglue+0x10>

08014db0 <iprintf>:
 8014db0:	b40f      	push	{r0, r1, r2, r3}
 8014db2:	b507      	push	{r0, r1, r2, lr}
 8014db4:	4906      	ldr	r1, [pc, #24]	@ (8014dd0 <iprintf+0x20>)
 8014db6:	ab04      	add	r3, sp, #16
 8014db8:	6808      	ldr	r0, [r1, #0]
 8014dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8014dbe:	6881      	ldr	r1, [r0, #8]
 8014dc0:	9301      	str	r3, [sp, #4]
 8014dc2:	f000 fb69 	bl	8015498 <_vfiprintf_r>
 8014dc6:	b003      	add	sp, #12
 8014dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014dcc:	b004      	add	sp, #16
 8014dce:	4770      	bx	lr
 8014dd0:	200001a0 	.word	0x200001a0

08014dd4 <siprintf>:
 8014dd4:	b40e      	push	{r1, r2, r3}
 8014dd6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014dda:	b500      	push	{lr}
 8014ddc:	b09c      	sub	sp, #112	@ 0x70
 8014dde:	ab1d      	add	r3, sp, #116	@ 0x74
 8014de0:	9002      	str	r0, [sp, #8]
 8014de2:	9006      	str	r0, [sp, #24]
 8014de4:	9107      	str	r1, [sp, #28]
 8014de6:	9104      	str	r1, [sp, #16]
 8014de8:	4808      	ldr	r0, [pc, #32]	@ (8014e0c <siprintf+0x38>)
 8014dea:	4909      	ldr	r1, [pc, #36]	@ (8014e10 <siprintf+0x3c>)
 8014dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8014df0:	9105      	str	r1, [sp, #20]
 8014df2:	6800      	ldr	r0, [r0, #0]
 8014df4:	a902      	add	r1, sp, #8
 8014df6:	9301      	str	r3, [sp, #4]
 8014df8:	f000 fa2a 	bl	8015250 <_svfiprintf_r>
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	9b02      	ldr	r3, [sp, #8]
 8014e00:	701a      	strb	r2, [r3, #0]
 8014e02:	b01c      	add	sp, #112	@ 0x70
 8014e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8014e08:	b003      	add	sp, #12
 8014e0a:	4770      	bx	lr
 8014e0c:	200001a0 	.word	0x200001a0
 8014e10:	ffff0208 	.word	0xffff0208

08014e14 <__sread>:
 8014e14:	b510      	push	{r4, lr}
 8014e16:	460c      	mov	r4, r1
 8014e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e1c:	f000 f8e6 	bl	8014fec <_read_r>
 8014e20:	2800      	cmp	r0, #0
 8014e22:	bfab      	itete	ge
 8014e24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014e26:	89a3      	ldrhlt	r3, [r4, #12]
 8014e28:	181b      	addge	r3, r3, r0
 8014e2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014e2e:	bfac      	ite	ge
 8014e30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014e32:	81a3      	strhlt	r3, [r4, #12]
 8014e34:	bd10      	pop	{r4, pc}

08014e36 <__swrite>:
 8014e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e3a:	461f      	mov	r7, r3
 8014e3c:	898b      	ldrh	r3, [r1, #12]
 8014e3e:	4605      	mov	r5, r0
 8014e40:	05db      	lsls	r3, r3, #23
 8014e42:	460c      	mov	r4, r1
 8014e44:	4616      	mov	r6, r2
 8014e46:	d505      	bpl.n	8014e54 <__swrite+0x1e>
 8014e48:	2302      	movs	r3, #2
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e50:	f000 f8ba 	bl	8014fc8 <_lseek_r>
 8014e54:	89a3      	ldrh	r3, [r4, #12]
 8014e56:	4632      	mov	r2, r6
 8014e58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014e5c:	81a3      	strh	r3, [r4, #12]
 8014e5e:	4628      	mov	r0, r5
 8014e60:	463b      	mov	r3, r7
 8014e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014e6a:	f000 b8e1 	b.w	8015030 <_write_r>

08014e6e <__sseek>:
 8014e6e:	b510      	push	{r4, lr}
 8014e70:	460c      	mov	r4, r1
 8014e72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e76:	f000 f8a7 	bl	8014fc8 <_lseek_r>
 8014e7a:	1c43      	adds	r3, r0, #1
 8014e7c:	89a3      	ldrh	r3, [r4, #12]
 8014e7e:	bf15      	itete	ne
 8014e80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014e82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014e86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014e8a:	81a3      	strheq	r3, [r4, #12]
 8014e8c:	bf18      	it	ne
 8014e8e:	81a3      	strhne	r3, [r4, #12]
 8014e90:	bd10      	pop	{r4, pc}

08014e92 <__sclose>:
 8014e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014e96:	f000 b887 	b.w	8014fa8 <_close_r>

08014e9a <memcmp>:
 8014e9a:	b510      	push	{r4, lr}
 8014e9c:	3901      	subs	r1, #1
 8014e9e:	4402      	add	r2, r0
 8014ea0:	4290      	cmp	r0, r2
 8014ea2:	d101      	bne.n	8014ea8 <memcmp+0xe>
 8014ea4:	2000      	movs	r0, #0
 8014ea6:	e005      	b.n	8014eb4 <memcmp+0x1a>
 8014ea8:	7803      	ldrb	r3, [r0, #0]
 8014eaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014eae:	42a3      	cmp	r3, r4
 8014eb0:	d001      	beq.n	8014eb6 <memcmp+0x1c>
 8014eb2:	1b18      	subs	r0, r3, r4
 8014eb4:	bd10      	pop	{r4, pc}
 8014eb6:	3001      	adds	r0, #1
 8014eb8:	e7f2      	b.n	8014ea0 <memcmp+0x6>

08014eba <memset>:
 8014eba:	4603      	mov	r3, r0
 8014ebc:	4402      	add	r2, r0
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	d100      	bne.n	8014ec4 <memset+0xa>
 8014ec2:	4770      	bx	lr
 8014ec4:	f803 1b01 	strb.w	r1, [r3], #1
 8014ec8:	e7f9      	b.n	8014ebe <memset+0x4>

08014eca <strncpy>:
 8014eca:	4603      	mov	r3, r0
 8014ecc:	b510      	push	{r4, lr}
 8014ece:	3901      	subs	r1, #1
 8014ed0:	b132      	cbz	r2, 8014ee0 <strncpy+0x16>
 8014ed2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014ed6:	3a01      	subs	r2, #1
 8014ed8:	f803 4b01 	strb.w	r4, [r3], #1
 8014edc:	2c00      	cmp	r4, #0
 8014ede:	d1f7      	bne.n	8014ed0 <strncpy+0x6>
 8014ee0:	2100      	movs	r1, #0
 8014ee2:	441a      	add	r2, r3
 8014ee4:	4293      	cmp	r3, r2
 8014ee6:	d100      	bne.n	8014eea <strncpy+0x20>
 8014ee8:	bd10      	pop	{r4, pc}
 8014eea:	f803 1b01 	strb.w	r1, [r3], #1
 8014eee:	e7f9      	b.n	8014ee4 <strncpy+0x1a>

08014ef0 <strtok>:
 8014ef0:	4b16      	ldr	r3, [pc, #88]	@ (8014f4c <strtok+0x5c>)
 8014ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ef6:	681f      	ldr	r7, [r3, #0]
 8014ef8:	4605      	mov	r5, r0
 8014efa:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8014efc:	460e      	mov	r6, r1
 8014efe:	b9ec      	cbnz	r4, 8014f3c <strtok+0x4c>
 8014f00:	2050      	movs	r0, #80	@ 0x50
 8014f02:	f7ff fd51 	bl	80149a8 <malloc>
 8014f06:	4602      	mov	r2, r0
 8014f08:	6478      	str	r0, [r7, #68]	@ 0x44
 8014f0a:	b920      	cbnz	r0, 8014f16 <strtok+0x26>
 8014f0c:	215b      	movs	r1, #91	@ 0x5b
 8014f0e:	4b10      	ldr	r3, [pc, #64]	@ (8014f50 <strtok+0x60>)
 8014f10:	4810      	ldr	r0, [pc, #64]	@ (8014f54 <strtok+0x64>)
 8014f12:	f000 f8db 	bl	80150cc <__assert_func>
 8014f16:	e9c0 4400 	strd	r4, r4, [r0]
 8014f1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8014f1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8014f22:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8014f26:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8014f2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8014f2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8014f32:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8014f36:	6184      	str	r4, [r0, #24]
 8014f38:	7704      	strb	r4, [r0, #28]
 8014f3a:	6244      	str	r4, [r0, #36]	@ 0x24
 8014f3c:	4631      	mov	r1, r6
 8014f3e:	4628      	mov	r0, r5
 8014f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014f42:	2301      	movs	r3, #1
 8014f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f48:	f000 b806 	b.w	8014f58 <__strtok_r>
 8014f4c:	200001a0 	.word	0x200001a0
 8014f50:	0801803d 	.word	0x0801803d
 8014f54:	08018054 	.word	0x08018054

08014f58 <__strtok_r>:
 8014f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f5a:	4604      	mov	r4, r0
 8014f5c:	b908      	cbnz	r0, 8014f62 <__strtok_r+0xa>
 8014f5e:	6814      	ldr	r4, [r2, #0]
 8014f60:	b144      	cbz	r4, 8014f74 <__strtok_r+0x1c>
 8014f62:	460f      	mov	r7, r1
 8014f64:	4620      	mov	r0, r4
 8014f66:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014f6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8014f6e:	b91e      	cbnz	r6, 8014f78 <__strtok_r+0x20>
 8014f70:	b965      	cbnz	r5, 8014f8c <__strtok_r+0x34>
 8014f72:	6015      	str	r5, [r2, #0]
 8014f74:	2000      	movs	r0, #0
 8014f76:	e005      	b.n	8014f84 <__strtok_r+0x2c>
 8014f78:	42b5      	cmp	r5, r6
 8014f7a:	d1f6      	bne.n	8014f6a <__strtok_r+0x12>
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d1f0      	bne.n	8014f62 <__strtok_r+0xa>
 8014f80:	6014      	str	r4, [r2, #0]
 8014f82:	7003      	strb	r3, [r0, #0]
 8014f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f86:	461c      	mov	r4, r3
 8014f88:	e00c      	b.n	8014fa4 <__strtok_r+0x4c>
 8014f8a:	b915      	cbnz	r5, 8014f92 <__strtok_r+0x3a>
 8014f8c:	460e      	mov	r6, r1
 8014f8e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014f92:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014f96:	42ab      	cmp	r3, r5
 8014f98:	d1f7      	bne.n	8014f8a <__strtok_r+0x32>
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d0f3      	beq.n	8014f86 <__strtok_r+0x2e>
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014fa4:	6014      	str	r4, [r2, #0]
 8014fa6:	e7ed      	b.n	8014f84 <__strtok_r+0x2c>

08014fa8 <_close_r>:
 8014fa8:	b538      	push	{r3, r4, r5, lr}
 8014faa:	2300      	movs	r3, #0
 8014fac:	4d05      	ldr	r5, [pc, #20]	@ (8014fc4 <_close_r+0x1c>)
 8014fae:	4604      	mov	r4, r0
 8014fb0:	4608      	mov	r0, r1
 8014fb2:	602b      	str	r3, [r5, #0]
 8014fb4:	f7ed fc34 	bl	8002820 <_close>
 8014fb8:	1c43      	adds	r3, r0, #1
 8014fba:	d102      	bne.n	8014fc2 <_close_r+0x1a>
 8014fbc:	682b      	ldr	r3, [r5, #0]
 8014fbe:	b103      	cbz	r3, 8014fc2 <_close_r+0x1a>
 8014fc0:	6023      	str	r3, [r4, #0]
 8014fc2:	bd38      	pop	{r3, r4, r5, pc}
 8014fc4:	2000c940 	.word	0x2000c940

08014fc8 <_lseek_r>:
 8014fc8:	b538      	push	{r3, r4, r5, lr}
 8014fca:	4604      	mov	r4, r0
 8014fcc:	4608      	mov	r0, r1
 8014fce:	4611      	mov	r1, r2
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	4d05      	ldr	r5, [pc, #20]	@ (8014fe8 <_lseek_r+0x20>)
 8014fd4:	602a      	str	r2, [r5, #0]
 8014fd6:	461a      	mov	r2, r3
 8014fd8:	f7ed fc46 	bl	8002868 <_lseek>
 8014fdc:	1c43      	adds	r3, r0, #1
 8014fde:	d102      	bne.n	8014fe6 <_lseek_r+0x1e>
 8014fe0:	682b      	ldr	r3, [r5, #0]
 8014fe2:	b103      	cbz	r3, 8014fe6 <_lseek_r+0x1e>
 8014fe4:	6023      	str	r3, [r4, #0]
 8014fe6:	bd38      	pop	{r3, r4, r5, pc}
 8014fe8:	2000c940 	.word	0x2000c940

08014fec <_read_r>:
 8014fec:	b538      	push	{r3, r4, r5, lr}
 8014fee:	4604      	mov	r4, r0
 8014ff0:	4608      	mov	r0, r1
 8014ff2:	4611      	mov	r1, r2
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	4d05      	ldr	r5, [pc, #20]	@ (801500c <_read_r+0x20>)
 8014ff8:	602a      	str	r2, [r5, #0]
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	f7ed fbd7 	bl	80027ae <_read>
 8015000:	1c43      	adds	r3, r0, #1
 8015002:	d102      	bne.n	801500a <_read_r+0x1e>
 8015004:	682b      	ldr	r3, [r5, #0]
 8015006:	b103      	cbz	r3, 801500a <_read_r+0x1e>
 8015008:	6023      	str	r3, [r4, #0]
 801500a:	bd38      	pop	{r3, r4, r5, pc}
 801500c:	2000c940 	.word	0x2000c940

08015010 <_sbrk_r>:
 8015010:	b538      	push	{r3, r4, r5, lr}
 8015012:	2300      	movs	r3, #0
 8015014:	4d05      	ldr	r5, [pc, #20]	@ (801502c <_sbrk_r+0x1c>)
 8015016:	4604      	mov	r4, r0
 8015018:	4608      	mov	r0, r1
 801501a:	602b      	str	r3, [r5, #0]
 801501c:	f7ed fc30 	bl	8002880 <_sbrk>
 8015020:	1c43      	adds	r3, r0, #1
 8015022:	d102      	bne.n	801502a <_sbrk_r+0x1a>
 8015024:	682b      	ldr	r3, [r5, #0]
 8015026:	b103      	cbz	r3, 801502a <_sbrk_r+0x1a>
 8015028:	6023      	str	r3, [r4, #0]
 801502a:	bd38      	pop	{r3, r4, r5, pc}
 801502c:	2000c940 	.word	0x2000c940

08015030 <_write_r>:
 8015030:	b538      	push	{r3, r4, r5, lr}
 8015032:	4604      	mov	r4, r0
 8015034:	4608      	mov	r0, r1
 8015036:	4611      	mov	r1, r2
 8015038:	2200      	movs	r2, #0
 801503a:	4d05      	ldr	r5, [pc, #20]	@ (8015050 <_write_r+0x20>)
 801503c:	602a      	str	r2, [r5, #0]
 801503e:	461a      	mov	r2, r3
 8015040:	f7ed fbd2 	bl	80027e8 <_write>
 8015044:	1c43      	adds	r3, r0, #1
 8015046:	d102      	bne.n	801504e <_write_r+0x1e>
 8015048:	682b      	ldr	r3, [r5, #0]
 801504a:	b103      	cbz	r3, 801504e <_write_r+0x1e>
 801504c:	6023      	str	r3, [r4, #0]
 801504e:	bd38      	pop	{r3, r4, r5, pc}
 8015050:	2000c940 	.word	0x2000c940

08015054 <__errno>:
 8015054:	4b01      	ldr	r3, [pc, #4]	@ (801505c <__errno+0x8>)
 8015056:	6818      	ldr	r0, [r3, #0]
 8015058:	4770      	bx	lr
 801505a:	bf00      	nop
 801505c:	200001a0 	.word	0x200001a0

08015060 <__libc_init_array>:
 8015060:	b570      	push	{r4, r5, r6, lr}
 8015062:	2600      	movs	r6, #0
 8015064:	4d0c      	ldr	r5, [pc, #48]	@ (8015098 <__libc_init_array+0x38>)
 8015066:	4c0d      	ldr	r4, [pc, #52]	@ (801509c <__libc_init_array+0x3c>)
 8015068:	1b64      	subs	r4, r4, r5
 801506a:	10a4      	asrs	r4, r4, #2
 801506c:	42a6      	cmp	r6, r4
 801506e:	d109      	bne.n	8015084 <__libc_init_array+0x24>
 8015070:	f000 ff36 	bl	8015ee0 <_init>
 8015074:	2600      	movs	r6, #0
 8015076:	4d0a      	ldr	r5, [pc, #40]	@ (80150a0 <__libc_init_array+0x40>)
 8015078:	4c0a      	ldr	r4, [pc, #40]	@ (80150a4 <__libc_init_array+0x44>)
 801507a:	1b64      	subs	r4, r4, r5
 801507c:	10a4      	asrs	r4, r4, #2
 801507e:	42a6      	cmp	r6, r4
 8015080:	d105      	bne.n	801508e <__libc_init_array+0x2e>
 8015082:	bd70      	pop	{r4, r5, r6, pc}
 8015084:	f855 3b04 	ldr.w	r3, [r5], #4
 8015088:	4798      	blx	r3
 801508a:	3601      	adds	r6, #1
 801508c:	e7ee      	b.n	801506c <__libc_init_array+0xc>
 801508e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015092:	4798      	blx	r3
 8015094:	3601      	adds	r6, #1
 8015096:	e7f2      	b.n	801507e <__libc_init_array+0x1e>
 8015098:	08018128 	.word	0x08018128
 801509c:	08018128 	.word	0x08018128
 80150a0:	08018128 	.word	0x08018128
 80150a4:	0801812c 	.word	0x0801812c

080150a8 <__retarget_lock_init_recursive>:
 80150a8:	4770      	bx	lr

080150aa <__retarget_lock_acquire_recursive>:
 80150aa:	4770      	bx	lr

080150ac <__retarget_lock_release_recursive>:
 80150ac:	4770      	bx	lr

080150ae <memcpy>:
 80150ae:	440a      	add	r2, r1
 80150b0:	4291      	cmp	r1, r2
 80150b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80150b6:	d100      	bne.n	80150ba <memcpy+0xc>
 80150b8:	4770      	bx	lr
 80150ba:	b510      	push	{r4, lr}
 80150bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80150c0:	4291      	cmp	r1, r2
 80150c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80150c6:	d1f9      	bne.n	80150bc <memcpy+0xe>
 80150c8:	bd10      	pop	{r4, pc}
	...

080150cc <__assert_func>:
 80150cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80150ce:	4614      	mov	r4, r2
 80150d0:	461a      	mov	r2, r3
 80150d2:	4b09      	ldr	r3, [pc, #36]	@ (80150f8 <__assert_func+0x2c>)
 80150d4:	4605      	mov	r5, r0
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	68d8      	ldr	r0, [r3, #12]
 80150da:	b954      	cbnz	r4, 80150f2 <__assert_func+0x26>
 80150dc:	4b07      	ldr	r3, [pc, #28]	@ (80150fc <__assert_func+0x30>)
 80150de:	461c      	mov	r4, r3
 80150e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80150e4:	9100      	str	r1, [sp, #0]
 80150e6:	462b      	mov	r3, r5
 80150e8:	4905      	ldr	r1, [pc, #20]	@ (8015100 <__assert_func+0x34>)
 80150ea:	f000 fd27 	bl	8015b3c <fiprintf>
 80150ee:	f000 fdf3 	bl	8015cd8 <abort>
 80150f2:	4b04      	ldr	r3, [pc, #16]	@ (8015104 <__assert_func+0x38>)
 80150f4:	e7f4      	b.n	80150e0 <__assert_func+0x14>
 80150f6:	bf00      	nop
 80150f8:	200001a0 	.word	0x200001a0
 80150fc:	080180e9 	.word	0x080180e9
 8015100:	080180bb 	.word	0x080180bb
 8015104:	080180ae 	.word	0x080180ae

08015108 <_free_r>:
 8015108:	b538      	push	{r3, r4, r5, lr}
 801510a:	4605      	mov	r5, r0
 801510c:	2900      	cmp	r1, #0
 801510e:	d040      	beq.n	8015192 <_free_r+0x8a>
 8015110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015114:	1f0c      	subs	r4, r1, #4
 8015116:	2b00      	cmp	r3, #0
 8015118:	bfb8      	it	lt
 801511a:	18e4      	addlt	r4, r4, r3
 801511c:	f7ff fcf6 	bl	8014b0c <__malloc_lock>
 8015120:	4a1c      	ldr	r2, [pc, #112]	@ (8015194 <_free_r+0x8c>)
 8015122:	6813      	ldr	r3, [r2, #0]
 8015124:	b933      	cbnz	r3, 8015134 <_free_r+0x2c>
 8015126:	6063      	str	r3, [r4, #4]
 8015128:	6014      	str	r4, [r2, #0]
 801512a:	4628      	mov	r0, r5
 801512c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015130:	f7ff bcf2 	b.w	8014b18 <__malloc_unlock>
 8015134:	42a3      	cmp	r3, r4
 8015136:	d908      	bls.n	801514a <_free_r+0x42>
 8015138:	6820      	ldr	r0, [r4, #0]
 801513a:	1821      	adds	r1, r4, r0
 801513c:	428b      	cmp	r3, r1
 801513e:	bf01      	itttt	eq
 8015140:	6819      	ldreq	r1, [r3, #0]
 8015142:	685b      	ldreq	r3, [r3, #4]
 8015144:	1809      	addeq	r1, r1, r0
 8015146:	6021      	streq	r1, [r4, #0]
 8015148:	e7ed      	b.n	8015126 <_free_r+0x1e>
 801514a:	461a      	mov	r2, r3
 801514c:	685b      	ldr	r3, [r3, #4]
 801514e:	b10b      	cbz	r3, 8015154 <_free_r+0x4c>
 8015150:	42a3      	cmp	r3, r4
 8015152:	d9fa      	bls.n	801514a <_free_r+0x42>
 8015154:	6811      	ldr	r1, [r2, #0]
 8015156:	1850      	adds	r0, r2, r1
 8015158:	42a0      	cmp	r0, r4
 801515a:	d10b      	bne.n	8015174 <_free_r+0x6c>
 801515c:	6820      	ldr	r0, [r4, #0]
 801515e:	4401      	add	r1, r0
 8015160:	1850      	adds	r0, r2, r1
 8015162:	4283      	cmp	r3, r0
 8015164:	6011      	str	r1, [r2, #0]
 8015166:	d1e0      	bne.n	801512a <_free_r+0x22>
 8015168:	6818      	ldr	r0, [r3, #0]
 801516a:	685b      	ldr	r3, [r3, #4]
 801516c:	4408      	add	r0, r1
 801516e:	6010      	str	r0, [r2, #0]
 8015170:	6053      	str	r3, [r2, #4]
 8015172:	e7da      	b.n	801512a <_free_r+0x22>
 8015174:	d902      	bls.n	801517c <_free_r+0x74>
 8015176:	230c      	movs	r3, #12
 8015178:	602b      	str	r3, [r5, #0]
 801517a:	e7d6      	b.n	801512a <_free_r+0x22>
 801517c:	6820      	ldr	r0, [r4, #0]
 801517e:	1821      	adds	r1, r4, r0
 8015180:	428b      	cmp	r3, r1
 8015182:	bf01      	itttt	eq
 8015184:	6819      	ldreq	r1, [r3, #0]
 8015186:	685b      	ldreq	r3, [r3, #4]
 8015188:	1809      	addeq	r1, r1, r0
 801518a:	6021      	streq	r1, [r4, #0]
 801518c:	6063      	str	r3, [r4, #4]
 801518e:	6054      	str	r4, [r2, #4]
 8015190:	e7cb      	b.n	801512a <_free_r+0x22>
 8015192:	bd38      	pop	{r3, r4, r5, pc}
 8015194:	2000c800 	.word	0x2000c800

08015198 <__ssputs_r>:
 8015198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801519c:	461f      	mov	r7, r3
 801519e:	688e      	ldr	r6, [r1, #8]
 80151a0:	4682      	mov	sl, r0
 80151a2:	42be      	cmp	r6, r7
 80151a4:	460c      	mov	r4, r1
 80151a6:	4690      	mov	r8, r2
 80151a8:	680b      	ldr	r3, [r1, #0]
 80151aa:	d82d      	bhi.n	8015208 <__ssputs_r+0x70>
 80151ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80151b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80151b4:	d026      	beq.n	8015204 <__ssputs_r+0x6c>
 80151b6:	6965      	ldr	r5, [r4, #20]
 80151b8:	6909      	ldr	r1, [r1, #16]
 80151ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151be:	eba3 0901 	sub.w	r9, r3, r1
 80151c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80151c6:	1c7b      	adds	r3, r7, #1
 80151c8:	444b      	add	r3, r9
 80151ca:	106d      	asrs	r5, r5, #1
 80151cc:	429d      	cmp	r5, r3
 80151ce:	bf38      	it	cc
 80151d0:	461d      	movcc	r5, r3
 80151d2:	0553      	lsls	r3, r2, #21
 80151d4:	d527      	bpl.n	8015226 <__ssputs_r+0x8e>
 80151d6:	4629      	mov	r1, r5
 80151d8:	f7ff fc18 	bl	8014a0c <_malloc_r>
 80151dc:	4606      	mov	r6, r0
 80151de:	b360      	cbz	r0, 801523a <__ssputs_r+0xa2>
 80151e0:	464a      	mov	r2, r9
 80151e2:	6921      	ldr	r1, [r4, #16]
 80151e4:	f7ff ff63 	bl	80150ae <memcpy>
 80151e8:	89a3      	ldrh	r3, [r4, #12]
 80151ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80151ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151f2:	81a3      	strh	r3, [r4, #12]
 80151f4:	6126      	str	r6, [r4, #16]
 80151f6:	444e      	add	r6, r9
 80151f8:	6026      	str	r6, [r4, #0]
 80151fa:	463e      	mov	r6, r7
 80151fc:	6165      	str	r5, [r4, #20]
 80151fe:	eba5 0509 	sub.w	r5, r5, r9
 8015202:	60a5      	str	r5, [r4, #8]
 8015204:	42be      	cmp	r6, r7
 8015206:	d900      	bls.n	801520a <__ssputs_r+0x72>
 8015208:	463e      	mov	r6, r7
 801520a:	4632      	mov	r2, r6
 801520c:	4641      	mov	r1, r8
 801520e:	6820      	ldr	r0, [r4, #0]
 8015210:	f000 fd3a 	bl	8015c88 <memmove>
 8015214:	2000      	movs	r0, #0
 8015216:	68a3      	ldr	r3, [r4, #8]
 8015218:	1b9b      	subs	r3, r3, r6
 801521a:	60a3      	str	r3, [r4, #8]
 801521c:	6823      	ldr	r3, [r4, #0]
 801521e:	4433      	add	r3, r6
 8015220:	6023      	str	r3, [r4, #0]
 8015222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015226:	462a      	mov	r2, r5
 8015228:	f000 fd5d 	bl	8015ce6 <_realloc_r>
 801522c:	4606      	mov	r6, r0
 801522e:	2800      	cmp	r0, #0
 8015230:	d1e0      	bne.n	80151f4 <__ssputs_r+0x5c>
 8015232:	4650      	mov	r0, sl
 8015234:	6921      	ldr	r1, [r4, #16]
 8015236:	f7ff ff67 	bl	8015108 <_free_r>
 801523a:	230c      	movs	r3, #12
 801523c:	f8ca 3000 	str.w	r3, [sl]
 8015240:	89a3      	ldrh	r3, [r4, #12]
 8015242:	f04f 30ff 	mov.w	r0, #4294967295
 8015246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801524a:	81a3      	strh	r3, [r4, #12]
 801524c:	e7e9      	b.n	8015222 <__ssputs_r+0x8a>
	...

08015250 <_svfiprintf_r>:
 8015250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015254:	4698      	mov	r8, r3
 8015256:	898b      	ldrh	r3, [r1, #12]
 8015258:	4607      	mov	r7, r0
 801525a:	061b      	lsls	r3, r3, #24
 801525c:	460d      	mov	r5, r1
 801525e:	4614      	mov	r4, r2
 8015260:	b09d      	sub	sp, #116	@ 0x74
 8015262:	d510      	bpl.n	8015286 <_svfiprintf_r+0x36>
 8015264:	690b      	ldr	r3, [r1, #16]
 8015266:	b973      	cbnz	r3, 8015286 <_svfiprintf_r+0x36>
 8015268:	2140      	movs	r1, #64	@ 0x40
 801526a:	f7ff fbcf 	bl	8014a0c <_malloc_r>
 801526e:	6028      	str	r0, [r5, #0]
 8015270:	6128      	str	r0, [r5, #16]
 8015272:	b930      	cbnz	r0, 8015282 <_svfiprintf_r+0x32>
 8015274:	230c      	movs	r3, #12
 8015276:	603b      	str	r3, [r7, #0]
 8015278:	f04f 30ff 	mov.w	r0, #4294967295
 801527c:	b01d      	add	sp, #116	@ 0x74
 801527e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015282:	2340      	movs	r3, #64	@ 0x40
 8015284:	616b      	str	r3, [r5, #20]
 8015286:	2300      	movs	r3, #0
 8015288:	9309      	str	r3, [sp, #36]	@ 0x24
 801528a:	2320      	movs	r3, #32
 801528c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015290:	2330      	movs	r3, #48	@ 0x30
 8015292:	f04f 0901 	mov.w	r9, #1
 8015296:	f8cd 800c 	str.w	r8, [sp, #12]
 801529a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8015434 <_svfiprintf_r+0x1e4>
 801529e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80152a2:	4623      	mov	r3, r4
 80152a4:	469a      	mov	sl, r3
 80152a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80152aa:	b10a      	cbz	r2, 80152b0 <_svfiprintf_r+0x60>
 80152ac:	2a25      	cmp	r2, #37	@ 0x25
 80152ae:	d1f9      	bne.n	80152a4 <_svfiprintf_r+0x54>
 80152b0:	ebba 0b04 	subs.w	fp, sl, r4
 80152b4:	d00b      	beq.n	80152ce <_svfiprintf_r+0x7e>
 80152b6:	465b      	mov	r3, fp
 80152b8:	4622      	mov	r2, r4
 80152ba:	4629      	mov	r1, r5
 80152bc:	4638      	mov	r0, r7
 80152be:	f7ff ff6b 	bl	8015198 <__ssputs_r>
 80152c2:	3001      	adds	r0, #1
 80152c4:	f000 80a7 	beq.w	8015416 <_svfiprintf_r+0x1c6>
 80152c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80152ca:	445a      	add	r2, fp
 80152cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80152ce:	f89a 3000 	ldrb.w	r3, [sl]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	f000 809f 	beq.w	8015416 <_svfiprintf_r+0x1c6>
 80152d8:	2300      	movs	r3, #0
 80152da:	f04f 32ff 	mov.w	r2, #4294967295
 80152de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80152e2:	f10a 0a01 	add.w	sl, sl, #1
 80152e6:	9304      	str	r3, [sp, #16]
 80152e8:	9307      	str	r3, [sp, #28]
 80152ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80152ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80152f0:	4654      	mov	r4, sl
 80152f2:	2205      	movs	r2, #5
 80152f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152f8:	484e      	ldr	r0, [pc, #312]	@ (8015434 <_svfiprintf_r+0x1e4>)
 80152fa:	f000 fcdf 	bl	8015cbc <memchr>
 80152fe:	9a04      	ldr	r2, [sp, #16]
 8015300:	b9d8      	cbnz	r0, 801533a <_svfiprintf_r+0xea>
 8015302:	06d0      	lsls	r0, r2, #27
 8015304:	bf44      	itt	mi
 8015306:	2320      	movmi	r3, #32
 8015308:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801530c:	0711      	lsls	r1, r2, #28
 801530e:	bf44      	itt	mi
 8015310:	232b      	movmi	r3, #43	@ 0x2b
 8015312:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015316:	f89a 3000 	ldrb.w	r3, [sl]
 801531a:	2b2a      	cmp	r3, #42	@ 0x2a
 801531c:	d015      	beq.n	801534a <_svfiprintf_r+0xfa>
 801531e:	4654      	mov	r4, sl
 8015320:	2000      	movs	r0, #0
 8015322:	f04f 0c0a 	mov.w	ip, #10
 8015326:	9a07      	ldr	r2, [sp, #28]
 8015328:	4621      	mov	r1, r4
 801532a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801532e:	3b30      	subs	r3, #48	@ 0x30
 8015330:	2b09      	cmp	r3, #9
 8015332:	d94b      	bls.n	80153cc <_svfiprintf_r+0x17c>
 8015334:	b1b0      	cbz	r0, 8015364 <_svfiprintf_r+0x114>
 8015336:	9207      	str	r2, [sp, #28]
 8015338:	e014      	b.n	8015364 <_svfiprintf_r+0x114>
 801533a:	eba0 0308 	sub.w	r3, r0, r8
 801533e:	fa09 f303 	lsl.w	r3, r9, r3
 8015342:	4313      	orrs	r3, r2
 8015344:	46a2      	mov	sl, r4
 8015346:	9304      	str	r3, [sp, #16]
 8015348:	e7d2      	b.n	80152f0 <_svfiprintf_r+0xa0>
 801534a:	9b03      	ldr	r3, [sp, #12]
 801534c:	1d19      	adds	r1, r3, #4
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	9103      	str	r1, [sp, #12]
 8015352:	2b00      	cmp	r3, #0
 8015354:	bfbb      	ittet	lt
 8015356:	425b      	neglt	r3, r3
 8015358:	f042 0202 	orrlt.w	r2, r2, #2
 801535c:	9307      	strge	r3, [sp, #28]
 801535e:	9307      	strlt	r3, [sp, #28]
 8015360:	bfb8      	it	lt
 8015362:	9204      	strlt	r2, [sp, #16]
 8015364:	7823      	ldrb	r3, [r4, #0]
 8015366:	2b2e      	cmp	r3, #46	@ 0x2e
 8015368:	d10a      	bne.n	8015380 <_svfiprintf_r+0x130>
 801536a:	7863      	ldrb	r3, [r4, #1]
 801536c:	2b2a      	cmp	r3, #42	@ 0x2a
 801536e:	d132      	bne.n	80153d6 <_svfiprintf_r+0x186>
 8015370:	9b03      	ldr	r3, [sp, #12]
 8015372:	3402      	adds	r4, #2
 8015374:	1d1a      	adds	r2, r3, #4
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	9203      	str	r2, [sp, #12]
 801537a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801537e:	9305      	str	r3, [sp, #20]
 8015380:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8015438 <_svfiprintf_r+0x1e8>
 8015384:	2203      	movs	r2, #3
 8015386:	4650      	mov	r0, sl
 8015388:	7821      	ldrb	r1, [r4, #0]
 801538a:	f000 fc97 	bl	8015cbc <memchr>
 801538e:	b138      	cbz	r0, 80153a0 <_svfiprintf_r+0x150>
 8015390:	2240      	movs	r2, #64	@ 0x40
 8015392:	9b04      	ldr	r3, [sp, #16]
 8015394:	eba0 000a 	sub.w	r0, r0, sl
 8015398:	4082      	lsls	r2, r0
 801539a:	4313      	orrs	r3, r2
 801539c:	3401      	adds	r4, #1
 801539e:	9304      	str	r3, [sp, #16]
 80153a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153a4:	2206      	movs	r2, #6
 80153a6:	4825      	ldr	r0, [pc, #148]	@ (801543c <_svfiprintf_r+0x1ec>)
 80153a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80153ac:	f000 fc86 	bl	8015cbc <memchr>
 80153b0:	2800      	cmp	r0, #0
 80153b2:	d036      	beq.n	8015422 <_svfiprintf_r+0x1d2>
 80153b4:	4b22      	ldr	r3, [pc, #136]	@ (8015440 <_svfiprintf_r+0x1f0>)
 80153b6:	bb1b      	cbnz	r3, 8015400 <_svfiprintf_r+0x1b0>
 80153b8:	9b03      	ldr	r3, [sp, #12]
 80153ba:	3307      	adds	r3, #7
 80153bc:	f023 0307 	bic.w	r3, r3, #7
 80153c0:	3308      	adds	r3, #8
 80153c2:	9303      	str	r3, [sp, #12]
 80153c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80153c6:	4433      	add	r3, r6
 80153c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80153ca:	e76a      	b.n	80152a2 <_svfiprintf_r+0x52>
 80153cc:	460c      	mov	r4, r1
 80153ce:	2001      	movs	r0, #1
 80153d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80153d4:	e7a8      	b.n	8015328 <_svfiprintf_r+0xd8>
 80153d6:	2300      	movs	r3, #0
 80153d8:	f04f 0c0a 	mov.w	ip, #10
 80153dc:	4619      	mov	r1, r3
 80153de:	3401      	adds	r4, #1
 80153e0:	9305      	str	r3, [sp, #20]
 80153e2:	4620      	mov	r0, r4
 80153e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80153e8:	3a30      	subs	r2, #48	@ 0x30
 80153ea:	2a09      	cmp	r2, #9
 80153ec:	d903      	bls.n	80153f6 <_svfiprintf_r+0x1a6>
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d0c6      	beq.n	8015380 <_svfiprintf_r+0x130>
 80153f2:	9105      	str	r1, [sp, #20]
 80153f4:	e7c4      	b.n	8015380 <_svfiprintf_r+0x130>
 80153f6:	4604      	mov	r4, r0
 80153f8:	2301      	movs	r3, #1
 80153fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80153fe:	e7f0      	b.n	80153e2 <_svfiprintf_r+0x192>
 8015400:	ab03      	add	r3, sp, #12
 8015402:	9300      	str	r3, [sp, #0]
 8015404:	462a      	mov	r2, r5
 8015406:	4638      	mov	r0, r7
 8015408:	4b0e      	ldr	r3, [pc, #56]	@ (8015444 <_svfiprintf_r+0x1f4>)
 801540a:	a904      	add	r1, sp, #16
 801540c:	f3af 8000 	nop.w
 8015410:	1c42      	adds	r2, r0, #1
 8015412:	4606      	mov	r6, r0
 8015414:	d1d6      	bne.n	80153c4 <_svfiprintf_r+0x174>
 8015416:	89ab      	ldrh	r3, [r5, #12]
 8015418:	065b      	lsls	r3, r3, #25
 801541a:	f53f af2d 	bmi.w	8015278 <_svfiprintf_r+0x28>
 801541e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015420:	e72c      	b.n	801527c <_svfiprintf_r+0x2c>
 8015422:	ab03      	add	r3, sp, #12
 8015424:	9300      	str	r3, [sp, #0]
 8015426:	462a      	mov	r2, r5
 8015428:	4638      	mov	r0, r7
 801542a:	4b06      	ldr	r3, [pc, #24]	@ (8015444 <_svfiprintf_r+0x1f4>)
 801542c:	a904      	add	r1, sp, #16
 801542e:	f000 f9bd 	bl	80157ac <_printf_i>
 8015432:	e7ed      	b.n	8015410 <_svfiprintf_r+0x1c0>
 8015434:	080180ea 	.word	0x080180ea
 8015438:	080180f0 	.word	0x080180f0
 801543c:	080180f4 	.word	0x080180f4
 8015440:	00000000 	.word	0x00000000
 8015444:	08015199 	.word	0x08015199

08015448 <__sfputc_r>:
 8015448:	6893      	ldr	r3, [r2, #8]
 801544a:	b410      	push	{r4}
 801544c:	3b01      	subs	r3, #1
 801544e:	2b00      	cmp	r3, #0
 8015450:	6093      	str	r3, [r2, #8]
 8015452:	da07      	bge.n	8015464 <__sfputc_r+0x1c>
 8015454:	6994      	ldr	r4, [r2, #24]
 8015456:	42a3      	cmp	r3, r4
 8015458:	db01      	blt.n	801545e <__sfputc_r+0x16>
 801545a:	290a      	cmp	r1, #10
 801545c:	d102      	bne.n	8015464 <__sfputc_r+0x1c>
 801545e:	bc10      	pop	{r4}
 8015460:	f000 bb7e 	b.w	8015b60 <__swbuf_r>
 8015464:	6813      	ldr	r3, [r2, #0]
 8015466:	1c58      	adds	r0, r3, #1
 8015468:	6010      	str	r0, [r2, #0]
 801546a:	7019      	strb	r1, [r3, #0]
 801546c:	4608      	mov	r0, r1
 801546e:	bc10      	pop	{r4}
 8015470:	4770      	bx	lr

08015472 <__sfputs_r>:
 8015472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015474:	4606      	mov	r6, r0
 8015476:	460f      	mov	r7, r1
 8015478:	4614      	mov	r4, r2
 801547a:	18d5      	adds	r5, r2, r3
 801547c:	42ac      	cmp	r4, r5
 801547e:	d101      	bne.n	8015484 <__sfputs_r+0x12>
 8015480:	2000      	movs	r0, #0
 8015482:	e007      	b.n	8015494 <__sfputs_r+0x22>
 8015484:	463a      	mov	r2, r7
 8015486:	4630      	mov	r0, r6
 8015488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801548c:	f7ff ffdc 	bl	8015448 <__sfputc_r>
 8015490:	1c43      	adds	r3, r0, #1
 8015492:	d1f3      	bne.n	801547c <__sfputs_r+0xa>
 8015494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015498 <_vfiprintf_r>:
 8015498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801549c:	460d      	mov	r5, r1
 801549e:	4614      	mov	r4, r2
 80154a0:	4698      	mov	r8, r3
 80154a2:	4606      	mov	r6, r0
 80154a4:	b09d      	sub	sp, #116	@ 0x74
 80154a6:	b118      	cbz	r0, 80154b0 <_vfiprintf_r+0x18>
 80154a8:	6a03      	ldr	r3, [r0, #32]
 80154aa:	b90b      	cbnz	r3, 80154b0 <_vfiprintf_r+0x18>
 80154ac:	f7ff fc4a 	bl	8014d44 <__sinit>
 80154b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154b2:	07d9      	lsls	r1, r3, #31
 80154b4:	d405      	bmi.n	80154c2 <_vfiprintf_r+0x2a>
 80154b6:	89ab      	ldrh	r3, [r5, #12]
 80154b8:	059a      	lsls	r2, r3, #22
 80154ba:	d402      	bmi.n	80154c2 <_vfiprintf_r+0x2a>
 80154bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154be:	f7ff fdf4 	bl	80150aa <__retarget_lock_acquire_recursive>
 80154c2:	89ab      	ldrh	r3, [r5, #12]
 80154c4:	071b      	lsls	r3, r3, #28
 80154c6:	d501      	bpl.n	80154cc <_vfiprintf_r+0x34>
 80154c8:	692b      	ldr	r3, [r5, #16]
 80154ca:	b99b      	cbnz	r3, 80154f4 <_vfiprintf_r+0x5c>
 80154cc:	4629      	mov	r1, r5
 80154ce:	4630      	mov	r0, r6
 80154d0:	f000 fb84 	bl	8015bdc <__swsetup_r>
 80154d4:	b170      	cbz	r0, 80154f4 <_vfiprintf_r+0x5c>
 80154d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80154d8:	07dc      	lsls	r4, r3, #31
 80154da:	d504      	bpl.n	80154e6 <_vfiprintf_r+0x4e>
 80154dc:	f04f 30ff 	mov.w	r0, #4294967295
 80154e0:	b01d      	add	sp, #116	@ 0x74
 80154e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154e6:	89ab      	ldrh	r3, [r5, #12]
 80154e8:	0598      	lsls	r0, r3, #22
 80154ea:	d4f7      	bmi.n	80154dc <_vfiprintf_r+0x44>
 80154ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80154ee:	f7ff fddd 	bl	80150ac <__retarget_lock_release_recursive>
 80154f2:	e7f3      	b.n	80154dc <_vfiprintf_r+0x44>
 80154f4:	2300      	movs	r3, #0
 80154f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80154f8:	2320      	movs	r3, #32
 80154fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80154fe:	2330      	movs	r3, #48	@ 0x30
 8015500:	f04f 0901 	mov.w	r9, #1
 8015504:	f8cd 800c 	str.w	r8, [sp, #12]
 8015508:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80156b4 <_vfiprintf_r+0x21c>
 801550c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015510:	4623      	mov	r3, r4
 8015512:	469a      	mov	sl, r3
 8015514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015518:	b10a      	cbz	r2, 801551e <_vfiprintf_r+0x86>
 801551a:	2a25      	cmp	r2, #37	@ 0x25
 801551c:	d1f9      	bne.n	8015512 <_vfiprintf_r+0x7a>
 801551e:	ebba 0b04 	subs.w	fp, sl, r4
 8015522:	d00b      	beq.n	801553c <_vfiprintf_r+0xa4>
 8015524:	465b      	mov	r3, fp
 8015526:	4622      	mov	r2, r4
 8015528:	4629      	mov	r1, r5
 801552a:	4630      	mov	r0, r6
 801552c:	f7ff ffa1 	bl	8015472 <__sfputs_r>
 8015530:	3001      	adds	r0, #1
 8015532:	f000 80a7 	beq.w	8015684 <_vfiprintf_r+0x1ec>
 8015536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015538:	445a      	add	r2, fp
 801553a:	9209      	str	r2, [sp, #36]	@ 0x24
 801553c:	f89a 3000 	ldrb.w	r3, [sl]
 8015540:	2b00      	cmp	r3, #0
 8015542:	f000 809f 	beq.w	8015684 <_vfiprintf_r+0x1ec>
 8015546:	2300      	movs	r3, #0
 8015548:	f04f 32ff 	mov.w	r2, #4294967295
 801554c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015550:	f10a 0a01 	add.w	sl, sl, #1
 8015554:	9304      	str	r3, [sp, #16]
 8015556:	9307      	str	r3, [sp, #28]
 8015558:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801555c:	931a      	str	r3, [sp, #104]	@ 0x68
 801555e:	4654      	mov	r4, sl
 8015560:	2205      	movs	r2, #5
 8015562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015566:	4853      	ldr	r0, [pc, #332]	@ (80156b4 <_vfiprintf_r+0x21c>)
 8015568:	f000 fba8 	bl	8015cbc <memchr>
 801556c:	9a04      	ldr	r2, [sp, #16]
 801556e:	b9d8      	cbnz	r0, 80155a8 <_vfiprintf_r+0x110>
 8015570:	06d1      	lsls	r1, r2, #27
 8015572:	bf44      	itt	mi
 8015574:	2320      	movmi	r3, #32
 8015576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801557a:	0713      	lsls	r3, r2, #28
 801557c:	bf44      	itt	mi
 801557e:	232b      	movmi	r3, #43	@ 0x2b
 8015580:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015584:	f89a 3000 	ldrb.w	r3, [sl]
 8015588:	2b2a      	cmp	r3, #42	@ 0x2a
 801558a:	d015      	beq.n	80155b8 <_vfiprintf_r+0x120>
 801558c:	4654      	mov	r4, sl
 801558e:	2000      	movs	r0, #0
 8015590:	f04f 0c0a 	mov.w	ip, #10
 8015594:	9a07      	ldr	r2, [sp, #28]
 8015596:	4621      	mov	r1, r4
 8015598:	f811 3b01 	ldrb.w	r3, [r1], #1
 801559c:	3b30      	subs	r3, #48	@ 0x30
 801559e:	2b09      	cmp	r3, #9
 80155a0:	d94b      	bls.n	801563a <_vfiprintf_r+0x1a2>
 80155a2:	b1b0      	cbz	r0, 80155d2 <_vfiprintf_r+0x13a>
 80155a4:	9207      	str	r2, [sp, #28]
 80155a6:	e014      	b.n	80155d2 <_vfiprintf_r+0x13a>
 80155a8:	eba0 0308 	sub.w	r3, r0, r8
 80155ac:	fa09 f303 	lsl.w	r3, r9, r3
 80155b0:	4313      	orrs	r3, r2
 80155b2:	46a2      	mov	sl, r4
 80155b4:	9304      	str	r3, [sp, #16]
 80155b6:	e7d2      	b.n	801555e <_vfiprintf_r+0xc6>
 80155b8:	9b03      	ldr	r3, [sp, #12]
 80155ba:	1d19      	adds	r1, r3, #4
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	9103      	str	r1, [sp, #12]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	bfbb      	ittet	lt
 80155c4:	425b      	neglt	r3, r3
 80155c6:	f042 0202 	orrlt.w	r2, r2, #2
 80155ca:	9307      	strge	r3, [sp, #28]
 80155cc:	9307      	strlt	r3, [sp, #28]
 80155ce:	bfb8      	it	lt
 80155d0:	9204      	strlt	r2, [sp, #16]
 80155d2:	7823      	ldrb	r3, [r4, #0]
 80155d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80155d6:	d10a      	bne.n	80155ee <_vfiprintf_r+0x156>
 80155d8:	7863      	ldrb	r3, [r4, #1]
 80155da:	2b2a      	cmp	r3, #42	@ 0x2a
 80155dc:	d132      	bne.n	8015644 <_vfiprintf_r+0x1ac>
 80155de:	9b03      	ldr	r3, [sp, #12]
 80155e0:	3402      	adds	r4, #2
 80155e2:	1d1a      	adds	r2, r3, #4
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	9203      	str	r2, [sp, #12]
 80155e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80155ec:	9305      	str	r3, [sp, #20]
 80155ee:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80156b8 <_vfiprintf_r+0x220>
 80155f2:	2203      	movs	r2, #3
 80155f4:	4650      	mov	r0, sl
 80155f6:	7821      	ldrb	r1, [r4, #0]
 80155f8:	f000 fb60 	bl	8015cbc <memchr>
 80155fc:	b138      	cbz	r0, 801560e <_vfiprintf_r+0x176>
 80155fe:	2240      	movs	r2, #64	@ 0x40
 8015600:	9b04      	ldr	r3, [sp, #16]
 8015602:	eba0 000a 	sub.w	r0, r0, sl
 8015606:	4082      	lsls	r2, r0
 8015608:	4313      	orrs	r3, r2
 801560a:	3401      	adds	r4, #1
 801560c:	9304      	str	r3, [sp, #16]
 801560e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015612:	2206      	movs	r2, #6
 8015614:	4829      	ldr	r0, [pc, #164]	@ (80156bc <_vfiprintf_r+0x224>)
 8015616:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801561a:	f000 fb4f 	bl	8015cbc <memchr>
 801561e:	2800      	cmp	r0, #0
 8015620:	d03f      	beq.n	80156a2 <_vfiprintf_r+0x20a>
 8015622:	4b27      	ldr	r3, [pc, #156]	@ (80156c0 <_vfiprintf_r+0x228>)
 8015624:	bb1b      	cbnz	r3, 801566e <_vfiprintf_r+0x1d6>
 8015626:	9b03      	ldr	r3, [sp, #12]
 8015628:	3307      	adds	r3, #7
 801562a:	f023 0307 	bic.w	r3, r3, #7
 801562e:	3308      	adds	r3, #8
 8015630:	9303      	str	r3, [sp, #12]
 8015632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015634:	443b      	add	r3, r7
 8015636:	9309      	str	r3, [sp, #36]	@ 0x24
 8015638:	e76a      	b.n	8015510 <_vfiprintf_r+0x78>
 801563a:	460c      	mov	r4, r1
 801563c:	2001      	movs	r0, #1
 801563e:	fb0c 3202 	mla	r2, ip, r2, r3
 8015642:	e7a8      	b.n	8015596 <_vfiprintf_r+0xfe>
 8015644:	2300      	movs	r3, #0
 8015646:	f04f 0c0a 	mov.w	ip, #10
 801564a:	4619      	mov	r1, r3
 801564c:	3401      	adds	r4, #1
 801564e:	9305      	str	r3, [sp, #20]
 8015650:	4620      	mov	r0, r4
 8015652:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015656:	3a30      	subs	r2, #48	@ 0x30
 8015658:	2a09      	cmp	r2, #9
 801565a:	d903      	bls.n	8015664 <_vfiprintf_r+0x1cc>
 801565c:	2b00      	cmp	r3, #0
 801565e:	d0c6      	beq.n	80155ee <_vfiprintf_r+0x156>
 8015660:	9105      	str	r1, [sp, #20]
 8015662:	e7c4      	b.n	80155ee <_vfiprintf_r+0x156>
 8015664:	4604      	mov	r4, r0
 8015666:	2301      	movs	r3, #1
 8015668:	fb0c 2101 	mla	r1, ip, r1, r2
 801566c:	e7f0      	b.n	8015650 <_vfiprintf_r+0x1b8>
 801566e:	ab03      	add	r3, sp, #12
 8015670:	9300      	str	r3, [sp, #0]
 8015672:	462a      	mov	r2, r5
 8015674:	4630      	mov	r0, r6
 8015676:	4b13      	ldr	r3, [pc, #76]	@ (80156c4 <_vfiprintf_r+0x22c>)
 8015678:	a904      	add	r1, sp, #16
 801567a:	f3af 8000 	nop.w
 801567e:	4607      	mov	r7, r0
 8015680:	1c78      	adds	r0, r7, #1
 8015682:	d1d6      	bne.n	8015632 <_vfiprintf_r+0x19a>
 8015684:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015686:	07d9      	lsls	r1, r3, #31
 8015688:	d405      	bmi.n	8015696 <_vfiprintf_r+0x1fe>
 801568a:	89ab      	ldrh	r3, [r5, #12]
 801568c:	059a      	lsls	r2, r3, #22
 801568e:	d402      	bmi.n	8015696 <_vfiprintf_r+0x1fe>
 8015690:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015692:	f7ff fd0b 	bl	80150ac <__retarget_lock_release_recursive>
 8015696:	89ab      	ldrh	r3, [r5, #12]
 8015698:	065b      	lsls	r3, r3, #25
 801569a:	f53f af1f 	bmi.w	80154dc <_vfiprintf_r+0x44>
 801569e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80156a0:	e71e      	b.n	80154e0 <_vfiprintf_r+0x48>
 80156a2:	ab03      	add	r3, sp, #12
 80156a4:	9300      	str	r3, [sp, #0]
 80156a6:	462a      	mov	r2, r5
 80156a8:	4630      	mov	r0, r6
 80156aa:	4b06      	ldr	r3, [pc, #24]	@ (80156c4 <_vfiprintf_r+0x22c>)
 80156ac:	a904      	add	r1, sp, #16
 80156ae:	f000 f87d 	bl	80157ac <_printf_i>
 80156b2:	e7e4      	b.n	801567e <_vfiprintf_r+0x1e6>
 80156b4:	080180ea 	.word	0x080180ea
 80156b8:	080180f0 	.word	0x080180f0
 80156bc:	080180f4 	.word	0x080180f4
 80156c0:	00000000 	.word	0x00000000
 80156c4:	08015473 	.word	0x08015473

080156c8 <_printf_common>:
 80156c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156cc:	4616      	mov	r6, r2
 80156ce:	4698      	mov	r8, r3
 80156d0:	688a      	ldr	r2, [r1, #8]
 80156d2:	690b      	ldr	r3, [r1, #16]
 80156d4:	4607      	mov	r7, r0
 80156d6:	4293      	cmp	r3, r2
 80156d8:	bfb8      	it	lt
 80156da:	4613      	movlt	r3, r2
 80156dc:	6033      	str	r3, [r6, #0]
 80156de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80156e2:	460c      	mov	r4, r1
 80156e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80156e8:	b10a      	cbz	r2, 80156ee <_printf_common+0x26>
 80156ea:	3301      	adds	r3, #1
 80156ec:	6033      	str	r3, [r6, #0]
 80156ee:	6823      	ldr	r3, [r4, #0]
 80156f0:	0699      	lsls	r1, r3, #26
 80156f2:	bf42      	ittt	mi
 80156f4:	6833      	ldrmi	r3, [r6, #0]
 80156f6:	3302      	addmi	r3, #2
 80156f8:	6033      	strmi	r3, [r6, #0]
 80156fa:	6825      	ldr	r5, [r4, #0]
 80156fc:	f015 0506 	ands.w	r5, r5, #6
 8015700:	d106      	bne.n	8015710 <_printf_common+0x48>
 8015702:	f104 0a19 	add.w	sl, r4, #25
 8015706:	68e3      	ldr	r3, [r4, #12]
 8015708:	6832      	ldr	r2, [r6, #0]
 801570a:	1a9b      	subs	r3, r3, r2
 801570c:	42ab      	cmp	r3, r5
 801570e:	dc2b      	bgt.n	8015768 <_printf_common+0xa0>
 8015710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015714:	6822      	ldr	r2, [r4, #0]
 8015716:	3b00      	subs	r3, #0
 8015718:	bf18      	it	ne
 801571a:	2301      	movne	r3, #1
 801571c:	0692      	lsls	r2, r2, #26
 801571e:	d430      	bmi.n	8015782 <_printf_common+0xba>
 8015720:	4641      	mov	r1, r8
 8015722:	4638      	mov	r0, r7
 8015724:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015728:	47c8      	blx	r9
 801572a:	3001      	adds	r0, #1
 801572c:	d023      	beq.n	8015776 <_printf_common+0xae>
 801572e:	6823      	ldr	r3, [r4, #0]
 8015730:	6922      	ldr	r2, [r4, #16]
 8015732:	f003 0306 	and.w	r3, r3, #6
 8015736:	2b04      	cmp	r3, #4
 8015738:	bf14      	ite	ne
 801573a:	2500      	movne	r5, #0
 801573c:	6833      	ldreq	r3, [r6, #0]
 801573e:	f04f 0600 	mov.w	r6, #0
 8015742:	bf08      	it	eq
 8015744:	68e5      	ldreq	r5, [r4, #12]
 8015746:	f104 041a 	add.w	r4, r4, #26
 801574a:	bf08      	it	eq
 801574c:	1aed      	subeq	r5, r5, r3
 801574e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015752:	bf08      	it	eq
 8015754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015758:	4293      	cmp	r3, r2
 801575a:	bfc4      	itt	gt
 801575c:	1a9b      	subgt	r3, r3, r2
 801575e:	18ed      	addgt	r5, r5, r3
 8015760:	42b5      	cmp	r5, r6
 8015762:	d11a      	bne.n	801579a <_printf_common+0xd2>
 8015764:	2000      	movs	r0, #0
 8015766:	e008      	b.n	801577a <_printf_common+0xb2>
 8015768:	2301      	movs	r3, #1
 801576a:	4652      	mov	r2, sl
 801576c:	4641      	mov	r1, r8
 801576e:	4638      	mov	r0, r7
 8015770:	47c8      	blx	r9
 8015772:	3001      	adds	r0, #1
 8015774:	d103      	bne.n	801577e <_printf_common+0xb6>
 8015776:	f04f 30ff 	mov.w	r0, #4294967295
 801577a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801577e:	3501      	adds	r5, #1
 8015780:	e7c1      	b.n	8015706 <_printf_common+0x3e>
 8015782:	2030      	movs	r0, #48	@ 0x30
 8015784:	18e1      	adds	r1, r4, r3
 8015786:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801578a:	1c5a      	adds	r2, r3, #1
 801578c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015790:	4422      	add	r2, r4
 8015792:	3302      	adds	r3, #2
 8015794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015798:	e7c2      	b.n	8015720 <_printf_common+0x58>
 801579a:	2301      	movs	r3, #1
 801579c:	4622      	mov	r2, r4
 801579e:	4641      	mov	r1, r8
 80157a0:	4638      	mov	r0, r7
 80157a2:	47c8      	blx	r9
 80157a4:	3001      	adds	r0, #1
 80157a6:	d0e6      	beq.n	8015776 <_printf_common+0xae>
 80157a8:	3601      	adds	r6, #1
 80157aa:	e7d9      	b.n	8015760 <_printf_common+0x98>

080157ac <_printf_i>:
 80157ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157b0:	7e0f      	ldrb	r7, [r1, #24]
 80157b2:	4691      	mov	r9, r2
 80157b4:	2f78      	cmp	r7, #120	@ 0x78
 80157b6:	4680      	mov	r8, r0
 80157b8:	460c      	mov	r4, r1
 80157ba:	469a      	mov	sl, r3
 80157bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80157be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80157c2:	d807      	bhi.n	80157d4 <_printf_i+0x28>
 80157c4:	2f62      	cmp	r7, #98	@ 0x62
 80157c6:	d80a      	bhi.n	80157de <_printf_i+0x32>
 80157c8:	2f00      	cmp	r7, #0
 80157ca:	f000 80d3 	beq.w	8015974 <_printf_i+0x1c8>
 80157ce:	2f58      	cmp	r7, #88	@ 0x58
 80157d0:	f000 80ba 	beq.w	8015948 <_printf_i+0x19c>
 80157d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80157d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80157dc:	e03a      	b.n	8015854 <_printf_i+0xa8>
 80157de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80157e2:	2b15      	cmp	r3, #21
 80157e4:	d8f6      	bhi.n	80157d4 <_printf_i+0x28>
 80157e6:	a101      	add	r1, pc, #4	@ (adr r1, 80157ec <_printf_i+0x40>)
 80157e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80157ec:	08015845 	.word	0x08015845
 80157f0:	08015859 	.word	0x08015859
 80157f4:	080157d5 	.word	0x080157d5
 80157f8:	080157d5 	.word	0x080157d5
 80157fc:	080157d5 	.word	0x080157d5
 8015800:	080157d5 	.word	0x080157d5
 8015804:	08015859 	.word	0x08015859
 8015808:	080157d5 	.word	0x080157d5
 801580c:	080157d5 	.word	0x080157d5
 8015810:	080157d5 	.word	0x080157d5
 8015814:	080157d5 	.word	0x080157d5
 8015818:	0801595b 	.word	0x0801595b
 801581c:	08015883 	.word	0x08015883
 8015820:	08015915 	.word	0x08015915
 8015824:	080157d5 	.word	0x080157d5
 8015828:	080157d5 	.word	0x080157d5
 801582c:	0801597d 	.word	0x0801597d
 8015830:	080157d5 	.word	0x080157d5
 8015834:	08015883 	.word	0x08015883
 8015838:	080157d5 	.word	0x080157d5
 801583c:	080157d5 	.word	0x080157d5
 8015840:	0801591d 	.word	0x0801591d
 8015844:	6833      	ldr	r3, [r6, #0]
 8015846:	1d1a      	adds	r2, r3, #4
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	6032      	str	r2, [r6, #0]
 801584c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015850:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015854:	2301      	movs	r3, #1
 8015856:	e09e      	b.n	8015996 <_printf_i+0x1ea>
 8015858:	6833      	ldr	r3, [r6, #0]
 801585a:	6820      	ldr	r0, [r4, #0]
 801585c:	1d19      	adds	r1, r3, #4
 801585e:	6031      	str	r1, [r6, #0]
 8015860:	0606      	lsls	r6, r0, #24
 8015862:	d501      	bpl.n	8015868 <_printf_i+0xbc>
 8015864:	681d      	ldr	r5, [r3, #0]
 8015866:	e003      	b.n	8015870 <_printf_i+0xc4>
 8015868:	0645      	lsls	r5, r0, #25
 801586a:	d5fb      	bpl.n	8015864 <_printf_i+0xb8>
 801586c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015870:	2d00      	cmp	r5, #0
 8015872:	da03      	bge.n	801587c <_printf_i+0xd0>
 8015874:	232d      	movs	r3, #45	@ 0x2d
 8015876:	426d      	negs	r5, r5
 8015878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801587c:	230a      	movs	r3, #10
 801587e:	4859      	ldr	r0, [pc, #356]	@ (80159e4 <_printf_i+0x238>)
 8015880:	e011      	b.n	80158a6 <_printf_i+0xfa>
 8015882:	6821      	ldr	r1, [r4, #0]
 8015884:	6833      	ldr	r3, [r6, #0]
 8015886:	0608      	lsls	r0, r1, #24
 8015888:	f853 5b04 	ldr.w	r5, [r3], #4
 801588c:	d402      	bmi.n	8015894 <_printf_i+0xe8>
 801588e:	0649      	lsls	r1, r1, #25
 8015890:	bf48      	it	mi
 8015892:	b2ad      	uxthmi	r5, r5
 8015894:	2f6f      	cmp	r7, #111	@ 0x6f
 8015896:	6033      	str	r3, [r6, #0]
 8015898:	bf14      	ite	ne
 801589a:	230a      	movne	r3, #10
 801589c:	2308      	moveq	r3, #8
 801589e:	4851      	ldr	r0, [pc, #324]	@ (80159e4 <_printf_i+0x238>)
 80158a0:	2100      	movs	r1, #0
 80158a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80158a6:	6866      	ldr	r6, [r4, #4]
 80158a8:	2e00      	cmp	r6, #0
 80158aa:	bfa8      	it	ge
 80158ac:	6821      	ldrge	r1, [r4, #0]
 80158ae:	60a6      	str	r6, [r4, #8]
 80158b0:	bfa4      	itt	ge
 80158b2:	f021 0104 	bicge.w	r1, r1, #4
 80158b6:	6021      	strge	r1, [r4, #0]
 80158b8:	b90d      	cbnz	r5, 80158be <_printf_i+0x112>
 80158ba:	2e00      	cmp	r6, #0
 80158bc:	d04b      	beq.n	8015956 <_printf_i+0x1aa>
 80158be:	4616      	mov	r6, r2
 80158c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80158c4:	fb03 5711 	mls	r7, r3, r1, r5
 80158c8:	5dc7      	ldrb	r7, [r0, r7]
 80158ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80158ce:	462f      	mov	r7, r5
 80158d0:	42bb      	cmp	r3, r7
 80158d2:	460d      	mov	r5, r1
 80158d4:	d9f4      	bls.n	80158c0 <_printf_i+0x114>
 80158d6:	2b08      	cmp	r3, #8
 80158d8:	d10b      	bne.n	80158f2 <_printf_i+0x146>
 80158da:	6823      	ldr	r3, [r4, #0]
 80158dc:	07df      	lsls	r7, r3, #31
 80158de:	d508      	bpl.n	80158f2 <_printf_i+0x146>
 80158e0:	6923      	ldr	r3, [r4, #16]
 80158e2:	6861      	ldr	r1, [r4, #4]
 80158e4:	4299      	cmp	r1, r3
 80158e6:	bfde      	ittt	le
 80158e8:	2330      	movle	r3, #48	@ 0x30
 80158ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80158ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80158f2:	1b92      	subs	r2, r2, r6
 80158f4:	6122      	str	r2, [r4, #16]
 80158f6:	464b      	mov	r3, r9
 80158f8:	4621      	mov	r1, r4
 80158fa:	4640      	mov	r0, r8
 80158fc:	f8cd a000 	str.w	sl, [sp]
 8015900:	aa03      	add	r2, sp, #12
 8015902:	f7ff fee1 	bl	80156c8 <_printf_common>
 8015906:	3001      	adds	r0, #1
 8015908:	d14a      	bne.n	80159a0 <_printf_i+0x1f4>
 801590a:	f04f 30ff 	mov.w	r0, #4294967295
 801590e:	b004      	add	sp, #16
 8015910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015914:	6823      	ldr	r3, [r4, #0]
 8015916:	f043 0320 	orr.w	r3, r3, #32
 801591a:	6023      	str	r3, [r4, #0]
 801591c:	2778      	movs	r7, #120	@ 0x78
 801591e:	4832      	ldr	r0, [pc, #200]	@ (80159e8 <_printf_i+0x23c>)
 8015920:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015924:	6823      	ldr	r3, [r4, #0]
 8015926:	6831      	ldr	r1, [r6, #0]
 8015928:	061f      	lsls	r7, r3, #24
 801592a:	f851 5b04 	ldr.w	r5, [r1], #4
 801592e:	d402      	bmi.n	8015936 <_printf_i+0x18a>
 8015930:	065f      	lsls	r7, r3, #25
 8015932:	bf48      	it	mi
 8015934:	b2ad      	uxthmi	r5, r5
 8015936:	6031      	str	r1, [r6, #0]
 8015938:	07d9      	lsls	r1, r3, #31
 801593a:	bf44      	itt	mi
 801593c:	f043 0320 	orrmi.w	r3, r3, #32
 8015940:	6023      	strmi	r3, [r4, #0]
 8015942:	b11d      	cbz	r5, 801594c <_printf_i+0x1a0>
 8015944:	2310      	movs	r3, #16
 8015946:	e7ab      	b.n	80158a0 <_printf_i+0xf4>
 8015948:	4826      	ldr	r0, [pc, #152]	@ (80159e4 <_printf_i+0x238>)
 801594a:	e7e9      	b.n	8015920 <_printf_i+0x174>
 801594c:	6823      	ldr	r3, [r4, #0]
 801594e:	f023 0320 	bic.w	r3, r3, #32
 8015952:	6023      	str	r3, [r4, #0]
 8015954:	e7f6      	b.n	8015944 <_printf_i+0x198>
 8015956:	4616      	mov	r6, r2
 8015958:	e7bd      	b.n	80158d6 <_printf_i+0x12a>
 801595a:	6833      	ldr	r3, [r6, #0]
 801595c:	6825      	ldr	r5, [r4, #0]
 801595e:	1d18      	adds	r0, r3, #4
 8015960:	6961      	ldr	r1, [r4, #20]
 8015962:	6030      	str	r0, [r6, #0]
 8015964:	062e      	lsls	r6, r5, #24
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	d501      	bpl.n	801596e <_printf_i+0x1c2>
 801596a:	6019      	str	r1, [r3, #0]
 801596c:	e002      	b.n	8015974 <_printf_i+0x1c8>
 801596e:	0668      	lsls	r0, r5, #25
 8015970:	d5fb      	bpl.n	801596a <_printf_i+0x1be>
 8015972:	8019      	strh	r1, [r3, #0]
 8015974:	2300      	movs	r3, #0
 8015976:	4616      	mov	r6, r2
 8015978:	6123      	str	r3, [r4, #16]
 801597a:	e7bc      	b.n	80158f6 <_printf_i+0x14a>
 801597c:	6833      	ldr	r3, [r6, #0]
 801597e:	2100      	movs	r1, #0
 8015980:	1d1a      	adds	r2, r3, #4
 8015982:	6032      	str	r2, [r6, #0]
 8015984:	681e      	ldr	r6, [r3, #0]
 8015986:	6862      	ldr	r2, [r4, #4]
 8015988:	4630      	mov	r0, r6
 801598a:	f000 f997 	bl	8015cbc <memchr>
 801598e:	b108      	cbz	r0, 8015994 <_printf_i+0x1e8>
 8015990:	1b80      	subs	r0, r0, r6
 8015992:	6060      	str	r0, [r4, #4]
 8015994:	6863      	ldr	r3, [r4, #4]
 8015996:	6123      	str	r3, [r4, #16]
 8015998:	2300      	movs	r3, #0
 801599a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801599e:	e7aa      	b.n	80158f6 <_printf_i+0x14a>
 80159a0:	4632      	mov	r2, r6
 80159a2:	4649      	mov	r1, r9
 80159a4:	4640      	mov	r0, r8
 80159a6:	6923      	ldr	r3, [r4, #16]
 80159a8:	47d0      	blx	sl
 80159aa:	3001      	adds	r0, #1
 80159ac:	d0ad      	beq.n	801590a <_printf_i+0x15e>
 80159ae:	6823      	ldr	r3, [r4, #0]
 80159b0:	079b      	lsls	r3, r3, #30
 80159b2:	d413      	bmi.n	80159dc <_printf_i+0x230>
 80159b4:	68e0      	ldr	r0, [r4, #12]
 80159b6:	9b03      	ldr	r3, [sp, #12]
 80159b8:	4298      	cmp	r0, r3
 80159ba:	bfb8      	it	lt
 80159bc:	4618      	movlt	r0, r3
 80159be:	e7a6      	b.n	801590e <_printf_i+0x162>
 80159c0:	2301      	movs	r3, #1
 80159c2:	4632      	mov	r2, r6
 80159c4:	4649      	mov	r1, r9
 80159c6:	4640      	mov	r0, r8
 80159c8:	47d0      	blx	sl
 80159ca:	3001      	adds	r0, #1
 80159cc:	d09d      	beq.n	801590a <_printf_i+0x15e>
 80159ce:	3501      	adds	r5, #1
 80159d0:	68e3      	ldr	r3, [r4, #12]
 80159d2:	9903      	ldr	r1, [sp, #12]
 80159d4:	1a5b      	subs	r3, r3, r1
 80159d6:	42ab      	cmp	r3, r5
 80159d8:	dcf2      	bgt.n	80159c0 <_printf_i+0x214>
 80159da:	e7eb      	b.n	80159b4 <_printf_i+0x208>
 80159dc:	2500      	movs	r5, #0
 80159de:	f104 0619 	add.w	r6, r4, #25
 80159e2:	e7f5      	b.n	80159d0 <_printf_i+0x224>
 80159e4:	080180fb 	.word	0x080180fb
 80159e8:	0801810c 	.word	0x0801810c

080159ec <__sflush_r>:
 80159ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80159f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f2:	0716      	lsls	r6, r2, #28
 80159f4:	4605      	mov	r5, r0
 80159f6:	460c      	mov	r4, r1
 80159f8:	d454      	bmi.n	8015aa4 <__sflush_r+0xb8>
 80159fa:	684b      	ldr	r3, [r1, #4]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	dc02      	bgt.n	8015a06 <__sflush_r+0x1a>
 8015a00:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	dd48      	ble.n	8015a98 <__sflush_r+0xac>
 8015a06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015a08:	2e00      	cmp	r6, #0
 8015a0a:	d045      	beq.n	8015a98 <__sflush_r+0xac>
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015a12:	682f      	ldr	r7, [r5, #0]
 8015a14:	6a21      	ldr	r1, [r4, #32]
 8015a16:	602b      	str	r3, [r5, #0]
 8015a18:	d030      	beq.n	8015a7c <__sflush_r+0x90>
 8015a1a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015a1c:	89a3      	ldrh	r3, [r4, #12]
 8015a1e:	0759      	lsls	r1, r3, #29
 8015a20:	d505      	bpl.n	8015a2e <__sflush_r+0x42>
 8015a22:	6863      	ldr	r3, [r4, #4]
 8015a24:	1ad2      	subs	r2, r2, r3
 8015a26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015a28:	b10b      	cbz	r3, 8015a2e <__sflush_r+0x42>
 8015a2a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015a2c:	1ad2      	subs	r2, r2, r3
 8015a2e:	2300      	movs	r3, #0
 8015a30:	4628      	mov	r0, r5
 8015a32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015a34:	6a21      	ldr	r1, [r4, #32]
 8015a36:	47b0      	blx	r6
 8015a38:	1c43      	adds	r3, r0, #1
 8015a3a:	89a3      	ldrh	r3, [r4, #12]
 8015a3c:	d106      	bne.n	8015a4c <__sflush_r+0x60>
 8015a3e:	6829      	ldr	r1, [r5, #0]
 8015a40:	291d      	cmp	r1, #29
 8015a42:	d82b      	bhi.n	8015a9c <__sflush_r+0xb0>
 8015a44:	4a28      	ldr	r2, [pc, #160]	@ (8015ae8 <__sflush_r+0xfc>)
 8015a46:	410a      	asrs	r2, r1
 8015a48:	07d6      	lsls	r6, r2, #31
 8015a4a:	d427      	bmi.n	8015a9c <__sflush_r+0xb0>
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	6062      	str	r2, [r4, #4]
 8015a50:	6922      	ldr	r2, [r4, #16]
 8015a52:	04d9      	lsls	r1, r3, #19
 8015a54:	6022      	str	r2, [r4, #0]
 8015a56:	d504      	bpl.n	8015a62 <__sflush_r+0x76>
 8015a58:	1c42      	adds	r2, r0, #1
 8015a5a:	d101      	bne.n	8015a60 <__sflush_r+0x74>
 8015a5c:	682b      	ldr	r3, [r5, #0]
 8015a5e:	b903      	cbnz	r3, 8015a62 <__sflush_r+0x76>
 8015a60:	6560      	str	r0, [r4, #84]	@ 0x54
 8015a62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a64:	602f      	str	r7, [r5, #0]
 8015a66:	b1b9      	cbz	r1, 8015a98 <__sflush_r+0xac>
 8015a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a6c:	4299      	cmp	r1, r3
 8015a6e:	d002      	beq.n	8015a76 <__sflush_r+0x8a>
 8015a70:	4628      	mov	r0, r5
 8015a72:	f7ff fb49 	bl	8015108 <_free_r>
 8015a76:	2300      	movs	r3, #0
 8015a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a7a:	e00d      	b.n	8015a98 <__sflush_r+0xac>
 8015a7c:	2301      	movs	r3, #1
 8015a7e:	4628      	mov	r0, r5
 8015a80:	47b0      	blx	r6
 8015a82:	4602      	mov	r2, r0
 8015a84:	1c50      	adds	r0, r2, #1
 8015a86:	d1c9      	bne.n	8015a1c <__sflush_r+0x30>
 8015a88:	682b      	ldr	r3, [r5, #0]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d0c6      	beq.n	8015a1c <__sflush_r+0x30>
 8015a8e:	2b1d      	cmp	r3, #29
 8015a90:	d001      	beq.n	8015a96 <__sflush_r+0xaa>
 8015a92:	2b16      	cmp	r3, #22
 8015a94:	d11d      	bne.n	8015ad2 <__sflush_r+0xe6>
 8015a96:	602f      	str	r7, [r5, #0]
 8015a98:	2000      	movs	r0, #0
 8015a9a:	e021      	b.n	8015ae0 <__sflush_r+0xf4>
 8015a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015aa0:	b21b      	sxth	r3, r3
 8015aa2:	e01a      	b.n	8015ada <__sflush_r+0xee>
 8015aa4:	690f      	ldr	r7, [r1, #16]
 8015aa6:	2f00      	cmp	r7, #0
 8015aa8:	d0f6      	beq.n	8015a98 <__sflush_r+0xac>
 8015aaa:	0793      	lsls	r3, r2, #30
 8015aac:	bf18      	it	ne
 8015aae:	2300      	movne	r3, #0
 8015ab0:	680e      	ldr	r6, [r1, #0]
 8015ab2:	bf08      	it	eq
 8015ab4:	694b      	ldreq	r3, [r1, #20]
 8015ab6:	1bf6      	subs	r6, r6, r7
 8015ab8:	600f      	str	r7, [r1, #0]
 8015aba:	608b      	str	r3, [r1, #8]
 8015abc:	2e00      	cmp	r6, #0
 8015abe:	ddeb      	ble.n	8015a98 <__sflush_r+0xac>
 8015ac0:	4633      	mov	r3, r6
 8015ac2:	463a      	mov	r2, r7
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	6a21      	ldr	r1, [r4, #32]
 8015ac8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8015acc:	47e0      	blx	ip
 8015ace:	2800      	cmp	r0, #0
 8015ad0:	dc07      	bgt.n	8015ae2 <__sflush_r+0xf6>
 8015ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ada:	f04f 30ff 	mov.w	r0, #4294967295
 8015ade:	81a3      	strh	r3, [r4, #12]
 8015ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ae2:	4407      	add	r7, r0
 8015ae4:	1a36      	subs	r6, r6, r0
 8015ae6:	e7e9      	b.n	8015abc <__sflush_r+0xd0>
 8015ae8:	dfbffffe 	.word	0xdfbffffe

08015aec <_fflush_r>:
 8015aec:	b538      	push	{r3, r4, r5, lr}
 8015aee:	690b      	ldr	r3, [r1, #16]
 8015af0:	4605      	mov	r5, r0
 8015af2:	460c      	mov	r4, r1
 8015af4:	b913      	cbnz	r3, 8015afc <_fflush_r+0x10>
 8015af6:	2500      	movs	r5, #0
 8015af8:	4628      	mov	r0, r5
 8015afa:	bd38      	pop	{r3, r4, r5, pc}
 8015afc:	b118      	cbz	r0, 8015b06 <_fflush_r+0x1a>
 8015afe:	6a03      	ldr	r3, [r0, #32]
 8015b00:	b90b      	cbnz	r3, 8015b06 <_fflush_r+0x1a>
 8015b02:	f7ff f91f 	bl	8014d44 <__sinit>
 8015b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d0f3      	beq.n	8015af6 <_fflush_r+0xa>
 8015b0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015b10:	07d0      	lsls	r0, r2, #31
 8015b12:	d404      	bmi.n	8015b1e <_fflush_r+0x32>
 8015b14:	0599      	lsls	r1, r3, #22
 8015b16:	d402      	bmi.n	8015b1e <_fflush_r+0x32>
 8015b18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b1a:	f7ff fac6 	bl	80150aa <__retarget_lock_acquire_recursive>
 8015b1e:	4628      	mov	r0, r5
 8015b20:	4621      	mov	r1, r4
 8015b22:	f7ff ff63 	bl	80159ec <__sflush_r>
 8015b26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015b28:	4605      	mov	r5, r0
 8015b2a:	07da      	lsls	r2, r3, #31
 8015b2c:	d4e4      	bmi.n	8015af8 <_fflush_r+0xc>
 8015b2e:	89a3      	ldrh	r3, [r4, #12]
 8015b30:	059b      	lsls	r3, r3, #22
 8015b32:	d4e1      	bmi.n	8015af8 <_fflush_r+0xc>
 8015b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b36:	f7ff fab9 	bl	80150ac <__retarget_lock_release_recursive>
 8015b3a:	e7dd      	b.n	8015af8 <_fflush_r+0xc>

08015b3c <fiprintf>:
 8015b3c:	b40e      	push	{r1, r2, r3}
 8015b3e:	b503      	push	{r0, r1, lr}
 8015b40:	4601      	mov	r1, r0
 8015b42:	ab03      	add	r3, sp, #12
 8015b44:	4805      	ldr	r0, [pc, #20]	@ (8015b5c <fiprintf+0x20>)
 8015b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b4a:	6800      	ldr	r0, [r0, #0]
 8015b4c:	9301      	str	r3, [sp, #4]
 8015b4e:	f7ff fca3 	bl	8015498 <_vfiprintf_r>
 8015b52:	b002      	add	sp, #8
 8015b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b58:	b003      	add	sp, #12
 8015b5a:	4770      	bx	lr
 8015b5c:	200001a0 	.word	0x200001a0

08015b60 <__swbuf_r>:
 8015b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b62:	460e      	mov	r6, r1
 8015b64:	4614      	mov	r4, r2
 8015b66:	4605      	mov	r5, r0
 8015b68:	b118      	cbz	r0, 8015b72 <__swbuf_r+0x12>
 8015b6a:	6a03      	ldr	r3, [r0, #32]
 8015b6c:	b90b      	cbnz	r3, 8015b72 <__swbuf_r+0x12>
 8015b6e:	f7ff f8e9 	bl	8014d44 <__sinit>
 8015b72:	69a3      	ldr	r3, [r4, #24]
 8015b74:	60a3      	str	r3, [r4, #8]
 8015b76:	89a3      	ldrh	r3, [r4, #12]
 8015b78:	071a      	lsls	r2, r3, #28
 8015b7a:	d501      	bpl.n	8015b80 <__swbuf_r+0x20>
 8015b7c:	6923      	ldr	r3, [r4, #16]
 8015b7e:	b943      	cbnz	r3, 8015b92 <__swbuf_r+0x32>
 8015b80:	4621      	mov	r1, r4
 8015b82:	4628      	mov	r0, r5
 8015b84:	f000 f82a 	bl	8015bdc <__swsetup_r>
 8015b88:	b118      	cbz	r0, 8015b92 <__swbuf_r+0x32>
 8015b8a:	f04f 37ff 	mov.w	r7, #4294967295
 8015b8e:	4638      	mov	r0, r7
 8015b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b92:	6823      	ldr	r3, [r4, #0]
 8015b94:	6922      	ldr	r2, [r4, #16]
 8015b96:	b2f6      	uxtb	r6, r6
 8015b98:	1a98      	subs	r0, r3, r2
 8015b9a:	6963      	ldr	r3, [r4, #20]
 8015b9c:	4637      	mov	r7, r6
 8015b9e:	4283      	cmp	r3, r0
 8015ba0:	dc05      	bgt.n	8015bae <__swbuf_r+0x4e>
 8015ba2:	4621      	mov	r1, r4
 8015ba4:	4628      	mov	r0, r5
 8015ba6:	f7ff ffa1 	bl	8015aec <_fflush_r>
 8015baa:	2800      	cmp	r0, #0
 8015bac:	d1ed      	bne.n	8015b8a <__swbuf_r+0x2a>
 8015bae:	68a3      	ldr	r3, [r4, #8]
 8015bb0:	3b01      	subs	r3, #1
 8015bb2:	60a3      	str	r3, [r4, #8]
 8015bb4:	6823      	ldr	r3, [r4, #0]
 8015bb6:	1c5a      	adds	r2, r3, #1
 8015bb8:	6022      	str	r2, [r4, #0]
 8015bba:	701e      	strb	r6, [r3, #0]
 8015bbc:	6962      	ldr	r2, [r4, #20]
 8015bbe:	1c43      	adds	r3, r0, #1
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	d004      	beq.n	8015bce <__swbuf_r+0x6e>
 8015bc4:	89a3      	ldrh	r3, [r4, #12]
 8015bc6:	07db      	lsls	r3, r3, #31
 8015bc8:	d5e1      	bpl.n	8015b8e <__swbuf_r+0x2e>
 8015bca:	2e0a      	cmp	r6, #10
 8015bcc:	d1df      	bne.n	8015b8e <__swbuf_r+0x2e>
 8015bce:	4621      	mov	r1, r4
 8015bd0:	4628      	mov	r0, r5
 8015bd2:	f7ff ff8b 	bl	8015aec <_fflush_r>
 8015bd6:	2800      	cmp	r0, #0
 8015bd8:	d0d9      	beq.n	8015b8e <__swbuf_r+0x2e>
 8015bda:	e7d6      	b.n	8015b8a <__swbuf_r+0x2a>

08015bdc <__swsetup_r>:
 8015bdc:	b538      	push	{r3, r4, r5, lr}
 8015bde:	4b29      	ldr	r3, [pc, #164]	@ (8015c84 <__swsetup_r+0xa8>)
 8015be0:	4605      	mov	r5, r0
 8015be2:	6818      	ldr	r0, [r3, #0]
 8015be4:	460c      	mov	r4, r1
 8015be6:	b118      	cbz	r0, 8015bf0 <__swsetup_r+0x14>
 8015be8:	6a03      	ldr	r3, [r0, #32]
 8015bea:	b90b      	cbnz	r3, 8015bf0 <__swsetup_r+0x14>
 8015bec:	f7ff f8aa 	bl	8014d44 <__sinit>
 8015bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bf4:	0719      	lsls	r1, r3, #28
 8015bf6:	d422      	bmi.n	8015c3e <__swsetup_r+0x62>
 8015bf8:	06da      	lsls	r2, r3, #27
 8015bfa:	d407      	bmi.n	8015c0c <__swsetup_r+0x30>
 8015bfc:	2209      	movs	r2, #9
 8015bfe:	602a      	str	r2, [r5, #0]
 8015c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c04:	f04f 30ff 	mov.w	r0, #4294967295
 8015c08:	81a3      	strh	r3, [r4, #12]
 8015c0a:	e033      	b.n	8015c74 <__swsetup_r+0x98>
 8015c0c:	0758      	lsls	r0, r3, #29
 8015c0e:	d512      	bpl.n	8015c36 <__swsetup_r+0x5a>
 8015c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015c12:	b141      	cbz	r1, 8015c26 <__swsetup_r+0x4a>
 8015c14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015c18:	4299      	cmp	r1, r3
 8015c1a:	d002      	beq.n	8015c22 <__swsetup_r+0x46>
 8015c1c:	4628      	mov	r0, r5
 8015c1e:	f7ff fa73 	bl	8015108 <_free_r>
 8015c22:	2300      	movs	r3, #0
 8015c24:	6363      	str	r3, [r4, #52]	@ 0x34
 8015c26:	89a3      	ldrh	r3, [r4, #12]
 8015c28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015c2c:	81a3      	strh	r3, [r4, #12]
 8015c2e:	2300      	movs	r3, #0
 8015c30:	6063      	str	r3, [r4, #4]
 8015c32:	6923      	ldr	r3, [r4, #16]
 8015c34:	6023      	str	r3, [r4, #0]
 8015c36:	89a3      	ldrh	r3, [r4, #12]
 8015c38:	f043 0308 	orr.w	r3, r3, #8
 8015c3c:	81a3      	strh	r3, [r4, #12]
 8015c3e:	6923      	ldr	r3, [r4, #16]
 8015c40:	b94b      	cbnz	r3, 8015c56 <__swsetup_r+0x7a>
 8015c42:	89a3      	ldrh	r3, [r4, #12]
 8015c44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015c4c:	d003      	beq.n	8015c56 <__swsetup_r+0x7a>
 8015c4e:	4621      	mov	r1, r4
 8015c50:	4628      	mov	r0, r5
 8015c52:	f000 f89b 	bl	8015d8c <__smakebuf_r>
 8015c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c5a:	f013 0201 	ands.w	r2, r3, #1
 8015c5e:	d00a      	beq.n	8015c76 <__swsetup_r+0x9a>
 8015c60:	2200      	movs	r2, #0
 8015c62:	60a2      	str	r2, [r4, #8]
 8015c64:	6962      	ldr	r2, [r4, #20]
 8015c66:	4252      	negs	r2, r2
 8015c68:	61a2      	str	r2, [r4, #24]
 8015c6a:	6922      	ldr	r2, [r4, #16]
 8015c6c:	b942      	cbnz	r2, 8015c80 <__swsetup_r+0xa4>
 8015c6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015c72:	d1c5      	bne.n	8015c00 <__swsetup_r+0x24>
 8015c74:	bd38      	pop	{r3, r4, r5, pc}
 8015c76:	0799      	lsls	r1, r3, #30
 8015c78:	bf58      	it	pl
 8015c7a:	6962      	ldrpl	r2, [r4, #20]
 8015c7c:	60a2      	str	r2, [r4, #8]
 8015c7e:	e7f4      	b.n	8015c6a <__swsetup_r+0x8e>
 8015c80:	2000      	movs	r0, #0
 8015c82:	e7f7      	b.n	8015c74 <__swsetup_r+0x98>
 8015c84:	200001a0 	.word	0x200001a0

08015c88 <memmove>:
 8015c88:	4288      	cmp	r0, r1
 8015c8a:	b510      	push	{r4, lr}
 8015c8c:	eb01 0402 	add.w	r4, r1, r2
 8015c90:	d902      	bls.n	8015c98 <memmove+0x10>
 8015c92:	4284      	cmp	r4, r0
 8015c94:	4623      	mov	r3, r4
 8015c96:	d807      	bhi.n	8015ca8 <memmove+0x20>
 8015c98:	1e43      	subs	r3, r0, #1
 8015c9a:	42a1      	cmp	r1, r4
 8015c9c:	d008      	beq.n	8015cb0 <memmove+0x28>
 8015c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015ca6:	e7f8      	b.n	8015c9a <memmove+0x12>
 8015ca8:	4601      	mov	r1, r0
 8015caa:	4402      	add	r2, r0
 8015cac:	428a      	cmp	r2, r1
 8015cae:	d100      	bne.n	8015cb2 <memmove+0x2a>
 8015cb0:	bd10      	pop	{r4, pc}
 8015cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015cba:	e7f7      	b.n	8015cac <memmove+0x24>

08015cbc <memchr>:
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	b510      	push	{r4, lr}
 8015cc0:	b2c9      	uxtb	r1, r1
 8015cc2:	4402      	add	r2, r0
 8015cc4:	4293      	cmp	r3, r2
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	d101      	bne.n	8015cce <memchr+0x12>
 8015cca:	2000      	movs	r0, #0
 8015ccc:	e003      	b.n	8015cd6 <memchr+0x1a>
 8015cce:	7804      	ldrb	r4, [r0, #0]
 8015cd0:	3301      	adds	r3, #1
 8015cd2:	428c      	cmp	r4, r1
 8015cd4:	d1f6      	bne.n	8015cc4 <memchr+0x8>
 8015cd6:	bd10      	pop	{r4, pc}

08015cd8 <abort>:
 8015cd8:	2006      	movs	r0, #6
 8015cda:	b508      	push	{r3, lr}
 8015cdc:	f000 f8ba 	bl	8015e54 <raise>
 8015ce0:	2001      	movs	r0, #1
 8015ce2:	f7ec fd59 	bl	8002798 <_exit>

08015ce6 <_realloc_r>:
 8015ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cea:	4680      	mov	r8, r0
 8015cec:	4615      	mov	r5, r2
 8015cee:	460c      	mov	r4, r1
 8015cf0:	b921      	cbnz	r1, 8015cfc <_realloc_r+0x16>
 8015cf2:	4611      	mov	r1, r2
 8015cf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf8:	f7fe be88 	b.w	8014a0c <_malloc_r>
 8015cfc:	b92a      	cbnz	r2, 8015d0a <_realloc_r+0x24>
 8015cfe:	f7ff fa03 	bl	8015108 <_free_r>
 8015d02:	2400      	movs	r4, #0
 8015d04:	4620      	mov	r0, r4
 8015d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d0a:	f000 f8e1 	bl	8015ed0 <_malloc_usable_size_r>
 8015d0e:	4285      	cmp	r5, r0
 8015d10:	4606      	mov	r6, r0
 8015d12:	d802      	bhi.n	8015d1a <_realloc_r+0x34>
 8015d14:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015d18:	d8f4      	bhi.n	8015d04 <_realloc_r+0x1e>
 8015d1a:	4629      	mov	r1, r5
 8015d1c:	4640      	mov	r0, r8
 8015d1e:	f7fe fe75 	bl	8014a0c <_malloc_r>
 8015d22:	4607      	mov	r7, r0
 8015d24:	2800      	cmp	r0, #0
 8015d26:	d0ec      	beq.n	8015d02 <_realloc_r+0x1c>
 8015d28:	42b5      	cmp	r5, r6
 8015d2a:	462a      	mov	r2, r5
 8015d2c:	4621      	mov	r1, r4
 8015d2e:	bf28      	it	cs
 8015d30:	4632      	movcs	r2, r6
 8015d32:	f7ff f9bc 	bl	80150ae <memcpy>
 8015d36:	4621      	mov	r1, r4
 8015d38:	4640      	mov	r0, r8
 8015d3a:	f7ff f9e5 	bl	8015108 <_free_r>
 8015d3e:	463c      	mov	r4, r7
 8015d40:	e7e0      	b.n	8015d04 <_realloc_r+0x1e>

08015d42 <__swhatbuf_r>:
 8015d42:	b570      	push	{r4, r5, r6, lr}
 8015d44:	460c      	mov	r4, r1
 8015d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d4a:	4615      	mov	r5, r2
 8015d4c:	2900      	cmp	r1, #0
 8015d4e:	461e      	mov	r6, r3
 8015d50:	b096      	sub	sp, #88	@ 0x58
 8015d52:	da0c      	bge.n	8015d6e <__swhatbuf_r+0x2c>
 8015d54:	89a3      	ldrh	r3, [r4, #12]
 8015d56:	2100      	movs	r1, #0
 8015d58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015d5c:	bf14      	ite	ne
 8015d5e:	2340      	movne	r3, #64	@ 0x40
 8015d60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015d64:	2000      	movs	r0, #0
 8015d66:	6031      	str	r1, [r6, #0]
 8015d68:	602b      	str	r3, [r5, #0]
 8015d6a:	b016      	add	sp, #88	@ 0x58
 8015d6c:	bd70      	pop	{r4, r5, r6, pc}
 8015d6e:	466a      	mov	r2, sp
 8015d70:	f000 f878 	bl	8015e64 <_fstat_r>
 8015d74:	2800      	cmp	r0, #0
 8015d76:	dbed      	blt.n	8015d54 <__swhatbuf_r+0x12>
 8015d78:	9901      	ldr	r1, [sp, #4]
 8015d7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015d7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015d82:	4259      	negs	r1, r3
 8015d84:	4159      	adcs	r1, r3
 8015d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015d8a:	e7eb      	b.n	8015d64 <__swhatbuf_r+0x22>

08015d8c <__smakebuf_r>:
 8015d8c:	898b      	ldrh	r3, [r1, #12]
 8015d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d90:	079d      	lsls	r5, r3, #30
 8015d92:	4606      	mov	r6, r0
 8015d94:	460c      	mov	r4, r1
 8015d96:	d507      	bpl.n	8015da8 <__smakebuf_r+0x1c>
 8015d98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015d9c:	6023      	str	r3, [r4, #0]
 8015d9e:	6123      	str	r3, [r4, #16]
 8015da0:	2301      	movs	r3, #1
 8015da2:	6163      	str	r3, [r4, #20]
 8015da4:	b003      	add	sp, #12
 8015da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015da8:	466a      	mov	r2, sp
 8015daa:	ab01      	add	r3, sp, #4
 8015dac:	f7ff ffc9 	bl	8015d42 <__swhatbuf_r>
 8015db0:	9f00      	ldr	r7, [sp, #0]
 8015db2:	4605      	mov	r5, r0
 8015db4:	4639      	mov	r1, r7
 8015db6:	4630      	mov	r0, r6
 8015db8:	f7fe fe28 	bl	8014a0c <_malloc_r>
 8015dbc:	b948      	cbnz	r0, 8015dd2 <__smakebuf_r+0x46>
 8015dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dc2:	059a      	lsls	r2, r3, #22
 8015dc4:	d4ee      	bmi.n	8015da4 <__smakebuf_r+0x18>
 8015dc6:	f023 0303 	bic.w	r3, r3, #3
 8015dca:	f043 0302 	orr.w	r3, r3, #2
 8015dce:	81a3      	strh	r3, [r4, #12]
 8015dd0:	e7e2      	b.n	8015d98 <__smakebuf_r+0xc>
 8015dd2:	89a3      	ldrh	r3, [r4, #12]
 8015dd4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015ddc:	81a3      	strh	r3, [r4, #12]
 8015dde:	9b01      	ldr	r3, [sp, #4]
 8015de0:	6020      	str	r0, [r4, #0]
 8015de2:	b15b      	cbz	r3, 8015dfc <__smakebuf_r+0x70>
 8015de4:	4630      	mov	r0, r6
 8015de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015dea:	f000 f84d 	bl	8015e88 <_isatty_r>
 8015dee:	b128      	cbz	r0, 8015dfc <__smakebuf_r+0x70>
 8015df0:	89a3      	ldrh	r3, [r4, #12]
 8015df2:	f023 0303 	bic.w	r3, r3, #3
 8015df6:	f043 0301 	orr.w	r3, r3, #1
 8015dfa:	81a3      	strh	r3, [r4, #12]
 8015dfc:	89a3      	ldrh	r3, [r4, #12]
 8015dfe:	431d      	orrs	r5, r3
 8015e00:	81a5      	strh	r5, [r4, #12]
 8015e02:	e7cf      	b.n	8015da4 <__smakebuf_r+0x18>

08015e04 <_raise_r>:
 8015e04:	291f      	cmp	r1, #31
 8015e06:	b538      	push	{r3, r4, r5, lr}
 8015e08:	4605      	mov	r5, r0
 8015e0a:	460c      	mov	r4, r1
 8015e0c:	d904      	bls.n	8015e18 <_raise_r+0x14>
 8015e0e:	2316      	movs	r3, #22
 8015e10:	6003      	str	r3, [r0, #0]
 8015e12:	f04f 30ff 	mov.w	r0, #4294967295
 8015e16:	bd38      	pop	{r3, r4, r5, pc}
 8015e18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015e1a:	b112      	cbz	r2, 8015e22 <_raise_r+0x1e>
 8015e1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015e20:	b94b      	cbnz	r3, 8015e36 <_raise_r+0x32>
 8015e22:	4628      	mov	r0, r5
 8015e24:	f000 f852 	bl	8015ecc <_getpid_r>
 8015e28:	4622      	mov	r2, r4
 8015e2a:	4601      	mov	r1, r0
 8015e2c:	4628      	mov	r0, r5
 8015e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e32:	f000 b839 	b.w	8015ea8 <_kill_r>
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d00a      	beq.n	8015e50 <_raise_r+0x4c>
 8015e3a:	1c59      	adds	r1, r3, #1
 8015e3c:	d103      	bne.n	8015e46 <_raise_r+0x42>
 8015e3e:	2316      	movs	r3, #22
 8015e40:	6003      	str	r3, [r0, #0]
 8015e42:	2001      	movs	r0, #1
 8015e44:	e7e7      	b.n	8015e16 <_raise_r+0x12>
 8015e46:	2100      	movs	r1, #0
 8015e48:	4620      	mov	r0, r4
 8015e4a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015e4e:	4798      	blx	r3
 8015e50:	2000      	movs	r0, #0
 8015e52:	e7e0      	b.n	8015e16 <_raise_r+0x12>

08015e54 <raise>:
 8015e54:	4b02      	ldr	r3, [pc, #8]	@ (8015e60 <raise+0xc>)
 8015e56:	4601      	mov	r1, r0
 8015e58:	6818      	ldr	r0, [r3, #0]
 8015e5a:	f7ff bfd3 	b.w	8015e04 <_raise_r>
 8015e5e:	bf00      	nop
 8015e60:	200001a0 	.word	0x200001a0

08015e64 <_fstat_r>:
 8015e64:	b538      	push	{r3, r4, r5, lr}
 8015e66:	2300      	movs	r3, #0
 8015e68:	4d06      	ldr	r5, [pc, #24]	@ (8015e84 <_fstat_r+0x20>)
 8015e6a:	4604      	mov	r4, r0
 8015e6c:	4608      	mov	r0, r1
 8015e6e:	4611      	mov	r1, r2
 8015e70:	602b      	str	r3, [r5, #0]
 8015e72:	f7ec fce0 	bl	8002836 <_fstat>
 8015e76:	1c43      	adds	r3, r0, #1
 8015e78:	d102      	bne.n	8015e80 <_fstat_r+0x1c>
 8015e7a:	682b      	ldr	r3, [r5, #0]
 8015e7c:	b103      	cbz	r3, 8015e80 <_fstat_r+0x1c>
 8015e7e:	6023      	str	r3, [r4, #0]
 8015e80:	bd38      	pop	{r3, r4, r5, pc}
 8015e82:	bf00      	nop
 8015e84:	2000c940 	.word	0x2000c940

08015e88 <_isatty_r>:
 8015e88:	b538      	push	{r3, r4, r5, lr}
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	4d05      	ldr	r5, [pc, #20]	@ (8015ea4 <_isatty_r+0x1c>)
 8015e8e:	4604      	mov	r4, r0
 8015e90:	4608      	mov	r0, r1
 8015e92:	602b      	str	r3, [r5, #0]
 8015e94:	f7ec fcde 	bl	8002854 <_isatty>
 8015e98:	1c43      	adds	r3, r0, #1
 8015e9a:	d102      	bne.n	8015ea2 <_isatty_r+0x1a>
 8015e9c:	682b      	ldr	r3, [r5, #0]
 8015e9e:	b103      	cbz	r3, 8015ea2 <_isatty_r+0x1a>
 8015ea0:	6023      	str	r3, [r4, #0]
 8015ea2:	bd38      	pop	{r3, r4, r5, pc}
 8015ea4:	2000c940 	.word	0x2000c940

08015ea8 <_kill_r>:
 8015ea8:	b538      	push	{r3, r4, r5, lr}
 8015eaa:	2300      	movs	r3, #0
 8015eac:	4d06      	ldr	r5, [pc, #24]	@ (8015ec8 <_kill_r+0x20>)
 8015eae:	4604      	mov	r4, r0
 8015eb0:	4608      	mov	r0, r1
 8015eb2:	4611      	mov	r1, r2
 8015eb4:	602b      	str	r3, [r5, #0]
 8015eb6:	f7ec fc5d 	bl	8002774 <_kill>
 8015eba:	1c43      	adds	r3, r0, #1
 8015ebc:	d102      	bne.n	8015ec4 <_kill_r+0x1c>
 8015ebe:	682b      	ldr	r3, [r5, #0]
 8015ec0:	b103      	cbz	r3, 8015ec4 <_kill_r+0x1c>
 8015ec2:	6023      	str	r3, [r4, #0]
 8015ec4:	bd38      	pop	{r3, r4, r5, pc}
 8015ec6:	bf00      	nop
 8015ec8:	2000c940 	.word	0x2000c940

08015ecc <_getpid_r>:
 8015ecc:	f7ec bc4a 	b.w	8002764 <_getpid>

08015ed0 <_malloc_usable_size_r>:
 8015ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ed4:	1f18      	subs	r0, r3, #4
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	bfbc      	itt	lt
 8015eda:	580b      	ldrlt	r3, [r1, r0]
 8015edc:	18c0      	addlt	r0, r0, r3
 8015ede:	4770      	bx	lr

08015ee0 <_init>:
 8015ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ee2:	bf00      	nop
 8015ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ee6:	bc08      	pop	{r3}
 8015ee8:	469e      	mov	lr, r3
 8015eea:	4770      	bx	lr

08015eec <_fini>:
 8015eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eee:	bf00      	nop
 8015ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ef2:	bc08      	pop	{r3}
 8015ef4:	469e      	mov	lr, r3
 8015ef6:	4770      	bx	lr
